{"task_id": "scala/0", "entry_point": "belowZero", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Boolean = belowZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, -3, 1, 2, -3)\n    var x1 : Boolean = belowZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, -4, 5, 6)\n    var x2 : Boolean = belowZero(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, -1, 2, -2, 5, -5, 4, -4)\n    var x3 : Boolean = belowZero(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, -1, 2, -2, 5, -5, 4, -5)\n    var x4 : Boolean = belowZero(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1, -2, 2, -2, 5, -5, 4, -4)\n    var x5 : Boolean = belowZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "आपको बैंक खाते में जमा और निकासी कार्यों की एक सूची दी जाती है जो किस से शुरू होती है \nशून्य शेष राशि। आपका काम यह पता लगाना है कि क्या किसी भी समय खाते की शेष राशि शून्य से नीचे गिरती है, और \nउस बिंदु पर फ़ंक्शन को सही लौटाना चाहिए। अन्यथा इसे गलत लौटाना चाहिए। \n>>> शून्य से नीचे ([1,2,3]) \nझूठ बोलती है। \n>>> शून्य से नीचे ([1,2,-4,5]) \nसच है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/1", "entry_point": "sumProduct", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : List[Int] = sumProduct(arg00)\n    var v0 : List[Int] = List(0, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 1, 1)\n    var x1 : List[Int] = sumProduct(arg10)\n    var v1 : List[Int] = List(3, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(100, 0)\n    var x2 : List[Int] = sumProduct(arg20)\n    var v2 : List[Int] = List(100, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(3, 5, 7)\n    var x3 : List[Int] = sumProduct(arg30)\n    var v3 : List[Int] = List(15, 105)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(10)\n    var x4 : List[Int] = sumProduct(arg40)\n    var v4 : List[Int] = List(10, 10)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "पूर्णांकों की दी गई सूची के लिए, एक टुपल वापस करें जिसमें एक सूची में सभी पूर्णांकों का योग और एक गुणनफल हो। \nखाली राशि 0 के बराबर होनी चाहिए और खाली उत्पाद 1 के बराबर होना चाहिए। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/2", "entry_point": "stringXor", "test": "\n\n    var arg00 : String = \"\"\"111000\"\"\"\n    var arg01 : String = \"\"\"101010\"\"\"\n    var x0 : String = stringXor(arg00, arg01)\n    var v0 : String = \"\"\"010010\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1\"\"\"\n    var arg11 : String = \"\"\"1\"\"\"\n    var x1 : String = stringXor(arg10, arg11)\n    var v1 : String = \"\"\"0\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"0101\"\"\"\n    var arg21 : String = \"\"\"0000\"\"\"\n    var x2 : String = stringXor(arg20, arg21)\n    var v2 : String = \"\"\"0101\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n}\n", "description": "इनपुट दो स्ट्रिंग a और b हैं जिनमें केवल 1s और 0s होते हैं। \nइन निवेशों पर द्विआधारी XOR करें और एक स्ट्रिंग के रूप में परिणाम भी वापस करें। \n>>> स्ट्रिंग _ xor ('010','110') \n'100'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/3", "entry_point": "longest", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Any = longest(arg00)\n    var v0 : Any = \"none\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\")\n    var x1 : Any = longest(arg10)\n    var v1 : Any = \"\"\"x\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"x\"\"\", \"\"\"yyy\"\"\", \"\"\"zzzz\"\"\", \"\"\"www\"\"\", \"\"\"kkkk\"\"\", \"\"\"abc\"\"\")\n    var x2 : Any = longest(arg20)\n    var v2 : Any = \"\"\"zzzz\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n}\n", "description": "स्ट्रिंग्स की सूची में से सबसे लंबा स्ट्रिंग्स वापस करें। कई स्ट्रिंग्स होने पर पहला स्ट्रिंग्स वापस करें। \nसमान लंबाई के स्ट्रिंग। यदि इनपुट सूची खाली है तो शून्य लौटें। \n>>> सबसे लंबा ([]) \n\n>>> सबसे लंबा (['ए','बी','सी']) \n'ए'\n>>> सबसे लंबा (['ए','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/4", "entry_point": "greatestCommonDivisor", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 7\n    var x0 : Int = greatestCommonDivisor(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Int = greatestCommonDivisor(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 49\n    var arg21 : Int = 14\n    var x2 : Int = greatestCommonDivisor(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 144\n    var arg31 : Int = 60\n    var x3 : Int = greatestCommonDivisor(arg30, arg31)\n    var v3 : Int = 12\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "दो पूर्णांकों a और b का सबसे बड़ा सामान्य भाजक वापस करें \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (3,5) \n1. \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (25,15) \n5.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/5", "entry_point": "sortNumbers", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = sortNumbers(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"three\"\"\"\n    var x1 : String = sortNumbers(arg10)\n    var v1 : String = \"\"\"three\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"three five nine\"\"\"\n    var x2 : String = sortNumbers(arg20)\n    var v2 : String = \"\"\"three five nine\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"five zero four seven nine eight\"\"\"\n    var x3 : String = sortNumbers(arg30)\n    var v3 : String = \"\"\"zero four five seven eight nine\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"six five four three two one zero\"\"\"\n    var x4 : String = sortNumbers(arg40)\n    var v4 : String = \"\"\"zero one two three four five six\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "इनपुट'शून्य'से'नौ'तक की संख्याओं की एक स्थान-सीमित स्ट्रिंग है। \nवैध विकल्प'शून्य','एक','दो','तीन','चार','पाँच','छह','सात','आठ'और'नौ'हैं। \nस्ट्रिंग को सबसे छोटी से सबसे बड़ी तक क्रमबद्ध संख्याओं के साथ वापस करें \n>>> छँटाई संख्याएँ ('तीन एक पाँच') \n'एक तीन पाँच'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/6", "entry_point": "rescaleToUnit", "test": "\n\n    var arg00 : List[Double] = List(2.0, 49.9)\n    var x0 : List[Double] = rescaleToUnit(arg00)\n    var v0 : List[Double] = List(0.0, 1.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(100.0, 49.9)\n    var x1 : List[Double] = rescaleToUnit(arg10)\n    var v1 : List[Double] = List(1.0, 0.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(1.0, 2.0, 3.0, 4.0, 5.0)\n    var x2 : List[Double] = rescaleToUnit(arg20)\n    var v2 : List[Double] = List(0.0, 0.25, 0.5, 0.75, 1.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(2.0, 1.0, 5.0, 3.0, 4.0)\n    var x3 : List[Double] = rescaleToUnit(arg30)\n    var v3 : List[Double] = List(0.25, 0.0, 1.0, 0.5, 0.75)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(12.0, 11.0, 15.0, 13.0, 14.0)\n    var x4 : List[Double] = rescaleToUnit(arg40)\n    var v4 : List[Double] = List(0.25, 0.0, 1.0, 0.5, 0.75)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "संख्याओं की सूची (कम से कम दो तत्वों की) को देखते हुए, उस सूची में एक रैखिक परिवर्तन लागू करें, \nकि सबसे छोटी संख्या 0 हो जाएगी और सबसे बड़ी संख्या 1 हो जाएगी। \n>>> इकाई को पुनः प्राप्त करें ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/7", "entry_point": "flipCase", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = flipCase(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Hello!\"\"\"\n    var x1 : String = flipCase(arg10)\n    var v1 : String = \"\"\"hELLO!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"These violent delights have violent ends\"\"\"\n    var x2 : String = flipCase(arg20)\n    var v2 : String = \"\"\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n}\n", "description": "किसी दिए गए स्ट्रिंग के लिए, छोटे अक्षरों को बड़े अक्षरों में और बड़े अक्षरों को छोटे अक्षरों में बदलें। \n>>> फ़्लिप केस ('हैलो') \n'हैलो'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/8", "entry_point": "getPositive", "test": "\n\n    var arg00 : List[Any] = List(-1, -2, 4, 5, 6)\n    var x0 : List[Any] = getPositive(arg00)\n    var v0 : List[Any] = List(4, 5, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)\n    var x1 : List[Any] = getPositive(arg10)\n    var v1 : List[Any] = List(5, 3, 2, 3, 3, 9, 123, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(-1, -2)\n    var x2 : List[Any] = getPositive(arg20)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List()\n    var x3 : List[Any] = getPositive(arg30)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "सूची में केवल सकारात्मक संख्याएँ वापस करें। \n>>> सकारात्मक प्राप्त करें ([-1,2,-4,5,6]) \n[2,5,6] \n>>> सकारात्मक प्राप्त करें ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/9", "entry_point": "isPrime", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Boolean = isPrime(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 101\n    var x1 : Boolean = isPrime(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Boolean = isPrime(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 13441\n    var x3 : Boolean = isPrime(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 61\n    var x4 : Boolean = isPrime(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 4\n    var x5 : Boolean = isPrime(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 1\n    var x6 : Boolean = isPrime(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 5\n    var x7 : Boolean = isPrime(arg70)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 11\n    var x8 : Boolean = isPrime(arg80)\n    var v8 : Boolean = true\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 17\n    var x9 : Boolean = isPrime(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 85\n    var x10 : Boolean = isPrime(arg100)\n    var v10 : Boolean = false\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 77\n    var x11 : Boolean = isPrime(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 255379\n    var x12 : Boolean = isPrime(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n}\n", "description": "यदि कोई दी गई संख्या अभाज्य है तो सही वापस करें, और अन्यथा गलत। \n>>> प्राइम है (6) \nझूठ बोलती है। \n>>> इस _ प्राइम (101) है \nसच है। \n>>> प्राइम है (11) \nसच है। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसच है। \n>>> इस _ प्राइम (61) \nसच है। \n>>> प्राइम है (4) \nझूठ बोलती है। \n>>> प्राइम है (1) \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/10", "entry_point": "unique", "test": "\n\n    var arg00 : List[Int] = List(5, 3, 5, 2, 3, 3, 9, 0, 123)\n    var x0 : List[Int] = unique(arg00)\n    var v0 : List[Int] = List(0, 2, 3, 5, 9, 123)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n}\n", "description": "एक सूची में क्रमबद्ध अद्वितीय तत्वों को वापस करें \n>>> अद्वितीय ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/11", "entry_point": "primeFib", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = primeFib(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = primeFib(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = primeFib(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 4\n    var x3 : Int = primeFib(arg30)\n    var v3 : Int = 13\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 5\n    var x4 : Int = primeFib(arg40)\n    var v4 : Int = 89\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 6\n    var x5 : Int = primeFib(arg50)\n    var v5 : Int = 233\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 7\n    var x6 : Int = primeFib(arg60)\n    var v6 : Int = 1597\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 8\n    var x7 : Int = primeFib(arg70)\n    var v7 : Int = 28657\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 9\n    var x8 : Int = primeFib(arg80)\n    var v8 : Int = 514229\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 10\n    var x9 : Int = primeFib(arg90)\n    var v9 : Int = 433494437\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n}\n", "description": "प्राइम _ फाइब n-th संख्या बताता है जो एक फिबोनाची संख्या है और यह भी अभाज्य है। \n>>> प्राइम _ फाइब (1) \n2. \n>>> प्राइम _ फाइब (2) \n3. \n>>> प्राइम _ फाइब (3) \n5. \n>>> प्राइम _ फाइब (4) \n13. \n>>> प्राइम _ फाइब (5) \n89", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/12", "entry_point": "triplesSumToZero", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 0)\n    var x0 : Boolean = triplesSumToZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, -1)\n    var x1 : Boolean = triplesSumToZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, -2, 1)\n    var x2 : Boolean = triplesSumToZero(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(1, 2, 3, 7)\n    var x3 : Boolean = triplesSumToZero(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 2, 5, 7)\n    var x4 : Boolean = triplesSumToZero(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(2, 4, -5, 3, 9, 7)\n    var x5 : Boolean = triplesSumToZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(1)\n    var x6 : Boolean = triplesSumToZero(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(1, 3, 5, -100)\n    var x7 : Boolean = triplesSumToZero(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(100, 3, 5, -100)\n    var x8 : Boolean = triplesSumToZero(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "ट्रिपल्स _ सम _ से _ जीरो एक इनपुट के रूप में पूर्णांकों की एक सूची लेता है। \nयह सही बताता है यदि सूची में तीन अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n\n>>> ट्रिपल _ सम _ से _ शून्य ([1,35,5,0]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,3,-2,1]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([2,4,-5,3,9,7]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/13", "entry_point": "pairsSumToZero", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 0)\n    var x0 : Boolean = pairsSumToZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, -2, 1)\n    var x1 : Boolean = pairsSumToZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 7)\n    var x2 : Boolean = pairsSumToZero(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(2, 4, -5, 3, 5, 7)\n    var x3 : Boolean = pairsSumToZero(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var x4 : Boolean = pairsSumToZero(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(-3, 9, -1, 3, 2, 30)\n    var x5 : Boolean = pairsSumToZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(-3, 9, -1, 3, 2, 31)\n    var x6 : Boolean = pairsSumToZero(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(-3, 9, -1, 4, 2, 30)\n    var x7 : Boolean = pairsSumToZero(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(-3, 9, -1, 4, 2, 31)\n    var x8 : Boolean = pairsSumToZero(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "pair _ sum _ to _ zero पूर्णांकों की एक सूची को एक इनपुट के रूप में लेता है। \nयह सही बताता है यदि सूची में दो अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,5,0]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,-2,1]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([2,4,-5,3,5,7]) \nसच है। \n>>> जोड़े _ योग _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/14", "entry_point": "fib4", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = fib4(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var x1 : Int = fib4(arg10)\n    var v1 : Int = 28\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = fib4(arg20)\n    var v2 : Int = 104\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 12\n    var x3 : Int = fib4(arg30)\n    var v3 : Int = 386\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "फाइब4 संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nfib4 (0)-> 0 \nफाइब 4 (1)-> 0 \nफाइब 4 (2)-> 2 \nफाइब 4 (3)-> 0 \nफाइब 4 (एन)-> फाइब 4 (एन-1) + फाइब 4 (एन-2) + फाइब 4 (एन-3) + फाइब 4 (एन-4)। \nकृपया तन्तु 4 संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। पुनरावृत्ति का उपयोग न करें। \n>>> फाइब4 (5) \n4. \n>>> fib4 (6) \n8. \n>>> fib4 (7) \n14.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/15", "entry_point": "median", "test": "\n\n    var arg00 : List[Int] = List(3, 1, 2, 4, 5)\n    var x0 : Double = median(arg00)\n    var v0 : Double = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-10, 4, 6, 1000, 10, 20)\n    var x1 : Double = median(arg10)\n    var v1 : Double = 8.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5)\n    var x2 : Double = median(arg20)\n    var v2 : Double = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(6, 5)\n    var x3 : Double = median(arg30)\n    var v3 : Double = 5.5\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(8, 1, 3, 9, 9, 2, 7)\n    var x4 : Double = median(arg40)\n    var v4 : Double = 7\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "सूची एल में तत्वों का माध्यिका वापस करें। \n>>> माध्यिका ([3,1,2,4,5]) \n3. \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n15. 0", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/16", "entry_point": "isPalindrome", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Boolean = isPalindrome(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aba\"\"\"\n    var x1 : Boolean = isPalindrome(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aaaaa\"\"\"\n    var x2 : Boolean = isPalindrome(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"zbcd\"\"\"\n    var x3 : Boolean = isPalindrome(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"xywyx\"\"\"\n    var x4 : Boolean = isPalindrome(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"xywyz\"\"\"\n    var x5 : Boolean = isPalindrome(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"xywzx\"\"\"\n    var x6 : Boolean = isPalindrome(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "जाँच करता है कि क्या दी गई स्ट्रिंग एक पालिंड्रोम है \n>>> इस _ पालिंड्रोम (\") है \nसच है। \n>>> इस _ पालिंड्रोम ('अबा') है \nसच है। \n>>> इस _ पालिंड्रोम ('एएएएए') है \nसच है। \n>>> is _ palindrom ('zbcd') है \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/17", "entry_point": "removeVowels", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = removeVowels(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdef\\nghijklm\"\"\"\n    var x1 : String = removeVowels(arg10)\n    var v1 : String = \"\"\"bcdf\\nghjklm\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"fedcba\"\"\"\n    var x2 : String = removeVowels(arg20)\n    var v2 : String = \"\"\"fdcb\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"eeeee\"\"\"\n    var x3 : String = removeVowels(arg30)\n    var v3 : String = \"\"\"\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"acBAA\"\"\"\n    var x4 : String = removeVowels(arg40)\n    var v4 : String = \"\"\"cB\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"EcBOO\"\"\"\n    var x5 : String = removeVowels(arg50)\n    var v5 : String = \"\"\"cB\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"ybcd\"\"\"\n    var x6 : String = removeVowels(arg60)\n    var v6 : String = \"\"\"ybcd\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "रिमूव _ वॉवेल्स एक ऐसा फंक्शन है जो स्ट्रिंग लेता है और बिना स्वर के स्ट्रिंग लौटाता है। \n>>> स्वर हटाएँ (\") \n\"\n>>> स्वरों को हटाएँ (\"abcdef\\nghijklm\") \n'बी. सी. डी. एफ. \\एनजी. जे. के. एल. एम.'\n>>> स्वरों को हटाएँ ('abcdef') \n'बी. सी. डी. एफ.'\n>>> स्वरों को हटाएँ ('एएएए') \n\"\n>>> स्वरों को हटाएँ ('एएबीएए') \n'बी'\n>>> स्वर हटाएँ ('zbcd') \n'जेड. बी. सी. डी.'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/18", "entry_point": "belowThreshold", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4, 10)\n    var arg01 : Int = 100\n    var x0 : Boolean = belowThreshold(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 20, 4, 10)\n    var arg11 : Int = 5\n    var x1 : Boolean = belowThreshold(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 20, 4, 10)\n    var arg21 : Int = 21\n    var x2 : Boolean = belowThreshold(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(1, 20, 4, 10)\n    var arg31 : Int = 22\n    var x3 : Boolean = belowThreshold(arg30, arg31)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 8, 4, 10)\n    var arg41 : Int = 11\n    var x4 : Boolean = belowThreshold(arg40, arg41)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(1, 8, 4, 10)\n    var arg51 : Int = 10\n    var x5 : Boolean = belowThreshold(arg50, arg51)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "सही लौटें यदि सूची में सभी संख्याएँ t की सीमा से नीचे हैं। \n>>> थ्रेसहोल्ड के नीचे ([1,2,4,10], 100) \nसच है। \n>>> थ्रेसहोल्ड के नीचे ([1,20,4,10], 5) \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/19", "entry_point": "add", "test": "\n\n    var arg00 : Int = 0\n    var arg01 : Int = 1\n    var x0 : Int = add(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 0\n    var x1 : Int = add(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 3\n    var x2 : Int = add(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5\n    var arg31 : Int = 7\n    var x3 : Int = add(arg30, arg31)\n    var v3 : Int = 12\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var arg41 : Int = 5\n    var x4 : Int = add(arg40, arg41)\n    var v4 : Int = 12\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 572\n    var arg51 : Int = 725\n    var x5 : Int = add(arg50, arg51)\n    var v5 : Int = 1297\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 51\n    var arg61 : Int = 804\n    var x6 : Int = add(arg60, arg61)\n    var v6 : Int = 855\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 645\n    var arg71 : Int = 96\n    var x7 : Int = add(arg70, arg71)\n    var v7 : Int = 741\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 712\n    var arg81 : Int = 853\n    var x8 : Int = add(arg80, arg81)\n    var v8 : Int = 1565\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 223\n    var arg91 : Int = 101\n    var x9 : Int = add(arg90, arg91)\n    var v9 : Int = 324\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 76\n    var arg101 : Int = 29\n    var x10 : Int = add(arg100, arg101)\n    var v10 : Int = 105\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 416\n    var arg111 : Int = 149\n    var x11 : Int = add(arg110, arg111)\n    var v11 : Int = 565\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 145\n    var arg121 : Int = 409\n    var x12 : Int = add(arg120, arg121)\n    var v12 : Int = 554\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : Int = 535\n    var arg131 : Int = 430\n    var x13 : Int = add(arg130, arg131)\n    var v13 : Int = 965\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : Int = 118\n    var arg141 : Int = 303\n    var x14 : Int = add(arg140, arg141)\n    var v14 : Int = 421\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : Int = 287\n    var arg151 : Int = 94\n    var x15 : Int = add(arg150, arg151)\n    var v15 : Int = 381\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n    var arg160 : Int = 768\n    var arg161 : Int = 257\n    var x16 : Int = add(arg160, arg161)\n    var v16 : Int = 1025\n    assert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \" + x16)\n\n    var arg170 : Int = 421\n    var arg171 : Int = 677\n    var x17 : Int = add(arg170, arg171)\n    var v17 : Int = 1098\n    assert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \" + x17)\n\n    var arg180 : Int = 802\n    var arg181 : Int = 814\n    var x18 : Int = add(arg180, arg181)\n    var v18 : Int = 1616\n    assert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \" + x18)\n\n    var arg190 : Int = 510\n    var arg191 : Int = 922\n    var x19 : Int = add(arg190, arg191)\n    var v19 : Int = 1432\n    assert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \" + x19)\n\n    var arg200 : Int = 345\n    var arg201 : Int = 819\n    var x20 : Int = add(arg200, arg201)\n    var v20 : Int = 1164\n    assert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \" + x20)\n\n    var arg210 : Int = 895\n    var arg211 : Int = 436\n    var x21 : Int = add(arg210, arg211)\n    var v21 : Int = 1331\n    assert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \" + x21)\n\n    var arg220 : Int = 123\n    var arg221 : Int = 424\n    var x22 : Int = add(arg220, arg221)\n    var v22 : Int = 547\n    assert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \" + x22)\n\n    var arg230 : Int = 923\n    var arg231 : Int = 245\n    var x23 : Int = add(arg230, arg231)\n    var v23 : Int = 1168\n    assert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \" + x23)\n\n    var arg240 : Int = 23\n    var arg241 : Int = 438\n    var x24 : Int = add(arg240, arg241)\n    var v24 : Int = 461\n    assert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \" + x24)\n\n    var arg250 : Int = 565\n    var arg251 : Int = 133\n    var x25 : Int = add(arg250, arg251)\n    var v25 : Int = 698\n    assert(x25 == v25, \"Exception -- test case 25 did not pass. x25 = \" + x25)\n\n    var arg260 : Int = 945\n    var arg261 : Int = 925\n    var x26 : Int = add(arg260, arg261)\n    var v26 : Int = 1870\n    assert(x26 == v26, \"Exception -- test case 26 did not pass. x26 = \" + x26)\n\n    var arg270 : Int = 261\n    var arg271 : Int = 983\n    var x27 : Int = add(arg270, arg271)\n    var v27 : Int = 1244\n    assert(x27 == v27, \"Exception -- test case 27 did not pass. x27 = \" + x27)\n\n    var arg280 : Int = 139\n    var arg281 : Int = 577\n    var x28 : Int = add(arg280, arg281)\n    var v28 : Int = 716\n    assert(x28 == v28, \"Exception -- test case 28 did not pass. x28 = \" + x28)\n\n    var arg290 : Int = 763\n    var arg291 : Int = 178\n    var x29 : Int = add(arg290, arg291)\n    var v29 : Int = 941\n    assert(x29 == v29, \"Exception -- test case 29 did not pass. x29 = \" + x29)\n\n    var arg300 : Int = 147\n    var arg301 : Int = 892\n    var x30 : Int = add(arg300, arg301)\n    var v30 : Int = 1039\n    assert(x30 == v30, \"Exception -- test case 30 did not pass. x30 = \" + x30)\n\n    var arg310 : Int = 436\n    var arg311 : Int = 402\n    var x31 : Int = add(arg310, arg311)\n    var v31 : Int = 838\n    assert(x31 == v31, \"Exception -- test case 31 did not pass. x31 = \" + x31)\n\n    var arg320 : Int = 610\n    var arg321 : Int = 581\n    var x32 : Int = add(arg320, arg321)\n    var v32 : Int = 1191\n    assert(x32 == v32, \"Exception -- test case 32 did not pass. x32 = \" + x32)\n\n    var arg330 : Int = 103\n    var arg331 : Int = 416\n    var x33 : Int = add(arg330, arg331)\n    var v33 : Int = 519\n    assert(x33 == v33, \"Exception -- test case 33 did not pass. x33 = \" + x33)\n\n    var arg340 : Int = 339\n    var arg341 : Int = 990\n    var x34 : Int = add(arg340, arg341)\n    var v34 : Int = 1329\n    assert(x34 == v34, \"Exception -- test case 34 did not pass. x34 = \" + x34)\n\n    var arg350 : Int = 130\n    var arg351 : Int = 504\n    var x35 : Int = add(arg350, arg351)\n    var v35 : Int = 634\n    assert(x35 == v35, \"Exception -- test case 35 did not pass. x35 = \" + x35)\n\n    var arg360 : Int = 242\n    var arg361 : Int = 717\n    var x36 : Int = add(arg360, arg361)\n    var v36 : Int = 959\n    assert(x36 == v36, \"Exception -- test case 36 did not pass. x36 = \" + x36)\n\n    var arg370 : Int = 562\n    var arg371 : Int = 110\n    var x37 : Int = add(arg370, arg371)\n    var v37 : Int = 672\n    assert(x37 == v37, \"Exception -- test case 37 did not pass. x37 = \" + x37)\n\n    var arg380 : Int = 396\n    var arg381 : Int = 909\n    var x38 : Int = add(arg380, arg381)\n    var v38 : Int = 1305\n    assert(x38 == v38, \"Exception -- test case 38 did not pass. x38 = \" + x38)\n\n    var arg390 : Int = 887\n    var arg391 : Int = 703\n    var x39 : Int = add(arg390, arg391)\n    var v39 : Int = 1590\n    assert(x39 == v39, \"Exception -- test case 39 did not pass. x39 = \" + x39)\n\n    var arg400 : Int = 870\n    var arg401 : Int = 551\n    var x40 : Int = add(arg400, arg401)\n    var v40 : Int = 1421\n    assert(x40 == v40, \"Exception -- test case 40 did not pass. x40 = \" + x40)\n\n    var arg410 : Int = 422\n    var arg411 : Int = 391\n    var x41 : Int = add(arg410, arg411)\n    var v41 : Int = 813\n    assert(x41 == v41, \"Exception -- test case 41 did not pass. x41 = \" + x41)\n\n    var arg420 : Int = 299\n    var arg421 : Int = 505\n    var x42 : Int = add(arg420, arg421)\n    var v42 : Int = 804\n    assert(x42 == v42, \"Exception -- test case 42 did not pass. x42 = \" + x42)\n\n    var arg430 : Int = 346\n    var arg431 : Int = 56\n    var x43 : Int = add(arg430, arg431)\n    var v43 : Int = 402\n    assert(x43 == v43, \"Exception -- test case 43 did not pass. x43 = \" + x43)\n\n    var arg440 : Int = 36\n    var arg441 : Int = 706\n    var x44 : Int = add(arg440, arg441)\n    var v44 : Int = 742\n    assert(x44 == v44, \"Exception -- test case 44 did not pass. x44 = \" + x44)\n\n    var arg450 : Int = 738\n    var arg451 : Int = 411\n    var x45 : Int = add(arg450, arg451)\n    var v45 : Int = 1149\n    assert(x45 == v45, \"Exception -- test case 45 did not pass. x45 = \" + x45)\n\n    var arg460 : Int = 679\n    var arg461 : Int = 87\n    var x46 : Int = add(arg460, arg461)\n    var v46 : Int = 766\n    assert(x46 == v46, \"Exception -- test case 46 did not pass. x46 = \" + x46)\n\n    var arg470 : Int = 25\n    var arg471 : Int = 303\n    var x47 : Int = add(arg470, arg471)\n    var v47 : Int = 328\n    assert(x47 == v47, \"Exception -- test case 47 did not pass. x47 = \" + x47)\n\n    var arg480 : Int = 161\n    var arg481 : Int = 612\n    var x48 : Int = add(arg480, arg481)\n    var v48 : Int = 773\n    assert(x48 == v48, \"Exception -- test case 48 did not pass. x48 = \" + x48)\n\n    var arg490 : Int = 306\n    var arg491 : Int = 841\n    var x49 : Int = add(arg490, arg491)\n    var v49 : Int = 1147\n    assert(x49 == v49, \"Exception -- test case 49 did not pass. x49 = \" + x49)\n\n    var arg500 : Int = 973\n    var arg501 : Int = 411\n    var x50 : Int = add(arg500, arg501)\n    var v50 : Int = 1384\n    assert(x50 == v50, \"Exception -- test case 50 did not pass. x50 = \" + x50)\n\n    var arg510 : Int = 711\n    var arg511 : Int = 157\n    var x51 : Int = add(arg510, arg511)\n    var v51 : Int = 868\n    assert(x51 == v51, \"Exception -- test case 51 did not pass. x51 = \" + x51)\n\n    var arg520 : Int = 471\n    var arg521 : Int = 27\n    var x52 : Int = add(arg520, arg521)\n    var v52 : Int = 498\n    assert(x52 == v52, \"Exception -- test case 52 did not pass. x52 = \" + x52)\n\n    var arg530 : Int = 714\n    var arg531 : Int = 792\n    var x53 : Int = add(arg530, arg531)\n    var v53 : Int = 1506\n    assert(x53 == v53, \"Exception -- test case 53 did not pass. x53 = \" + x53)\n\n    var arg540 : Int = 38\n    var arg541 : Int = 206\n    var x54 : Int = add(arg540, arg541)\n    var v54 : Int = 244\n    assert(x54 == v54, \"Exception -- test case 54 did not pass. x54 = \" + x54)\n\n    var arg550 : Int = 907\n    var arg551 : Int = 343\n    var x55 : Int = add(arg550, arg551)\n    var v55 : Int = 1250\n    assert(x55 == v55, \"Exception -- test case 55 did not pass. x55 = \" + x55)\n\n    var arg560 : Int = 23\n    var arg561 : Int = 760\n    var x56 : Int = add(arg560, arg561)\n    var v56 : Int = 783\n    assert(x56 == v56, \"Exception -- test case 56 did not pass. x56 = \" + x56)\n\n    var arg570 : Int = 524\n    var arg571 : Int = 859\n    var x57 : Int = add(arg570, arg571)\n    var v57 : Int = 1383\n    assert(x57 == v57, \"Exception -- test case 57 did not pass. x57 = \" + x57)\n\n    var arg580 : Int = 30\n    var arg581 : Int = 529\n    var x58 : Int = add(arg580, arg581)\n    var v58 : Int = 559\n    assert(x58 == v58, \"Exception -- test case 58 did not pass. x58 = \" + x58)\n\n    var arg590 : Int = 341\n    var arg591 : Int = 691\n    var x59 : Int = add(arg590, arg591)\n    var v59 : Int = 1032\n    assert(x59 == v59, \"Exception -- test case 59 did not pass. x59 = \" + x59)\n\n    var arg600 : Int = 167\n    var arg601 : Int = 729\n    var x60 : Int = add(arg600, arg601)\n    var v60 : Int = 896\n    assert(x60 == v60, \"Exception -- test case 60 did not pass. x60 = \" + x60)\n\n    var arg610 : Int = 636\n    var arg611 : Int = 289\n    var x61 : Int = add(arg610, arg611)\n    var v61 : Int = 925\n    assert(x61 == v61, \"Exception -- test case 61 did not pass. x61 = \" + x61)\n\n    var arg620 : Int = 503\n    var arg621 : Int = 144\n    var x62 : Int = add(arg620, arg621)\n    var v62 : Int = 647\n    assert(x62 == v62, \"Exception -- test case 62 did not pass. x62 = \" + x62)\n\n    var arg630 : Int = 51\n    var arg631 : Int = 985\n    var x63 : Int = add(arg630, arg631)\n    var v63 : Int = 1036\n    assert(x63 == v63, \"Exception -- test case 63 did not pass. x63 = \" + x63)\n\n    var arg640 : Int = 287\n    var arg641 : Int = 149\n    var x64 : Int = add(arg640, arg641)\n    var v64 : Int = 436\n    assert(x64 == v64, \"Exception -- test case 64 did not pass. x64 = \" + x64)\n\n    var arg650 : Int = 659\n    var arg651 : Int = 75\n    var x65 : Int = add(arg650, arg651)\n    var v65 : Int = 734\n    assert(x65 == v65, \"Exception -- test case 65 did not pass. x65 = \" + x65)\n\n    var arg660 : Int = 462\n    var arg661 : Int = 797\n    var x66 : Int = add(arg660, arg661)\n    var v66 : Int = 1259\n    assert(x66 == v66, \"Exception -- test case 66 did not pass. x66 = \" + x66)\n\n    var arg670 : Int = 406\n    var arg671 : Int = 141\n    var x67 : Int = add(arg670, arg671)\n    var v67 : Int = 547\n    assert(x67 == v67, \"Exception -- test case 67 did not pass. x67 = \" + x67)\n\n    var arg680 : Int = 106\n    var arg681 : Int = 44\n    var x68 : Int = add(arg680, arg681)\n    var v68 : Int = 150\n    assert(x68 == v68, \"Exception -- test case 68 did not pass. x68 = \" + x68)\n\n    var arg690 : Int = 300\n    var arg691 : Int = 934\n    var x69 : Int = add(arg690, arg691)\n    var v69 : Int = 1234\n    assert(x69 == v69, \"Exception -- test case 69 did not pass. x69 = \" + x69)\n\n    var arg700 : Int = 471\n    var arg701 : Int = 524\n    var x70 : Int = add(arg700, arg701)\n    var v70 : Int = 995\n    assert(x70 == v70, \"Exception -- test case 70 did not pass. x70 = \" + x70)\n\n    var arg710 : Int = 122\n    var arg711 : Int = 429\n    var x71 : Int = add(arg710, arg711)\n    var v71 : Int = 551\n    assert(x71 == v71, \"Exception -- test case 71 did not pass. x71 = \" + x71)\n\n    var arg720 : Int = 735\n    var arg721 : Int = 195\n    var x72 : Int = add(arg720, arg721)\n    var v72 : Int = 930\n    assert(x72 == v72, \"Exception -- test case 72 did not pass. x72 = \" + x72)\n\n    var arg730 : Int = 335\n    var arg731 : Int = 484\n    var x73 : Int = add(arg730, arg731)\n    var v73 : Int = 819\n    assert(x73 == v73, \"Exception -- test case 73 did not pass. x73 = \" + x73)\n\n    var arg740 : Int = 28\n    var arg741 : Int = 809\n    var x74 : Int = add(arg740, arg741)\n    var v74 : Int = 837\n    assert(x74 == v74, \"Exception -- test case 74 did not pass. x74 = \" + x74)\n\n    var arg750 : Int = 430\n    var arg751 : Int = 20\n    var x75 : Int = add(arg750, arg751)\n    var v75 : Int = 450\n    assert(x75 == v75, \"Exception -- test case 75 did not pass. x75 = \" + x75)\n\n    var arg760 : Int = 916\n    var arg761 : Int = 635\n    var x76 : Int = add(arg760, arg761)\n    var v76 : Int = 1551\n    assert(x76 == v76, \"Exception -- test case 76 did not pass. x76 = \" + x76)\n\n    var arg770 : Int = 301\n    var arg771 : Int = 999\n    var x77 : Int = add(arg770, arg771)\n    var v77 : Int = 1300\n    assert(x77 == v77, \"Exception -- test case 77 did not pass. x77 = \" + x77)\n\n    var arg780 : Int = 454\n    var arg781 : Int = 466\n    var x78 : Int = add(arg780, arg781)\n    var v78 : Int = 920\n    assert(x78 == v78, \"Exception -- test case 78 did not pass. x78 = \" + x78)\n\n    var arg790 : Int = 905\n    var arg791 : Int = 259\n    var x79 : Int = add(arg790, arg791)\n    var v79 : Int = 1164\n    assert(x79 == v79, \"Exception -- test case 79 did not pass. x79 = \" + x79)\n\n    var arg800 : Int = 168\n    var arg801 : Int = 205\n    var x80 : Int = add(arg800, arg801)\n    var v80 : Int = 373\n    assert(x80 == v80, \"Exception -- test case 80 did not pass. x80 = \" + x80)\n\n    var arg810 : Int = 570\n    var arg811 : Int = 434\n    var x81 : Int = add(arg810, arg811)\n    var v81 : Int = 1004\n    assert(x81 == v81, \"Exception -- test case 81 did not pass. x81 = \" + x81)\n\n    var arg820 : Int = 64\n    var arg821 : Int = 959\n    var x82 : Int = add(arg820, arg821)\n    var v82 : Int = 1023\n    assert(x82 == v82, \"Exception -- test case 82 did not pass. x82 = \" + x82)\n\n    var arg830 : Int = 957\n    var arg831 : Int = 510\n    var x83 : Int = add(arg830, arg831)\n    var v83 : Int = 1467\n    assert(x83 == v83, \"Exception -- test case 83 did not pass. x83 = \" + x83)\n\n    var arg840 : Int = 722\n    var arg841 : Int = 598\n    var x84 : Int = add(arg840, arg841)\n    var v84 : Int = 1320\n    assert(x84 == v84, \"Exception -- test case 84 did not pass. x84 = \" + x84)\n\n    var arg850 : Int = 770\n    var arg851 : Int = 226\n    var x85 : Int = add(arg850, arg851)\n    var v85 : Int = 996\n    assert(x85 == v85, \"Exception -- test case 85 did not pass. x85 = \" + x85)\n\n    var arg860 : Int = 579\n    var arg861 : Int = 66\n    var x86 : Int = add(arg860, arg861)\n    var v86 : Int = 645\n    assert(x86 == v86, \"Exception -- test case 86 did not pass. x86 = \" + x86)\n\n    var arg870 : Int = 117\n    var arg871 : Int = 674\n    var x87 : Int = add(arg870, arg871)\n    var v87 : Int = 791\n    assert(x87 == v87, \"Exception -- test case 87 did not pass. x87 = \" + x87)\n\n    var arg880 : Int = 530\n    var arg881 : Int = 30\n    var x88 : Int = add(arg880, arg881)\n    var v88 : Int = 560\n    assert(x88 == v88, \"Exception -- test case 88 did not pass. x88 = \" + x88)\n\n    var arg890 : Int = 776\n    var arg891 : Int = 345\n    var x89 : Int = add(arg890, arg891)\n    var v89 : Int = 1121\n    assert(x89 == v89, \"Exception -- test case 89 did not pass. x89 = \" + x89)\n\n    var arg900 : Int = 327\n    var arg901 : Int = 389\n    var x90 : Int = add(arg900, arg901)\n    var v90 : Int = 716\n    assert(x90 == v90, \"Exception -- test case 90 did not pass. x90 = \" + x90)\n\n    var arg910 : Int = 596\n    var arg911 : Int = 12\n    var x91 : Int = add(arg910, arg911)\n    var v91 : Int = 608\n    assert(x91 == v91, \"Exception -- test case 91 did not pass. x91 = \" + x91)\n\n    var arg920 : Int = 599\n    var arg921 : Int = 511\n    var x92 : Int = add(arg920, arg921)\n    var v92 : Int = 1110\n    assert(x92 == v92, \"Exception -- test case 92 did not pass. x92 = \" + x92)\n\n    var arg930 : Int = 936\n    var arg931 : Int = 476\n    var x93 : Int = add(arg930, arg931)\n    var v93 : Int = 1412\n    assert(x93 == v93, \"Exception -- test case 93 did not pass. x93 = \" + x93)\n\n    var arg940 : Int = 461\n    var arg941 : Int = 14\n    var x94 : Int = add(arg940, arg941)\n    var v94 : Int = 475\n    assert(x94 == v94, \"Exception -- test case 94 did not pass. x94 = \" + x94)\n\n    var arg950 : Int = 966\n    var arg951 : Int = 157\n    var x95 : Int = add(arg950, arg951)\n    var v95 : Int = 1123\n    assert(x95 == v95, \"Exception -- test case 95 did not pass. x95 = \" + x95)\n\n    var arg960 : Int = 326\n    var arg961 : Int = 91\n    var x96 : Int = add(arg960, arg961)\n    var v96 : Int = 417\n    assert(x96 == v96, \"Exception -- test case 96 did not pass. x96 = \" + x96)\n\n    var arg970 : Int = 392\n    var arg971 : Int = 455\n    var x97 : Int = add(arg970, arg971)\n    var v97 : Int = 847\n    assert(x97 == v97, \"Exception -- test case 97 did not pass. x97 = \" + x97)\n\n    var arg980 : Int = 446\n    var arg981 : Int = 477\n    var x98 : Int = add(arg980, arg981)\n    var v98 : Int = 923\n    assert(x98 == v98, \"Exception -- test case 98 did not pass. x98 = \" + x98)\n\n    var arg990 : Int = 324\n    var arg991 : Int = 860\n    var x99 : Int = add(arg990, arg991)\n    var v99 : Int = 1184\n    assert(x99 == v99, \"Exception -- test case 99 did not pass. x99 = \" + x99)\n\n    var arg1000 : Int = 945\n    var arg1001 : Int = 85\n    var x100 : Int = add(arg1000, arg1001)\n    var v100 : Int = 1030\n    assert(x100 == v100, \"Exception -- test case 100 did not pass. x100 = \" + x100)\n\n    var arg1010 : Int = 886\n    var arg1011 : Int = 582\n    var x101 : Int = add(arg1010, arg1011)\n    var v101 : Int = 1468\n    assert(x101 == v101, \"Exception -- test case 101 did not pass. x101 = \" + x101)\n\n    var arg1020 : Int = 886\n    var arg1021 : Int = 712\n    var x102 : Int = add(arg1020, arg1021)\n    var v102 : Int = 1598\n    assert(x102 == v102, \"Exception -- test case 102 did not pass. x102 = \" + x102)\n\n    var arg1030 : Int = 842\n    var arg1031 : Int = 953\n    var x103 : Int = add(arg1030, arg1031)\n    var v103 : Int = 1795\n    assert(x103 == v103, \"Exception -- test case 103 did not pass. x103 = \" + x103)\n\n}\n", "description": "दो संख्याएँ x और y जोड़ें \n>>> जोड़ें (2,3) \n5. \n>>> जोड़ें (5,7) \n12.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/20", "entry_point": "sameChars", "test": "\n\n    var arg00 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg01 : String = \"\"\"dddzzzzzzzddeddabc\"\"\"\n    var x0 : Boolean = sameChars(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcd\"\"\"\n    var arg11 : String = \"\"\"dddddddabc\"\"\"\n    var x1 : Boolean = sameChars(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"dddddddabc\"\"\"\n    var arg21 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = sameChars(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"eabcd\"\"\"\n    var arg31 : String = \"\"\"dddddddabc\"\"\"\n    var x3 : Boolean = sameChars(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"abcd\"\"\"\n    var arg41 : String = \"\"\"dddddddabcf\"\"\"\n    var x4 : Boolean = sameChars(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg51 : String = \"\"\"dddzzzzzzzddddabc\"\"\"\n    var x5 : Boolean = sameChars(arg50, arg51)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"aabb\"\"\"\n    var arg61 : String = \"\"\"aaccc\"\"\"\n    var x6 : Boolean = sameChars(arg60, arg61)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "जाँच करें कि क्या दो शब्दों में समान अक्षर हैं। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzuddeddabc') \nसच है। \n>>> समान अक्षर ('एबीसीडी','डीडीडीडीडीएबीसी') \nसच है। \n>>> समान अक्षर ('ddddddabc','abcd') \nसच है। \n>>> समान अक्षर ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzddddddabc') \nझूठ बोलती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/21", "entry_point": "fib", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = fib(arg00)\n    var v0 : Int = 55\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = fib(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Int = fib(arg20)\n    var v2 : Int = 21\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 11\n    var x3 : Int = fib(arg30)\n    var v3 : Int = 89\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 12\n    var x4 : Int = fib(arg40)\n    var v4 : Int = 144\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "n-th फिबोनाची संख्या वापस करें। \n>>> फाइबर (10) \n55. \n>>> फाइबर (1) \n1. \n>>> फाइबर (8) \n21.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/22", "entry_point": "common", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 3, 34, 653, 2, 5)\n    var arg01 : List[Any] = List(5, 7, 1, 5, 9, 653, 121)\n    var x0 : List[Any] = common(arg00, arg01)\n    var v0 : List[Any] = List(1, 5, 653)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 3, 2, 8)\n    var arg11 : List[Any] = List(3, 2)\n    var x1 : List[Any] = common(arg10, arg11)\n    var v1 : List[Any] = List(2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 3, 2, 8)\n    var arg21 : List[Any] = List(3, 2, 4)\n    var x2 : List[Any] = common(arg20, arg21)\n    var v2 : List[Any] = List(2, 3, 4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(4, 3, 2, 8)\n    var arg31 : List[Any] = List()\n    var x3 : List[Any] = common(arg30, arg31)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "दो सूचियों के लिए विशिष्ट सामान्य तत्वों को वापस क्रमबद्ध करें। \n>>> सामान्य ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्य ([5,3,2,8], [3,2]) \n[2,3]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/23", "entry_point": "largestPrimeFactor", "test": "\n\n    var arg00 : Int = 15\n    var x0 : Int = largestPrimeFactor(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 27\n    var x1 : Int = largestPrimeFactor(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 63\n    var x2 : Int = largestPrimeFactor(arg20)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 330\n    var x3 : Int = largestPrimeFactor(arg30)\n    var v3 : Int = 11\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 13195\n    var x4 : Int = largestPrimeFactor(arg40)\n    var v4 : Int = 29\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "n का सबसे बड़ा अभाज्य गुणनखंड वापस करें। मान लीजिए कि n> 1 अभाज्य नहीं है। \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (13195) \n29. \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (2048) \n2.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/24", "entry_point": "sumToN", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = sumToN(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = sumToN(arg10)\n    var v1 : Int = 21\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Int = sumToN(arg20)\n    var v2 : Int = 66\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 30\n    var x3 : Int = sumToN(arg30)\n    var v3 : Int = 465\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 100\n    var x4 : Int = sumToN(arg40)\n    var v4 : Int = 5050\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "sum _ to _ n एक फलन है जो 1 से n तक की संख्याओं का योग करता है। \n>>> योग _ से _ एन (30) \n465 \n>>> योग _ से _ एन (100) \n5050 \n>>> योग _ से _ एन (5) \n15. \n>>> योग _ से _ एन (10) \n55. \n>>> योग _ से _ एन (1) \n1.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/25", "entry_point": "derivative", "test": "\n\n    var arg00 : List[Int] = List(3, 1, 2, 4, 5)\n    var x0 : List[Any] = derivative(arg00)\n    var v0 : List[Any] = List(1, 4, 12, 20)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : List[Any] = derivative(arg10)\n    var v1 : List[Any] = List(2, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1)\n    var x2 : List[Any] = derivative(arg20)\n    var v2 : List[Any] = List(2, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(3, 2, 1, 0, 4)\n    var x3 : List[Any] = derivative(arg30)\n    var v3 : List[Any] = List(2, 2, 0, 16)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var x4 : List[Any] = derivative(arg40)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "xs एक बहुपद के गुणांक का प्रतिनिधित्व करता है। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nइस बहुपद का उसी रूप में व्युत्पन्न वापस करें। \n>>> व्युत्पन्न ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्न ([1,2,3]) \n[2,6]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/26", "entry_point": "fibfib", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = fibfib(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = fibfib(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = fibfib(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 8\n    var x3 : Int = fibfib(arg30)\n    var v3 : Int = 24\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 10\n    var x4 : Int = fibfib(arg40)\n    var v4 : Int = 81\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 12\n    var x5 : Int = fibfib(arg50)\n    var v5 : Int = 274\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 14\n    var x6 : Int = fibfib(arg60)\n    var v6 : Int = 927\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "फाइबफाइब संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nफाइबफिब (0) = = 0 \nफाइबफिब (1) = = 0 \nफाइबफिब (2) = = 1 \nफाइबफिब (एन) = = फाइबफिब (एन-1) + फाइबफिब (एन-2) + फाइबफिब (एन-3)। \nकृपया फाइबफिब संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। \n>>> फाइबफिब (1) \n0 \n>>> फाइबफिब (5) \n4. \n>>> फाइबफिब (8) \n24.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/27", "entry_point": "vowelsCount", "test": "\n\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var x0 : Int = vowelsCount(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Alone\"\"\"\n    var x1 : Int = vowelsCount(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"key\"\"\"\n    var x2 : Int = vowelsCount(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"bye\"\"\"\n    var x3 : Int = vowelsCount(arg30)\n    var v3 : Int = 1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"keY\"\"\"\n    var x4 : Int = vowelsCount(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"bYe\"\"\"\n    var x5 : Int = vowelsCount(arg50)\n    var v5 : Int = 1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"ACEDY\"\"\"\n    var x6 : Int = vowelsCount(arg60)\n    var v6 : Int = 3\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "एक फलन स्वर गणना लिखें जो एक स्ट्रिंग का प्रतिनिधित्व करता है \nइनपुट के रूप में एक शब्द और स्ट्रिंग में स्वरों की संख्या लौटाता है। \nइस मामले में स्वर'ए','ई','आई','ओ','यू'हैं। यहाँ,'वाई'भी एक है। \nस्वर, लेकिन केवल तभी जब यह दिए गए शब्द के अंत में हो। \n\nउदाहरणः \n>>> स्वरों की गिनती (\"एबीसीडीई\") \n2. \n>>> स्वर गणना (\"ACEDY\") \n3.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/28", "entry_point": "search", "test": "\n\n    var arg00 : List[Int] = List(5, 5, 5, 5, 1)\n    var x0 : Int = search(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 1, 4, 1, 4, 4)\n    var x1 : Int = search(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 3)\n    var x2 : Int = search(arg20)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(8, 8, 8, 8, 8, 8, 8, 8)\n    var x3 : Int = search(arg30)\n    var v3 : Int = 8\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(2, 3, 3, 2, 2)\n    var x4 : Int = search(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)\n    var x5 : Int = search(arg50)\n    var v5 : Int = 1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(3, 2, 8, 2)\n    var x6 : Int = search(arg60)\n    var v6 : Int = 2\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)\n    var x7 : Int = search(arg70)\n    var v7 : Int = 1\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(8, 8, 3, 6, 5, 6, 4)\n    var x8 : Int = search(arg80)\n    var v8 : Int = -1\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Int] = List(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)\n    var x9 : Int = search(arg90)\n    var v9 : Int = 1\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Int] = List(1, 9, 10, 1, 3)\n    var x10 : Int = search(arg100)\n    var v10 : Int = 1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : List[Int] = List(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)\n    var x11 : Int = search(arg110)\n    var v11 : Int = 5\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : List[Int] = List(1)\n    var x12 : Int = search(arg120)\n    var v12 : Int = 1\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : List[Int] = List(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)\n    var x13 : Int = search(arg130)\n    var v13 : Int = 4\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : List[Int] = List(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)\n    var x14 : Int = search(arg140)\n    var v14 : Int = 2\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : List[Int] = List(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)\n    var x15 : Int = search(arg150)\n    var v15 : Int = 1\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n    var arg160 : List[Int] = List(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)\n    var x16 : Int = search(arg160)\n    var v16 : Int = 4\n    assert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \" + x16)\n\n    var arg170 : List[Int] = List(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)\n    var x17 : Int = search(arg170)\n    var v17 : Int = 4\n    assert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \" + x17)\n\n    var arg180 : List[Int] = List(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)\n    var x18 : Int = search(arg180)\n    var v18 : Int = 2\n    assert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \" + x18)\n\n    var arg190 : List[Int] = List(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)\n    var x19 : Int = search(arg190)\n    var v19 : Int = -1\n    assert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \" + x19)\n\n    var arg200 : List[Int] = List(10)\n    var x20 : Int = search(arg200)\n    var v20 : Int = -1\n    assert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \" + x20)\n\n    var arg210 : List[Int] = List(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)\n    var x21 : Int = search(arg210)\n    var v21 : Int = 2\n    assert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \" + x21)\n\n    var arg220 : List[Int] = List(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)\n    var x22 : Int = search(arg220)\n    var v22 : Int = 1\n    assert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \" + x22)\n\n    var arg230 : List[Int] = List(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)\n    var x23 : Int = search(arg230)\n    var v23 : Int = 1\n    assert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \" + x23)\n\n    var arg240 : List[Int] = List(3, 10, 10, 9, 2)\n    var x24 : Int = search(arg240)\n    var v24 : Int = -1\n    assert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \" + x24)\n\n}\n", "description": "आपको सकारात्मक पूर्णांकों की एक गैर-खाली सूची दी जाती है। सबसे बड़ा पूर्णांक वापस करें जो उससे बड़ा है \nशून्य, और इसकी आवृत्ति पूर्णांक के मूल्य से अधिक या उसके बराबर होती है। \nएक पूर्णांक की आवृत्ति वह संख्या है जो वह सूची में कितनी बार दिखाई देती है। \nयदि ऐसा कोई मान मौजूद नहीं है, तो-1 वापस करें। \nउदाहरण के लिएः \nखोज ([4,1,2,2,3,1]) = = 2 \nखोज ([1,2,3,3,4,4]) = = 3 \nखोज ([5,5,4,4]) = =-1", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/29", "entry_point": "triangleArea", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var arg02 : Int = 5\n    var x0 : Double = triangleArea(arg00, arg01, arg02)\n    var v0 : Double = 6.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 10\n    var x1 : Double = triangleArea(arg10, arg11, arg12)\n    var v1 : Double = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 8\n    var arg22 : Int = 5\n    var x2 : Double = triangleArea(arg20, arg21, arg22)\n    var v2 : Double = 8.18\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 2\n    var arg31 : Int = 2\n    var arg32 : Int = 2\n    var x3 : Double = triangleArea(arg30, arg31, arg32)\n    var v3 : Double = 1.73\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 1\n    var arg41 : Int = 2\n    var arg42 : Int = 3\n    var x4 : Double = triangleArea(arg40, arg41, arg42)\n    var v4 : Double = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 10\n    var arg51 : Int = 5\n    var arg52 : Int = 7\n    var x5 : Double = triangleArea(arg50, arg51, arg52)\n    var v5 : Double = 16.25\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 2\n    var arg61 : Int = 6\n    var arg62 : Int = 3\n    var x6 : Double = triangleArea(arg60, arg61, arg62)\n    var v6 : Double = -1\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 1\n    var arg71 : Int = 1\n    var arg72 : Int = 1\n    var x7 : Double = triangleArea(arg70, arg71, arg72)\n    var v7 : Double = 0.43\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 2\n    var arg81 : Int = 2\n    var arg82 : Int = 10\n    var x8 : Double = triangleArea(arg80, arg81, arg82)\n    var v8 : Double = -1\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए। \nत्रिभुज को 2 दशमलव बिंदुओं पर गोल किया जाता है यदि तीनों भुजाएं एक वैध त्रिभुज बनाती हैं। \nअन्यथा वापसी-1 \nतीन भुजाएँ एक वैध त्रिभुज बनाती हैं जब किसी भी दो भुजाओं का योग अधिक होता है। \nतीसरे पक्ष की तुलना में। \nउदाहरणः \nत्रिभुज क्षेत्रफल (3,4,5) = = 6.00 \nत्रिभुज क्षेत्र (1,2,10) = =-1", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/30", "entry_point": "willItFly", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 3)\n    var arg01 : Int = 9\n    var x0 : Boolean = willItFly(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : Int = 5\n    var x1 : Boolean = willItFly(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3)\n    var arg21 : Int = 5\n    var x2 : Boolean = willItFly(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(3, 2, 3)\n    var arg31 : Int = 1\n    var x3 : Boolean = willItFly(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 2, 3)\n    var arg41 : Int = 6\n    var x4 : Boolean = willItFly(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(5)\n    var arg51 : Int = 5\n    var x5 : Boolean = willItFly(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "एक फलन लिखें जो सही बताता है यदि वस्तु q उड़ान भरेगी, और अन्यथा गलत। \nवस्तु q उड़ जाएगी यदि यह संतुलित है (यह एक पैलिन्ड्रोमिक सूची है) और इसके तत्वों का योग अधिकतम संभव वजन डब्ल्यू से कम या उसके बराबर है। \n\nउदाहरणः \nविल इट फ्लाई ([1,2], 5) ′ फाल्स \n#1 + 2 अधिकतम संभव वजन से कम है, लेकिन यह असंतुलित है। \n\nविल इट फ्लाई ([3,2,3], 1) ′ फाल्स \n#यह संतुलित है, लेकिन 3 + 2 + 3 अधिकतम संभव वजन से अधिक है। \n\nविल इट फ्लाई ([3,2,3], 9) सही है \n#3 + 2 + 3 अधिकतम संभव वजन से कम है, और यह संतुलित है। \n\nविल इट फ्लाई ([3], 5) ट्रू \n#3 अधिकतम संभव वजन से कम है, और यह संतुलित है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/31", "entry_point": "isMultiplyPrime", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Boolean = isMultiplyPrime(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 30\n    var x1 : Boolean = isMultiplyPrime(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Boolean = isMultiplyPrime(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 10\n    var x3 : Boolean = isMultiplyPrime(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 125\n    var x4 : Boolean = isMultiplyPrime(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 105\n    var x5 : Boolean = isMultiplyPrime(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 126\n    var x6 : Boolean = isMultiplyPrime(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 729\n    var x7 : Boolean = isMultiplyPrime(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 891\n    var x8 : Boolean = isMultiplyPrime(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1001\n    var x9 : Boolean = isMultiplyPrime(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n}\n", "description": "एक फलन लिखें जो सही लौटता है यदि दी गई संख्या 3 अभाज्य संख्याओं का गुणन है। \nऔर अन्यथा गलत। \nयह जानते हुए कि (ए) 100 से कम है। \nउदाहरणः \nक्या _ गुणा _ अभाज्य (30) = = सही है \n30 = 2 * 3 * 5", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/32", "entry_point": "decimalToBinary", "test": "\n\n    var arg00 : Int = 0\n    var x0 : String = decimalToBinary(arg00)\n    var v0 : String = \"\"\"db0db\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 32\n    var x1 : String = decimalToBinary(arg10)\n    var v1 : String = \"\"\"db100000db\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 103\n    var x2 : String = decimalToBinary(arg20)\n    var v2 : String = \"\"\"db1100111db\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 15\n    var x3 : String = decimalToBinary(arg30)\n    var v3 : String = \"\"\"db1111db\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "आपको दशमलव के रूप में एक संख्या दी जाएगी और आपका काम इसे में बदलना है \nद्विआधारी प्रारूप। फलन को एक स्ट्रिंग वापस करनी चाहिए, जिसमें प्रत्येक वर्ण द्विआधारी का प्रतिनिधित्व करता है। \nसंख्या. स्ट्रिंग में प्रत्येक वर्ण'0'या'1'होगा। \n\nस्ट्रिंग के शुरू में और अंत में कुछ अतिरिक्त वर्ण'db'होंगे। \nप्रारूप में मदद करने के लिए अतिरिक्त वर्ण हैं। \n\nउदाहरण के लिएः \nदशमलव से द्विआधारी (15) #\"db1111db\" बताता है \nदशमलव _ से _ द्विआधारी (32) #बताता है \"db100000db\"", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/33", "entry_point": "isHappy", "test": "\n\n    var arg00 : String = \"\"\"a\"\"\"\n    var x0 : Boolean = isHappy(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aa\"\"\"\n    var x1 : Boolean = isHappy(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = isHappy(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"aabb\"\"\"\n    var x3 : Boolean = isHappy(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"adb\"\"\"\n    var x4 : Boolean = isHappy(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"xyy\"\"\"\n    var x5 : Boolean = isHappy(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"iopaxpoi\"\"\"\n    var x6 : Boolean = isHappy(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"iopaxioi\"\"\"\n    var x7 : Boolean = isHappy(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n}\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nआपका काम यह जांचना है कि स्ट्रिंग खुश है या नहीं। \nएक स्ट्रिंग तब खुश होती है जब इसकी लंबाई कम से कम 3 हो और हर 3 लगातार अक्षर अलग-अलग हों। \nउदाहरण के लिएः \nखुश है (a) => गलत है \nखुश है (एए) => गलत है \nखुश है (ए. बी. सी. डी.) => सही है \nखुश है (आब्ब) => गलत है \nखुश है (ए. डी. बी.) => सच है \nखुश है (xyy) => गलत है", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/34", "entry_point": "numericalLetterGrade", "test": "\n\n    var arg00 : List[Double] = List(4.0, 3, 1.7, 2, 3.5)\n    var x0 : List[String] = numericalLetterGrade(arg00)\n    var v0 : List[String] = List(\"\"\"A+\"\"\", \"\"\"B\"\"\", \"\"\"C-\"\"\", \"\"\"C\"\"\", \"\"\"A-\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(1.2)\n    var x1 : List[String] = numericalLetterGrade(arg10)\n    var v1 : List[String] = List(\"\"\"D+\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(0.5)\n    var x2 : List[String] = numericalLetterGrade(arg20)\n    var v2 : List[String] = List(\"\"\"D-\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(0.0)\n    var x3 : List[String] = numericalLetterGrade(arg30)\n    var v3 : List[String] = List(\"\"\"E\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(1, 0.3, 1.5, 2.8, 3.3)\n    var x4 : List[String] = numericalLetterGrade(arg40)\n    var v4 : List[String] = List(\"\"\"D\"\"\", \"\"\"D-\"\"\", \"\"\"C-\"\"\", \"\"\"B\"\"\", \"\"\"B+\"\"\")\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Double] = List(0, 0.7)\n    var x5 : List[String] = numericalLetterGrade(arg50)\n    var v5 : List[String] = List(\"\"\"E\"\"\", \"\"\"D-\"\"\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "यह सेमेस्टर का अंतिम सप्ताह होता है और शिक्षक को अंक देने होते हैं। \nछात्रों के लिए। शिक्षक ग्रेडिंग के लिए अपना खुद का एल्गोरिदम बना रहे हैं। \nएकमात्र समस्या यह है कि उसने ग्रेडिंग के लिए उपयोग किया गया कोड खो दिया है। \nउन्होंने आपको कुछ छात्रों के लिए जी. पी. ए. की सूची दी है और आपको लिखना होगा। \nएक प्रकार्य जो निम्नलिखित तालिका का उपयोग करके अक्षर श्रेणी की सूची तैयार कर सकता हैः \nजी. पी. ए। लेटर ग्रेड \n4. 0 ए + \n> 3.7 ए \n> 3.3 ए-\n> 3 बी + \n> 2.7 बी \n> 2.3 बी-\n> 2 सी + \n> 1.7 डिग्री सेल्सियस \n> 1.3 सी-\n> 1 डी + \n> 0.7 डी \n> 0.0 डी-\n0. 0 ई \n\nउदाहरणः \nश्रेणी समीकरण ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/35", "entry_point": "primeLength", "test": "\n\n    var arg00 : String = \"\"\"Hello\"\"\"\n    var x0 : Boolean = primeLength(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdcba\"\"\"\n    var x1 : Boolean = primeLength(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"kittens\"\"\"\n    var x2 : Boolean = primeLength(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"orange\"\"\"\n    var x3 : Boolean = primeLength(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"wow\"\"\"\n    var x4 : Boolean = primeLength(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"world\"\"\"\n    var x5 : Boolean = primeLength(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"MadaM\"\"\"\n    var x6 : Boolean = primeLength(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"Wow\"\"\"\n    var x7 : Boolean = primeLength(arg70)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"\"\"\"\n    var x8 : Boolean = primeLength(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"HI\"\"\"\n    var x9 : Boolean = primeLength(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"go\"\"\"\n    var x10 : Boolean = primeLength(arg100)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"gogo\"\"\"\n    var x11 : Boolean = primeLength(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"aaaaaaaaaaaaaaa\"\"\"\n    var x12 : Boolean = primeLength(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : String = \"\"\"Madam\"\"\"\n    var x13 : Boolean = primeLength(arg130)\n    var v13 : Boolean = true\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : String = \"\"\"M\"\"\"\n    var x14 : Boolean = primeLength(arg140)\n    var v14 : Boolean = false\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : String = \"\"\"0\"\"\"\n    var x15 : Boolean = primeLength(arg150)\n    var v15 : Boolean = false\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n}\n", "description": "एक फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और सही लौटाता है यदि स्ट्रिंग \nलंबाई एक अभाज्य संख्या है या अन्यथा गलत है \nउदाहरण \nप्राइम लेंथ ('हैलो') = = सही \nप्राइम _ लेंथ ('एबीसीडीसीबीए') = = सही \nअभाज्य लंबाई ('बिल्ली के बच्चे') = = सही \nअभाज्य लंबाई ('नारंगी') = = गलत", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/36", "entry_point": "solve", "test": "\n\n    var arg00 : Int = 1000\n    var x0 : String = solve(arg00)\n    var v0 : String = \"\"\"1\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 150\n    var x1 : String = solve(arg10)\n    var v1 : String = \"\"\"110\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 147\n    var x2 : String = solve(arg20)\n    var v2 : String = \"\"\"1100\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 333\n    var x3 : String = solve(arg30)\n    var v3 : String = \"\"\"1001\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 963\n    var x4 : String = solve(arg40)\n    var v4 : String = \"\"\"10010\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "एक सकारात्मक पूर्णांक N दिए जाने पर, इसके अंकों का कुल योग द्विआधारी में वापस करें। \n\nउदाहरण \nएन = 1000 के लिए, अंकों का योग 1 होगा और आउटपुट \"1\" होना चाहिए। \nएन = 150 के लिए, अंकों का योग 6 होगा और आउटपुट \"110\" होना चाहिए। \nएन = 147 के लिए, अंकों का योग 12 होगा और आउटपुट \"1100\" होना चाहिए। \n\nचरः \n@N पूर्णांक \nबाधाएँः 0 ≤ एन ≤ 10000। \nआउटपुटः \nद्विआधारी संख्या की एक स्ट्रिंग", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/37", "entry_point": "getRow", "test": "\n\n    var arg00 : List[Any] = List()\n    var arg01 : Int = 1\n    var x0 : List[Any] = getRow(arg00, arg01)\n    var v0 : List[Any] = List()\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(1))\n    var arg11 : Int = 2\n    var x1 : List[Any] = getRow(arg10, arg11)\n    var v1 : List[Any] = List()\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(), List(1), List(1, 2, 3))\n    var arg21 : Int = 3\n    var x2 : List[Any] = getRow(arg20, arg21)\n    var v2 : List[Any] = List(List(2, 2))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n}\n", "description": "आपको एक 2 आयामी डेटा दिया जाता है, एक नेस्टेड सूची के रूप में, \nजो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, \nप्रत्येक पंक्ति में अलग-अलग संख्या में स्तंभ हो सकते हैं। \nपहले और पूर्णांक x को देखते हुए, सूची में पूर्णांक x खोजें, \nऔर टुपल्स की वापसी सूची, [(x1, y1), (x2, y2)...] जैसे कि \nप्रत्येक टुपल एक निर्देशांक है-(पंक्ति, कॉलम), जो 0 से शुरू होता है। \nनिर्देशांकों को प्रारंभ में पंक्तियों द्वारा आरोही क्रम में क्रमबद्ध करें। \nइसके अलावा, पंक्ति के निर्देशांक को स्तंभों द्वारा अवरोही क्रम में क्रमबद्ध करें। \n\nउदाहरण के लिएः \nपंक्ति प्राप्त करें (_ r) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nपंक्ति प्राप्त करें ([], 1) = = [] \nगेट _ रो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/38", "entry_point": "nextSmallest", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4, 5)\n    var x0 : Any = nextSmallest(arg00)\n    var v0 : Any = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 1, 4, 3, 2)\n    var x1 : Any = nextSmallest(arg10)\n    var v1 : Any = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List()\n    var x2 : Any = nextSmallest(arg20)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, 1)\n    var x3 : Any = nextSmallest(arg30)\n    var v3 : Any = \"none\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, 1, 1, 1, 0)\n    var x4 : Any = nextSmallest(arg40)\n    var v4 : Any = 1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1, 1)\n    var x5 : Any = nextSmallest(arg50)\n    var v5 : Any = \"none\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(-35, 34, 12, -45)\n    var x6 : Any = nextSmallest(arg60)\n    var v6 : Any = -35\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nएक फलन अगला _ सबसे छोटा () लिखें जो सूची का दूसरा सबसे छोटा तत्व देता है। \nशून्य लौटें यदि ऐसा कोई तत्व नहीं है। \n\nअगला _ सबसे छोटा ([1,2,3,4,5]) = = 2 \nअगला _ सबसे छोटा ([5,1,4,3,2]) = = 2 \nअगला _ सबसे छोटा ([]) = = कोई नहीं \nअगला _ सबसे छोटा ([1,1]) = = कोई नहीं", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/39", "entry_point": "isBored", "test": "\n\n    var arg00 : String = \"\"\"Hello world\"\"\"\n    var x0 : Int = isBored(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Is the sky blue?\"\"\"\n    var x1 : Int = isBored(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"I love It !\"\"\"\n    var x2 : Int = isBored(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"bIt\"\"\"\n    var x3 : Int = isBored(arg30)\n    var v3 : Int = 0\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"I feel good today. I will be productive. will kill It\"\"\"\n    var x4 : Int = isBored(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"You and I are going for a walk\"\"\"\n    var x5 : Int = isBored(arg50)\n    var v5 : Int = 0\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "आपको शब्दों की एक श्रृंखला दी जाएगी, और आपका काम संख्या को गिनना है। \nऊब का। ऊब एक वाक्य है जो \"मैं\" शब्द से शुरू होता है। \nवाक्यों को '.', '?'या '!'द्वारा सीमांकित किया जाता है। \n\nउदाहरण के लिएः \n>>> बोर हो गया है (\"हैलो वर्ल्ड\") \n0 \n>>> ऊब गया है (\"आकाश नीला है। सूरज चमक रहा है। मुझे यह मौसम पसंद है\") \n1.", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/40", "entry_point": "skjkasdkd", "test": "\n\n    var arg00 : List[Int] = List(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)\n    var x0 : Int = skjkasdkd(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)\n    var x1 : Int = skjkasdkd(arg10)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)\n    var x2 : Int = skjkasdkd(arg20)\n    var v2 : Int = 13\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)\n    var x3 : Int = skjkasdkd(arg30)\n    var v3 : Int = 11\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(0, 81, 12, 3, 1, 21)\n    var x4 : Int = skjkasdkd(arg40)\n    var v4 : Int = 3\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(0, 8, 1, 2, 1, 7)\n    var x5 : Int = skjkasdkd(arg50)\n    var v5 : Int = 7\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(8191)\n    var x6 : Int = skjkasdkd(arg60)\n    var v6 : Int = 19\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(8191, 123456, 127, 7)\n    var x7 : Int = skjkasdkd(arg70)\n    var v7 : Int = 19\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(127, 97, 8192)\n    var x8 : Int = skjkasdkd(arg80)\n    var v8 : Int = 10\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nआपको सबसे बड़ा अभाज्य मूल्य खोजने और उसके अंकों का योग वापस करने की आवश्यकता है। \n\nउदाहरण के लिएः \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] के लिए आउटपुट 10 होना चाहिए। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] के लिए आउटपुट 25 होना चाहिए। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] के लिए आउटपुट 13 होना चाहिए। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] के लिए आउटपुट 11 होना चाहिए। \nlst = [0,81,12, 3,1,21] के लिए आउटपुट 3 होना चाहिए। \nlst = [0,8,1, 2,1,7] के लिए आउटपुट 7 होना चाहिए।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/41", "entry_point": "checkDictCase", "test": "\n\n    var arg00 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", \"\"\"b\"\"\" -> \"\"\"banana\"\"\")\n    var x0 : Boolean = checkDictCase(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", \"\"\"A\"\"\" -> \"\"\"banana\"\"\", \"\"\"B\"\"\" -> \"\"\"banana\"\"\")\n    var x1 : Boolean = checkDictCase(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", 5 -> \"\"\"banana\"\"\", \"\"\"a\"\"\" -> \"\"\"apple\"\"\")\n    var x2 : Boolean = checkDictCase(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Map[Any, Any] = Map(\"\"\"Name\"\"\" -> \"\"\"John\"\"\", \"\"\"Age\"\"\" -> \"\"\"36\"\"\", \"\"\"City\"\"\" -> \"\"\"Houston\"\"\")\n    var x3 : Boolean = checkDictCase(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Map[Any, Any] = Map(\"\"\"STATE\"\"\" -> \"\"\"NC\"\"\", \"\"\"ZIP\"\"\" -> \"\"\"12345\"\"\")\n    var x4 : Boolean = checkDictCase(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Map[Any, Any] = Map(\"\"\"fruit\"\"\" -> \"\"\"Orange\"\"\", \"\"\"taste\"\"\" -> \"\"\"Sweet\"\"\")\n    var x5 : Boolean = checkDictCase(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Map[Any, Any] = Map()\n    var x6 : Boolean = checkDictCase(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "शब्दकोश दिए जाने पर, सही वापस करें यदि सभी कुंजी निचले हिस्से में स्ट्रिंग हैं \nकेस या सभी कुंजी ऊपरी मामले में स्ट्रिंग हैं, अन्यथा गलत लौटें। \nफ़ंक्शन को वापस करना चाहिए गलत है दिया गया शब्दकोश खाली है। \nउदाहरण के लिएः \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"b\": \"केला\"}) को सही लौटना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"A\": \"केला\", \"B\": \"केला\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", 8: \"केला\", \"a\": \"सेब\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"नाम\": \"जॉन\", \"आयु\": \"36\", \"सिटी\": \"ह्यूस्टन\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) को सही लौटना चाहिए।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/42", "entry_point": "closestInteger", "test": "\n\n    var arg00 : String = \"\"\"10\"\"\"\n    var x0 : Int = closestInteger(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"14.5\"\"\"\n    var x1 : Int = closestInteger(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"-15.5\"\"\"\n    var x2 : Int = closestInteger(arg20)\n    var v2 : Int = -16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"15.3\"\"\"\n    var x3 : Int = closestInteger(arg30)\n    var v3 : Int = 15\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"0\"\"\"\n    var x4 : Int = closestInteger(arg40)\n    var v4 : Int = 0\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "एक फ़ंक्शन बनाएँ जो एक संख्या का प्रतिनिधित्व करने वाला मान (स्ट्रिंग) लेता है \nऔर निकटतम पूर्णांक देता है। यदि संख्या समान दूरी पर है। \nदो पूर्णांकों से, इसे शून्य से दूर गोल करें। \n\nउदाहरण \n>>> निकटतम पूर्णांक (\"10\") \n10. \n>>> निकटतम पूर्णांक (\"15.3\") \n15. \n\nध्यान देंः \nशून्य से दूर गोल करने का अर्थ है कि यदि दी गई संख्या समान दूरी पर है \nदो पूर्णांकों से, जिसे आपको वापस करना चाहिए वह वह है जो \nशून्य से सबसे दूर। उदाहरण के लिए निकटतम पूर्णांक (\"14.5\") चाहिए \n15 वापस करें और निकटतम पूर्णांक (\"-14.5\") को-15 वापस करना चाहिए।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/43", "entry_point": "makeAPile", "test": "\n\n    var arg00 : Int = 3\n    var x0 : List[Int] = makeAPile(arg00)\n    var v0 : List[Int] = List(3, 5, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : List[Int] = makeAPile(arg10)\n    var v1 : List[Int] = List(4, 6, 8, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : List[Int] = makeAPile(arg20)\n    var v2 : List[Int] = List(5, 7, 9, 11, 13)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 6\n    var x3 : List[Int] = makeAPile(arg30)\n    var v3 : List[Int] = List(6, 8, 10, 12, 14, 16)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 8\n    var x4 : List[Int] = makeAPile(arg40)\n    var v4 : List[Int] = List(8, 10, 12, 14, 16, 18, 20, 22)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "एक सकारात्मक पूर्णांक n को देखते हुए, आपको पत्थरों के n स्तरों का ढेर बनाना होगा। \nपहले स्तर में एन पत्थर हैं। \nअगले स्तर पर पत्थरों की संख्या हैः \n- अगली विषम संख्या यदि n विषम है। \n- अगली सम संख्या यदि n सम है। \nसूची में प्रत्येक स्तर पर पत्थरों की संख्या वापस करें, जहां सूचकांक पर तत्व है \ni स्तर (i + 1) में पत्थरों की संख्या का प्रतिनिधित्व करता है। \n\nउदाहरण के लिएः \n>>> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3,5,7]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/44", "entry_point": "wordsString", "test": "\n\n    var arg00 : String = \"\"\"Hi, my name is John\"\"\"\n    var x0 : List[Any] = wordsString(arg00)\n    var v0 : List[Any] = List(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\", \"\"\"is\"\"\", \"\"\"John\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"One, two, three, four, five, six\"\"\"\n    var x1 : List[Any] = wordsString(arg10)\n    var v1 : List[Any] = List(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Hi, my name\"\"\"\n    var x2 : List[Any] = wordsString(arg20)\n    var v2 : List[Any] = List(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"One,, two, three, four, five, six,\"\"\"\n    var x3 : List[Any] = wordsString(arg30)\n    var v3 : List[Any] = List(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"\"\"\"\n    var x4 : List[Any] = wordsString(arg40)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"ahmed     , gamal\"\"\"\n    var x5 : List[Any] = wordsString(arg50)\n    var v5 : List[Any] = List(\"\"\"ahmed\"\"\", \"\"\"gamal\"\"\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "आपको अल्पविराम या रिक्त स्थान द्वारा अलग किए गए शब्दों की एक श्रृंखला दी जाएगी। आपका कार्य है \nस्ट्रिंग को शब्दों में विभाजित करने और शब्दों की एक सरणी वापस करने के लिए। \n\nउदाहरण के लिएः \nशब्द _ स्ट्रिंग (\"हाय, मेरा नाम जॉन है\") = = [\"हाय\", \"मेरा\", \"नाम\", \"है\", \"जॉन\"] \nशब्द _ स्ट्रिंग (\"एक, दो, तीन, चार, पांच, छह\") = = [\"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\"]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/45", "entry_point": "chooseNum", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : Int = 15\n    var x0 : Int = chooseNum(arg00, arg01)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 13\n    var arg11 : Int = 12\n    var x1 : Int = chooseNum(arg10, arg11)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 33\n    var arg21 : Int = 12354\n    var x2 : Int = chooseNum(arg20, arg21)\n    var v2 : Int = 12354\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5234\n    var arg31 : Int = 5233\n    var x3 : Int = chooseNum(arg30, arg31)\n    var v3 : Int = -1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 6\n    var arg41 : Int = 29\n    var x4 : Int = chooseNum(arg40, arg41)\n    var v4 : Int = 28\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 27\n    var arg51 : Int = 10\n    var x5 : Int = chooseNum(arg50, arg51)\n    var v5 : Int = -1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 7\n    var arg61 : Int = 7\n    var x6 : Int = chooseNum(arg60, arg61)\n    var v6 : Int = -1\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 546\n    var arg71 : Int = 546\n    var x7 : Int = chooseNum(arg70, arg71)\n    var v7 : Int = 546\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n}\n", "description": "यह फलन दो धनात्मक संख्याएँ x और y लेता है और वापस करता है \nसबसे बड़ी सम पूर्णांक संख्या जो [x, y] समावेशी सीमा में है। यदि \nऐसी कोई संख्या नहीं है, तो फ़ंक्शन-1 लौटना चाहिए। \n\nउदाहरण के लिएः \nचुनें (12,15) = 14 \nचुनें (13,12) =-1", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/46", "entry_point": "roundedAvg", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var x0 : Any = roundedAvg(arg00, arg01)\n    var v0 : Any = \"\"\"0b11\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var arg11 : Int = 13\n    var x1 : Any = roundedAvg(arg10, arg11)\n    var v1 : Any = \"\"\"0b1010\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 964\n    var arg21 : Int = 977\n    var x2 : Any = roundedAvg(arg20, arg21)\n    var v2 : Any = \"\"\"0b1111001010\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 996\n    var arg31 : Int = 997\n    var x3 : Any = roundedAvg(arg30, arg31)\n    var v3 : Any = \"\"\"0b1111100100\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 560\n    var arg41 : Int = 851\n    var x4 : Any = roundedAvg(arg40, arg41)\n    var v4 : Any = \"\"\"0b1011000010\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 185\n    var arg51 : Int = 546\n    var x5 : Any = roundedAvg(arg50, arg51)\n    var v5 : Any = \"\"\"0b101101110\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 362\n    var arg61 : Int = 496\n    var x6 : Any = roundedAvg(arg60, arg61)\n    var v6 : Any = \"\"\"0b110101101\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 350\n    var arg71 : Int = 902\n    var x7 : Any = roundedAvg(arg70, arg71)\n    var v7 : Any = \"\"\"0b1001110010\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 197\n    var arg81 : Int = 233\n    var x8 : Any = roundedAvg(arg80, arg81)\n    var v8 : Any = \"\"\"0b11010111\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 7\n    var arg91 : Int = 5\n    var x9 : Any = roundedAvg(arg90, arg91)\n    var v9 : Any = -1\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 5\n    var arg101 : Int = 1\n    var x10 : Any = roundedAvg(arg100, arg101)\n    var v10 : Any = -1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 5\n    var arg111 : Int = 5\n    var x11 : Any = roundedAvg(arg110, arg111)\n    var v11 : Any = \"\"\"0b101\"\"\"\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n}\n", "description": "आपको दो सकारात्मक पूर्णांक n और m दिए गए हैं, और आपका कार्य गणना करना है \nn से m तक के पूर्णांकों का औसत (n और m सहित)। \nनिकटतम पूर्णांक के उत्तर को गोल करें और उसे द्विआधारी में परिवर्तित करें। \nयदि n, m से बड़ा है, तो-1 वापस करें। \nउदाहरणः \nगोलाकार _ ए. वी. जी. (1,5) => \"0बी11\" \nगोलाकार _ ए. वी. जी. (7,5) =>-1 \nगोलाकार _ ए. वी. जी. (10,20) => \"0बी1111\" \nगोलाकार _ ए. वी. जी. (20,33) => \"0बी11010\"", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/47", "entry_point": "f", "test": "\n\n    var arg00 : Int = 5\n    var x0 : List[Int] = f(arg00)\n    var v0 : List[Int] = List(1, 2, 6, 24, 15)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : List[Int] = f(arg10)\n    var v1 : List[Int] = List(1, 2, 6, 24, 15, 720, 28)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : List[Int] = f(arg20)\n    var v2 : List[Int] = List(1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 3\n    var x3 : List[Int] = f(arg30)\n    var v3 : List[Int] = List(1, 2, 6)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "फलन f को लागू करें जो n को एक पैरामीटर के रूप में लेता है, \nऔर आकार n की एक सूची लौटाता है, जैसे कि सूचकांक i पर तत्व का मान i का भाज्य है यदि i सम है \nया अन्यथा 1 से i तक की संख्याओं का योग। \nमैं 1 से शुरू करता हूँ। \ni का भाज्य 1 से i (1 * 2 *... * i) तक की संख्याओं का गुणन है। \nउदाहरणः \nf (5) = = [1,2,6,24,15]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/48", "entry_point": "evenOddPalindrome", "test": "\n\n    var arg00 : Int = 123\n    var x0 : List[Int] = evenOddPalindrome(arg00)\n    var v0 : List[Int] = List(8, 13)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : List[Int] = evenOddPalindrome(arg10)\n    var v1 : List[Int] = List(4, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : List[Int] = evenOddPalindrome(arg20)\n    var v2 : List[Int] = List(1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 63\n    var x3 : List[Int] = evenOddPalindrome(arg30)\n    var v3 : List[Int] = List(6, 8)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 25\n    var x4 : List[Int] = evenOddPalindrome(arg40)\n    var v4 : List[Int] = List(5, 6)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 19\n    var x5 : List[Int] = evenOddPalindrome(arg50)\n    var v5 : List[Int] = List(4, 6)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 9\n    var x6 : List[Int] = evenOddPalindrome(arg60)\n    var v6 : List[Int] = List(4, 5)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 1\n    var x7 : List[Int] = evenOddPalindrome(arg70)\n    var v7 : List[Int] = List(0, 1)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n}\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, एक टुपल वापस करें जिसमें सम और विषम की संख्या हो। \nपूर्णांक पालिंड्रोम जो सीमा (1, एन) के भीतर आते हैं, समावेशी। \n\nउदाहरण 1: \n\nइनपुटः 3 \nआउटपुटः (1,2) \nव्याख्याः \nपूर्णांक पालिंड्रोम 1,2,3 हैं. उनमें से एक सम है, और उनमें से दो विषम हैं। \n\nउदाहरण 2: \n\nइनपुटः 12 \nआउटपुटः (4,6) \nव्याख्याः \nपूर्णांक पालिंड्रोम हैं 1,2,3,4,5,6,7,8,9,11. उनमें से चार सम हैं, और उनमें से 6 विषम हैं। \n\nध्यान देंः \n1. 1 <= n <= 10 ^ 3 \n2. लौटाए गए टुपल में क्रमशः सम और विषम पूर्णांक पालिंड्रोम्स की संख्या होती है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/49", "entry_point": "moveOneBall", "test": "\n\n    var arg00 : List[Any] = List(3, 4, 5, 1, 2)\n    var x0 : Boolean = moveOneBall(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(3, 5, 10, 1, 2)\n    var x1 : Boolean = moveOneBall(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(4, 3, 1, 2)\n    var x2 : Boolean = moveOneBall(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(3, 5, 4, 1, 2)\n    var x3 : Boolean = moveOneBall(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List()\n    var x4 : Boolean = moveOneBall(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "हमारे पास एन पूर्णांक arr [1], arr [2],..., arr [N] की एक सरणी'arr'है। \nसरणी में संख्याओं को यादृच्छिक रूप से क्रमबद्ध किया जाएगा। आपका कार्य यह निर्धारित करना है कि क्या \nप्रदर्शन करके गैर-घटते क्रम में एक सरणी को क्रमबद्ध करना संभव है। \nदिए गए सरणी पर निम्नलिखित ऑपरेशनः \nआपको किसी भी समय सही शिफ्ट ऑपरेशन करने की अनुमति है। \n\nएक राइट शिफ्ट ऑपरेशन का अर्थ है सरणी के सभी तत्वों को एक से स्थानांतरित करना। \nसही दिशा में स्थिति। सरणी के अंतिम तत्व को स्थानांतरित किया जाएगा \nसरणी में प्रारंभिक स्थिति अर्थात 0 वां सूचकांक। \n\nयदि उपरोक्त ऑपरेशन करके क्रमबद्ध सरणी प्राप्त करना संभव है \nफिर सही लौटें अन्यथा गलत लौटें। \nयदि दी गई सरणी खाली है तो सही वापस करें। \n\nनोटः दी गई सूची में अद्वितीय तत्व होने की गारंटी है। \n\nउदाहरण के लिएः \n\nमूव _ वन _ बॉल ([3,4,5,1,2]) = => सही \nव्याख्याः 2 सही शिफ्ट संचालन में प्रदर्शन करके, गैर-घटता क्रम कर सकता है \nदिए गए सरणी के लिए प्राप्त किया जा सकता है। \nमूव _ वन _ बॉल ([3,5,4,1,2]) = => गलत \nव्याख्याः दिए गए के लिए गैर-घटता आदेश प्राप्त करना संभव नहीं है। \nकिसी भी संख्या में सही शिफ्ट संचालन करके सरणी।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/50", "entry_point": "exchange", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var arg01 : List[Int] = List(1, 2, 3, 4)\n    var x0 : String = exchange(arg00, arg01)\n    var v0 : String = \"\"\"YES\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(1, 5, 3, 4)\n    var x1 : String = exchange(arg10, arg11)\n    var v1 : String = \"\"\"NO\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var arg21 : List[Int] = List(2, 1, 4, 3)\n    var x2 : String = exchange(arg20, arg21)\n    var v2 : String = \"\"\"YES\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(5, 7, 3)\n    var arg31 : List[Int] = List(2, 6, 4)\n    var x3 : String = exchange(arg30, arg31)\n    var v3 : String = \"\"\"YES\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(5, 7, 3)\n    var arg41 : List[Int] = List(2, 6, 3)\n    var x4 : String = exchange(arg40, arg41)\n    var v4 : String = \"\"\"NO\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(3, 2, 6, 1, 8, 9)\n    var arg51 : List[Int] = List(3, 5, 5, 1, 1, 1)\n    var x5 : String = exchange(arg50, arg51)\n    var v5 : String = \"\"\"NO\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(100, 200)\n    var arg61 : List[Int] = List(200, 200)\n    var x6 : String = exchange(arg60, arg61)\n    var v6 : String = \"\"\"YES\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "इस समस्या में, आप एक फ़ंक्शन लागू करेंगे जो संख्याओं की दो सूचियाँ लेता है, \nऔर यह निर्धारित करता है कि क्या तत्वों का आदान-प्रदान करना संभव है \nउनके बीच lst1 को केवल सम संख्याओं की सूची बनाने के लिए। \nlst1 और lst2 के बीच आदान-प्रदान किए गए तत्वों की संख्या की कोई सीमा नहीं है। \nयदि बनाने के लिए lst1 और lst2 के बीच तत्वों का आदान-प्रदान करना संभव है \nlst1 के सभी तत्वों को सम होने के लिए, \"हाँ\" वापस करें। \nअन्यथा, \"नहीं\" वापस करें। \nउदाहरण के लिएः \nविनिमय ([1,2,3,4], [1,2,3,4]) => \"हाँ\" \nविनिमय ([1,2,3,4], [1,5,3,4]) => \"नहीं\" \nयह माना जाता है कि इनपुट सूचियाँ खाली नहीं होंगी।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/51", "entry_point": "reverseDelete", "test": "\n\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var arg01 : String = \"\"\"ae\"\"\"\n    var x0 : List[Any] = reverseDelete(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"bcd\"\"\", false)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdef\"\"\"\n    var arg11 : String = \"\"\"b\"\"\"\n    var x1 : List[Any] = reverseDelete(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"acdef\"\"\", false)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcdedcba\"\"\"\n    var arg21 : String = \"\"\"ab\"\"\"\n    var x2 : List[Any] = reverseDelete(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"cdedc\"\"\", true)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"dwik\"\"\"\n    var arg31 : String = \"\"\"w\"\"\"\n    var x3 : List[Any] = reverseDelete(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"dik\"\"\", false)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"a\"\"\"\n    var arg41 : String = \"\"\"a\"\"\"\n    var x4 : List[Any] = reverseDelete(arg40, arg41)\n    var v4 : List[Any] = List(\"\"\"\"\"\", true)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"abcdedcba\"\"\"\n    var arg51 : String = \"\"\"\"\"\"\n    var x5 : List[Any] = reverseDelete(arg50, arg51)\n    var v5 : List[Any] = List(\"\"\"abcdedcba\"\"\", true)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"abcdedcba\"\"\"\n    var arg61 : String = \"\"\"v\"\"\"\n    var x6 : List[Any] = reverseDelete(arg60, arg61)\n    var v6 : List[Any] = List(\"\"\"abcdedcba\"\"\", true)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"vabba\"\"\"\n    var arg71 : String = \"\"\"v\"\"\"\n    var x7 : List[Any] = reverseDelete(arg70, arg71)\n    var v7 : List[Any] = List(\"\"\"abba\"\"\", true)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"mamma\"\"\"\n    var arg81 : String = \"\"\"mia\"\"\"\n    var x8 : List[Any] = reverseDelete(arg80, arg81)\n    var v8 : List[Any] = List(\"\"\"\"\"\", true)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "कार्य \nहमें दो स्ट्रिंग s और c दिए गए हैं, आपको s में सभी वर्णों को हटाना होगा जो c में किसी भी वर्ण के बराबर हैं। \nफिर जाँच करें कि परिणाम स्ट्रिंग पालिंड्रोम है या नहीं। \nएक तार को पालिंड्रोम कहा जाता है यदि यह आगे के समान पीछे की ओर पढ़ता है। \nआपको चेक के लिए परिणाम स्ट्रिंग और सही/गलत वाला एक टुपल वापस करना चाहिए। \nउदाहरण \nएस = \"एबीसीडी\", सी = \"एई\" के लिए, परिणाम होना चाहिए ('बीसीडी', गलत) \nएस = \"एबीसीडीएफ\" के लिए, सी = \"बी\" परिणाम होना चाहिए ('एसीडीएफ', गलत) \ns = \"abcdedcba\", c = \"ab\" के लिए, परिणाम होना चाहिए ('cdedc', सही)", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/52", "entry_point": "maxFill", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0, 0, 1, 0), List(0, 1, 0, 0), List(1, 1, 1, 1))\n    var arg01 : Int = 1\n    var x0 : Int = maxFill(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(0, 0, 1, 1), List(0, 0, 0, 0), List(1, 1, 1, 1), List(0, 1, 1, 1))\n    var arg11 : Int = 2\n    var x1 : Int = maxFill(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(0, 0, 0), List(0, 0, 0))\n    var arg21 : Int = 5\n    var x2 : Int = maxFill(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[List[Int]] = List(List(1, 1, 1, 1), List(1, 1, 1, 1))\n    var arg31 : Int = 2\n    var x3 : Int = maxFill(arg30, arg31)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[List[Int]] = List(List(1, 1, 1, 1), List(1, 1, 1, 1))\n    var arg41 : Int = 9\n    var x4 : Int = maxFill(arg40, arg41)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "आपको कुओं का एक आयताकार ग्रिड दिया जाता है। प्रत्येक पंक्ति एक कुएं का प्रतिनिधित्व करती है, \nऔर एक पंक्ति में प्रत्येक 1 पानी की एक इकाई का प्रतिनिधित्व करता है। \nप्रत्येक कुएँ में एक संबंधित बाल्टी होती है जिसका उपयोग उससे पानी निकालने के लिए किया जा सकता है। \nऔर सभी बाल्टियों में समान क्षमता होती है। \nआपका काम कुओं को खाली करने के लिए बाल्टियों का उपयोग करना है। \nजितनी बार आपको बाल्टियों को कम करने की आवश्यकता होगी, उसे आउटपुट करें। \n\nउदाहरण 1: \nइनपुटः \nग्रिडः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nबाल्टी क्षमताः 1 \nआउटपुटः 6 \n\nउदाहरण 2: \nइनपुटः \nग्रिडः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1]] \nबाल्टी क्षमताः 2 \nआउटपुटः 5 \n\nउदाहरण 3: \nइनपुटः \nग्रिडः [0,0,0], [0,0,0] \nबाल्टी क्षमताः 5 \nआउटपुटः 0 \n\nअड़चनेंः \n* सभी कुओं की लंबाई समान होती है। \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ग्रिड [:, 1]. लंबाई <= 10 ^ 2 \nग्रिड [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/53", "entry_point": "selectWords", "test": "\n\n    var arg00 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg01 : Int = 4\n    var x0 : List[Any] = selectWords(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"little\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg11 : Int = 3\n    var x1 : List[Any] = selectWords(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"Mary\"\"\", \"\"\"lamb\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"simple white space\"\"\"\n    var arg21 : Int = 2\n    var x2 : List[Any] = selectWords(arg20, arg21)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Hello world\"\"\"\n    var arg31 : Int = 4\n    var x3 : List[Any] = selectWords(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"world\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Uncle sam\"\"\"\n    var arg41 : Int = 3\n    var x4 : List[Any] = selectWords(arg40, arg41)\n    var v4 : List[Any] = List(\"\"\"Uncle\"\"\")\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"\"\"\"\n    var arg51 : Int = 4\n    var x5 : List[Any] = selectWords(arg50, arg51)\n    var v5 : List[Any] = List()\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"a b c d e f\"\"\"\n    var arg61 : Int = 1\n    var x6 : List[Any] = selectWords(arg60, arg61)\n    var v6 : List[Any] = List(\"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"f\"\"\")\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "एक स्ट्रिंग s और एक प्राकृतिक संख्या n को देखते हुए, आपको इसे लागू करने का काम सौंपा गया है। \nएक प्रकार्य जो स्ट्रिंग एस से सभी शब्दों की एक सूची देता है जिसमें ठीक-ठीक शब्द होते हैं \nएन व्यंजन, क्रम में ये शब्द स्ट्रिंग एस में दिखाई देते हैं। \nयदि स्ट्रिंग s खाली है तो फ़ंक्शन को एक खाली सूची वापस करनी चाहिए। \nनोटः आप मान सकते हैं कि इनपुट स्ट्रिंग में केवल अक्षर और रिक्त स्थान हैं। \nउदाहरण के लिएः \nशब्द चुनें (\"मैरी के पास एक छोटा भेड़ का बच्चा था\", 4) = => [\"छोटा\"] \nशब्द चुनें (\"मैरी का एक छोटा भेड़ का बच्चा था\", 3) = => [\"मैरी\", \"भेड़ का बच्चा\"] \nशब्द चुनें (\"साधारण सफेद स्थान\", 2) = => [] \nशब्द चुनें (\"हैलो वर्ल्ड\", 4) = => [\"वर्ल्ड\"] \nशब्द चुनें (\"अंकल सैम\", 3) = => [\"अंकल\"]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/54", "entry_point": "maximum", "test": "\n\n    var arg00 : List[Int] = List(-3, -4, 5)\n    var arg01 : Int = 3\n    var x0 : List[Any] = maximum(arg00, arg01)\n    var v0 : List[Any] = List(-4, -3, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, -4, 4)\n    var arg11 : Int = 2\n    var x1 : List[Any] = maximum(arg10, arg11)\n    var v1 : List[Any] = List(4, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-3, 2, 1, 2, -1, -2, 1)\n    var arg21 : Int = 1\n    var x2 : List[Any] = maximum(arg20, arg21)\n    var v2 : List[Any] = List(2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(123, -123, 20, 0, 1, 2, -3)\n    var arg31 : Int = 3\n    var x3 : List[Any] = maximum(arg30, arg31)\n    var v3 : List[Any] = List(2, 20, 123)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(-123, 20, 0, 1, 2, -3)\n    var arg41 : Int = 4\n    var x4 : List[Any] = maximum(arg40, arg41)\n    var v4 : List[Any] = List(0, 1, 2, 20)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(5, 15, 0, 3, -13, -8, 0)\n    var arg51 : Int = 7\n    var x5 : List[Any] = maximum(arg50, arg51)\n    var v5 : List[Any] = List(-13, -8, 0, 0, 3, 5, 15)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(-1, 0, 2, 5, 3, -10)\n    var arg61 : Int = 2\n    var x6 : List[Any] = maximum(arg60, arg61)\n    var v6 : List[Any] = List(3, 5)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(1, 0, 5, -7)\n    var arg71 : Int = 1\n    var x7 : List[Any] = maximum(arg70, arg71)\n    var v7 : List[Any] = List(5)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(4, -4)\n    var arg81 : Int = 2\n    var x8 : List[Any] = maximum(arg80, arg81)\n    var v8 : List[Any] = List(-4, 4)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Int] = List(-10, 10)\n    var arg91 : Int = 2\n    var x9 : List[Any] = maximum(arg90, arg91)\n    var v9 : List[Any] = List(-10, 10)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Int] = List(1, 2, 3, -23, 243, -400, 0)\n    var arg101 : Int = 0\n    var x10 : List[Any] = maximum(arg100, arg101)\n    var v10 : List[Any] = List()\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n}\n", "description": "पूर्णांकों की एक सरणी arr और एक सकारात्मक पूर्णांक k दिए जाने पर, एक क्रमबद्ध सूची वापस करें \nए. आर. आर. में अधिकतम के संख्याओं के साथ लंबाई के. \n\nउदाहरण 1: \n\nइनपुटः arr = [-3,-4,5], k = 3 \nआउटपुटः [-4,-3,5] \n\nउदाहरण 2: \n\nइनपुटः arr = [4,-4,4], k = 2 \nआउटपुटः [4,4] \n\nउदाहरण 3: \n\nइनपुटः arr = [-3,2,1,2,-1,2,1], k = 1 \nआउटपुटः [2] \n\nध्यान देंः \n1. सरणी की लंबाई [1000] की सीमा में होगी। \n2. सरणी में तत्व [-1000] की सीमा में होंगे। \n3. 0 <= k <= लेन (arr)", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/55", "entry_point": "addElements", "test": "\n\n    var arg00 : List[Int] = List(1, -2, -3, 41, 57, 76, 87, 88, 99)\n    var arg01 : Int = 3\n    var x0 : Int = addElements(arg00, arg01)\n    var v0 : Int = -4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(111, 121, 3, 4000, 5, 6)\n    var arg11 : Int = 2\n    var x1 : Int = addElements(arg10, arg11)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 21, 3, 90, 5, 6, 7, 8, 9)\n    var arg21 : Int = 4\n    var x2 : Int = addElements(arg20, arg21)\n    var v2 : Int = 125\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    var arg31 : Int = 4\n    var x3 : Int = addElements(arg30, arg31)\n    var v3 : Int = 24\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var arg41 : Int = 1\n    var x4 : Int = addElements(arg40, arg41)\n    var v4 : Int = 1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "पूर्णांक एआरआर और एक पूर्णांक के की एक गैर-खाली सरणी को देखते हुए, वापस करें \narr के पहले k तत्वों से अधिकतम दो अंकों वाले तत्वों का योग। \n\nउदाहरणः \n\nइनपुटः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nआउटपुटः 24 #21 + 3 का योग \n\nअड़चनेंः \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/56", "entry_point": "intersection", "test": "\n\n    var arg00 : List[Int] = List(1, 2)\n    var arg01 : List[Int] = List(2, 3)\n    var x0 : String = intersection(arg00, arg01)\n    var v0 : String = \"\"\"NO\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 1)\n    var arg11 : List[Int] = List(0, 4)\n    var x1 : String = intersection(arg10, arg11)\n    var v1 : String = \"\"\"NO\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-3, -1)\n    var arg21 : List[Int] = List(-5, 5)\n    var x2 : String = intersection(arg20, arg21)\n    var v2 : String = \"\"\"YES\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(-2, 2)\n    var arg31 : List[Int] = List(-4, 0)\n    var x3 : String = intersection(arg30, arg31)\n    var v3 : String = \"\"\"YES\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(-11, 2)\n    var arg41 : List[Int] = List(-1, -1)\n    var x4 : String = intersection(arg40, arg41)\n    var v4 : String = \"\"\"NO\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(1, 2)\n    var arg51 : List[Int] = List(3, 5)\n    var x5 : String = intersection(arg50, arg51)\n    var v5 : String = \"\"\"NO\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(1, 2)\n    var arg61 : List[Int] = List(1, 2)\n    var x6 : String = intersection(arg60, arg61)\n    var v6 : String = \"\"\"NO\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(-2, -2)\n    var arg71 : List[Int] = List(-3, -2)\n    var x7 : String = intersection(arg70, arg71)\n    var v7 : String = \"\"\"NO\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n}\n", "description": "आपको दो अंतराल दिए जाते हैं, \nजहाँ प्रत्येक अंतराल पूर्णांकों का एक जोड़ा है। उदाहरण के लिए, अंतराल = (प्रारंभ, अंत) = (1,2)। \nदिए गए अंतराल बंद होते हैं जिसका अर्थ है कि अंतराल (प्रारंभ, अंत) \nइसमें शुरुआत और अंत दोनों शामिल हैं। \nप्रत्येक दिए गए अंतराल के लिए, यह माना जाता है कि इसकी शुरुआत कम या इसके अंत के बराबर है। \nआपका काम यह निर्धारित करना है कि इन दोनों के प्रतिच्छेदन की लंबाई कितनी है। \nअंतराल एक अभाज्य संख्या है। \nउदाहरण के लिए, अंतराल (1,3), (2,4) का प्रतिच्छेदन (2,3) है। \nजिसकी लंबाई 1 है, जो एक अभाज्य संख्या नहीं है। \nयदि प्रतिच्छेदन की लंबाई एक अभाज्य संख्या है, तो \"हाँ\" वापस करें, \nअन्यथा, \"नहीं\" वापस करें। \nयदि दोनों अंतराल एक दूसरे को नहीं काटते हैं, तो \"नहीं\" वापस करें। \n\n[इनपुट/आउटपुट] नमूनेः \nप्रतिच्छेदन ((1,2,3)) = => \"नहीं\" \nप्रतिच्छेदन ((-1,1), (0,4)) = => \"नहीं\" \nप्रतिच्छेदन ((-3,-1), (-5,5)) = => \"हाँ\"", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/57", "entry_point": "tri", "test": "\n\n    var arg00 : Int = 3\n    var x0 : List[Double] = tri(arg00)\n    var v0 : List[Double] = List(1, 3, 2.0, 8.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : List[Double] = tri(arg10)\n    var v1 : List[Double] = List(1, 3, 2.0, 8.0, 3.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : List[Double] = tri(arg20)\n    var v2 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 6\n    var x3 : List[Double] = tri(arg30)\n    var v3 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var x4 : List[Double] = tri(arg40)\n    var v4 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 8\n    var x5 : List[Double] = tri(arg50)\n    var v5 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 9\n    var x6 : List[Double] = tri(arg60)\n    var v6 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 20\n    var x7 : List[Double] = tri(arg70)\n    var v7 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 0\n    var x8 : List[Double] = tri(arg80)\n    var v8 : List[Double] = List(1)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1\n    var x9 : List[Double] = tri(arg90)\n    var v9 : List[Double] = List(1, 3)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n}\n", "description": "हर कोई फिबोनाची अनुक्रम को जानता है, इसका गणितविदों द्वारा गहराई से अध्ययन किया गया था \nपिछली कुछ शताब्दियाँ। हालाँकि, लोग जो नहीं जानते हैं वह है ट्रिबोनाची अनुक्रम। \nट्राइबोनाची अनुक्रम को पुनरावृत्ति द्वारा परिभाषित किया जाता हैः \nत्रि (1) = 3 \nत्रि (एन) = 1 + एन/2, यदि एन सम है। \nयदि n विषम है तो त्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1)। \nउदाहरण के लिएः \nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nआपको एक गैर-नकारात्मक पूर्णांक संख्या n दी गई है, आपको एक सूची वापस करनी होगी \nट्रिबोनाची अनुक्रम की पहली n + 1 संख्याएँ। \nउदाहरण के लिएः \nत्रि (3) = [1,3,2,8]", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/58", "entry_point": "digits", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = digits(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 54\n    var x1 : Int = digits(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Int = digits(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5014\n    var x3 : Int = digits(arg30)\n    var v3 : Int = 5\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 98765\n    var x4 : Int = digits(arg40)\n    var v4 : Int = 315\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 5576543\n    var x5 : Int = digits(arg50)\n    var v5 : Int = 2625\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 2468\n    var x6 : Int = digits(arg60)\n    var v6 : Int = 0\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, विषम अंकों के गुणनफल को वापस करें। \nयदि सभी अंक सम हैं तो 0 वापस करें। \nउदाहरण के लिएः \nअंक (1) = = 1 \nअंक (4) = = 0 \nअंक (235) = = 15", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/59", "entry_point": "isNested", "test": "\n\n    var arg00 : String = \"\"\"[[]]\"\"\"\n    var x0 : Boolean = isNested(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"[]]]]]]][[[[[]\"\"\"\n    var x1 : Boolean = isNested(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"[][]\"\"\"\n    var x2 : Boolean = isNested(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"[]\"\"\"\n    var x3 : Boolean = isNested(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"[[[[]]]]\"\"\"\n    var x4 : Boolean = isNested(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"[]]]]]]]]]]\"\"\"\n    var x5 : Boolean = isNested(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"[][][[]]\"\"\"\n    var x6 : Boolean = isNested(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"[[]\"\"\"\n    var x7 : Boolean = isNested(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"[]]\"\"\"\n    var x8 : Boolean = isNested(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"[[]][[\"\"\"\n    var x9 : Boolean = isNested(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"[[][]]\"\"\"\n    var x10 : Boolean = isNested(arg100)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"\"\"\"\n    var x11 : Boolean = isNested(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"[[[[[[[[\"\"\"\n    var x12 : Boolean = isNested(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : String = \"\"\"]]]]]]]]\"\"\"\n    var x13 : Boolean = isNested(arg130)\n    var v13 : Boolean = false\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n}\n", "description": "एक ऐसा फ़ंक्शन बनाएँ जो एक स्ट्रिंग को इनपुट के रूप में लेता है जिसमें केवल वर्ग कोष्ठक होते हैं। \nफ़ंक्शन को सही लौटना चाहिए यदि और केवल तभी जब कोष्ठक का एक वैध अनुक्रम हो \nजेराव उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन। \n\nनेस्टेड ('[[]]') सही है \nis _ nested ('[]]]]] [[[[]') गलत है \nनेस्टेड ('[] []') गलत है \nनेस्टेड ('[]') गलत है \nनेस्टेड ('[[] []]') सही है \nनेस्टेड है ('[[]] [[') सही है", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/60", "entry_point": "sumSquares", "test": "\n\n    var arg00 : List[Double] = List(1, 2, 3)\n    var x0 : Int = sumSquares(arg00)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(1.0, 2, 3)\n    var x1 : Int = sumSquares(arg10)\n    var v1 : Int = 14\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(1, 3, 5, 7)\n    var x2 : Int = sumSquares(arg20)\n    var v2 : Int = 84\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(1.4, 4.2, 0)\n    var x3 : Int = sumSquares(arg30)\n    var v3 : Int = 29\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(-2.4, 1, 1)\n    var x4 : Int = sumSquares(arg40)\n    var v4 : Int = 6\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Double] = List(100, 1, 15, 2)\n    var x5 : Int = sumSquares(arg50)\n    var v5 : Int = 10230\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Double] = List(10000, 10000)\n    var x6 : Int = sumSquares(arg60)\n    var v6 : Int = 200000000\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Double] = List(-1.4, 4.6, 6.3)\n    var x7 : Int = sumSquares(arg70)\n    var v7 : Int = 75\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Double] = List(-1.4, 17.9, 18.9, 19.9)\n    var x8 : Int = sumSquares(arg80)\n    var v8 : Int = 1086\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Double] = List(0)\n    var x9 : Int = sumSquares(arg90)\n    var v9 : Int = 0\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Double] = List(-1)\n    var x10 : Int = sumSquares(arg100)\n    var v10 : Int = 1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : List[Double] = List(-1, 1, 0)\n    var x11 : Int = sumSquares(arg110)\n    var v11 : Int = 2\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n}\n", "description": "आपको संख्याओं की एक सूची दी जाती है। \nआपको दी गई सूची में वर्ग संख्या का योग वापस करना होगा, \nसूची में प्रत्येक तत्व को पहले ऊपरी इंट (सीलिंग) में गोल करें। \nउदाहरण के लिएः \nlst = [1,2,3] के लिए आउटपुट 14 होना चाहिए। \nlst = [1,4,9] के लिए आउटपुट 98 होना चाहिए। \nlst = [1,3,5, 7] के लिए आउटपुट 84 होना चाहिए। \nlst = [1.4,4.2, 0] के लिए आउटपुट 29 होना चाहिए। \nlst = [-2.4,1, 1] के लिए आउटपुट 6 होना चाहिए।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/61", "entry_point": "checkIfLastCharIsALetter", "test": "\n\n    var arg00 : String = \"\"\"apple\"\"\"\n    var x0 : Boolean = checkIfLastCharIsALetter(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"apple pi e\"\"\"\n    var x1 : Boolean = checkIfLastCharIsALetter(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"eeeee\"\"\"\n    var x2 : Boolean = checkIfLastCharIsALetter(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"A\"\"\"\n    var x3 : Boolean = checkIfLastCharIsALetter(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Pumpkin pie \"\"\"\n    var x4 : Boolean = checkIfLastCharIsALetter(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"Pumpkin pie 1\"\"\"\n    var x5 : Boolean = checkIfLastCharIsALetter(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"\"\"\"\n    var x6 : Boolean = checkIfLastCharIsALetter(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"eeeee e \"\"\"\n    var x7 : Boolean = checkIfLastCharIsALetter(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"apple pie\"\"\"\n    var x8 : Boolean = checkIfLastCharIsALetter(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"apple pi e \"\"\"\n    var x9 : Boolean = checkIfLastCharIsALetter(arg90)\n    var v9 : Boolean = false\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n}\n", "description": "एक प्रकार्य बनाएँ जो सही लौटाता है यदि अंतिम वर्ण \nकिसी दिए गए स्ट्रिंग का वर्णमाला वर्ण है और यह नहीं है \nएक शब्द का एक हिस्सा, और अन्यथा गलत। \nनोटः \"शब्द\" अक्षरों का एक समूह है जो स्थान द्वारा अलग किया जाता है। \n\nउदाहरण के लिएः \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई\") ′ गलत \nजाँच करें कि अगर _ अंतिम _ चर _ है _ a _ अक्षर (\"एप्पल पाई ई\") सही है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई ई\") गलत है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"\") ′ गलत", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/62", "entry_point": "canArrange", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 4, 3, 5)\n    var x0 : Int = canArrange(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 4, 5)\n    var x1 : Int = canArrange(arg10)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 4, 2, 5, 6, 7, 8, 9, 10)\n    var x2 : Int = canArrange(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(4, 8, 5, 7, 3)\n    var x3 : Int = canArrange(arg30)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List()\n    var x4 : Int = canArrange(arg40)\n    var v4 : Int = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n}\n", "description": "एक ऐसा फलन बनाएँ जो किसी तत्व का सबसे बड़ा सूचकांक देता है जो \nयह उससे तुरंत पहले के तत्व से बड़ा या बराबर नहीं है। यदि \nऐसा कोई तत्व मौजूद नहीं है तो वापसी-1। दिए गए सरणी में शामिल नहीं होगा \nडुप्लिकेट मान। \n\nउदाहरण के लिएः \nकैन अरेंज ([1,2,4, 3,5]) = 3 \nकैन अरेंज ([1,2,3]) =-1", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/63", "entry_point": "largestSmallestIntegers", "test": "\n\n    var arg00 : List[Any] = List(2, 4, 1, 3, 5, 7)\n    var x0 : List[Any] = largestSmallestIntegers(arg00)\n    var v0 : List[Any] = List(\"none\", 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(2, 4, 1, 3, 5, 7, 0)\n    var x1 : List[Any] = largestSmallestIntegers(arg10)\n    var v1 : List[Any] = List(\"none\", 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 3, 2, 4, 5, 6, -2)\n    var x2 : List[Any] = largestSmallestIntegers(arg20)\n    var v2 : List[Any] = List(-2, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(4, 5, 3, 6, 2, 7, -7)\n    var x3 : List[Any] = largestSmallestIntegers(arg30)\n    var v3 : List[Any] = List(-7, 2)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(7, 3, 8, 4, 9, 2, 5, -9)\n    var x4 : List[Any] = largestSmallestIntegers(arg40)\n    var v4 : List[Any] = List(-9, 2)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List()\n    var x5 : List[Any] = largestSmallestIntegers(arg50)\n    var v5 : List[Any] = List(\"none\", \"none\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(0)\n    var x6 : List[Any] = largestSmallestIntegers(arg60)\n    var v6 : List[Any] = List(\"none\", \"none\")\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Any] = List(-1, -3, -5, -6)\n    var x7 : List[Any] = largestSmallestIntegers(arg70)\n    var v7 : List[Any] = List(-1, \"none\")\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Any] = List(-1, -3, -5, -6, 0)\n    var x8 : List[Any] = largestSmallestIntegers(arg80)\n    var v8 : List[Any] = List(-1, \"none\")\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Any] = List(-6, -4, -4, -3, 1)\n    var x9 : List[Any] = largestSmallestIntegers(arg90)\n    var v9 : List[Any] = List(-3, 1)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Any] = List(-6, -4, -4, -3, -100, 1)\n    var x10 : List[Any] = largestSmallestIntegers(arg100)\n    var v10 : List[Any] = List(-3, 1)\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n}\n", "description": "एक फलन बनाएँ जो एक टुपल (ए, बी) देता है, जहाँ'ए'है \nऋणात्मक पूर्णांकों में सबसे बड़ा, और'बी'सबसे छोटा है \nएक सूची में सकारात्मक पूर्णांक। \nयदि कोई ऋणात्मक या धनात्मक पूर्णांक नहीं हैं, तो उन्हें शून्य के रूप में वापस करें। \n\nउदाहरण के लिएः \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([2,4,1,3,5,7]) = = (कोई नहीं, 1) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([]) = = (कोई नहीं, कोई नहीं) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([0]) = = (कोई नहीं, कोई नहीं)", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/64", "entry_point": "specialFactorial", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = specialFactorial(arg00)\n    var v0 : Int = 288\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = specialFactorial(arg10)\n    var v1 : Int = 34560\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = specialFactorial(arg20)\n    var v2 : Int = 125411328000\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 1\n    var x3 : Int = specialFactorial(arg30)\n    var v3 : Int = 1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "ब्राजीलियाई भाज्य को इस प्रकार परिभाषित किया गया हैः \nब्राज़ीलियाई _ फैक्टोरियल (एन) = एन! * (एन-1)! * (एन-2)! *... * 1! \nजहाँ n> 0 \n\nउदाहरण के लिएः \n>>> स्पेशल _ फैक्टोरियल (4) \n288 \n\nफ़ंक्शन को इनपुट के रूप में एक पूर्णांक प्राप्त होगा और विशेष वापस करना चाहिए \nइस पूर्णांक का भाज्य।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/65", "entry_point": "wordsInSentence", "test": "\n\n    var arg00 : String = \"\"\"This is a test\"\"\"\n    var x0 : String = wordsInSentence(arg00)\n    var v0 : String = \"\"\"is\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"lets go for swimming\"\"\"\n    var x1 : String = wordsInSentence(arg10)\n    var v1 : String = \"\"\"go for\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"there is no place available here\"\"\"\n    var x2 : String = wordsInSentence(arg20)\n    var v2 : String = \"\"\"there is no place\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Hi I am Hussein\"\"\"\n    var x3 : String = wordsInSentence(arg30)\n    var v3 : String = \"\"\"Hi am Hussein\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"go for it\"\"\"\n    var x4 : String = wordsInSentence(arg40)\n    var v4 : String = \"\"\"go for it\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"here\"\"\"\n    var x5 : String = wordsInSentence(arg50)\n    var v5 : String = \"\"\"\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"here is\"\"\"\n    var x6 : String = wordsInSentence(arg60)\n    var v6 : String = \"\"\"is\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "आपको एक वाक्य का प्रतिनिधित्व करने वाली एक स्ट्रिंग दी जाती है, \nवाक्य में कुछ शब्द हैं जो एक स्थान द्वारा अलग किए गए हैं, \nऔर आपको एक स्ट्रिंग वापस करनी होगी जिसमें मूल वाक्य के शब्द शामिल हैं, \nजिनकी लंबाई अभाज्य संख्याएँ हैं, \nनई स्ट्रिंग में शब्दों का क्रम मूल के समान होना चाहिए। \n\nउदाहरण 1: \nइनपुटः वाक्य = \"यह एक परीक्षण है\" \nआउटपुटः \"है\" \n\nउदाहरण 2: \nइनपुटः वाक्य = \"चलो तैरने के लिए चलते हैं\" \nआउटपुटः \"के लिए जाएँ\" \n\nअड़चनेंः \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्य में केवल अक्षर होते हैं", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/66", "entry_point": "simplify", "test": "\n\n    var arg00 : String = \"\"\"1/5\"\"\"\n    var arg01 : String = \"\"\"5/1\"\"\"\n    var x0 : Boolean = simplify(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1/6\"\"\"\n    var arg11 : String = \"\"\"2/1\"\"\"\n    var x1 : Boolean = simplify(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"5/1\"\"\"\n    var arg21 : String = \"\"\"3/1\"\"\"\n    var x2 : Boolean = simplify(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"7/10\"\"\"\n    var arg31 : String = \"\"\"10/2\"\"\"\n    var x3 : Boolean = simplify(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"2/10\"\"\"\n    var arg41 : String = \"\"\"50/10\"\"\"\n    var x4 : Boolean = simplify(arg40, arg41)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"7/2\"\"\"\n    var arg51 : String = \"\"\"4/2\"\"\"\n    var x5 : Boolean = simplify(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"11/6\"\"\"\n    var arg61 : String = \"\"\"6/1\"\"\"\n    var x6 : Boolean = simplify(arg60, arg61)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"2/3\"\"\"\n    var arg71 : String = \"\"\"5/2\"\"\"\n    var x7 : Boolean = simplify(arg70, arg71)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"5/2\"\"\"\n    var arg81 : String = \"\"\"3/5\"\"\"\n    var x8 : Boolean = simplify(arg80, arg81)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"2/4\"\"\"\n    var arg91 : String = \"\"\"8/4\"\"\"\n    var x9 : Boolean = simplify(arg90, arg91)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"2/4\"\"\"\n    var arg101 : String = \"\"\"4/2\"\"\"\n    var x10 : Boolean = simplify(arg100, arg101)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"1/5\"\"\"\n    var arg111 : String = \"\"\"5/1\"\"\"\n    var x11 : Boolean = simplify(arg110, arg111)\n    var v11 : Boolean = true\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"1/5\"\"\"\n    var arg121 : String = \"\"\"1/5\"\"\"\n    var x12 : Boolean = simplify(arg120, arg121)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n}\n", "description": "आपका काम एक ऐसे कार्य को लागू करना है जो अभिव्यक्ति को सरल बनाएगा। \nx * n. फलन सही बताता है यदि x * n एक पूर्ण संख्या का मूल्यांकन करता है और गलत \nअन्यथा। x और n दोनों, एक अंश के स्ट्रिंग प्रतिनिधित्व हैं, और निम्नलिखित प्रारूप हैं, \n<अंश> <भाजक> जहाँ अंश और भाजक दोनों सकारात्मक पूर्ण संख्याएँ हैं। \n\nआप मान सकते हैं कि x, और n वैध अंश हैं, और विभाजक के रूप में शून्य नहीं हैं। \n\nसरलीकरण (\"1/5\", \"5/1\") = सही \nसरलीकरण (\"1/6\", \"2/1\") = गलत \nसरलीकरण (\"7/10\", \"10/2\") = गलत", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/67", "entry_point": "orderByPoints", "test": "\n\n    var arg00 : List[Any] = List(1, 11, -1, -11, -12)\n    var x0 : List[Any] = orderByPoints(arg00)\n    var v0 : List[Any] = List(-1, -11, 1, -12, 11)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)\n    var x1 : List[Any] = orderByPoints(arg10)\n    var v1 : List[Any] = List(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List()\n    var x2 : List[Any] = orderByPoints(arg20)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, -11, -32, 43, 54, -98, 2, -3)\n    var x3 : List[Any] = orderByPoints(arg30)\n    var v3 : List[Any] = List(-3, -32, -98, -11, 1, 2, 43, 54)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    var x4 : List[Any] = orderByPoints(arg40)\n    var v4 : List[Any] = List(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(0, 6, 6, -76, -21, 23, 4)\n    var x5 : List[Any] = orderByPoints(arg50)\n    var v5 : List[Any] = List(-76, -21, 0, 4, 23, 6, 6)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "एक प्रकार्य लिखें जो पूर्णांकों की दी गई सूची को क्रमबद्ध करता है। \nउनके अंकों के योग के अनुसार आरोही क्रम में। \nनोटः यदि कई वस्तुएँ हैं जिनके अंकों का योग समान है, \nमूल सूची में उनके सूचकांक के आधार पर उन्हें ऑर्डर करें। \n\nउदाहरण के लिएः \n>>> ऑर्डर _ बाय _ पॉइंट्स ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ऑर्डर _ बाय _ पॉइंट्स ([]) = = []", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/68", "entry_point": "specialfilter", "test": "\n\n    var arg00 : List[Any] = List(5, -2, 1, -5)\n    var x0 : Int = specialfilter(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(15, -73, 14, -15)\n    var x1 : Int = specialfilter(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(33, -2, -3, 45, 21, 109)\n    var x2 : Int = specialfilter(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(43, -12, 93, 125, 121, 109)\n    var x3 : Int = specialfilter(arg30)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(71, -2, -33, 75, 21, 19)\n    var x4 : Int = specialfilter(arg40)\n    var v4 : Int = 3\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1)\n    var x5 : Int = specialfilter(arg50)\n    var v5 : Int = 0\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List()\n    var x6 : Int = specialfilter(arg60)\n    var v6 : Int = 0\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "एक प्रकार्य लिखें जो इनपुट और रिटर्न के रूप में संख्याओं की एक सरणी लेता है। \nसरणी में तत्वों की संख्या जो 10 से अधिक है और दोनों \nएक संख्या के पहले और अंतिम अंक विषम (1,3,5,7,9) होते हैं। \nउदाहरण के लिएः \nविशेष फ़िल्टर ([15,-73,14,-15]) => 1 \nविशेष फ़िल्टर ([33,-2,-3,45,21,109]) => 2", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/69", "entry_point": "getMaxTriples", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = getMaxTriples(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = getMaxTriples(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = getMaxTriples(arg20)\n    var v2 : Int = 36\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 100\n    var x3 : Int = getMaxTriples(arg30)\n    var v3 : Int = 53361\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "आपको एक सकारात्मक पूर्णांक n दिया जाता है। आपको n लंबाई का एक पूर्णांक सरणी a बनाना होगा। \nप्रत्येक i (1 ≤ i ≤ n) के लिए, a [i] = i * i-i + 1 का मान। \na के तीन गुना (a [i], a [j], a [k]) की संख्या वापस करें जहाँ i <j <k, \nऔर a [i] + a [j] + a [k] 3 का गुणज है। \n\nउदाहरणः \nइनपुटः एन = 5 \nआउटपुटः 1 \nव्याख्याः \na = [1,3,7,13,21] \nएकमात्र वैध ट्रिपल (1,7,13) है।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/70", "entry_point": "bf", "test": "\n\n    var arg00 : String = \"\"\"Jupiter\"\"\"\n    var arg01 : String = \"\"\"Neptune\"\"\"\n    var x0 : List[Any] = bf(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Earth\"\"\"\n    var arg11 : String = \"\"\"Mercury\"\"\"\n    var x1 : List[Any] = bf(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"Venus\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Mercury\"\"\"\n    var arg21 : String = \"\"\"Uranus\"\"\"\n    var x2 : List[Any] = bf(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"Venus\"\"\", \"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Neptune\"\"\"\n    var arg31 : String = \"\"\"Venus\"\"\"\n    var x3 : List[Any] = bf(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Earth\"\"\"\n    var arg41 : String = \"\"\"Earth\"\"\"\n    var x4 : List[Any] = bf(arg40, arg41)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"Mars\"\"\"\n    var arg51 : String = \"\"\"Earth\"\"\"\n    var x5 : List[Any] = bf(arg50, arg51)\n    var v5 : List[Any] = List()\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"Jupiter\"\"\"\n    var arg61 : String = \"\"\"Makemake\"\"\"\n    var x6 : List[Any] = bf(arg60, arg61)\n    var v6 : List[Any] = List()\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "हमारे सौर मंडल में आठ ग्रह हैंः सूर्य के सबसे करीब \nबुध है, अगला शुक्र है, फिर पृथ्वी, मंगल, बृहस्पति, शनि, \nयूरेनस, नेपच्यून। \nएक कार्य लिखें जो दो ग्रहों के नाम ग्रह 1 और ग्रह 2 के रूप में लेता है। \nफ़ंक्शन को सभी ग्रहों वाले एक टुपल को वापस करना चाहिए जिनकी कक्षाएँ हैं \nग्रह 1 की कक्षा और ग्रह 2 की कक्षा के बीच स्थित, द्वारा क्रमबद्ध \nसूर्य की निकटता। \nयदि प्लैनेट1 या प्लैनेट2 है तो फ़ंक्शन को एक खाली टुपल वापस करना चाहिए। \nग्रहों के नाम सही नहीं हैं। \nउदाहरण \nbf (\"बृहस्पति\", \"नेपच्यून\") = => (\"शनि\", \"यूरेनस\") \nbf (\"पृथ्वी\", \"बुध\") = => (\"शुक्र\") \nbf (\"बुध\", \"यूरेनस\") = => (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"बृहस्पति\", \"शनि\")", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/71", "entry_point": "xOrY", "test": "\n\n    var arg00 : Int = 7\n    var arg01 : Int = 34\n    var arg02 : Int = 12\n    var x0 : Int = xOrY(arg00, arg01, arg02)\n    var v0 : Int = 34\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 8\n    var arg12 : Int = 5\n    var x1 : Int = xOrY(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 33\n    var arg22 : Int = 5212\n    var x2 : Int = xOrY(arg20, arg21, arg22)\n    var v2 : Int = 33\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 1259\n    var arg31 : Int = 3\n    var arg32 : Int = 52\n    var x3 : Int = xOrY(arg30, arg31, arg32)\n    var v3 : Int = 3\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7919\n    var arg41 : Int = -1\n    var arg42 : Int = 12\n    var x4 : Int = xOrY(arg40, arg41, arg42)\n    var v4 : Int = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 3609\n    var arg51 : Int = 1245\n    var arg52 : Int = 583\n    var x5 : Int = xOrY(arg50, arg51, arg52)\n    var v5 : Int = 583\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 91\n    var arg61 : Int = 56\n    var arg62 : Int = 129\n    var x6 : Int = xOrY(arg60, arg61, arg62)\n    var v6 : Int = 129\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 6\n    var arg71 : Int = 34\n    var arg72 : Int = 1234\n    var x7 : Int = xOrY(arg70, arg71, arg72)\n    var v7 : Int = 1234\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 1\n    var arg81 : Int = 2\n    var arg82 : Int = 0\n    var x8 : Int = xOrY(arg80, arg81, arg82)\n    var v8 : Int = 0\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 2\n    var arg91 : Int = 2\n    var arg92 : Int = 0\n    var x9 : Int = xOrY(arg90, arg91, arg92)\n    var v9 : Int = 2\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n}\n", "description": "एक सरल प्रोग्राम जिसे x का मान वापस करना चाहिए यदि n है \nएक अभाज्य संख्या और अन्यथा y का मान वापस करना चाहिए। \n\nउदाहरण के लिएः \nx _ या _ y (7,34,12) = = 34 के लिए \nx _ या _ y (15,8,5) = = 5 के लिए", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/72", "entry_point": "doubleTheDifference", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Int = doubleTheDifference(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 4)\n    var x1 : Int = doubleTheDifference(arg10)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(0.1, 0.2, 0.3)\n    var x2 : Int = doubleTheDifference(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(-10, -20, -30)\n    var x3 : Int = doubleTheDifference(arg30)\n    var v3 : Int = 0\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(-1, -2, 8)\n    var x4 : Int = doubleTheDifference(arg40)\n    var v4 : Int = 0\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(0.2, 3, 5)\n    var x5 : Int = doubleTheDifference(arg50)\n    var v5 : Int = 34\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99)\n    var x6 : Int = doubleTheDifference(arg60)\n    var v6 : Int = 166650\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n}\n", "description": "संख्याओं की सूची दिए जाने पर, संख्याओं के वर्गों का योग वापस करें। \nविषम सूची में. उन संख्याओं को नजरअंदाज करें जो ऋणात्मक हैं या पूर्णांक नहीं हैं। \n\nडबल _ द _ डिफरेंस ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nडबल _ द _ डिफरेंस ([-1,0]) = = 0 \nडबल _ द _ डिफरेंस ([9,-2]) = = 81 \nडबल _ द _ डिफरेंस ([0]) = = 0 \n\nयदि इनपुट सूची खाली है, तो 0 वापस करें।", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/73", "entry_point": "strongestExtension", "test": "\n\n    var arg00 : String = \"\"\"Watashi\"\"\"\n    var arg01 : List[String] = List(\"\"\"tEN\"\"\", \"\"\"niNE\"\"\", \"\"\"eIGHt8OKe\"\"\")\n    var x0 : String = strongestExtension(arg00, arg01)\n    var v0 : String = \"\"\"Watashi.eIGHt8OKe\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Boku123\"\"\"\n    var arg11 : List[String] = List(\"\"\"nani\"\"\", \"\"\"NazeDa\"\"\", \"\"\"YEs.WeCaNe\"\"\", \"\"\"32145tggg\"\"\")\n    var x1 : String = strongestExtension(arg10, arg11)\n    var v1 : String = \"\"\"Boku123.YEs.WeCaNe\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"__YESIMHERE\"\"\"\n    var arg21 : List[String] = List(\"\"\"t\"\"\", \"\"\"eMptY\"\"\", \"\"\"nothing\"\"\", \"\"\"zeR00\"\"\", \"\"\"NuLl__\"\"\", \"\"\"123NoooneB321\"\"\")\n    var x2 : String = strongestExtension(arg20, arg21)\n    var v2 : String = \"\"\"__YESIMHERE.NuLl__\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"K\"\"\"\n    var arg31 : List[String] = List(\"\"\"Ta\"\"\", \"\"\"TAR\"\"\", \"\"\"t234An\"\"\", \"\"\"cosSo\"\"\")\n    var x3 : String = strongestExtension(arg30, arg31)\n    var v3 : String = \"\"\"K.TAR\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"__HAHA\"\"\"\n    var arg41 : List[String] = List(\"\"\"Tab\"\"\", \"\"\"123\"\"\", \"\"\"781345\"\"\", \"\"\"-_-\"\"\")\n    var x4 : String = strongestExtension(arg40, arg41)\n    var v4 : String = \"\"\"__HAHA.123\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"YameRore\"\"\"\n    var arg51 : List[String] = List(\"\"\"HhAas\"\"\", \"\"\"okIWILL123\"\"\", \"\"\"WorkOut\"\"\", \"\"\"Fails\"\"\", \"\"\"-_-\"\"\")\n    var x5 : String = strongestExtension(arg50, arg51)\n    var v5 : String = \"\"\"YameRore.okIWILL123\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"finNNalLLly\"\"\"\n    var arg61 : List[String] = List(\"\"\"Die\"\"\", \"\"\"NowW\"\"\", \"\"\"Wow\"\"\", \"\"\"WoW\"\"\")\n    var x6 : String = strongestExtension(arg60, arg61)\n    var v6 : String = \"\"\"finNNalLLly.WoW\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"_\"\"\"\n    var arg71 : List[String] = List(\"\"\"Bb\"\"\", \"\"\"91245\"\"\")\n    var x7 : String = strongestExtension(arg70, arg71)\n    var v7 : String = \"\"\"_.Bb\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"Sp\"\"\"\n    var arg81 : List[String] = List(\"\"\"671235\"\"\", \"\"\"Bb\"\"\")\n    var x8 : String = strongestExtension(arg80, arg81)\n    var v8 : String = \"\"\"Sp.671235\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n}\n", "description": "आपको एक वर्ग का नाम (एक स्ट्रिंग) और एक्सटेंशन की एक सूची दी जाएगी। \nइन विस्तारों का उपयोग कक्षा में अतिरिक्त वर्गों को लोड करने के लिए किया जाना है। \nविस्तार की ताकत इस प्रकार हैः मान लीजिए कि CAP बड़े अक्षर की संख्या है। \nविस्तार के नाम में अक्षर, और एस. एम. को छोटे अक्षरों की संख्या होने दें \nविस्तार के नाम में, ताकत सीएपी-एसएम अंश द्वारा दी जाती है। \nआपको सबसे मजबूत एक्सटेंशन ढूंढना चाहिए और इसमें एक स्ट्रिंग वापस करनी चाहिए। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि एक ही ताकत के साथ दो या दो से अधिक विस्तार हैं, तो आपको करना चाहिए \nसूची में सबसे पहले आने वाले को चुनें। \nउदाहरण के लिए, यदि आपको वर्ग और सूची के रूप में \"स्लाइस\" दिए गए हैं \nविस्तारः ['SERVINGSliCes','चीज़','स्टुफ़ेड'] तो आपको करना चाहिए \nरिटर्न'Slices.SErviNGSliCes'क्योंकि'SERVINGSliCes'सबसे मजबूत एक्सटेंशन है \n(इसकी ताकत-1 है)। \nउदाहरणः \nसबसे मजबूत _ विस्तार के लिए ('माय _ क्लास', ['एए','बी','सीसी']) = ='my_class.AA'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/74", "entry_point": "cycpatternCheck", "test": "\n\n    var arg00 : String = \"\"\"xyzw\"\"\"\n    var arg01 : String = \"\"\"xyw\"\"\"\n    var x0 : Boolean = cycpatternCheck(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"yello\"\"\"\n    var arg11 : String = \"\"\"ell\"\"\"\n    var x1 : Boolean = cycpatternCheck(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"whattup\"\"\"\n    var arg21 : String = \"\"\"ptut\"\"\"\n    var x2 : Boolean = cycpatternCheck(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"efef\"\"\"\n    var arg31 : String = \"\"\"fee\"\"\"\n    var x3 : Boolean = cycpatternCheck(arg30, arg31)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"abab\"\"\"\n    var arg41 : String = \"\"\"aabb\"\"\"\n    var x4 : Boolean = cycpatternCheck(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"winemtt\"\"\"\n    var arg51 : String = \"\"\"tinem\"\"\"\n    var x5 : Boolean = cycpatternCheck(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n}\n", "description": "आपको 2 शब्द दिए गए हैं। आपको सही लौटाने की आवश्यकता है यदि दूसरा शब्द या इसका कोई भी आवर्तन पहले शब्द में एक सबस्ट्रिंग है। \nसाइकपेटर्न _ चेक (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => गलत \nसाइकपेटर्न _ चेक (\"हैलो\", \"ईल\") => सही \nसाइकपेटर्न _ चेक (\"व्हासअप\", \"psus\") => गलत \nसाइकपेटर्न _ चेक (\"अबाब\", \"बा\") => सही \nसाइकपेटर्न _ चेक (\"ई. एफ. ई. एफ\"., \"ई. ई. एफ. एफ\".) => गलत \nसाइकपेटर्न _ चेक (\"हिमेन्स\", \"सिमेन\") => सही", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/75", "entry_point": "intToMiniRoman", "test": "\n\n    var arg00 : Int = 19\n    var x0 : String = intToMiniRoman(arg00)\n    var v0 : String = \"\"\"xix\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 152\n    var x1 : String = intToMiniRoman(arg10)\n    var v1 : String = \"\"\"clii\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 251\n    var x2 : String = intToMiniRoman(arg20)\n    var v2 : String = \"\"\"ccli\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 426\n    var x3 : String = intToMiniRoman(arg30)\n    var v3 : String = \"\"\"cdxxvi\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 500\n    var x4 : String = intToMiniRoman(arg40)\n    var v4 : String = \"\"\"d\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 1\n    var x5 : String = intToMiniRoman(arg50)\n    var v5 : String = \"\"\"i\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 4\n    var x6 : String = intToMiniRoman(arg60)\n    var v6 : String = \"\"\"iv\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 43\n    var x7 : String = intToMiniRoman(arg70)\n    var v7 : String = \"\"\"xliii\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 90\n    var x8 : String = intToMiniRoman(arg80)\n    var v8 : String = \"\"\"xc\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 94\n    var x9 : String = intToMiniRoman(arg90)\n    var v9 : String = \"\"\"xciv\"\"\"\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 532\n    var x10 : String = intToMiniRoman(arg100)\n    var v10 : String = \"\"\"dxxxii\"\"\"\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 900\n    var x11 : String = intToMiniRoman(arg110)\n    var v11 : String = \"\"\"cm\"\"\"\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 994\n    var x12 : String = intToMiniRoman(arg120)\n    var v12 : String = \"\"\"cmxciv\"\"\"\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : Int = 1000\n    var x13 : String = intToMiniRoman(arg130)\n    var v13 : String = \"\"\"m\"\"\"\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n}\n", "description": "एक सकारात्मक पूर्णांक दिए जाने पर, एक स्ट्रिंग के रूप में इसके रोमन अंक के समतुल्य प्राप्त करें, \nऔर इसे छोटे अक्षर में वापस कर दें। \nप्रतिबंधः 1 <= संख्या <= 1000 \n\nउदाहरण के लिएः \n>>> इंट _ टू _ मिनी _ रोमन (19) = ='xix'\n>>> इंट _ टू _ मिनी _ रोमन (152) = ='क्लाई'\n>> इंट _ टू _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/76", "entry_point": "rightAngleTriangle", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var arg02 : Int = 5\n    var x0 : Boolean = rightAngleTriangle(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 3\n    var x1 : Boolean = rightAngleTriangle(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 6\n    var arg22 : Int = 8\n    var x2 : Boolean = rightAngleTriangle(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 2\n    var arg31 : Int = 2\n    var arg32 : Int = 2\n    var x3 : Boolean = rightAngleTriangle(arg30, arg31, arg32)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var arg41 : Int = 24\n    var arg42 : Int = 25\n    var x4 : Boolean = rightAngleTriangle(arg40, arg41, arg42)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 10\n    var arg51 : Int = 5\n    var arg52 : Int = 7\n    var x5 : Boolean = rightAngleTriangle(arg50, arg51, arg52)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 5\n    var arg61 : Int = 12\n    var arg62 : Int = 13\n    var x6 : Boolean = rightAngleTriangle(arg60, arg61, arg62)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 15\n    var arg71 : Int = 8\n    var arg72 : Int = 17\n    var x7 : Boolean = rightAngleTriangle(arg70, arg71, arg72)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 48\n    var arg81 : Int = 55\n    var arg82 : Int = 73\n    var x8 : Boolean = rightAngleTriangle(arg80, arg81, arg82)\n    var v8 : Boolean = true\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1\n    var arg91 : Int = 1\n    var arg92 : Int = 1\n    var x9 : Boolean = rightAngleTriangle(arg90, arg91, arg92)\n    var v9 : Boolean = false\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 2\n    var arg101 : Int = 2\n    var arg102 : Int = 10\n    var x10 : Boolean = rightAngleTriangle(arg100, arg101, arg102)\n    var v10 : Boolean = false\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n}\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए. सही लौटें यदि तीनों \nभुजाएँ एक समकोण त्रिभुज बनाती हैं, अन्यथा गलत। \nसमकोण त्रिभुज वह त्रिभुज है जिसमें एक कोण समकोण या समकोण होता है। \n90 डिग्री। \nउदाहरणः \nसमकोण त्रिभुज (3,4,5) = = सही \nसमकोण त्रिभुज (1,2,3) = = गलत", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/77", "entry_point": "solve", "test": "\n\n    var arg00 : String = \"\"\"AsDf\"\"\"\n    var x0 : String = solve(arg00)\n    var v0 : String = \"\"\"aSdF\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1234\"\"\"\n    var x1 : String = solve(arg10)\n    var v1 : String = \"\"\"4321\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var x2 : String = solve(arg20)\n    var v2 : String = \"\"\"AB\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"#a@C\"\"\"\n    var x3 : String = solve(arg30)\n    var v3 : String = \"\"\"#A@c\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"#AsdfW^45\"\"\"\n    var x4 : String = solve(arg40)\n    var v4 : String = \"\"\"#aSDFw^45\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"#6@2\"\"\"\n    var x5 : String = solve(arg50)\n    var v5 : String = \"\"\"2@6#\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"#\\$a^D\"\"\"\n    var x6 : String = solve(arg60)\n    var v6 : String = \"\"\"#\\$A^d\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"#ccc\"\"\"\n    var x7 : String = solve(arg70)\n    var v7 : String = \"\"\"#CCC\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n}\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nयदि एस [आई] एक अक्षर है, तो इसके मामले को निचले से ऊपरी या इसके विपरीत करें, \nअन्यथा इसे वैसे ही रखें जैसे वह है। \nयदि स्ट्रिंग में कोई अक्षर नहीं हैं, तो स्ट्रिंग को उलट दें। \nफ़ंक्शन को परिणामी स्ट्रिंग वापस करनी चाहिए। \nउदाहरण \nहल करें (\"1234\") = \"4321\" \nहल करें (\"एबी\") = \"एबी\" \nहल करें (\"#a @C\") = \"#A @c\"", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/78", "entry_point": "stringToMd5", "test": "\n\n    var arg00 : String = \"\"\"Hello world\"\"\"\n    var x0 : Any = stringToMd5(arg00)\n    var v0 : Any = \"\"\"3e25960a79dbc69b674cd4ec67a72c62\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"\"\"\"\n    var x1 : Any = stringToMd5(arg10)\n    var v1 : Any = \"none\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"A B C\"\"\"\n    var x2 : Any = stringToMd5(arg20)\n    var v2 : Any = \"\"\"0ef78513b0cb8cef12743f5aeb35f888\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"password\"\"\"\n    var x3 : Any = stringToMd5(arg30)\n    var v3 : Any = \"\"\"5f4dcc3b5aa765d61d8327deb882cf99\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "स्ट्रिंग'टेक्स्ट'को देखते हुए, इसके md5 हैश समकक्ष स्ट्रिंग को वापस करें। \nयदि'पाठ'एक खाली स्ट्रिंग है, तो शून्य वापस करें। \n\n>> स्ट्रिंग _ से _ md5 ('हैलो वर्ल्ड') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "scala/79", "entry_point": "generateIntegers", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 10\n    var x0 : List[Any] = generateIntegers(arg00, arg01)\n    var v0 : List[Any] = List(2, 4, 6, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 2\n    var x1 : List[Any] = generateIntegers(arg10, arg11)\n    var v1 : List[Any] = List(2, 4, 6, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 132\n    var arg21 : Int = 2\n    var x2 : List[Any] = generateIntegers(arg20, arg21)\n    var v2 : List[Any] = List(2, 4, 6, 8)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 17\n    var arg31 : Int = 89\n    var x3 : List[Any] = generateIntegers(arg30, arg31)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n}\n", "description": "दो धनात्मक पूर्णांक a और b दिए जाने पर, a के बीच के सम अंकों को वापस करें। \nऔर बी, आरोही क्रम में। \n\nउदाहरण के लिएः \nपूर्णांक उत्पन्न करें (2,8) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (8,2) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (10,14) => []", "language": "scala", "canonical_solution": null, "natural_language": "Hindi"}
