{"task_id": "php/0", "entry_point": "belowZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = belowZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, -3, 1, 2, -3];\n$x1 = belowZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, -4, 5, 6];\n$x2 = belowZero($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\n$x3 = belowZero($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\n$x4 = belowZero($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\n$x5 = belowZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "तुम्हाला बँक खात्यातील ठेवी आणि पैसे काढण्याच्या कामांची यादी दिली जाते, जी या शब्दाने सुरू होते. \nशून्य शिल्लक. कोणत्याही क्षणी खात्यातील शिल्लक शून्याच्या खाली येते का हे शोधणे हे तुमचे काम आहे, आणि \nत्या वेळी फंक्शनने खरे परत केले पाहिजे. अन्यथा ते खोटे परत केले पाहिजे. \n>>> शून्याच्या खाली ([1,2,3]) \nखोटारडेपणा. \n>>> शून्याच्या खाली ([1,2,-4,5]) \nखरे आहे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/1", "entry_point": "sumProduct", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = sumProduct($arg00);\n$v0 = [0, 1];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 1, 1];\n$x1 = sumProduct($arg10);\n$v1 = [3, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [100, 0];\n$x2 = sumProduct($arg20);\n$v2 = [100, 0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 5, 7];\n$x3 = sumProduct($arg30);\n$v3 = [15, 105];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [10];\n$x4 = sumProduct($arg40);\n$v4 = [10, 10];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "पूर्णांकांच्या दिलेल्या यादीसाठी, यादीतील सर्व पूर्णांकांची बेरीज आणि गुणाकार असलेले टुपल परत करा. \nरिकामी बेरीज 0 च्या बरोबरीची असावी आणि रिकामे गुणाकार 1 च्या बरोबरीचा असावा. \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/2", "entry_point": "stringXor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"111000\";\n$arg01 = \"101010\";\n$x0 = stringXor($arg00, $arg01);\n$v0 = \"010010\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1\";\n$arg11 = \"1\";\n$x1 = stringXor($arg10, $arg11);\n$v1 = \"0\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"0101\";\n$arg21 = \"0000\";\n$x2 = stringXor($arg20, $arg21);\n$v2 = \"0101\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "इनपुट हे दोन स्ट्रिंग a आणि b आहेत ज्यात फक्त 1s आणि 0s आहेत. \nया इनपुटवर बायनरी एक्सओआर करा आणि परिणाम देखील स्ट्रिंग म्हणून परत करा. \n>> स्ट्रिंग _ xor ('010','110') \n'100'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/3", "entry_point": "longest", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = longest($arg00);\n$v0 = null;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [\"x\", \"y\", \"z\"];\n$x1 = longest($arg10);\n$v1 = \"x\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\n$x2 = longest($arg20);\n$v2 = \"zzzz\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "स्ट्रिंगच्या यादीमधून सर्वात लांब स्ट्रिंग परत करा. एकाधिक असल्यास पहिली परत करा. \nसमान लांबीच्या स्ट्रिंग. इनपुट यादी रिकामी असल्यास शून्य परत करा. \n>>> सर्वात लांब ([]) \n\n>>> सर्वात लांब (['अ','ब','क']) \n'अ'\n>>> सर्वात लांब (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/4", "entry_point": "greatestCommonDivisor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 7;\n$x0 = greatestCommonDivisor($arg00, $arg01);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 10;\n$arg11 = 15;\n$x1 = greatestCommonDivisor($arg10, $arg11);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 49;\n$arg21 = 14;\n$x2 = greatestCommonDivisor($arg20, $arg21);\n$v2 = 7;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 144;\n$arg31 = 60;\n$x3 = greatestCommonDivisor($arg30, $arg31);\n$v3 = 12;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "अ आणि ब या दोन पूर्णांकांचा सर्वात मोठा सामान्य विभाजक परत करा. \n>>> ग्रेटेस्ट _ कॉमन _ डिव्हायझर (3,5) \n1. \n>>> ग्रेटेस्ट _ कॉमन _ डिव्हायझर (25,15) \n5.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/5", "entry_point": "sortNumbers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = sortNumbers($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"three\";\n$x1 = sortNumbers($arg10);\n$v1 = \"three\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"three five nine\";\n$x2 = sortNumbers($arg20);\n$v2 = \"three five nine\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"five zero four seven nine eight\";\n$x3 = sortNumbers($arg30);\n$v3 = \"zero four five seven eight nine\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"six five four three two one zero\";\n$x4 = sortNumbers($arg40);\n$v4 = \"zero one two three four five six\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "इनपुट ही'शून्य'ते'नऊ'पर्यंतच्या संख्यांची जागा-सीमांकित स्ट्रिंग आहे. \n'शून्य','एक','दोन','तीन','चार','पाच','सहा','सात','आठ'आणि'नऊ'हे वैध पर्याय आहेत. \nसर्वात लहान ते सर्वात मोठ्या क्रमांकांसह स्ट्रिंग परत करा \n>>> क्रमांकांची क्रमवारी लावा ('तीन एक पाच') \n'एक तीन पाच'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/6", "entry_point": "rescaleToUnit", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [2.0, 49.9];\n$x0 = rescaleToUnit($arg00);\n$v0 = [0.0, 1.0];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [100.0, 49.9];\n$x1 = rescaleToUnit($arg10);\n$v1 = [1.0, 0.0];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\n$x2 = rescaleToUnit($arg20);\n$v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\n$x3 = rescaleToUnit($arg30);\n$v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\n$x4 = rescaleToUnit($arg40);\n$v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "संख्यांची (किमान दोन घटकांची) यादी दिल्यास, त्या यादीत एक रेषीय परिवर्तन लागू करा, \nम्हणजे सर्वात लहान संख्या 0 होईल आणि सर्वात मोठी संख्या 1 होईल. \n>> पुनर्चक्रण _ ते _ एकक ([1., 2., 3., 4., 5]) \n[0,0,25,0,0.75,1.0]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/7", "entry_point": "flipCase", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = flipCase($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Hello!\";\n$x1 = flipCase($arg10);\n$v1 = \"hELLO!\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"These violent delights have violent ends\";\n$x2 = flipCase($arg20);\n$v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "दिलेल्या स्ट्रिंगसाठी, लहान अक्षरांना मोठ्या अक्षरात आणि मोठ्या अक्षरांना लहान अक्षरात उलटवा. \n>>> फ्लीप केस ('हॅलो') \n'हॅलो'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/8", "entry_point": "getPositive", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [-1, -2, 4, 5, 6];\n$x0 = getPositive($arg00);\n$v0 = [4, 5, 6];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\n$x1 = getPositive($arg10);\n$v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-1, -2];\n$x2 = getPositive($arg20);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [];\n$x3 = getPositive($arg30);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "यादीतील केवळ सकारात्मक संख्या परत करा. \n>>> सकारात्मक मिळवा ([-1,2,-4,5,6]) \n[2,5,6] \n>>> सकारात्मक मिळवा ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/9", "entry_point": "isPrime", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 6;\n$x0 = isPrime($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 101;\n$x1 = isPrime($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 11;\n$x2 = isPrime($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 13441;\n$x3 = isPrime($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 61;\n$x4 = isPrime($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 4;\n$x5 = isPrime($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 1;\n$x6 = isPrime($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 5;\n$x7 = isPrime($arg70);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 11;\n$x8 = isPrime($arg80);\n$v8 = true;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 17;\n$x9 = isPrime($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 85;\n$x10 = isPrime($arg100);\n$v10 = false;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 77;\n$x11 = isPrime($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 255379;\n$x12 = isPrime($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n", "description": "दिलेली संख्या अभाज्य असल्यास खरी परत करा आणि अन्यथा खोटी. \n>>> हे _ प्राइम आहे (6) \nखोटारडेपणा. \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nखरे आहे. \n>>> हे _ प्राइम आहे (11) \nखरे आहे. \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nखरे आहे. \n>>> हे _ प्राइम आहे (61) \nखरे आहे. \n>>> हे _ प्राइम आहे (4) \nखोटारडेपणा. \n>>> हे _ प्राइम आहे (1) \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/10", "entry_point": "unique", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\n$x0 = unique($arg00);\n$v0 = [0, 2, 3, 5, 9, 123];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n", "description": "यादीतील क्रमवारी लावलेले अद्वितीय घटक परत करा \n>>> अद्वितीय ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/11", "entry_point": "primeFib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$x0 = primeFib($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 2;\n$x1 = primeFib($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$x2 = primeFib($arg20);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 4;\n$x3 = primeFib($arg30);\n$v3 = 13;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 5;\n$x4 = primeFib($arg40);\n$v4 = 89;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 6;\n$x5 = primeFib($arg50);\n$v5 = 233;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 7;\n$x6 = primeFib($arg60);\n$v6 = 1597;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 8;\n$x7 = primeFib($arg70);\n$v7 = 28657;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 9;\n$x8 = primeFib($arg80);\n$v8 = 514229;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 10;\n$x9 = primeFib($arg90);\n$v9 = 433494437;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "प्राइम _ फायब n-th संख्या परत करतो जी फिबोनाची संख्या आहे आणि ती देखील अविभाज्य आहे. \n>>> प्राइम _ फायब (1) \n2. \n>>> प्राइम _ फायब (2) \n3. \n>>> प्राइम _ फायब (3) \n5. \n>>> प्राइम _ फायब (4) \n13. \n>>> प्राइम _ फायब (5) \n89", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/12", "entry_point": "triplesSumToZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 3, 5, 0];\n$x0 = triplesSumToZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 3, 5, -1];\n$x1 = triplesSumToZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, -2, 1];\n$x2 = triplesSumToZero($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 2, 3, 7];\n$x3 = triplesSumToZero($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 5, 7];\n$x4 = triplesSumToZero($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [2, 4, -5, 3, 9, 7];\n$x5 = triplesSumToZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [1];\n$x6 = triplesSumToZero($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [1, 3, 5, -100];\n$x7 = triplesSumToZero($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [100, 3, 5, -100];\n$x8 = triplesSumToZero($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "ट्रिपल्स _ सम _ ते _ शून्य हे इनपुट म्हणून पूर्णांकांची यादी घेतात. \nयादीत तीन वेगळे घटक असल्यास ते खरे परत करते \nबेरीज शून्यावर, आणि अन्यथा खोटे. \n\n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,35,5,0]) \nखोटारडेपणा. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,3,-2,1]) \nखरे आहे. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,2,3,7]) \nखोटारडेपणा. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([2,4,-5,3,9,7]) \nखरे आहे. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1]) \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/13", "entry_point": "pairsSumToZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 3, 5, 0];\n$x0 = pairsSumToZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 3, -2, 1];\n$x1 = pairsSumToZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, 3, 7];\n$x2 = pairsSumToZero($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [2, 4, -5, 3, 5, 7];\n$x3 = pairsSumToZero($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$x4 = pairsSumToZero($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [-3, 9, -1, 3, 2, 30];\n$x5 = pairsSumToZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-3, 9, -1, 3, 2, 31];\n$x6 = pairsSumToZero($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-3, 9, -1, 4, 2, 30];\n$x7 = pairsSumToZero($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-3, 9, -1, 4, 2, 31];\n$x8 = pairsSumToZero($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "pairs _ sum _ to _ zero हे इनपुट म्हणून पूर्णांकांची यादी घेते. \nयादीत दोन वेगळे घटक असल्यास ते खरे परत करते \nबेरीज शून्यावर, आणि अन्यथा खोटे. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,35,5,0]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,3,-2,1]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,2,3,7]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([2,4,-5,3,5,7]) \nखरे आहे. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1]) \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/14", "entry_point": "fib4", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = fib4($arg00);\n$v0 = 4;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 8;\n$x1 = fib4($arg10);\n$v1 = 28;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$x2 = fib4($arg20);\n$v2 = 104;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 12;\n$x3 = fib4($arg30);\n$v3 = 386;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "फायब 4 क्रमांकाचा क्रम हा फायबोनॅकी सेकुनेससारखाच एक क्रम आहे ज्याची व्याख्या खालीलप्रमाणे केली आहेः \nफायब 4 (0)-> 0 \nफायब 4 (1)-> 0 \nफायब 4 (2)-> 2 \nफायब 4 (3)-> 0 \nफायब 4 (एन)-> फायब 4 (एन-1) + फायब 4 (एन-2) + फायब 4 (एन-3) + फायब 4 (एन-4). \nफायब 4 क्रमांकाच्या क्रमाचा n-th घटक कार्यक्षमतेने मोजण्यासाठी कृपया कार्य लिहा. पुनरावृत्ती वापरू नका. \n>>> फायब 4 (5) \n4. \n>>> फायब 4 (6) \n8. \n>>> फायब 4 (7) \n14.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/15", "entry_point": "median", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 1, 2, 4, 5];\n$x0 = median($arg00);\n$v0 = 3;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [-10, 4, 6, 1000, 10, 20];\n$x1 = median($arg10);\n$v1 = 8.0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [5];\n$x2 = median($arg20);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [6, 5];\n$x3 = median($arg30);\n$v3 = 5.5;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [8, 1, 3, 9, 9, 2, 7];\n$x4 = median($arg40);\n$v4 = 7;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "यादीतील घटकांची मध्यक परत करा. \n>>> मध्यक ([3,1,2,4,5]) \n3. \n>>> मध्यक ([-10,4,6,1000,10,20]) \n15. 0", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/16", "entry_point": "isPalindrome", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = isPalindrome($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"aba\";\n$x1 = isPalindrome($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"aaaaa\";\n$x2 = isPalindrome($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"zbcd\";\n$x3 = isPalindrome($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"xywyx\";\n$x4 = isPalindrome($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"xywyz\";\n$x5 = isPalindrome($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"xywzx\";\n$x6 = isPalindrome($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "दिलेली स्ट्रिंग पॅलिंड्रोम आहे का ते तपासते \n>>> हे पॅलिंड्रोम आहे (\") \nखरे आहे. \n>>> हे पॅलिंड्रोम आहे ('अबा') \nखरे आहे. \n>>> हे पॅलिंड्रोम आहे ('एएएए') \nखरे आहे. \n>>> is _ palindrom ('zbcd') आहे \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/17", "entry_point": "removeVowels", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = removeVowels($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdef\\nghijklm\";\n$x1 = removeVowels($arg10);\n$v1 = \"bcdf\\nghjklm\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"fedcba\";\n$x2 = removeVowels($arg20);\n$v2 = \"fdcb\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"eeeee\";\n$x3 = removeVowels($arg30);\n$v3 = \"\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"acBAA\";\n$x4 = removeVowels($arg40);\n$v4 = \"cB\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"EcBOO\";\n$x5 = removeVowels($arg50);\n$v5 = \"cB\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"ybcd\";\n$x6 = removeVowels($arg60);\n$v6 = \"ybcd\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "रिमूव्ह _ व्हॉवेल्स हे एक कार्य आहे जे स्ट्रिंग घेते आणि स्वरांशिवाय स्ट्रिंग परत करते. \n>>> स्वर काढून टाका (\") \n\"\n>>> स्वर काढून टाका (\"abcdef\\nghijklm\") \n'बी. सी. डी. एफ. \\एनजी. जे. के. एल. एम.'\n>>> स्वर काढून टाका ('abcdef') \n'बी. सी. डी. एफ.'\n>>> स्वर काढून टाका ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"\n>>> स्वर काढून टाका ('आ. ए. बी. ए. ए.') \n'ब'\n>>> स्वर काढून टाका ('zbcd') \n'zbcd'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/18", "entry_point": "belowThreshold", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 4, 10];\n$arg01 = 100;\n$x0 = belowThreshold($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 20, 4, 10];\n$arg11 = 5;\n$x1 = belowThreshold($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 20, 4, 10];\n$arg21 = 21;\n$x2 = belowThreshold($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 20, 4, 10];\n$arg31 = 22;\n$x3 = belowThreshold($arg30, $arg31);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 8, 4, 10];\n$arg41 = 11;\n$x4 = belowThreshold($arg40, $arg41);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 8, 4, 10];\n$arg51 = 10;\n$x5 = belowThreshold($arg50, $arg51);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "'l'यादीमधील सर्व संख्या't'च्या थ्रेशोल्डच्या खाली असल्यास'खरे'परत करा. \n>>> थ्रेशोल्डच्या खाली ([1,2,4,10], 100) \nखरे आहे. \n>>> थ्रेशोल्डच्या खाली ([1,20,4,10], 5) \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/19", "entry_point": "add", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 0;\n$arg01 = 1;\n$x0 = add($arg00, $arg01);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 0;\n$x1 = add($arg10, $arg11);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 2;\n$arg21 = 3;\n$x2 = add($arg20, $arg21);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5;\n$arg31 = 7;\n$x3 = add($arg30, $arg31);\n$v3 = 12;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$arg41 = 5;\n$x4 = add($arg40, $arg41);\n$v4 = 12;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 572;\n$arg51 = 725;\n$x5 = add($arg50, $arg51);\n$v5 = 1297;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 51;\n$arg61 = 804;\n$x6 = add($arg60, $arg61);\n$v6 = 855;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 645;\n$arg71 = 96;\n$x7 = add($arg70, $arg71);\n$v7 = 741;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 712;\n$arg81 = 853;\n$x8 = add($arg80, $arg81);\n$v8 = 1565;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 223;\n$arg91 = 101;\n$x9 = add($arg90, $arg91);\n$v9 = 324;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 76;\n$arg101 = 29;\n$x10 = add($arg100, $arg101);\n$v10 = 105;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 416;\n$arg111 = 149;\n$x11 = add($arg110, $arg111);\n$v11 = 565;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 145;\n$arg121 = 409;\n$x12 = add($arg120, $arg121);\n$v12 = 554;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = 535;\n$arg131 = 430;\n$x13 = add($arg130, $arg131);\n$v13 = 965;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = 118;\n$arg141 = 303;\n$x14 = add($arg140, $arg141);\n$v14 = 421;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = 287;\n$arg151 = 94;\n$x15 = add($arg150, $arg151);\n$v15 = 381;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n$arg160 = 768;\n$arg161 = 257;\n$x16 = add($arg160, $arg161);\n$v16 = 1025;\nif (!compare($x16, $v16)) {\n    throw new Exception(\"Error at 17th assert statement.\");\n}\n$arg170 = 421;\n$arg171 = 677;\n$x17 = add($arg170, $arg171);\n$v17 = 1098;\nif (!compare($x17, $v17)) {\n    throw new Exception(\"Error at 18th assert statement.\");\n}\n$arg180 = 802;\n$arg181 = 814;\n$x18 = add($arg180, $arg181);\n$v18 = 1616;\nif (!compare($x18, $v18)) {\n    throw new Exception(\"Error at 19th assert statement.\");\n}\n$arg190 = 510;\n$arg191 = 922;\n$x19 = add($arg190, $arg191);\n$v19 = 1432;\nif (!compare($x19, $v19)) {\n    throw new Exception(\"Error at 20th assert statement.\");\n}\n$arg200 = 345;\n$arg201 = 819;\n$x20 = add($arg200, $arg201);\n$v20 = 1164;\nif (!compare($x20, $v20)) {\n    throw new Exception(\"Error at 21th assert statement.\");\n}\n$arg210 = 895;\n$arg211 = 436;\n$x21 = add($arg210, $arg211);\n$v21 = 1331;\nif (!compare($x21, $v21)) {\n    throw new Exception(\"Error at 22th assert statement.\");\n}\n$arg220 = 123;\n$arg221 = 424;\n$x22 = add($arg220, $arg221);\n$v22 = 547;\nif (!compare($x22, $v22)) {\n    throw new Exception(\"Error at 23th assert statement.\");\n}\n$arg230 = 923;\n$arg231 = 245;\n$x23 = add($arg230, $arg231);\n$v23 = 1168;\nif (!compare($x23, $v23)) {\n    throw new Exception(\"Error at 24th assert statement.\");\n}\n$arg240 = 23;\n$arg241 = 438;\n$x24 = add($arg240, $arg241);\n$v24 = 461;\nif (!compare($x24, $v24)) {\n    throw new Exception(\"Error at 25th assert statement.\");\n}\n$arg250 = 565;\n$arg251 = 133;\n$x25 = add($arg250, $arg251);\n$v25 = 698;\nif (!compare($x25, $v25)) {\n    throw new Exception(\"Error at 26th assert statement.\");\n}\n$arg260 = 945;\n$arg261 = 925;\n$x26 = add($arg260, $arg261);\n$v26 = 1870;\nif (!compare($x26, $v26)) {\n    throw new Exception(\"Error at 27th assert statement.\");\n}\n$arg270 = 261;\n$arg271 = 983;\n$x27 = add($arg270, $arg271);\n$v27 = 1244;\nif (!compare($x27, $v27)) {\n    throw new Exception(\"Error at 28th assert statement.\");\n}\n$arg280 = 139;\n$arg281 = 577;\n$x28 = add($arg280, $arg281);\n$v28 = 716;\nif (!compare($x28, $v28)) {\n    throw new Exception(\"Error at 29th assert statement.\");\n}\n$arg290 = 763;\n$arg291 = 178;\n$x29 = add($arg290, $arg291);\n$v29 = 941;\nif (!compare($x29, $v29)) {\n    throw new Exception(\"Error at 30th assert statement.\");\n}\n$arg300 = 147;\n$arg301 = 892;\n$x30 = add($arg300, $arg301);\n$v30 = 1039;\nif (!compare($x30, $v30)) {\n    throw new Exception(\"Error at 31th assert statement.\");\n}\n$arg310 = 436;\n$arg311 = 402;\n$x31 = add($arg310, $arg311);\n$v31 = 838;\nif (!compare($x31, $v31)) {\n    throw new Exception(\"Error at 32th assert statement.\");\n}\n$arg320 = 610;\n$arg321 = 581;\n$x32 = add($arg320, $arg321);\n$v32 = 1191;\nif (!compare($x32, $v32)) {\n    throw new Exception(\"Error at 33th assert statement.\");\n}\n$arg330 = 103;\n$arg331 = 416;\n$x33 = add($arg330, $arg331);\n$v33 = 519;\nif (!compare($x33, $v33)) {\n    throw new Exception(\"Error at 34th assert statement.\");\n}\n$arg340 = 339;\n$arg341 = 990;\n$x34 = add($arg340, $arg341);\n$v34 = 1329;\nif (!compare($x34, $v34)) {\n    throw new Exception(\"Error at 35th assert statement.\");\n}\n$arg350 = 130;\n$arg351 = 504;\n$x35 = add($arg350, $arg351);\n$v35 = 634;\nif (!compare($x35, $v35)) {\n    throw new Exception(\"Error at 36th assert statement.\");\n}\n$arg360 = 242;\n$arg361 = 717;\n$x36 = add($arg360, $arg361);\n$v36 = 959;\nif (!compare($x36, $v36)) {\n    throw new Exception(\"Error at 37th assert statement.\");\n}\n$arg370 = 562;\n$arg371 = 110;\n$x37 = add($arg370, $arg371);\n$v37 = 672;\nif (!compare($x37, $v37)) {\n    throw new Exception(\"Error at 38th assert statement.\");\n}\n$arg380 = 396;\n$arg381 = 909;\n$x38 = add($arg380, $arg381);\n$v38 = 1305;\nif (!compare($x38, $v38)) {\n    throw new Exception(\"Error at 39th assert statement.\");\n}\n$arg390 = 887;\n$arg391 = 703;\n$x39 = add($arg390, $arg391);\n$v39 = 1590;\nif (!compare($x39, $v39)) {\n    throw new Exception(\"Error at 40th assert statement.\");\n}\n$arg400 = 870;\n$arg401 = 551;\n$x40 = add($arg400, $arg401);\n$v40 = 1421;\nif (!compare($x40, $v40)) {\n    throw new Exception(\"Error at 41th assert statement.\");\n}\n$arg410 = 422;\n$arg411 = 391;\n$x41 = add($arg410, $arg411);\n$v41 = 813;\nif (!compare($x41, $v41)) {\n    throw new Exception(\"Error at 42th assert statement.\");\n}\n$arg420 = 299;\n$arg421 = 505;\n$x42 = add($arg420, $arg421);\n$v42 = 804;\nif (!compare($x42, $v42)) {\n    throw new Exception(\"Error at 43th assert statement.\");\n}\n$arg430 = 346;\n$arg431 = 56;\n$x43 = add($arg430, $arg431);\n$v43 = 402;\nif (!compare($x43, $v43)) {\n    throw new Exception(\"Error at 44th assert statement.\");\n}\n$arg440 = 36;\n$arg441 = 706;\n$x44 = add($arg440, $arg441);\n$v44 = 742;\nif (!compare($x44, $v44)) {\n    throw new Exception(\"Error at 45th assert statement.\");\n}\n$arg450 = 738;\n$arg451 = 411;\n$x45 = add($arg450, $arg451);\n$v45 = 1149;\nif (!compare($x45, $v45)) {\n    throw new Exception(\"Error at 46th assert statement.\");\n}\n$arg460 = 679;\n$arg461 = 87;\n$x46 = add($arg460, $arg461);\n$v46 = 766;\nif (!compare($x46, $v46)) {\n    throw new Exception(\"Error at 47th assert statement.\");\n}\n$arg470 = 25;\n$arg471 = 303;\n$x47 = add($arg470, $arg471);\n$v47 = 328;\nif (!compare($x47, $v47)) {\n    throw new Exception(\"Error at 48th assert statement.\");\n}\n$arg480 = 161;\n$arg481 = 612;\n$x48 = add($arg480, $arg481);\n$v48 = 773;\nif (!compare($x48, $v48)) {\n    throw new Exception(\"Error at 49th assert statement.\");\n}\n$arg490 = 306;\n$arg491 = 841;\n$x49 = add($arg490, $arg491);\n$v49 = 1147;\nif (!compare($x49, $v49)) {\n    throw new Exception(\"Error at 50th assert statement.\");\n}\n$arg500 = 973;\n$arg501 = 411;\n$x50 = add($arg500, $arg501);\n$v50 = 1384;\nif (!compare($x50, $v50)) {\n    throw new Exception(\"Error at 51th assert statement.\");\n}\n$arg510 = 711;\n$arg511 = 157;\n$x51 = add($arg510, $arg511);\n$v51 = 868;\nif (!compare($x51, $v51)) {\n    throw new Exception(\"Error at 52th assert statement.\");\n}\n$arg520 = 471;\n$arg521 = 27;\n$x52 = add($arg520, $arg521);\n$v52 = 498;\nif (!compare($x52, $v52)) {\n    throw new Exception(\"Error at 53th assert statement.\");\n}\n$arg530 = 714;\n$arg531 = 792;\n$x53 = add($arg530, $arg531);\n$v53 = 1506;\nif (!compare($x53, $v53)) {\n    throw new Exception(\"Error at 54th assert statement.\");\n}\n$arg540 = 38;\n$arg541 = 206;\n$x54 = add($arg540, $arg541);\n$v54 = 244;\nif (!compare($x54, $v54)) {\n    throw new Exception(\"Error at 55th assert statement.\");\n}\n$arg550 = 907;\n$arg551 = 343;\n$x55 = add($arg550, $arg551);\n$v55 = 1250;\nif (!compare($x55, $v55)) {\n    throw new Exception(\"Error at 56th assert statement.\");\n}\n$arg560 = 23;\n$arg561 = 760;\n$x56 = add($arg560, $arg561);\n$v56 = 783;\nif (!compare($x56, $v56)) {\n    throw new Exception(\"Error at 57th assert statement.\");\n}\n$arg570 = 524;\n$arg571 = 859;\n$x57 = add($arg570, $arg571);\n$v57 = 1383;\nif (!compare($x57, $v57)) {\n    throw new Exception(\"Error at 58th assert statement.\");\n}\n$arg580 = 30;\n$arg581 = 529;\n$x58 = add($arg580, $arg581);\n$v58 = 559;\nif (!compare($x58, $v58)) {\n    throw new Exception(\"Error at 59th assert statement.\");\n}\n$arg590 = 341;\n$arg591 = 691;\n$x59 = add($arg590, $arg591);\n$v59 = 1032;\nif (!compare($x59, $v59)) {\n    throw new Exception(\"Error at 60th assert statement.\");\n}\n$arg600 = 167;\n$arg601 = 729;\n$x60 = add($arg600, $arg601);\n$v60 = 896;\nif (!compare($x60, $v60)) {\n    throw new Exception(\"Error at 61th assert statement.\");\n}\n$arg610 = 636;\n$arg611 = 289;\n$x61 = add($arg610, $arg611);\n$v61 = 925;\nif (!compare($x61, $v61)) {\n    throw new Exception(\"Error at 62th assert statement.\");\n}\n$arg620 = 503;\n$arg621 = 144;\n$x62 = add($arg620, $arg621);\n$v62 = 647;\nif (!compare($x62, $v62)) {\n    throw new Exception(\"Error at 63th assert statement.\");\n}\n$arg630 = 51;\n$arg631 = 985;\n$x63 = add($arg630, $arg631);\n$v63 = 1036;\nif (!compare($x63, $v63)) {\n    throw new Exception(\"Error at 64th assert statement.\");\n}\n$arg640 = 287;\n$arg641 = 149;\n$x64 = add($arg640, $arg641);\n$v64 = 436;\nif (!compare($x64, $v64)) {\n    throw new Exception(\"Error at 65th assert statement.\");\n}\n$arg650 = 659;\n$arg651 = 75;\n$x65 = add($arg650, $arg651);\n$v65 = 734;\nif (!compare($x65, $v65)) {\n    throw new Exception(\"Error at 66th assert statement.\");\n}\n$arg660 = 462;\n$arg661 = 797;\n$x66 = add($arg660, $arg661);\n$v66 = 1259;\nif (!compare($x66, $v66)) {\n    throw new Exception(\"Error at 67th assert statement.\");\n}\n$arg670 = 406;\n$arg671 = 141;\n$x67 = add($arg670, $arg671);\n$v67 = 547;\nif (!compare($x67, $v67)) {\n    throw new Exception(\"Error at 68th assert statement.\");\n}\n$arg680 = 106;\n$arg681 = 44;\n$x68 = add($arg680, $arg681);\n$v68 = 150;\nif (!compare($x68, $v68)) {\n    throw new Exception(\"Error at 69th assert statement.\");\n}\n$arg690 = 300;\n$arg691 = 934;\n$x69 = add($arg690, $arg691);\n$v69 = 1234;\nif (!compare($x69, $v69)) {\n    throw new Exception(\"Error at 70th assert statement.\");\n}\n$arg700 = 471;\n$arg701 = 524;\n$x70 = add($arg700, $arg701);\n$v70 = 995;\nif (!compare($x70, $v70)) {\n    throw new Exception(\"Error at 71th assert statement.\");\n}\n$arg710 = 122;\n$arg711 = 429;\n$x71 = add($arg710, $arg711);\n$v71 = 551;\nif (!compare($x71, $v71)) {\n    throw new Exception(\"Error at 72th assert statement.\");\n}\n$arg720 = 735;\n$arg721 = 195;\n$x72 = add($arg720, $arg721);\n$v72 = 930;\nif (!compare($x72, $v72)) {\n    throw new Exception(\"Error at 73th assert statement.\");\n}\n$arg730 = 335;\n$arg731 = 484;\n$x73 = add($arg730, $arg731);\n$v73 = 819;\nif (!compare($x73, $v73)) {\n    throw new Exception(\"Error at 74th assert statement.\");\n}\n$arg740 = 28;\n$arg741 = 809;\n$x74 = add($arg740, $arg741);\n$v74 = 837;\nif (!compare($x74, $v74)) {\n    throw new Exception(\"Error at 75th assert statement.\");\n}\n$arg750 = 430;\n$arg751 = 20;\n$x75 = add($arg750, $arg751);\n$v75 = 450;\nif (!compare($x75, $v75)) {\n    throw new Exception(\"Error at 76th assert statement.\");\n}\n$arg760 = 916;\n$arg761 = 635;\n$x76 = add($arg760, $arg761);\n$v76 = 1551;\nif (!compare($x76, $v76)) {\n    throw new Exception(\"Error at 77th assert statement.\");\n}\n$arg770 = 301;\n$arg771 = 999;\n$x77 = add($arg770, $arg771);\n$v77 = 1300;\nif (!compare($x77, $v77)) {\n    throw new Exception(\"Error at 78th assert statement.\");\n}\n$arg780 = 454;\n$arg781 = 466;\n$x78 = add($arg780, $arg781);\n$v78 = 920;\nif (!compare($x78, $v78)) {\n    throw new Exception(\"Error at 79th assert statement.\");\n}\n$arg790 = 905;\n$arg791 = 259;\n$x79 = add($arg790, $arg791);\n$v79 = 1164;\nif (!compare($x79, $v79)) {\n    throw new Exception(\"Error at 80th assert statement.\");\n}\n$arg800 = 168;\n$arg801 = 205;\n$x80 = add($arg800, $arg801);\n$v80 = 373;\nif (!compare($x80, $v80)) {\n    throw new Exception(\"Error at 81th assert statement.\");\n}\n$arg810 = 570;\n$arg811 = 434;\n$x81 = add($arg810, $arg811);\n$v81 = 1004;\nif (!compare($x81, $v81)) {\n    throw new Exception(\"Error at 82th assert statement.\");\n}\n$arg820 = 64;\n$arg821 = 959;\n$x82 = add($arg820, $arg821);\n$v82 = 1023;\nif (!compare($x82, $v82)) {\n    throw new Exception(\"Error at 83th assert statement.\");\n}\n$arg830 = 957;\n$arg831 = 510;\n$x83 = add($arg830, $arg831);\n$v83 = 1467;\nif (!compare($x83, $v83)) {\n    throw new Exception(\"Error at 84th assert statement.\");\n}\n$arg840 = 722;\n$arg841 = 598;\n$x84 = add($arg840, $arg841);\n$v84 = 1320;\nif (!compare($x84, $v84)) {\n    throw new Exception(\"Error at 85th assert statement.\");\n}\n$arg850 = 770;\n$arg851 = 226;\n$x85 = add($arg850, $arg851);\n$v85 = 996;\nif (!compare($x85, $v85)) {\n    throw new Exception(\"Error at 86th assert statement.\");\n}\n$arg860 = 579;\n$arg861 = 66;\n$x86 = add($arg860, $arg861);\n$v86 = 645;\nif (!compare($x86, $v86)) {\n    throw new Exception(\"Error at 87th assert statement.\");\n}\n$arg870 = 117;\n$arg871 = 674;\n$x87 = add($arg870, $arg871);\n$v87 = 791;\nif (!compare($x87, $v87)) {\n    throw new Exception(\"Error at 88th assert statement.\");\n}\n$arg880 = 530;\n$arg881 = 30;\n$x88 = add($arg880, $arg881);\n$v88 = 560;\nif (!compare($x88, $v88)) {\n    throw new Exception(\"Error at 89th assert statement.\");\n}\n$arg890 = 776;\n$arg891 = 345;\n$x89 = add($arg890, $arg891);\n$v89 = 1121;\nif (!compare($x89, $v89)) {\n    throw new Exception(\"Error at 90th assert statement.\");\n}\n$arg900 = 327;\n$arg901 = 389;\n$x90 = add($arg900, $arg901);\n$v90 = 716;\nif (!compare($x90, $v90)) {\n    throw new Exception(\"Error at 91th assert statement.\");\n}\n$arg910 = 596;\n$arg911 = 12;\n$x91 = add($arg910, $arg911);\n$v91 = 608;\nif (!compare($x91, $v91)) {\n    throw new Exception(\"Error at 92th assert statement.\");\n}\n$arg920 = 599;\n$arg921 = 511;\n$x92 = add($arg920, $arg921);\n$v92 = 1110;\nif (!compare($x92, $v92)) {\n    throw new Exception(\"Error at 93th assert statement.\");\n}\n$arg930 = 936;\n$arg931 = 476;\n$x93 = add($arg930, $arg931);\n$v93 = 1412;\nif (!compare($x93, $v93)) {\n    throw new Exception(\"Error at 94th assert statement.\");\n}\n$arg940 = 461;\n$arg941 = 14;\n$x94 = add($arg940, $arg941);\n$v94 = 475;\nif (!compare($x94, $v94)) {\n    throw new Exception(\"Error at 95th assert statement.\");\n}\n$arg950 = 966;\n$arg951 = 157;\n$x95 = add($arg950, $arg951);\n$v95 = 1123;\nif (!compare($x95, $v95)) {\n    throw new Exception(\"Error at 96th assert statement.\");\n}\n$arg960 = 326;\n$arg961 = 91;\n$x96 = add($arg960, $arg961);\n$v96 = 417;\nif (!compare($x96, $v96)) {\n    throw new Exception(\"Error at 97th assert statement.\");\n}\n$arg970 = 392;\n$arg971 = 455;\n$x97 = add($arg970, $arg971);\n$v97 = 847;\nif (!compare($x97, $v97)) {\n    throw new Exception(\"Error at 98th assert statement.\");\n}\n$arg980 = 446;\n$arg981 = 477;\n$x98 = add($arg980, $arg981);\n$v98 = 923;\nif (!compare($x98, $v98)) {\n    throw new Exception(\"Error at 99th assert statement.\");\n}\n$arg990 = 324;\n$arg991 = 860;\n$x99 = add($arg990, $arg991);\n$v99 = 1184;\nif (!compare($x99, $v99)) {\n    throw new Exception(\"Error at 100th assert statement.\");\n}\n$arg1000 = 945;\n$arg1001 = 85;\n$x100 = add($arg1000, $arg1001);\n$v100 = 1030;\nif (!compare($x100, $v100)) {\n    throw new Exception(\"Error at 101th assert statement.\");\n}\n$arg1010 = 886;\n$arg1011 = 582;\n$x101 = add($arg1010, $arg1011);\n$v101 = 1468;\nif (!compare($x101, $v101)) {\n    throw new Exception(\"Error at 102th assert statement.\");\n}\n$arg1020 = 886;\n$arg1021 = 712;\n$x102 = add($arg1020, $arg1021);\n$v102 = 1598;\nif (!compare($x102, $v102)) {\n    throw new Exception(\"Error at 103th assert statement.\");\n}\n$arg1030 = 842;\n$arg1031 = 953;\n$x103 = add($arg1030, $arg1031);\n$v103 = 1795;\nif (!compare($x103, $v103)) {\n    throw new Exception(\"Error at 104th assert statement.\");\n}\n", "description": "x आणि y या दोन संख्या जोडा. \n>>> जोडा (2,3) \n5. \n>>> जोडा (5,7) \n12.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/20", "entry_point": "sameChars", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"eabcdzzzz\";\n$arg01 = \"dddzzzzzzzddeddabc\";\n$x0 = sameChars($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcd\";\n$arg11 = \"dddddddabc\";\n$x1 = sameChars($arg10, $arg11);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"dddddddabc\";\n$arg21 = \"abcd\";\n$x2 = sameChars($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"eabcd\";\n$arg31 = \"dddddddabc\";\n$x3 = sameChars($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"abcd\";\n$arg41 = \"dddddddabcf\";\n$x4 = sameChars($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"eabcdzzzz\";\n$arg51 = \"dddzzzzzzzddddabc\";\n$x5 = sameChars($arg50, $arg51);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"aabb\";\n$arg61 = \"aaccc\";\n$x6 = sameChars($arg60, $arg61);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "दोन शब्दांमध्ये समान अक्षरे आहेत का ते तपासा. \n>>> समान _ अक्षर ('eabcdzzzz','dddzzzzzuddeddabc') \nखरे आहे. \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखरे आहे. \n>>> समान अक्षर ('ddddddabc','abcd') \nखरे आहे. \n>>> समान अक्षर ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखोटारडेपणा. \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखोटारडेपणा. \n>>> समान _ अक्षर ('eabcdzzzz','dddzzzzzddddddabc') \nखोटारडेपणा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/21", "entry_point": "fib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 10;\n$x0 = fib($arg00);\n$v0 = 55;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$x1 = fib($arg10);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 8;\n$x2 = fib($arg20);\n$v2 = 21;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 11;\n$x3 = fib($arg30);\n$v3 = 89;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 12;\n$x4 = fib($arg40);\n$v4 = 144;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "n-th फिबोनाची क्रमांक परत करा. \n>>> फायब (10) \n55. \n>>> फायब (1) \n1. \n>>> फायब (8) \n21.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/22", "entry_point": "common", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 4, 3, 34, 653, 2, 5];\n$arg01 = [5, 7, 1, 5, 9, 653, 121];\n$x0 = common($arg00, $arg01);\n$v0 = [1, 5, 653];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 3, 2, 8];\n$arg11 = [3, 2];\n$x1 = common($arg10, $arg11);\n$v1 = [2, 3];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [4, 3, 2, 8];\n$arg21 = [3, 2, 4];\n$x2 = common($arg20, $arg21);\n$v2 = [2, 3, 4];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 3, 2, 8];\n$arg31 = [];\n$x3 = common($arg30, $arg31);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "दोन याद्यांसाठी विशिष्ट सामान्य घटकांची क्रमवारी लावून परत करा. \n>> सामान्य ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्य ([5,3,2,8], [3,2]) \n[2,3]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/23", "entry_point": "largestPrimeFactor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 15;\n$x0 = largestPrimeFactor($arg00);\n$v0 = 5;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 27;\n$x1 = largestPrimeFactor($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 63;\n$x2 = largestPrimeFactor($arg20);\n$v2 = 7;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 330;\n$x3 = largestPrimeFactor($arg30);\n$v3 = 11;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 13195;\n$x4 = largestPrimeFactor($arg40);\n$v4 = 29;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "n चा सर्वात मोठा अभाज्य घटक परत करा. n> 1 समजा आणि तो अभाज्य नाही. \n>>> सर्वांत मोठा _ मुख्य _ घटक (13195) \n29 \n>>> सर्वांत मोठा _ मुख्य _ घटक (2048) \n2.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/24", "entry_point": "sumToN", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$x0 = sumToN($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 6;\n$x1 = sumToN($arg10);\n$v1 = 21;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 11;\n$x2 = sumToN($arg20);\n$v2 = 66;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 30;\n$x3 = sumToN($arg30);\n$v3 = 465;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 100;\n$x4 = sumToN($arg40);\n$v4 = 5050;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "sum _ to _ n हे एक कार्य आहे जे 1 ते n पर्यंतच्या संख्यांची बेरीज करते. \n>>> बेरीज _ ते _ एन (30) \n465 \n>>> बेरीज _ ते _ एन (100) \n5050 \n>>> बेरीज _ ते _ एन (5) \n15. \n>>> बेरीज _ ते _ एन (10) \n55. \n>>> बेरीज _ ते _ एन (1) \n1.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/25", "entry_point": "derivative", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 1, 2, 4, 5];\n$x0 = derivative($arg00);\n$v0 = [1, 4, 12, 20];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 3];\n$x1 = derivative($arg10);\n$v1 = [2, 6];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3, 2, 1];\n$x2 = derivative($arg20);\n$v2 = [2, 2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 2, 1, 0, 4];\n$x3 = derivative($arg30);\n$v3 = [2, 2, 0, 16];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$x4 = derivative($arg40);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "xs हे बहुपदीचे गुणांक दर्शवते. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nया बहुपदीचे व्युत्पन्न त्याच स्वरूपात परत करा. \n>>> व्युत्पन्न ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्न ([1,2,3]) \n[2,6]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/26", "entry_point": "fibfib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 2;\n$x0 = fibfib($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$x1 = fibfib($arg10);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = fibfib($arg20);\n$v2 = 4;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 8;\n$x3 = fibfib($arg30);\n$v3 = 24;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 10;\n$x4 = fibfib($arg40);\n$v4 = 81;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 12;\n$x5 = fibfib($arg50);\n$v5 = 274;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 14;\n$x6 = fibfib($arg60);\n$v6 = 927;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "फायबफायब क्रमांकाचा क्रम हा फायबॉनॅकी सेकुनेससारखाच एक क्रम आहे ज्याची व्याख्या खालीलप्रमाणे केली आहेः \nफायबफायब (0) = = 0 \nफायबफायब (1) = = 0 \nफायबफायब (2) = = 1 \nफायबफायब (एन) = = फायबफायब (एन-1) + फायबफायब (एन-2) + फायबफायब (एन-3). \nफायबफायब क्रमांकाच्या अनुक्रमाच्या एन-व्या घटकाची कार्यक्षमतेने गणना करण्यासाठी कृपया एक कार्य लिहा. \n>>> फायबफायब (1) \n0. \n>>> फायबफायब (5) \n4. \n>>> फायबफायब (8) \n24.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/27", "entry_point": "vowelsCount", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"abcde\";\n$x0 = vowelsCount($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Alone\";\n$x1 = vowelsCount($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"key\";\n$x2 = vowelsCount($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"bye\";\n$x3 = vowelsCount($arg30);\n$v3 = 1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"keY\";\n$x4 = vowelsCount($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"bYe\";\n$x5 = vowelsCount($arg50);\n$v5 = 1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"ACEDY\";\n$x6 = vowelsCount($arg60);\n$v6 = 3;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "एक स्वर गणना कार्य लिहा जे दर्शविणारी स्ट्रिंग घेते \nइनपुट म्हणून एक शब्द आणि स्ट्रिंगमधील स्वरांची संख्या परत करतो. \nया प्रकरणात स्वर'अ','ई','आय','ओ','यू'आहेत. येथे,'वाय'देखील एक आहे. \nस्वर, परंतु जेव्हा तो दिलेल्या शब्दाच्या शेवटी असतो तेव्हाच. \n\nउदाहरणादाखलः \n>>> स्वरांची गणना (\"ए. बी. सी. डी\".) \n2. \n>>> स्वरांची गणना (\"ACEDY\") \n3.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/28", "entry_point": "search", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, 5, 5, 5, 1];\n$x0 = search($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [4, 1, 4, 1, 4, 4];\n$x1 = search($arg10);\n$v1 = 4;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3, 3];\n$x2 = search($arg20);\n$v2 = -1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\n$x3 = search($arg30);\n$v3 = 8;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [2, 3, 3, 2, 2];\n$x4 = search($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\n$x5 = search($arg50);\n$v5 = 1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [3, 2, 8, 2];\n$x6 = search($arg60);\n$v6 = 2;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\n$x7 = search($arg70);\n$v7 = 1;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [8, 8, 3, 6, 5, 6, 4];\n$x8 = search($arg80);\n$v8 = -1;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\n$x9 = search($arg90);\n$v9 = 1;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [1, 9, 10, 1, 3];\n$x10 = search($arg100);\n$v10 = 1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\n$x11 = search($arg110);\n$v11 = 5;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = [1];\n$x12 = search($arg120);\n$v12 = 1;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\n$x13 = search($arg130);\n$v13 = 4;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\n$x14 = search($arg140);\n$v14 = 2;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\n$x15 = search($arg150);\n$v15 = 1;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n$arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\n$x16 = search($arg160);\n$v16 = 4;\nif (!compare($x16, $v16)) {\n    throw new Exception(\"Error at 17th assert statement.\");\n}\n$arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\n$x17 = search($arg170);\n$v17 = 4;\nif (!compare($x17, $v17)) {\n    throw new Exception(\"Error at 18th assert statement.\");\n}\n$arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\n$x18 = search($arg180);\n$v18 = 2;\nif (!compare($x18, $v18)) {\n    throw new Exception(\"Error at 19th assert statement.\");\n}\n$arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\n$x19 = search($arg190);\n$v19 = -1;\nif (!compare($x19, $v19)) {\n    throw new Exception(\"Error at 20th assert statement.\");\n}\n$arg200 = [10];\n$x20 = search($arg200);\n$v20 = -1;\nif (!compare($x20, $v20)) {\n    throw new Exception(\"Error at 21th assert statement.\");\n}\n$arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\n$x21 = search($arg210);\n$v21 = 2;\nif (!compare($x21, $v21)) {\n    throw new Exception(\"Error at 22th assert statement.\");\n}\n$arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\n$x22 = search($arg220);\n$v22 = 1;\nif (!compare($x22, $v22)) {\n    throw new Exception(\"Error at 23th assert statement.\");\n}\n$arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\n$x23 = search($arg230);\n$v23 = 1;\nif (!compare($x23, $v23)) {\n    throw new Exception(\"Error at 24th assert statement.\");\n}\n$arg240 = [3, 10, 10, 9, 2];\n$x24 = search($arg240);\n$v24 = -1;\nif (!compare($x24, $v24)) {\n    throw new Exception(\"Error at 25th assert statement.\");\n}\n", "description": "तुम्हाला सकारात्मक पूर्णांकांची रिकामी नसलेली यादी दिली जाते. त्यापेक्षा मोठा असलेला सर्वात मोठा पूर्णांक परत करा. \nशून्य, आणि त्याची वारंवारता पूर्णांकाच्या मूल्यापेक्षा जास्त किंवा समान असते. \nपूर्णांकाची वारंवारता म्हणजे ती यादीत किती वेळा दिसते. \nअसे कोणतेही मूल्य अस्तित्वात नसल्यास,-1 परत करा. \nउदाहरणेः \nशोध ([4,1,2,2,3,1]) = = 2 \nशोध ([1,2,3,3,4,4]) = = 3 \nशोध ([5,5,4,4]) = =-1", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/29", "entry_point": "triangleArea", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 4;\n$arg02 = 5;\n$x0 = triangleArea($arg00, $arg01, $arg02);\n$v0 = 6.0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 2;\n$arg12 = 10;\n$x1 = triangleArea($arg10, $arg11, $arg12);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 4;\n$arg21 = 8;\n$arg22 = 5;\n$x2 = triangleArea($arg20, $arg21, $arg22);\n$v2 = 8.18;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 2;\n$arg31 = 2;\n$arg32 = 2;\n$x3 = triangleArea($arg30, $arg31, $arg32);\n$v3 = 1.73;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 1;\n$arg41 = 2;\n$arg42 = 3;\n$x4 = triangleArea($arg40, $arg41, $arg42);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 10;\n$arg51 = 5;\n$arg52 = 7;\n$x5 = triangleArea($arg50, $arg51, $arg52);\n$v5 = 16.25;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 2;\n$arg61 = 6;\n$arg62 = 3;\n$x6 = triangleArea($arg60, $arg61, $arg62);\n$v6 = -1;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 1;\n$arg71 = 1;\n$arg72 = 1;\n$x7 = triangleArea($arg70, $arg71, $arg72);\n$v7 = 0.43;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 2;\n$arg81 = 2;\n$arg82 = 10;\n$x8 = triangleArea($arg80, $arg81, $arg82);\n$v8 = -1;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "त्रिकोणाच्या तीन बाजूंची लांबी दिलेली. त्याचे क्षेत्रफळ परत करा \nजर तीन बाजूंनी वैध त्रिकोण तयार झाला तर त्रिकोण 2 दशांश बिंदूंवर गोल केला जातो. \nअन्यथा परतावा-1 \nजेव्हा कोणत्याही दोन बाजूंची बेरीज जास्त असते तेव्हा तीन बाजू वैध त्रिकोण बनवतात. \nतिसऱ्या बाजूला. \nउदाहरणादाखलः \nत्रिभुज क्षेत्र (3,4,5) = = 6.00 \nत्रिभुज क्षेत्र (1,2,10) = =-1", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/30", "entry_point": "willItFly", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 2, 3];\n$arg01 = 9;\n$x0 = willItFly($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2];\n$arg11 = 5;\n$x1 = willItFly($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3];\n$arg21 = 5;\n$x2 = willItFly($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 2, 3];\n$arg31 = 1;\n$x3 = willItFly($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 3];\n$arg41 = 6;\n$x4 = willItFly($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [5];\n$arg51 = 5;\n$x5 = willItFly($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "एखादे कार्य लिहा जे q वस्तू उडत असेल तर खरे आणि अन्यथा खोटे परत करेल. \nजर वस्तू क्यू संतुलित असेल (ती एक पॅलिन्ड्रोमिक यादी आहे) आणि त्याच्या घटकांची बेरीज जास्तीत जास्त संभाव्य वजन डब्ल्यू पेक्षा कमी किंवा समान असेल तर ती उडेल. \n\nउदाहरणादाखलः \nतो उडणार का ([1,2], 5) \n#1 + 2 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे, परंतु ते असंतुलित आहे. \n\nतो उडणार का ([3,2,3], 1) खोटे \n#हे संतुलित आहे, परंतु 3 + 2 + 3 हे जास्तीत जास्त संभाव्य वजनापेक्षा जास्त आहे. \n\nविल इट फ्लाय ([3,2,3], 9) \n#3 + 2 + 3 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे आणि ते संतुलित आहे. \n\nविल इट फ्लाय ([3], 5) ट्रू \n#3 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे आणि ते संतुलित आहे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/31", "entry_point": "isMultiplyPrime", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = isMultiplyPrime($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 30;\n$x1 = isMultiplyPrime($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 8;\n$x2 = isMultiplyPrime($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 10;\n$x3 = isMultiplyPrime($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 125;\n$x4 = isMultiplyPrime($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 105;\n$x5 = isMultiplyPrime($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 126;\n$x6 = isMultiplyPrime($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 729;\n$x7 = isMultiplyPrime($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 891;\n$x8 = isMultiplyPrime($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1001;\n$x9 = isMultiplyPrime($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "जर दिलेली संख्या 3 अभाज्य संख्यांचा गुणाकार असेल तर असे कार्य लिहा जे खरे ठरेल. \nआणि अन्यथा खोटे. \n(अ) हे 100 पेक्षा कमी आहे हे जाणून घेणे. \nउदाहरणादाखलः \nगुणाकार _ प्राइम (30) = = खरे आहे \n30 = 2 * 3 * 5", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/32", "entry_point": "decimalToBinary", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 0;\n$x0 = decimalToBinary($arg00);\n$v0 = \"db0db\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 32;\n$x1 = decimalToBinary($arg10);\n$v1 = \"db100000db\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 103;\n$x2 = decimalToBinary($arg20);\n$v2 = \"db1100111db\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 15;\n$x3 = decimalToBinary($arg30);\n$v3 = \"db1111db\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "तुम्हाला दशांश स्वरूपात एक संख्या दिली जाईल आणि तुमचे काम त्याचे रूपांतर करणे आहे. \nद्वैती स्वरूप. कार्याने एक स्ट्रिंग परत करावी, ज्यामध्ये प्रत्येक वर्ण द्वैती दर्शवितो \nसंख्या. स्ट्रिंगमधील प्रत्येक अक्षर'0'किंवा'1'असेल. \n\nस्ट्रिंगच्या सुरुवातीला आणि शेवटी'डी. बी.'अशी दोन अतिरिक्त अक्षरे असतील. \nस्वरूपामध्ये मदत करण्यासाठी अतिरिक्त अक्षरे आहेत. \n\nउदाहरणेः \nदशांश _ ते _ द्वैती (15) #\"db1111db\" परत करते \nदशांश _ ते _ द्वैती (32) #\"db100000db\" परत करते", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/33", "entry_point": "isHappy", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"a\";\n$x0 = isHappy($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"aa\";\n$x1 = isHappy($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"abcd\";\n$x2 = isHappy($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"aabb\";\n$x3 = isHappy($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"adb\";\n$x4 = isHappy($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"xyy\";\n$x5 = isHappy($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"iopaxpoi\";\n$x6 = isHappy($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"iopaxioi\";\n$x7 = isHappy($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "तुम्हाला एक स्ट्रिंग s दिली जाते. \nस्ट्रिंग आनंदी आहे की नाही हे तपासणे हे तुमचे काम आहे. \nजर स्ट्रिंगची लांबी किमान 3 असेल आणि प्रत्येक 3 सलग अक्षरे वेगळी असतील तर ती आनंदी असते. \nउदाहरणार्थ, \nआनंदी (अ) => खोटे आहे \nआहे _ आनंदी (एए) => खोटे \nआनंदी आहे (ए. बी. सी. डी.) => खरे \nआनंदी आहे (आब्ब) => खोटे \nआनंदी आहे (ADB) => खरे \nआनंदी आहे (xyy) => खोटे", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/34", "entry_point": "numericalLetterGrade", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [4.0, 3, 1.7, 2, 3.5];\n$x0 = numericalLetterGrade($arg00);\n$v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1.2];\n$x1 = numericalLetterGrade($arg10);\n$v1 = [\"D+\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [0.5];\n$x2 = numericalLetterGrade($arg20);\n$v2 = [\"D-\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [0.0];\n$x3 = numericalLetterGrade($arg30);\n$v3 = [\"E\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 0.3, 1.5, 2.8, 3.3];\n$x4 = numericalLetterGrade($arg40);\n$v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 0.7];\n$x5 = numericalLetterGrade($arg50);\n$v5 = [\"E\", \"D-\"];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "हा सत्राचा शेवटचा आठवडा असतो आणि शिक्षकांना गुण द्यावे लागतात. \nविद्यार्थ्यांना. शिक्षक ग्रेडिंगसाठी स्वतःचे अल्गोरिदम तयार करत आहेत. \nफक्त एकच अडचण आहे की, तिने ग्रेडिंगसाठी वापरलेला कोड गमावला आहे. \nतिने तुम्हाला काही विद्यार्थ्यांसाठी जी. पी. ए. ची यादी दिली आहे आणि तुम्हाला लिहावे लागेल. \nएक कार्य जे खालील तक्ता वापरून अक्षर श्रेणीची यादी तयार करू शकतेः \nजी. पी. ए.। अक्षर श्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n> 3 बी + \n> 2.7 बी \n> 2.3 ब-\n> 2 सी + \n> 1.7 से. \n> 1.3 सी-\n> 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणादाखलः \nश्रेणी समीकरण ([4.0,3,1.7,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/35", "entry_point": "primeLength", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello\";\n$x0 = primeLength($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdcba\";\n$x1 = primeLength($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"kittens\";\n$x2 = primeLength($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"orange\";\n$x3 = primeLength($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"wow\";\n$x4 = primeLength($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"world\";\n$x5 = primeLength($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"MadaM\";\n$x6 = primeLength($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"Wow\";\n$x7 = primeLength($arg70);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"\";\n$x8 = primeLength($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"HI\";\n$x9 = primeLength($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"go\";\n$x10 = primeLength($arg100);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"gogo\";\n$x11 = primeLength($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"aaaaaaaaaaaaaaa\";\n$x12 = primeLength($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = \"Madam\";\n$x13 = primeLength($arg130);\n$v13 = true;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = \"M\";\n$x14 = primeLength($arg140);\n$v14 = false;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = \"0\";\n$x15 = primeLength($arg150);\n$v15 = false;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n", "description": "एक कार्य लिहा जे स्ट्रिंग घेते आणि स्ट्रिंग असल्यास खरे परत करते \nलांबी ही अभाज्य संख्या आहे किंवा अन्यथा चुकीची आहे \nउदाहरणे \nप्राइम लांबी ('हॅलो') = = खरे \nप्राइम लांबी ('एबीसीडीसीबीए') = = खरे \nप्राइम लांबी ('मांजरीचे पिल्लू') = = खरे \nअविभाज्य लांबी ('नारिंगी') = = चुकीची", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/36", "entry_point": "solve", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1000;\n$x0 = solve($arg00);\n$v0 = \"1\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 150;\n$x1 = solve($arg10);\n$v1 = \"110\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 147;\n$x2 = solve($arg20);\n$v2 = \"1100\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 333;\n$x3 = solve($arg30);\n$v3 = \"1001\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 963;\n$x4 = solve($arg40);\n$v4 = \"10010\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "एक सकारात्मक पूर्णांक N दिल्यास, त्याच्या अंकांची एकूण बेरीज बायनरीमध्ये परत करा. \n\nउदाहरणादाखल \nएन = 1000 साठी, अंकांची बेरीज 1 असेल तर उत्पादन \"1\" असावे. \nएन = 150 साठी, अंकांची बेरीज 6 असेल आणि उत्पादन \"110\" असावे. \nएन = 147 साठी, अंकांची बेरीज 12 असेल तर उत्पादन \"1100\" असावे. \n\nपरिवर्तनशीलः \n@N पूर्णांक \nनिर्बंधः 0 ≤ एन ≤ 10000. \nउत्पादनः \nद्वैती क्रमांकाची एक स्ट्रिंग", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/37", "entry_point": "getRow", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$arg01 = 1;\n$x0 = getRow($arg00, $arg01);\n$v0 = [];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [[1]];\n$arg11 = 2;\n$x1 = getRow($arg10, $arg11);\n$v1 = [];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [[], [1], [1, 2, 3]];\n$arg21 = 3;\n$x2 = getRow($arg20, $arg21);\n$v2 = [[2, 2]];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "तुम्हाला नेस्टेड यादी म्हणून द्विमितीय माहिती दिली जाते, \nजे मॅट्रिक्ससारखेच आहे, तथापि, मॅट्रिक्सच्या विपरीत, \nप्रत्येक ओळीत वेगवेगळ्या स्तंभांची संख्या असू शकते. \nदिलेल्या lst आणि पूर्णांक x मध्ये, यादीतील पूर्णांक x शोधा, \nआणि टुपल्सची परत यादी, [(x1, y1), (x2, y2)...] अशी की \nप्रत्येक टुपल हा एक निर्देशांक आहे-(पंक्ती, स्तंभ), जो 0 ने सुरू होतो. \nनिर्देशांक सुरुवातीला चढत्या क्रमाने ओळींनुसार क्रमवारी लावा. \nतसेच, पंक्तीचे निर्देशांक स्तंभांनुसार उतरत्या क्रमाने क्रमवारीत करा. \n\nउदाहरणेः \nपंक्ती मिळवा (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nमिळवा _ पंक्ती ([], 1) = = [] \nमिळवा _ पंक्ती ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/38", "entry_point": "nextSmallest", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3, 4, 5];\n$x0 = nextSmallest($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 1, 4, 3, 2];\n$x1 = nextSmallest($arg10);\n$v1 = 2;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [];\n$x2 = nextSmallest($arg20);\n$v2 = null;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 1];\n$x3 = nextSmallest($arg30);\n$v3 = null;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 1, 1, 1, 0];\n$x4 = nextSmallest($arg40);\n$v4 = 1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 1];\n$x5 = nextSmallest($arg50);\n$v5 = null;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-35, 34, 12, -45];\n$x6 = nextSmallest($arg60);\n$v6 = -35;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "तुम्हाला पूर्णांकांची यादी दिली जाते. \nयादीतील दुसरा सर्वात लहान घटक परत करणारे पुढील _ सर्वात लहान () हे कार्य लिहा. \nअसा कोणताही घटक नसल्यास शून्य परत करा. \n\nपुढील _ सर्वात लहान ([1,2,3,4,5]) = = 2 \nपुढील _ सर्वात लहान ([5,1,4,3,2]) = = 2 \nपुढील _ सर्वात लहान ([]) = = काहीही नाही \nपुढील _ सर्वात लहान ([1,1]) = = काहीही नाही", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/39", "entry_point": "isBored", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello world\";\n$x0 = isBored($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Is the sky blue?\";\n$x1 = isBored($arg10);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"I love It !\";\n$x2 = isBored($arg20);\n$v2 = 1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"bIt\";\n$x3 = isBored($arg30);\n$v3 = 0;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"I feel good today. I will be productive. will kill It\";\n$x4 = isBored($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"You and I are going for a walk\";\n$x5 = isBored($arg50);\n$v5 = 0;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "तुम्हाला शब्दांची एक मालिका दिली जाईल आणि तुमचे काम संख्या मोजणे आहे. \nकंटाळवाणेपणा. कंटाळवाणेपणा हे \"मी\" या शब्दाने सुरू होणारे वाक्य आहे. \nवाक्ये '.', '?'किंवा '!'द्वारे सीमांकित केली जातात. \n\nउदाहरणार्थ, \n>>> कंटाळले आहे (\"हॅलो वर्ल्ड\") \n0. \n>>> कंटाळले आहे (\"आकाश निळे आहे. सूर्य चमकतो आहे. मला हे हवामान आवडते\") \n1.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/40", "entry_point": "skjkasdkd", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\n$x0 = skjkasdkd($arg00);\n$v0 = 10;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\n$x1 = skjkasdkd($arg10);\n$v1 = 25;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\n$x2 = skjkasdkd($arg20);\n$v2 = 13;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\n$x3 = skjkasdkd($arg30);\n$v3 = 11;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [0, 81, 12, 3, 1, 21];\n$x4 = skjkasdkd($arg40);\n$v4 = 3;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 8, 1, 2, 1, 7];\n$x5 = skjkasdkd($arg50);\n$v5 = 7;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [8191];\n$x6 = skjkasdkd($arg60);\n$v6 = 19;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [8191, 123456, 127, 7];\n$x7 = skjkasdkd($arg70);\n$v7 = 19;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [127, 97, 8192];\n$x8 = skjkasdkd($arg80);\n$v8 = 10;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "तुम्हाला पूर्णांकांची यादी दिली जाते. \nतुम्हाला सर्वात मोठे मूळ मूल्य शोधावे लागेल आणि त्याच्या अंकांची बेरीज परत करावी लागेल. \n\nउदाहरणेः \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] साठी आउटपुट 10 असावे. \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] साठी आउटपुट 25 असावे. \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] साठी आउटपुट 13 असावे. \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] साठी आउटपुट 11 असावे. \nlst = [0,81,12, 3,1,21] साठी आउटपुट 3 असावे. \nlst = [0,8,1, 2,1,7] साठी आउटपुट 7 असावे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/41", "entry_point": "checkDictCase", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [\"p\" => \"pineapple\", \"b\" => \"banana\"];\n$x0 = checkDictCase($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"];\n$x1 = checkDictCase($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"];\n$x2 = checkDictCase($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"];\n$x3 = checkDictCase($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [\"STATE\" => \"NC\", \"ZIP\" => \"12345\"];\n$x4 = checkDictCase($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"];\n$x5 = checkDictCase($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [];\n$x6 = checkDictCase($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "शब्दकोश दिल्यास, जर सर्व किल्ली खालच्या भागात स्ट्रिंग असतील तर खरे परत करा \nकेस किंवा सर्व किल्ली मोठ्या केस मध्ये स्ट्रिंग आहेत, अन्यथा खोटे परत करा. \n'फॉल्स'हे फंक्शन रिटर्न करावे म्हणजे दिलेला शब्दकोश रिकामा आहे. \nउदाहरणेः \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", \"b\": \"केळी\"}) ने खरे परतावे. \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", \"A\": \"केळी\", \"B\": \"केळी\"}) ने चुकीचे परतावे. \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", 8: \"केळी\", \"a\": \"सफरचंद\"}) ने चुकीचे परतावे. \nचेक _ डिक्ट _ केस ({\"नाव\": \"जॉन\", \"वय\": \"36\", \"शहर\": \"ह्यूस्टन\"}) ने फॉल्स परत केले पाहिजे. \nचेक _ डिक्ट _ केस ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) ने खरे परतावे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/42", "entry_point": "closestInteger", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"10\";\n$x0 = closestInteger($arg00);\n$v0 = 10;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"14.5\";\n$x1 = closestInteger($arg10);\n$v1 = 15;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"-15.5\";\n$x2 = closestInteger($arg20);\n$v2 = -16;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"15.3\";\n$x3 = closestInteger($arg30);\n$v3 = 15;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"0\";\n$x4 = closestInteger($arg40);\n$v4 = 0;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "संख्येचे प्रतिनिधित्व करणारे मूल्य (स्ट्रिंग) घेणारे कार्य तयार करा \nआणि त्याला सर्वात जवळचा पूर्णांक परत करतो. जर संख्या समदूर असेल तर \nदोन पूर्णांकांपासून, शून्यापासून दूर गोल करा. \n\nउदाहरणे \n>>> सर्वात जवळचा पूर्णांक (\"10\") \n10. \n>>> सर्वात जवळचा पूर्णांक (\"15.3\") \n15. \n\nटीपः \nशून्यापासून दूर पूर्णांक करणे म्हणजे जर दिलेली संख्या समदूर असेल तर \nदोन पूर्णांकांमधून, तुम्ही ज्याला परत केले पाहिजे ते आहे \nशून्यापासून सर्वात दूर. उदाहरणार्थ सर्वात जवळचा पूर्णांक (\"14.5\") असायला हवा. \n15 परत करा आणि सर्वात जवळचा पूर्णांक (\"-14.5\")-15 परत करावा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/43", "entry_point": "makeAPile", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$x0 = makeAPile($arg00);\n$v0 = [3, 5, 7];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 4;\n$x1 = makeAPile($arg10);\n$v1 = [4, 6, 8, 10];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = makeAPile($arg20);\n$v2 = [5, 7, 9, 11, 13];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 6;\n$x3 = makeAPile($arg30);\n$v3 = [6, 8, 10, 12, 14, 16];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 8;\n$x4 = makeAPile($arg40);\n$v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "एक सकारात्मक पूर्णांक n दिल्यास, तुम्हाला दगडांच्या n स्तरांचा ढीग तयार करावा लागेल. \nपहिल्या स्तरावर एन दगड आहेत. \nपुढील स्तरावरील दगडांची संख्या अशी आहेः \n- n विषम असल्यास पुढील विषम संख्या. \n- जर n सम असेल तर पुढील सम संख्या. \nसूचीतील प्रत्येक स्तरावरील दगडांची संख्या परत करा, जेथे घटक निर्देशांकात आहे. \ni पातळीवरील दगडांची संख्या दर्शविते (i + 1). \n\nउदाहरणेः \n>>> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3,5,7]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/44", "entry_point": "wordsString", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hi, my name is John\";\n$x0 = wordsString($arg00);\n$v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"One, two, three, four, five, six\";\n$x1 = wordsString($arg10);\n$v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"Hi, my name\";\n$x2 = wordsString($arg20);\n$v2 = [\"Hi\", \"my\", \"name\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"One,, two, three, four, five, six,\";\n$x3 = wordsString($arg30);\n$v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"\";\n$x4 = wordsString($arg40);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"ahmed     , gamal\";\n$x5 = wordsString($arg50);\n$v5 = [\"ahmed\", \"gamal\"];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "तुम्हाला अल्पविराम किंवा मोकळ्या जागांनी विभक्त केलेल्या शब्दांची एक स्ट्रिंग दिली जाईल. तुमचे कार्य आहे \nस्ट्रिंगचे शब्दांमध्ये विभाजन करणे आणि शब्दांची एक श्रेणी परत करणे. \n\nउदाहरणार्थ, \nशब्द _ स्ट्रिंग (\"हाय, माझे नाव जॉन आहे\") = = [\"हाय\", \"माझे\", \"नाव\", \"आहे\", \"जॉन\"] \nशब्द _ स्ट्रिंग (\"एक, दोन, तीन, चार, पाच, सहा\") = = [\"एक\", \"दोन\", \"तीन\", \"चार\", \"पाच\", \"सहा\"]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/45", "entry_point": "chooseNum", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 12;\n$arg01 = 15;\n$x0 = chooseNum($arg00, $arg01);\n$v0 = 14;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 13;\n$arg11 = 12;\n$x1 = chooseNum($arg10, $arg11);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 33;\n$arg21 = 12354;\n$x2 = chooseNum($arg20, $arg21);\n$v2 = 12354;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5234;\n$arg31 = 5233;\n$x3 = chooseNum($arg30, $arg31);\n$v3 = -1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 6;\n$arg41 = 29;\n$x4 = chooseNum($arg40, $arg41);\n$v4 = 28;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 27;\n$arg51 = 10;\n$x5 = chooseNum($arg50, $arg51);\n$v5 = -1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 7;\n$arg61 = 7;\n$x6 = chooseNum($arg60, $arg61);\n$v6 = -1;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 546;\n$arg71 = 546;\n$x7 = chooseNum($arg70, $arg71);\n$v7 = 546;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "हे कार्य x आणि y या दोन सकारात्मक संख्या घेते आणि परत करते \n[x, y] सर्वसमावेशक श्रेणीतील सर्वात मोठी सम पूर्णांक संख्या. \nअशी कोणतीही संख्या नाही, तर कार्य-1 परत आले पाहिजे. \n\nउदाहरणार्थ, \nसंख्या निवडा (12,15) = 14 \nसंख्या निवडा (13,12) =-1", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/46", "entry_point": "roundedAvg", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$arg01 = 5;\n$x0 = roundedAvg($arg00, $arg01);\n$v0 = \"0b11\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 7;\n$arg11 = 13;\n$x1 = roundedAvg($arg10, $arg11);\n$v1 = \"0b1010\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 964;\n$arg21 = 977;\n$x2 = roundedAvg($arg20, $arg21);\n$v2 = \"0b1111001010\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 996;\n$arg31 = 997;\n$x3 = roundedAvg($arg30, $arg31);\n$v3 = \"0b1111100100\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 560;\n$arg41 = 851;\n$x4 = roundedAvg($arg40, $arg41);\n$v4 = \"0b1011000010\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 185;\n$arg51 = 546;\n$x5 = roundedAvg($arg50, $arg51);\n$v5 = \"0b101101110\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 362;\n$arg61 = 496;\n$x6 = roundedAvg($arg60, $arg61);\n$v6 = \"0b110101101\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 350;\n$arg71 = 902;\n$x7 = roundedAvg($arg70, $arg71);\n$v7 = \"0b1001110010\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 197;\n$arg81 = 233;\n$x8 = roundedAvg($arg80, $arg81);\n$v8 = \"0b11010111\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 7;\n$arg91 = 5;\n$x9 = roundedAvg($arg90, $arg91);\n$v9 = -1;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 5;\n$arg101 = 1;\n$x10 = roundedAvg($arg100, $arg101);\n$v10 = -1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 5;\n$arg111 = 5;\n$x11 = roundedAvg($arg110, $arg111);\n$v11 = \"0b101\";\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n", "description": "तुम्हाला दोन सकारात्मक पूर्णांक n आणि m दिले आहेत आणि तुमचे कार्य गणना करणे आहे \nn ते m पर्यंतच्या पूर्णांकांची सरासरी (n आणि m सह). \nसर्वात जवळच्या पूर्णांकाच्या उत्तराला गोल करा आणि त्याचे बायनरीमध्ये रूपांतर करा. \nजर n हा m पेक्षा मोठा असेल तर-1 परत करा. \nउदाहरणादाखलः \nगोलाकार _ ए. व्ही. जी. (1,5) => \"0बी11\" \nगोलाकार _ ए. व्ही. जी. (7,5) =>-1 \nगोलाकार _ ए. व्ही. जी. (10,20) => \"0बी1111\" \nगोलाकार _ ए. व्ही. जी. (20,33) => \"0b11010\"", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/47", "entry_point": "f", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = f($arg00);\n$v0 = [1, 2, 6, 24, 15];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 7;\n$x1 = f($arg10);\n$v1 = [1, 2, 6, 24, 15, 720, 28];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 1;\n$x2 = f($arg20);\n$v2 = [1];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 3;\n$x3 = f($arg30);\n$v3 = [1, 2, 6];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "फंक्शन f ची अंमलबजावणी करा जे n ला पॅरामीटर म्हणून घेते, \nआणि आकार n ची यादी अशा प्रकारे परत करते, की जर i सम असेल तर निर्देशांक i वरील घटकाचे मूल्य हे i चे फॅक्टोरियल असेल. \nकिंवा अन्यथा 1 ते i पर्यंतच्या संख्यांची बेरीज. \nमी 1 पासून सुरुवात करतो. \ni चा फॅक्टोरियल म्हणजे 1 ते i (1 * 2 *... * i) पर्यंतच्या संख्यांचा गुणाकार. \nउदाहरणादाखलः \nf (5) = = [1,2,6,24,15]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/48", "entry_point": "evenOddPalindrome", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 123;\n$x0 = evenOddPalindrome($arg00);\n$v0 = [8, 13];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 12;\n$x1 = evenOddPalindrome($arg10);\n$v1 = [4, 6];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$x2 = evenOddPalindrome($arg20);\n$v2 = [1, 2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 63;\n$x3 = evenOddPalindrome($arg30);\n$v3 = [6, 8];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 25;\n$x4 = evenOddPalindrome($arg40);\n$v4 = [5, 6];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 19;\n$x5 = evenOddPalindrome($arg50);\n$v5 = [4, 6];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 9;\n$x6 = evenOddPalindrome($arg60);\n$v6 = [4, 5];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 1;\n$x7 = evenOddPalindrome($arg70);\n$v7 = [0, 1];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "एक सकारात्मक पूर्णांक n दिल्यास, सम आणि विषम संख्या असलेले टुपल परत करा \nपूर्णांक पॅलिंड्रोम्स जे (1, एन) श्रेणीत येतात, सर्वसमावेशक. \n\nउदाहरण 1: \n\nइनपुटः 3 \nउत्पादनः (1,2) \nस्पष्टीकरणः \nपूर्णांक पॅलिंड्रोम 1,2,3 आहेत. त्यापैकी एक सम आहे आणि त्यापैकी दोन विषम आहेत. \n\nउदाहरण 2: \n\nइनपुटः 12 \nउत्पादनः (4,6) \nस्पष्टीकरणः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हे पूर्णांक पॅलिंड्रोम आहेत. त्यापैकी चार सम आहेत आणि त्यापैकी 6 विषम आहेत. \n\nटीपः \n1. 1 <= n <= 10 ^ 3 \n2. परत आलेल्या टुपलमध्ये अनुक्रमे सम आणि विषम पूर्णांक पॅलिंड्रोम्सची संख्या असते.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/49", "entry_point": "moveOneBall", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 4, 5, 1, 2];\n$x0 = moveOneBall($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [3, 5, 10, 1, 2];\n$x1 = moveOneBall($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [4, 3, 1, 2];\n$x2 = moveOneBall($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 5, 4, 1, 2];\n$x3 = moveOneBall($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [];\n$x4 = moveOneBall($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "आमच्याकडे'arr'हा N पूर्णांक arr [1], arr [2],..., arr [N] चा अॅरे आहे. \nरचनेतील संख्या यादृच्छिकपणे क्रमबद्ध केल्या जातील. हे ठरवणे हे तुमचे काम आहे \nसादरीकरण करून कमी न होणाऱ्या क्रमाने अॅरेची क्रमवारी लावणे शक्य आहे. \nदिलेल्या अॅरेवर खालील ऑपरेशनः \nतुम्हाला कितीही वेळा योग्य शिफ्ट ऑपरेशन करण्याची परवानगी आहे. \n\nवन राईट शिफ्ट ऑपरेशन म्हणजे अॅरेच्या सर्व घटकांना एकाने हलवणे. \nयोग्य दिशेने स्थान. आरेचा शेवटचा घटक येथे हलविला जाईल \nअॅरेमधील प्रारंभिक स्थान म्हणजे 0 व्या निर्देशांकात. \n\nवरील ऑपरेशन करून क्रमवारी लावलेली अॅरे मिळवणे शक्य असल्यास \nनंतर'खरे'परत करा अन्यथा'खोटे'परत करा. \nजर दिलेला अॅरे रिकामा असेल तर खरे परत करा. \n\nटीपः दिलेल्या यादीमध्ये अद्वितीय घटक असण्याची हमी आहे. \n\nउदाहरणादाखलः \n\nमूव्ह वन बॉल ([3,4,5,1,2]) = => खरे \nस्पष्टीकरणः 2 योग्य शिफ्ट ऑपरेशन्समध्ये कामगिरी करून, नॉन-डीक्रीझिंग ऑर्डर करू शकते \nदिलेल्या अॅरेसाठी साध्य केले जाईल. \nमूव्ह वन बॉल ([3,5,4,1,2]) = => खोटे \nस्पष्टीकरणः दिलेल्या मागणीसाठी कमी न होणारी ऑर्डर मिळवणे शक्य नाही. \nकोणत्याही संख्येने योग्य शिफ्ट ऑपरेशन्स करून अॅरे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/50", "entry_point": "exchange", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3, 4];\n$arg01 = [1, 2, 3, 4];\n$x0 = exchange($arg00, $arg01);\n$v0 = \"YES\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 3, 4];\n$arg11 = [1, 5, 3, 4];\n$x1 = exchange($arg10, $arg11);\n$v1 = \"NO\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, 3, 4];\n$arg21 = [2, 1, 4, 3];\n$x2 = exchange($arg20, $arg21);\n$v2 = \"YES\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [5, 7, 3];\n$arg31 = [2, 6, 4];\n$x3 = exchange($arg30, $arg31);\n$v3 = \"YES\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [5, 7, 3];\n$arg41 = [2, 6, 3];\n$x4 = exchange($arg40, $arg41);\n$v4 = \"NO\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [3, 2, 6, 1, 8, 9];\n$arg51 = [3, 5, 5, 1, 1, 1];\n$x5 = exchange($arg50, $arg51);\n$v5 = \"NO\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [100, 200];\n$arg61 = [200, 200];\n$x6 = exchange($arg60, $arg61);\n$v6 = \"YES\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "या समस्येमध्ये, तुम्ही एक कार्य अंमलात आणाल जे संख्यांच्या दोन याद्या घेते, \nआणि घटकांची देवाणघेवाण करणे शक्य आहे की नाही हे ठरवते \nत्यांच्या दरम्यान lst1 ही केवळ समसंख्यांची यादी बनवणे. \nlst1 आणि lst2 दरम्यान अदलाबदल झालेल्या घटकांच्या संख्येवर कोणतीही मर्यादा नाही. \nएल. एस. टी. 1 आणि एल. एस. टी. 2 दरम्यान घटकांची देवाणघेवाण करणे शक्य असल्यास \nlst1 चे सर्व घटक सम होण्यासाठी,'होय'परत करा. \nअन्यथा,'नाही'परत करा. \nउदाहरणार्थ, \nविनिमय ([1,2,3,4], [1,2,3,4]) => \"होय\" \nविनिमय ([1,2,3,4], [1,5,3,4]) => \"नाही\" \nइनपुट याद्या रिकाम्या नसतील असे गृहित धरले जाते.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/51", "entry_point": "reverseDelete", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"abcde\";\n$arg01 = \"ae\";\n$x0 = reverseDelete($arg00, $arg01);\n$v0 = [\"bcd\", false];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdef\";\n$arg11 = \"b\";\n$x1 = reverseDelete($arg10, $arg11);\n$v1 = [\"acdef\", false];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"abcdedcba\";\n$arg21 = \"ab\";\n$x2 = reverseDelete($arg20, $arg21);\n$v2 = [\"cdedc\", true];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"dwik\";\n$arg31 = \"w\";\n$x3 = reverseDelete($arg30, $arg31);\n$v3 = [\"dik\", false];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"a\";\n$arg41 = \"a\";\n$x4 = reverseDelete($arg40, $arg41);\n$v4 = [\"\", true];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"abcdedcba\";\n$arg51 = \"\";\n$x5 = reverseDelete($arg50, $arg51);\n$v5 = [\"abcdedcba\", true];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"abcdedcba\";\n$arg61 = \"v\";\n$x6 = reverseDelete($arg60, $arg61);\n$v6 = [\"abcdedcba\", true];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"vabba\";\n$arg71 = \"v\";\n$x7 = reverseDelete($arg70, $arg71);\n$v7 = [\"abba\", true];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"mamma\";\n$arg81 = \"mia\";\n$x8 = reverseDelete($arg80, $arg81);\n$v8 = [\"\", true];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "कार्य. \nआम्हाला दोन स्ट्रिंग s आणि c दिल्या आहेत, तुम्हाला s मधील सर्व अक्षरे हटवावी लागतील जी c मधील कोणत्याही अक्षराच्या बरोबरीची आहेत. \nत्यानंतर निकाल स्ट्रिंग पॅलिंड्रोम आहे का ते तपासा. \nजर ती पुढे वाचते तशीच मागे वाचली तर त्याला पॅलिंड्रोम म्हणतात. \nतुम्ही चेकसाठी निकालाची स्ट्रिंग आणि खरे/खोटे असलेले टुपल परत केले पाहिजे. \nउदाहरणादाखल \nएस = \"एबीसीडी\", सी = \"एई\" साठी, परिणाम ('बीसीडी', खोटा) असावा. \nएस = \"ए. बी. सी. डी. एफ\". साठी, सी = \"बी\" परिणाम असावा ('ए. सी. डी. एफ.', खोटे) \nएस = \"ए. बी. सी. डी. सी. बी. ए\"., सी = \"ए. बी\". साठी, परिणाम ('सी. डी. डी. सी.', खरे) असावा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/52", "entry_point": "maxFill", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n$arg01 = 1;\n$x0 = maxFill($arg00, $arg01);\n$v0 = 6;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\n$arg11 = 2;\n$x1 = maxFill($arg10, $arg11);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [[0, 0, 0], [0, 0, 0]];\n$arg21 = 5;\n$x2 = maxFill($arg20, $arg21);\n$v2 = 0;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\n$arg31 = 2;\n$x3 = maxFill($arg30, $arg31);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\n$arg41 = 9;\n$x4 = maxFill($arg40, $arg41);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "तुम्हाला विहिरींचे आयताकृती जाळे दिले जाते. प्रत्येक ओळ एकाच विहिरीचे प्रतिनिधित्व करते. \nआणि एका पंक्तीतील प्रत्येक 1 हे पाण्याचे एकच एकक दर्शवते. \nप्रत्येक विहिरीत एक संबंधित बादली असते जी त्यातून पाणी काढण्यासाठी वापरली जाऊ शकते. \nआणि सर्व बादल्या समान क्षमतेच्या असतात. \nविहिरी रिकाम्या करण्यासाठी बादल्या वापरणे हे तुमचे काम आहे. \nतुम्हाला किती वेळा बादल्या कमी करायच्या आहेत ते सांगा. \n\nउदाहरण 1: \nइनपुटः \nग्रीडः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nबकेट क्षमता (_ c): 1 \nउत्पादनः 6 \n\nउदाहरण 2: \nइनपुटः \nग्रीडः [[0,0,1, 1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबकेट क्षमता (_ c): 2 \nउत्पादनः 5 \n\nउदाहरण 3: \nइनपुटः \nग्रीडः [0,0,0], [0,0,0] \nबकेट क्षमता (_ c): 5 \nउत्पादनः 0 \n\nनिर्बंधः \n* सर्व विहिरींची लांबी समान असते. \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ग्रिड [:, 1]. लांबी <= 10 ^ 2 \nग्रिड [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/53", "entry_point": "selectWords", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Mary had a little lamb\";\n$arg01 = 4;\n$x0 = selectWords($arg00, $arg01);\n$v0 = [\"little\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Mary had a little lamb\";\n$arg11 = 3;\n$x1 = selectWords($arg10, $arg11);\n$v1 = [\"Mary\", \"lamb\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"simple white space\";\n$arg21 = 2;\n$x2 = selectWords($arg20, $arg21);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Hello world\";\n$arg31 = 4;\n$x3 = selectWords($arg30, $arg31);\n$v3 = [\"world\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Uncle sam\";\n$arg41 = 3;\n$x4 = selectWords($arg40, $arg41);\n$v4 = [\"Uncle\"];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"\";\n$arg51 = 4;\n$x5 = selectWords($arg50, $arg51);\n$v5 = [];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"a b c d e f\";\n$arg61 = 1;\n$x6 = selectWords($arg60, $arg61);\n$v6 = [\"b\", \"c\", \"d\", \"f\"];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "स्ट्रिंग s आणि नैसर्गिक संख्या n दिल्यास, तुम्हाला अंमलबजावणी करण्याचे काम सोपवण्यात आले आहे. \nएक कार्य जे स्ट्रिंग s मधील सर्व शब्दांची यादी परत करते ज्यामध्ये अचूकपणे समाविष्ट आहे \nn व्यंजन, क्रमाने हे शब्द स्ट्रिंग s मध्ये दिसतात. \nजर स्ट्रिंग s रिकामी असेल तर फंक्शनने रिकामी यादी परत करावी. \nटीपः तुम्ही असे गृहीत धरू शकता की इनपुट स्ट्रिंगमध्ये फक्त अक्षरे आणि जागा आहेत. \nउदाहरणेः \nशब्द निवडा (\"मेरीला एक लहान कोकरा होता\", 4) = => [\"लहान\"] \nशब्द निवडा (\"मेरीला एक लहान कोकरा होता\", 3) = => [\"मेरी\", \"कोकरा\"] \nनिवडा शब्द (\"साधी पांढरी जागा\", 2) = => [] \nनिवडा शब्द (\"हॅलो वर्ल्ड\", 4) = => [\"वर्ल्ड\"] \nशब्द निवडा (\"अंकल सॅम\", 3) = => [\"अंकल\"]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/54", "entry_point": "maximum", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [-3, -4, 5];\n$arg01 = 3;\n$x0 = maximum($arg00, $arg01);\n$v0 = [-4, -3, 5];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [4, -4, 4];\n$arg11 = 2;\n$x1 = maximum($arg10, $arg11);\n$v1 = [4, 4];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-3, 2, 1, 2, -1, -2, 1];\n$arg21 = 1;\n$x2 = maximum($arg20, $arg21);\n$v2 = [2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [123, -123, 20, 0, 1, 2, -3];\n$arg31 = 3;\n$x3 = maximum($arg30, $arg31);\n$v3 = [2, 20, 123];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-123, 20, 0, 1, 2, -3];\n$arg41 = 4;\n$x4 = maximum($arg40, $arg41);\n$v4 = [0, 1, 2, 20];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [5, 15, 0, 3, -13, -8, 0];\n$arg51 = 7;\n$x5 = maximum($arg50, $arg51);\n$v5 = [-13, -8, 0, 0, 3, 5, 15];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-1, 0, 2, 5, 3, -10];\n$arg61 = 2;\n$x6 = maximum($arg60, $arg61);\n$v6 = [3, 5];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [1, 0, 5, -7];\n$arg71 = 1;\n$x7 = maximum($arg70, $arg71);\n$v7 = [5];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [4, -4];\n$arg81 = 2;\n$x8 = maximum($arg80, $arg81);\n$v8 = [-4, 4];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [-10, 10];\n$arg91 = 2;\n$x9 = maximum($arg90, $arg91);\n$v9 = [-10, 10];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [1, 2, 3, -23, 243, -400, 0];\n$arg101 = 0;\n$x10 = maximum($arg100, $arg101);\n$v10 = [];\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "पूर्णांकांची एक आर. आर. आणि एक सकारात्मक पूर्णांक के दिल्यास, क्रमवारी लावलेली यादी परत करा. \nए. आर. आर. मध्ये कमाल के संख्येसह लांबी के. \n\nउदाहरण 1: \n\nइनपुटः arr = [-3,-4,5], k = 3 \nउत्पादनः [-4,-3,5] \n\nउदाहरण 2: \n\nइनपुटः arr = [4,-4,4], k = 2 \nउत्पादनः [4,4] \n\nउदाहरण 3: \n\nइनपुटः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटीपः \n1. अॅरेची लांबी [1000] च्या श्रेणीत असेल. \n2. रचनेतील घटक [-1000] च्या श्रेणीत असतील. \n3. 0 <= k <= लेन (arr)", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/55", "entry_point": "addElements", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\n$arg01 = 3;\n$x0 = addElements($arg00, $arg01);\n$v0 = -4;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [111, 121, 3, 4000, 5, 6];\n$arg11 = 2;\n$x1 = addElements($arg10, $arg11);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\n$arg21 = 4;\n$x2 = addElements($arg20, $arg21);\n$v2 = 125;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$arg31 = 4;\n$x3 = addElements($arg30, $arg31);\n$v3 = 24;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$arg41 = 1;\n$x4 = addElements($arg40, $arg41);\n$v4 = 1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "पूर्णांक ए. आर. आर. आणि पूर्णांक के. ची रिकामी नसलेली श्रेणी दिल्यास, परत करा \nए. आर. आर. च्या पहिल्या के घटकांमधून जास्तीत जास्त दोन अंक असलेल्या घटकांची बेरीज. \n\nउदाहरणादाखलः \n\nइनपुटः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nउत्पादनः 24 #21 + 3 ची बेरीज \n\nनिर्बंधः \n1. 1 <= लेन (ए. आर. आर.) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/56", "entry_point": "intersection", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2];\n$arg01 = [2, 3];\n$x0 = intersection($arg00, $arg01);\n$v0 = \"NO\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [-1, 1];\n$arg11 = [0, 4];\n$x1 = intersection($arg10, $arg11);\n$v1 = \"NO\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-3, -1];\n$arg21 = [-5, 5];\n$x2 = intersection($arg20, $arg21);\n$v2 = \"YES\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [-2, 2];\n$arg31 = [-4, 0];\n$x3 = intersection($arg30, $arg31);\n$v3 = \"YES\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-11, 2];\n$arg41 = [-1, -1];\n$x4 = intersection($arg40, $arg41);\n$v4 = \"NO\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 2];\n$arg51 = [3, 5];\n$x5 = intersection($arg50, $arg51);\n$v5 = \"NO\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [1, 2];\n$arg61 = [1, 2];\n$x6 = intersection($arg60, $arg61);\n$v6 = \"NO\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-2, -2];\n$arg71 = [-3, -2];\n$x7 = intersection($arg70, $arg71);\n$v7 = \"NO\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "तुम्हाला दोन अंतर दिले जातात, \nजेथे प्रत्येक मध्यांतर हे पूर्णांकांची जोडी असते. उदाहरणार्थ, मध्यांतर = (प्रारंभ, शेवट) = (1,2). \nदिलेले अंतर बंद असतात ज्याचा अर्थ असा आहे की मध्यांतर (प्रारंभ, शेवट) \nत्यात सुरुवात आणि शेवट या दोन्हींचा समावेश आहे. \nदिलेल्या प्रत्येक मध्यांतरासाठी, असे गृहीत धरले जाते की त्याची सुरुवात त्याच्या शेवटापेक्षा कमी किंवा समान आहे. \nया दोघांच्या छेदनबिंदूची लांबी किती आहे हे ठरवणे हे तुमचे काम आहे. \nमध्यांतर ही एक अभाज्य संख्या आहे. \nउदाहरणार्थ, अंतरांचे छेदनबिंदू (1,3), (2,4) हे (2,3) आहे. \nज्याची लांबी 1 आहे, जी अभाज्य संख्या नाही. \nछेदनबिंदूची लांबी जर मूळ संख्या असेल, तर'होय'परत करा. \nअन्यथा,'नाही'परत करा. \nजर दोन मध्यांतर एकमेकांना छेदत नसतील, तर'नाही'परत करा. \n\n[इनपुट/आउटपुट] नमुनेः \nछेदनबिंदू ((1,2,3)) = =>'नाही'\nछेदनबिंदू ((-1,1), (0,4)) = => \"नाही\" \nछेदनबिंदू ((-3,-1), (-5,5)) = => \"होय\"", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/57", "entry_point": "tri", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$x0 = tri($arg00);\n$v0 = [1, 3, 2.0, 8.0];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 4;\n$x1 = tri($arg10);\n$v1 = [1, 3, 2.0, 8.0, 3.0];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = tri($arg20);\n$v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 6;\n$x3 = tri($arg30);\n$v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$x4 = tri($arg40);\n$v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 8;\n$x5 = tri($arg50);\n$v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 9;\n$x6 = tri($arg60);\n$v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 20;\n$x7 = tri($arg70);\n$v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 0;\n$x8 = tri($arg80);\n$v8 = [1];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1;\n$x9 = tri($arg90);\n$v9 = [1, 3];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "प्रत्येकाला फिबोनाची क्रम माहीत आहे, त्याचा गणितशास्त्रज्ञांनी सखोल अभ्यास केला होता. \nगेल्या दोन शतके. तथापि, लोकांना जे माहित नाही ते म्हणजे ट्रिबोनाची क्रमवारी. \nट्रायबोनाची क्रमवारी पुनरावृत्तीद्वारे परिभाषित केली जातेः \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, जर n सम असेल. \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), जर n विषम असेल. \nउदाहरणार्थ, \nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nतुम्हाला एक नकारात्मक नसलेला पूर्णांक क्रमांक n दिला आहे, तुम्हाला त्याची यादी परत करावी लागेल \nट्रिबोनाची अनुक्रमाच्या पहिल्या n + 1 संख्या. \nउदाहरणेः \nत्रि (3) = [1,3,2,8]", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/58", "entry_point": "digits", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = digits($arg00);\n$v0 = 5;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 54;\n$x1 = digits($arg10);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 120;\n$x2 = digits($arg20);\n$v2 = 1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5014;\n$x3 = digits($arg30);\n$v3 = 5;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 98765;\n$x4 = digits($arg40);\n$v4 = 315;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 5576543;\n$x5 = digits($arg50);\n$v5 = 2625;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 2468;\n$x6 = digits($arg60);\n$v6 = 0;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "सकारात्मक पूर्णांक n दिल्यास, विषम अंकांचे गुणाकार परत करा. \nसर्व अंक सम असल्यास 0 परत करा. \nउदाहरणार्थ, \nअंक (1) = = 1 \nअंक (4) = = 0 \nअंक (235) = = 15", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/59", "entry_point": "isNested", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"[[]]\";\n$x0 = isNested($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"[]]]]]]][[[[[]\";\n$x1 = isNested($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"[][]\";\n$x2 = isNested($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"[]\";\n$x3 = isNested($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"[[[[]]]]\";\n$x4 = isNested($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"[]]]]]]]]]]\";\n$x5 = isNested($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"[][][[]]\";\n$x6 = isNested($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"[[]\";\n$x7 = isNested($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"[]]\";\n$x8 = isNested($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"[[]][[\";\n$x9 = isNested($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"[[][]]\";\n$x10 = isNested($arg100);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"\";\n$x11 = isNested($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"[[[[[[[[\";\n$x12 = isNested($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = \"]]]]]]]]\";\n$x13 = isNested($arg130);\n$v13 = false;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n", "description": "एक कार्य तयार करा जे स्ट्रिंगला इनपुट म्हणून घेते ज्यामध्ये फक्त चौरस कंस असतात. \nजर आणि केवळ कंसांचा वैध पाठपुरावा असेल तरच कार्य खरे परत आले पाहिजे \nजेथे पुढील भागामध्ये किमान एक कंस नेस्ट केलेला असतो. \n\nनेस्टेड आहे ('[[]]') खरे आहे \nis _ nested ('[]]]]] [[[[]') खोटे आहे \nनेस्टेड आहे ('[] []') खोटे \nनेस्टेड आहे ('[]') खोटे \nनेस्टेड आहे ('[[] []]') खरे आहे \nनेस्टेड आहे ('[[]] [[') खरे आहे", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/60", "entry_point": "sumSquares", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3];\n$x0 = sumSquares($arg00);\n$v0 = 14;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1.0, 2, 3];\n$x1 = sumSquares($arg10);\n$v1 = 14;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 5, 7];\n$x2 = sumSquares($arg20);\n$v2 = 84;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1.4, 4.2, 0];\n$x3 = sumSquares($arg30);\n$v3 = 29;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-2.4, 1, 1];\n$x4 = sumSquares($arg40);\n$v4 = 6;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [100, 1, 15, 2];\n$x5 = sumSquares($arg50);\n$v5 = 10230;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [10000, 10000];\n$x6 = sumSquares($arg60);\n$v6 = 200000000;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-1.4, 4.6, 6.3];\n$x7 = sumSquares($arg70);\n$v7 = 75;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-1.4, 17.9, 18.9, 19.9];\n$x8 = sumSquares($arg80);\n$v8 = 1086;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [0];\n$x9 = sumSquares($arg90);\n$v9 = 0;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [-1];\n$x10 = sumSquares($arg100);\n$v10 = 1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = [-1, 1, 0];\n$x11 = sumSquares($arg110);\n$v11 = 2;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n", "description": "तुम्हाला संख्यांची यादी दिली जाते. \nतुम्हाला दिलेल्या यादीतील वर्गसंख्यांची बेरीज परत करावी लागेल, \nसूचीतील प्रत्येक घटकाला प्रथम वरच्या पूर्णांक (कमाल मर्यादा) पर्यंत गोल करा. \nउदाहरणेः \nlst = [1,2,3] साठी आउटपुट 14 असावे. \nlst = [1,4,9] साठी आउटपुट 98 असावे. \nlst = [1,3,5, 7] साठी उत्पादन 84 असावे. \nlst = [1.4,4.2, 0] साठी उत्पादन 29 असावे. \nlst = [-2.4,1, 1] साठी आउटपुट 6 असावे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/61", "entry_point": "checkIfLastCharIsALetter", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"apple\";\n$x0 = checkIfLastCharIsALetter($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"apple pi e\";\n$x1 = checkIfLastCharIsALetter($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"eeeee\";\n$x2 = checkIfLastCharIsALetter($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"A\";\n$x3 = checkIfLastCharIsALetter($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Pumpkin pie \";\n$x4 = checkIfLastCharIsALetter($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"Pumpkin pie 1\";\n$x5 = checkIfLastCharIsALetter($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"\";\n$x6 = checkIfLastCharIsALetter($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"eeeee e \";\n$x7 = checkIfLastCharIsALetter($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"apple pie\";\n$x8 = checkIfLastCharIsALetter($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"apple pi e \";\n$x9 = checkIfLastCharIsALetter($arg90);\n$v9 = false;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "शेवटचे अक्षर खरे असेल तर परत करणारे कार्य तयार करा \nदिलेल्या स्ट्रिंगचे वर्णमाला वर्ण आहे आणि ते नाही \nशब्दाचा एक भाग, आणि अन्यथा खोटा. \nटीपः \"शब्द\" हा जागेने विभक्त केलेल्या वर्णांचा समूह आहे. \n\nउदाहरणेः \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई ई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई ई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"\") खोटे", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/62", "entry_point": "canArrange", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 4, 3, 5];\n$x0 = canArrange($arg00);\n$v0 = 3;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 4, 5];\n$x1 = canArrange($arg10);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\n$x2 = canArrange($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 8, 5, 7, 3];\n$x3 = canArrange($arg30);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [];\n$x4 = canArrange($arg40);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "एखाद्या घटकाची सर्वात मोठी अनुक्रमणिका परत करणारे कार्य तयार करा जे \nतो त्याच्या ताबडतोब आधीच्या घटकापेक्षा मोठा किंवा समान नसेल. जर \nअसा कोणताही घटक अस्तित्वात नसेल तर-1 परत करा. दिलेल्या अॅरेमध्ये समाविष्ट होणार नाही \nदुहेरी मूल्ये. \n\nउदाहरणेः \nकॅन अरेंज ([1,2,4, 3,5]) = 3 \nकॅन अरेंज ([1,2,3]) =-1", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/63", "entry_point": "largestSmallestIntegers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [2, 4, 1, 3, 5, 7];\n$x0 = largestSmallestIntegers($arg00);\n$v0 = [null, 1];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [2, 4, 1, 3, 5, 7, 0];\n$x1 = largestSmallestIntegers($arg10);\n$v1 = [null, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 2, 4, 5, 6, -2];\n$x2 = largestSmallestIntegers($arg20);\n$v2 = [-2, 1];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 5, 3, 6, 2, 7, -7];\n$x3 = largestSmallestIntegers($arg30);\n$v3 = [-7, 2];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\n$x4 = largestSmallestIntegers($arg40);\n$v4 = [-9, 2];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [];\n$x5 = largestSmallestIntegers($arg50);\n$v5 = [null, null];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [0];\n$x6 = largestSmallestIntegers($arg60);\n$v6 = [null, null];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-1, -3, -5, -6];\n$x7 = largestSmallestIntegers($arg70);\n$v7 = [-1, null];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-1, -3, -5, -6, 0];\n$x8 = largestSmallestIntegers($arg80);\n$v8 = [-1, null];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [-6, -4, -4, -3, 1];\n$x9 = largestSmallestIntegers($arg90);\n$v9 = [-3, 1];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [-6, -4, -4, -3, -100, 1];\n$x10 = largestSmallestIntegers($arg100);\n$v10 = [-3, 1];\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "टुपल (अ, ब) परत करणारे कार्य तयार करा, जेथे'अ'आहे \nनकारात्मक पूर्णांकांपैकी सर्वात मोठा, आणि'ब'सर्वात लहान आहे \nसूचीतील सकारात्मक पूर्णांक. \nजर कोणतेही नकारात्मक किंवा सकारात्मक पूर्णांक नसतील, तर त्यांना शून्य म्हणून परत करा. \n\nउदाहरणेः \nसर्वात मोठे _ सर्वात लहान _ पूर्णांक ([2,4,1,3,5,7]) = = (काहीही नाही, 1) \nसर्वांत मोठे _ सर्वात लहान _ पूर्णांक ([]) = = (काहीही नाही, काहीही नाही) \nसर्वांत मोठे _ सर्वात लहान _ पूर्णांक ([0]) = = (काहीही नाही, काहीही नाही)", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/64", "entry_point": "specialFactorial", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 4;\n$x0 = specialFactorial($arg00);\n$v0 = 288;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 5;\n$x1 = specialFactorial($arg10);\n$v1 = 34560;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 7;\n$x2 = specialFactorial($arg20);\n$v2 = 125411328000;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 1;\n$x3 = specialFactorial($arg30);\n$v3 = 1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "ब्राझिलियन फॅक्टोरियलची व्याख्या अशी केली जातेः \nब्राझिलियन _ फॅक्टोरियल (एन) = एन! * (एन-1)! * (एन-2)! *... * 1! \nजेथे n> 0 \n\nउदाहरणार्थ, \n>>> स्पेशल _ फॅक्टोरियल (4) \n288 \n\nफंक्शनला इनपुट म्हणून एक पूर्णांक प्राप्त होईल आणि त्याने विशेष परत केले पाहिजे. \nया पूर्णांकाचे फॅक्टोरियल.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/65", "entry_point": "wordsInSentence", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"This is a test\";\n$x0 = wordsInSentence($arg00);\n$v0 = \"is\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"lets go for swimming\";\n$x1 = wordsInSentence($arg10);\n$v1 = \"go for\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"there is no place available here\";\n$x2 = wordsInSentence($arg20);\n$v2 = \"there is no place\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Hi I am Hussein\";\n$x3 = wordsInSentence($arg30);\n$v3 = \"Hi am Hussein\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"go for it\";\n$x4 = wordsInSentence($arg40);\n$v4 = \"go for it\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"here\";\n$x5 = wordsInSentence($arg50);\n$v5 = \"\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"here is\";\n$x6 = wordsInSentence($arg60);\n$v6 = \"is\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "तुम्हाला वाक्याचे प्रतिनिधित्व करणारी एक स्ट्रिंग दिली जाते, \nवाक्यात जागेने वेगळे केलेले काही शब्द आहेत, \nआणि तुम्हाला मूळ वाक्यातील शब्द असलेली एक स्ट्रिंग परत करावी लागेल, \nज्याची लांबी ही अभाज्य संख्या आहे, \nनवीन अक्षरातील शब्दांचा क्रम मूळ अक्षरासारखाच असावा. \n\nउदाहरण 1: \nइनपुटः वाक्य = \"ही एक चाचणी आहे\" \nआउटपुटः \"आहे\" \n\nउदाहरण 2: \nइनपुटः वाक्य = \"चला पोहायला जाऊया\" \nआउटपुटः \"साठी जा\" \n\nनिर्बंधः \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्यात फक्त अक्षरे असतात", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/66", "entry_point": "simplify", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"1/5\";\n$arg01 = \"5/1\";\n$x0 = simplify($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1/6\";\n$arg11 = \"2/1\";\n$x1 = simplify($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"5/1\";\n$arg21 = \"3/1\";\n$x2 = simplify($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"7/10\";\n$arg31 = \"10/2\";\n$x3 = simplify($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"2/10\";\n$arg41 = \"50/10\";\n$x4 = simplify($arg40, $arg41);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"7/2\";\n$arg51 = \"4/2\";\n$x5 = simplify($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"11/6\";\n$arg61 = \"6/1\";\n$x6 = simplify($arg60, $arg61);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"2/3\";\n$arg71 = \"5/2\";\n$x7 = simplify($arg70, $arg71);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"5/2\";\n$arg81 = \"3/5\";\n$x8 = simplify($arg80, $arg81);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"2/4\";\n$arg91 = \"8/4\";\n$x9 = simplify($arg90, $arg91);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"2/4\";\n$arg101 = \"4/2\";\n$x10 = simplify($arg100, $arg101);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"1/5\";\n$arg111 = \"5/1\";\n$x11 = simplify($arg110, $arg111);\n$v11 = true;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"1/5\";\n$arg121 = \"1/5\";\n$x12 = simplify($arg120, $arg121);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n", "description": "अभिव्यक्ती सोपी करणारे कार्य अंमलात आणणे हे तुमचे काम आहे. \nx * n. जर x * n पूर्ण संख्येचे मूल्यांकन करत असेल आणि चुकीचे असेल तर कार्य खरे परत करते. \nअन्यथा. x आणि n दोन्ही, एका अपूर्णांकाचे स्ट्रिंग प्रतिनिधित्व आहेत आणि त्यांचे खालील स्वरूप आहे, \n<न्यूमरेटर> <डिनॉमिनेटर> जेथे न्यूमरेटर आणि डिनॉमिनेटर दोन्ही सकारात्मक पूर्ण संख्या आहेत. \n\nतुम्ही असे गृहीत धरू शकता की x आणि n हे वैध अपूर्णांक आहेत आणि त्यांना विभाजक म्हणून शून्य नाही. \n\nसरलीकरण करा (\"1/5\", \"5/1\") = खरे \nसरलीकरण करा (\"1/6\", \"2/1\") = चुकीचे \nसोपे करा (\"7/10\", \"10/2\") = चुकीचे", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/67", "entry_point": "orderByPoints", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 11, -1, -11, -12];\n$x0 = orderByPoints($arg00);\n$v0 = [-1, -11, 1, -12, 11];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\n$x1 = orderByPoints($arg10);\n$v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [];\n$x2 = orderByPoints($arg20);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\n$x3 = orderByPoints($arg30);\n$v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n$x4 = orderByPoints($arg40);\n$v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 6, 6, -76, -21, 23, 4];\n$x5 = orderByPoints($arg50);\n$v5 = [-76, -21, 0, 4, 23, 6, 6];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "पूर्णांकांची दिलेली यादी क्रमवारी लावणारे कार्य लिहा. \nत्यांच्या अंकांच्या बेरीजनुसार चढत्या क्रमाने. \nटीपः त्यांच्या अंकांची समान बेरीज असलेल्या अनेक वस्तू असल्यास, \nमूळ यादीतील त्यांच्या निर्देशांकाच्या आधारे त्यांना ऑर्डर करा. \n\nउदाहरणार्थ, \n>> ऑर्डर _ बाय _ पॉईंट्स ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ऑर्डर _ बाय _ पॉइंट्स ([]) = = []", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/68", "entry_point": "specialfilter", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, -2, 1, -5];\n$x0 = specialfilter($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [15, -73, 14, -15];\n$x1 = specialfilter($arg10);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [33, -2, -3, 45, 21, 109];\n$x2 = specialfilter($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [43, -12, 93, 125, 121, 109];\n$x3 = specialfilter($arg30);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [71, -2, -33, 75, 21, 19];\n$x4 = specialfilter($arg40);\n$v4 = 3;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1];\n$x5 = specialfilter($arg50);\n$v5 = 0;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [];\n$x6 = specialfilter($arg60);\n$v6 = 0;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "इनपुट आणि रिटर्न म्हणून संख्यांची एक श्रेणी घेणारे कार्य लिहा. \nअॅरेमधील घटकांची संख्या जी 10 पेक्षा जास्त आहे आणि दोन्ही \nसंख्येचे पहिले आणि शेवटचे अंक विषम (1,3,5,7,9) असतात. \nउदाहरणार्थ, \nविशेष फिल्टर ([15,-73,14,-15]) => 1 \nविशेष फिल्टर ([33,-2,-3,45,21,109]) => 2", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/69", "entry_point": "getMaxTriples", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = getMaxTriples($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 6;\n$x1 = getMaxTriples($arg10);\n$v1 = 4;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$x2 = getMaxTriples($arg20);\n$v2 = 36;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 100;\n$x3 = getMaxTriples($arg30);\n$v3 = 53361;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "तुम्हाला एक सकारात्मक पूर्णांक n दिला जातो. तुम्हाला n लांबीचा एक पूर्णांक अ तयार करावा लागेल. \nप्रत्येक i (1 ≤ i ≤ n) साठी, a [i] = i * i-i + 1 चे मूल्य. \na च्या त्रिकांची संख्या (a [i], a [j], a [k]) परत करा जेथे i <j <k, \nआणि a [i] + a [j] + a [k] हा 3 चा गुणाकार आहे. \n\nउदाहरणादाखलः \nइनपुटः n = 5 \nउत्पादनः 1 \nस्पष्टीकरणः \nअ = [1,3,7,13,21] \nएकमेव वैध तिहेरी (1,7,13) आहे.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/70", "entry_point": "bf", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Jupiter\";\n$arg01 = \"Neptune\";\n$x0 = bf($arg00, $arg01);\n$v0 = [\"Saturn\", \"Uranus\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Earth\";\n$arg11 = \"Mercury\";\n$x1 = bf($arg10, $arg11);\n$v1 = [\"Venus\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"Mercury\";\n$arg21 = \"Uranus\";\n$x2 = bf($arg20, $arg21);\n$v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Neptune\";\n$arg31 = \"Venus\";\n$x3 = bf($arg30, $arg31);\n$v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Earth\";\n$arg41 = \"Earth\";\n$x4 = bf($arg40, $arg41);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"Mars\";\n$arg51 = \"Earth\";\n$x5 = bf($arg50, $arg51);\n$v5 = [];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"Jupiter\";\n$arg61 = \"Makemake\";\n$x6 = bf($arg60, $arg61);\n$v6 = [];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "आपल्या सौरमालेत आठ ग्रह आहेतः सूर्याच्या सर्वात जवळचे \nबुध आहे, पुढचा शुक्र आहे, मग पृथ्वी, मंगळ, गुरु, शनि, \nयुरेनस, नेपच्यून. \nग्रह 1 आणि ग्रह 2 अशी दोन ग्रहांची नावे घेणारे कार्य लिहा. \nया कार्याने ज्या सर्व ग्रहांच्या कक्षा आहेत अशा सर्व ग्रहांचा समावेश असलेला टुपल परत केला पाहिजे. \n1 ग्रहाची कक्षा आणि 2 ग्रहाची कक्षा यांच्या दरम्यान स्थित, क्रमानुसार \nसूर्याची जवळीक. \nजर ग्रह 1 किंवा ग्रह 2 असेल तर कार्याने रिकामे टुपल परत केले पाहिजे \nग्रहांची नावे योग्य नाहीत. \nउदाहरणे \nbf (\"गुरू\", \"नेपच्यून\") = => (\"शनि\", \"युरेनस\") \nbf (\"पृथ्वी\", \"बुध\") = => (\"शुक्र\") \nbf (\"बुध\", \"युरेनस\") = => (\"शुक्र\", \"पृथ्वी\", \"मंगळ\", \"गुरु\", \"शनि\")", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/71", "entry_point": "xOrY", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 7;\n$arg01 = 34;\n$arg02 = 12;\n$x0 = xOrY($arg00, $arg01, $arg02);\n$v0 = 34;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 15;\n$arg11 = 8;\n$arg12 = 5;\n$x1 = xOrY($arg10, $arg11, $arg12);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$arg21 = 33;\n$arg22 = 5212;\n$x2 = xOrY($arg20, $arg21, $arg22);\n$v2 = 33;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 1259;\n$arg31 = 3;\n$arg32 = 52;\n$x3 = xOrY($arg30, $arg31, $arg32);\n$v3 = 3;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7919;\n$arg41 = -1;\n$arg42 = 12;\n$x4 = xOrY($arg40, $arg41, $arg42);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 3609;\n$arg51 = 1245;\n$arg52 = 583;\n$x5 = xOrY($arg50, $arg51, $arg52);\n$v5 = 583;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 91;\n$arg61 = 56;\n$arg62 = 129;\n$x6 = xOrY($arg60, $arg61, $arg62);\n$v6 = 129;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 6;\n$arg71 = 34;\n$arg72 = 1234;\n$x7 = xOrY($arg70, $arg71, $arg72);\n$v7 = 1234;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 1;\n$arg81 = 2;\n$arg82 = 0;\n$x8 = xOrY($arg80, $arg81, $arg82);\n$v8 = 0;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 2;\n$arg91 = 2;\n$arg92 = 0;\n$x9 = xOrY($arg90, $arg91, $arg92);\n$v9 = 2;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "एक साधा प्रोग्राम ज्याने n असल्यास x चे मूल्य परत केले पाहिजे \nएक अभाज्य संख्या आणि अन्यथा y चे मूल्य परत केले पाहिजे. \n\nउदाहरणेः \nx _ किंवा _ y साठी (7,34,12) = = 34 \nx _ किंवा _ y साठी (15,8,5) = = 5", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/72", "entry_point": "doubleTheDifference", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = doubleTheDifference($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 4];\n$x1 = doubleTheDifference($arg10);\n$v1 = 25;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [0.1, 0.2, 0.3];\n$x2 = doubleTheDifference($arg20);\n$v2 = 0;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [-10, -20, -30];\n$x3 = doubleTheDifference($arg30);\n$v3 = 0;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-1, -2, 8];\n$x4 = doubleTheDifference($arg40);\n$v4 = 0;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0.2, 3, 5];\n$x5 = doubleTheDifference($arg50);\n$v5 = 34;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\n$x6 = doubleTheDifference($arg60);\n$v6 = 166650;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "आकड्यांची यादी दिल्यास, आकड्यांच्या वर्गांची बेरीज परत करा. \nविषम असलेल्या यादीमध्ये. पूर्णांक नसलेल्या किंवा नकारात्मक असलेल्या संख्यांकडे दुर्लक्ष करा. \n\nदुहेरी _ फरक ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nदुहेरी _ फरक ([-1,0]) = = 0 \nदुहेरी फरक ([9,-2]) = = 81 \nदुहेरी _ फरक ([0]) = = 0 \n\nइनपुट यादी रिकामी असल्यास, 0 परत करा.", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/73", "entry_point": "strongestExtension", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Watashi\";\n$arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\n$x0 = strongestExtension($arg00, $arg01);\n$v0 = \"Watashi.eIGHt8OKe\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Boku123\";\n$arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\n$x1 = strongestExtension($arg10, $arg11);\n$v1 = \"Boku123.YEs.WeCaNe\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"__YESIMHERE\";\n$arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\n$x2 = strongestExtension($arg20, $arg21);\n$v2 = \"__YESIMHERE.NuLl__\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"K\";\n$arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\n$x3 = strongestExtension($arg30, $arg31);\n$v3 = \"K.TAR\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"__HAHA\";\n$arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\n$x4 = strongestExtension($arg40, $arg41);\n$v4 = \"__HAHA.123\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"YameRore\";\n$arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\n$x5 = strongestExtension($arg50, $arg51);\n$v5 = \"YameRore.okIWILL123\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"finNNalLLly\";\n$arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\n$x6 = strongestExtension($arg60, $arg61);\n$v6 = \"finNNalLLly.WoW\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"_\";\n$arg71 = [\"Bb\", \"91245\"];\n$x7 = strongestExtension($arg70, $arg71);\n$v7 = \"_.Bb\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"Sp\";\n$arg81 = [\"671235\", \"Bb\"];\n$x8 = strongestExtension($arg80, $arg81);\n$v8 = \"Sp.671235\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "तुम्हाला एका वर्गाचे नाव (एक स्ट्रिंग) आणि विस्तारांची यादी दिली जाईल. \nवर्गामध्ये अतिरिक्त वर्ग भरण्यासाठी विस्तारांचा वापर केला जाणार आहे. \nविस्ताराची ताकद खालीलप्रमाणे आहेः CAP ही मोठ्या अक्षराची संख्या असू द्या. \nविस्ताराच्या नावातील अक्षरे, आणि एस. एम. ही लहान अक्षरांची संख्या असू द्या \nएक्स्टेंशनच्या नावात, कॅप-एस. एम. या अपूर्णांकाद्वारे सामर्थ्य दिले जाते. \nतुम्ही सर्वात मजबूत विस्तार शोधला पाहिजे आणि यात एक स्ट्रिंग परत केली पाहिजे. \nस्वरूपः ClassName.StrongestExtensionName. \nजर समान ताकदीचे दोन किंवा अधिक विस्तार असतील, तर तुम्ही \nयादीत प्रथम येणाऱ्या व्यक्तीची निवड करा. \nउदाहरणार्थ, जर तुम्हाला वर्ग आणि यादी म्हणून'स्लाइसेस'दिले गेले असतील तर \nविस्तारः ['SERVINGSliCes','चीज','स्टुफॅड'] मग तुम्ही \n'SERVINGSliCes'हा सर्वात मजबूत विस्तार असल्याने'Slices.SErviNGSliCes'परत करा \n(त्याची ताकद-1 आहे). \nउदाहरणादाखलः \nस्ट्रॉंगेस्ट _ एक्स्टेंशनसाठी ('माय _ क्लास', ['एए','बी','सीसी']) = ='my_class.AA'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/74", "entry_point": "cycpatternCheck", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"xyzw\";\n$arg01 = \"xyw\";\n$x0 = cycpatternCheck($arg00, $arg01);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"yello\";\n$arg11 = \"ell\";\n$x1 = cycpatternCheck($arg10, $arg11);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"whattup\";\n$arg21 = \"ptut\";\n$x2 = cycpatternCheck($arg20, $arg21);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"efef\";\n$arg31 = \"fee\";\n$x3 = cycpatternCheck($arg30, $arg31);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"abab\";\n$arg41 = \"aabb\";\n$x4 = cycpatternCheck($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"winemtt\";\n$arg51 = \"tinem\";\n$x5 = cycpatternCheck($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "तुम्हाला 2 शब्द देण्यात आले आहेत. जर दुसरा शब्द किंवा त्यातील कोणतेही परिभ्रमण पहिल्या शब्दातील सबस्ट्रिंग असेल तर तुम्हाला खरे परतावे लागेल. \nसायकपॅटर्न _ चेक (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => खोटे \nसायकपॅटर्न तपासा (\"हॅलो\", \"एल\") => खरे \nसायकपॅटर्न _ चेक (\"व्हासअप\", \"psus\") => खोटे \nसायकपॅटर्न _ चेक (\"अबाब\", \"बा\") => खरे \nसायकपॅटर्न _ चेक (\"ईएफईएफ\", \"ईएफईएफ\") => खोटे \nसायकपॅटर्न _ चेक (\"हिमेन्स\", \"सिमेन\") => खरे", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/75", "entry_point": "intToMiniRoman", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 19;\n$x0 = intToMiniRoman($arg00);\n$v0 = \"xix\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 152;\n$x1 = intToMiniRoman($arg10);\n$v1 = \"clii\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 251;\n$x2 = intToMiniRoman($arg20);\n$v2 = \"ccli\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 426;\n$x3 = intToMiniRoman($arg30);\n$v3 = \"cdxxvi\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 500;\n$x4 = intToMiniRoman($arg40);\n$v4 = \"d\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 1;\n$x5 = intToMiniRoman($arg50);\n$v5 = \"i\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 4;\n$x6 = intToMiniRoman($arg60);\n$v6 = \"iv\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 43;\n$x7 = intToMiniRoman($arg70);\n$v7 = \"xliii\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 90;\n$x8 = intToMiniRoman($arg80);\n$v8 = \"xc\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 94;\n$x9 = intToMiniRoman($arg90);\n$v9 = \"xciv\";\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 532;\n$x10 = intToMiniRoman($arg100);\n$v10 = \"dxxxii\";\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 900;\n$x11 = intToMiniRoman($arg110);\n$v11 = \"cm\";\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 994;\n$x12 = intToMiniRoman($arg120);\n$v12 = \"cmxciv\";\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = 1000;\n$x13 = intToMiniRoman($arg130);\n$v13 = \"m\";\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n", "description": "एक सकारात्मक पूर्णांक दिल्यास, त्याचा रोमन अंकी समतुल्य स्ट्रिंग म्हणून मिळवा, \nआणि ते लहान अक्षरात परत करा. \nनिर्बंधः 1 <= संख्या <= 1000 \n\nउदाहरणेः \n>> int _ to _ मिनी _ रोमन (19) = ='xix'\n>> इंट _ टू _ मिनी _ रोमन (152) = ='क्लाई'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/76", "entry_point": "rightAngleTriangle", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 4;\n$arg02 = 5;\n$x0 = rightAngleTriangle($arg00, $arg01, $arg02);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 2;\n$arg12 = 3;\n$x1 = rightAngleTriangle($arg10, $arg11, $arg12);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$arg21 = 6;\n$arg22 = 8;\n$x2 = rightAngleTriangle($arg20, $arg21, $arg22);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 2;\n$arg31 = 2;\n$arg32 = 2;\n$x3 = rightAngleTriangle($arg30, $arg31, $arg32);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$arg41 = 24;\n$arg42 = 25;\n$x4 = rightAngleTriangle($arg40, $arg41, $arg42);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 10;\n$arg51 = 5;\n$arg52 = 7;\n$x5 = rightAngleTriangle($arg50, $arg51, $arg52);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 5;\n$arg61 = 12;\n$arg62 = 13;\n$x6 = rightAngleTriangle($arg60, $arg61, $arg62);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 15;\n$arg71 = 8;\n$arg72 = 17;\n$x7 = rightAngleTriangle($arg70, $arg71, $arg72);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 48;\n$arg81 = 55;\n$arg82 = 73;\n$x8 = rightAngleTriangle($arg80, $arg81, $arg82);\n$v8 = true;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1;\n$arg91 = 1;\n$arg92 = 1;\n$x9 = rightAngleTriangle($arg90, $arg91, $arg92);\n$v9 = false;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 2;\n$arg101 = 2;\n$arg102 = 10;\n$x10 = rightAngleTriangle($arg100, $arg101, $arg102);\n$v10 = false;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "त्रिकोणाच्या तीन बाजूंची लांबी दिली. जर त्या तीनही असतील तर खरे परत करा. \nबाजू उजव्या कोनीय त्रिकोण तयार करतात, अन्यथा खोटे. \nउजव्या कोणाचा त्रिकोण हा एक त्रिकोण आहे ज्यामध्ये एक कोन उजव्या कोनात किंवा उजव्या कोनात असतो. \n90 अंश. \nउदाहरणादाखलः \nसमकोण त्रिकोण (3,4,5) = = खरे \nसमकोण त्रिकोण (1,2,3) = = चुकीचा", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/77", "entry_point": "solve", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"AsDf\";\n$x0 = solve($arg00);\n$v0 = \"aSdF\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1234\";\n$x1 = solve($arg10);\n$v1 = \"4321\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"ab\";\n$x2 = solve($arg20);\n$v2 = \"AB\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"#a@C\";\n$x3 = solve($arg30);\n$v3 = \"#A@c\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"#AsdfW^45\";\n$x4 = solve($arg40);\n$v4 = \"#aSDFw^45\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"#6@2\";\n$x5 = solve($arg50);\n$v5 = \"2@6#\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"#\\$a^D\";\n$x6 = solve($arg60);\n$v6 = \"#\\$A^d\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"#ccc\";\n$x7 = solve($arg70);\n$v7 = \"#CCC\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "तुम्हाला एक स्ट्रिंग s दिली जाते. \nजर एस [आय] हे एक अक्षर असेल तर त्याचे प्रकरण खालून वर किंवा उलट करा, \nअन्यथा ते जसे आहे तसे ठेवा. \nजर स्ट्रिंगमध्ये अक्षरे नसतील तर स्ट्रिंग उलट करा. \nफंक्शनने परिणामी स्ट्रिंग परत करावी. \nउदाहरणे \nनिराकरण (\"1234\") = \"4321\" \nसोडवा (\"अब\") = \"एबी\" \nसोडवा (\"#a @C\") = \"#A @c\"", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/78", "entry_point": "stringToMd5", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello world\";\n$x0 = stringToMd5($arg00);\n$v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"\";\n$x1 = stringToMd5($arg10);\n$v1 = null;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"A B C\";\n$x2 = stringToMd5($arg20);\n$v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"password\";\n$x3 = stringToMd5($arg30);\n$v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "स्ट्रिंग'टेक्स्ट'दिल्यास, त्याची md5 हॅश समतुल्य स्ट्रिंग परत करा. \nजर'टेक्स्ट'ही रिकामी स्ट्रिंग असेल तर शून्य परत करा. \n\n>> स्ट्रिंग _ ते _ md5 ('हॅलो वर्ल्ड') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
{"task_id": "php/79", "entry_point": "generateIntegers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 2;\n$arg01 = 10;\n$x0 = generateIntegers($arg00, $arg01);\n$v0 = [2, 4, 6, 8];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 10;\n$arg11 = 2;\n$x1 = generateIntegers($arg10, $arg11);\n$v1 = [2, 4, 6, 8];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 132;\n$arg21 = 2;\n$x2 = generateIntegers($arg20, $arg21);\n$v2 = [2, 4, 6, 8];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 17;\n$arg31 = 89;\n$x3 = generateIntegers($arg30, $arg31);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "a आणि b हे दोन सकारात्मक पूर्णांक दिल्यास, a मधील सम अंक परत करा. \nआणि ब, चढत्या क्रमाने. \n\nउदाहरणार्थ, \nजनरेट _ इंटिजर्स (2,8) => [2,4,6,8] \nजनरेट _ इंटिजर्स (8,2) => [2,4,6,8] \nपूर्णांक निर्माण करा (10,14) => []", "language": "php", "canonical_solution": null, "natural_language": "Marathi"}
