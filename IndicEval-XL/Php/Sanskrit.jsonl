{"task_id": "php/0", "entry_point": "belowZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = belowZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, -3, 1, 2, -3];\n$x1 = belowZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, -4, 5, 6];\n$x2 = belowZero($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\n$x3 = belowZero($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\n$x4 = belowZero($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\n$x5 = belowZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "भवतः कृते ब्याङ्क्-अकौण्ट् मध्ये निक्षेपस्य तथा निष्कासनस्य च कार्याणां सूची दत्ता अस्ति, यस्मात् आरभ्यते। \nशून्यं शेषम्। कस्मिंश्चित् काले अपि लेखायाः शेषराशिः शून्यात् अधः पतति वा इति ज्ञातुं भवतः कार्यम् अस्ति, तथा। \nतस्मिन् समये फंक्षन् ट्रु इति प्रत्यावर्तयेत्। अन्यथा तत् फाल्स् इति प्रत्यावर्तयेत्। \n>>> शून्यात् अधः ([1,2,3]) \nमिथ्याचारः। \n>>> शून्यात् अधः ([1,2,-4,5]) \nसत्यम्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/1", "entry_point": "sumProduct", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = sumProduct($arg00);\n$v0 = [0, 1];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 1, 1];\n$x1 = sumProduct($arg10);\n$v1 = [3, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [100, 0];\n$x2 = sumProduct($arg20);\n$v2 = [100, 0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 5, 7];\n$x3 = sumProduct($arg30);\n$v3 = [15, 105];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [10];\n$x4 = sumProduct($arg40);\n$v4 = [10, 10];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "पूर्णांशकानां प्रदत्तसूच्यां, सूच्यां सर्वानां पूर्णांशकानां योगस्य गुणनफलस्य च एकं टुपल् प्रत्यर्पयतु। \nरिक्तराशिः 0 समानं भवेत्, रिक्तगुणितं च 1 समानं भवेत्। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/2", "entry_point": "stringXor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"111000\";\n$arg01 = \"101010\";\n$x0 = stringXor($arg00, $arg01);\n$v0 = \"010010\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1\";\n$arg11 = \"1\";\n$x1 = stringXor($arg10, $arg11);\n$v1 = \"0\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"0101\";\n$arg21 = \"0000\";\n$x2 = stringXor($arg20, $arg21);\n$v2 = \"0101\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "इन्पुट् इतीदं a तथा b इति द्वौ सूत्रौ स्तः यत्र केवलं 1s तथा 0s इत्येतौ स्तः। \nएतेषु इन्पुट्-मध्ये द्वैतीयं XOR कुर्वन्तु तथा च रिटर्न्-परिणामम् अपि स्ट्रिङ्ग्-रूपेण कुर्वन्तु। \n>> स्ट्रिङ्ग् _ xor ('010','110') \n\"100\" इति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/3", "entry_point": "longest", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = longest($arg00);\n$v0 = null;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [\"x\", \"y\", \"z\"];\n$x1 = longest($arg10);\n$v1 = \"x\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\n$x2 = longest($arg20);\n$v2 = \"zzzz\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "स्ट्रिङ्ग्-सूचीतः दीर्घतमं प्रत्यर्पयतु। बहुविधस्य सन्दर्भे प्रथमं प्रत्यर्पयतु। \nसमानदीर्घतायाः स्ट्रिङ्ग्स्। इन्पुट्-सूची रिक्तं भवति चेत् शून्यं प्रत्यावर्तयतु। \n>>> दीर्घतमः ([]) \n\n>>> दीर्घतमः (['a','b','c']) \n\"अ\" इति। \n>>> दीर्घतमः (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/4", "entry_point": "greatestCommonDivisor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 7;\n$x0 = greatestCommonDivisor($arg00, $arg01);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 10;\n$arg11 = 15;\n$x1 = greatestCommonDivisor($arg10, $arg11);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 49;\n$arg21 = 14;\n$x2 = greatestCommonDivisor($arg20, $arg21);\n$v2 = 7;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 144;\n$arg31 = 60;\n$x3 = greatestCommonDivisor($arg30, $arg31);\n$v3 = 12;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "a तथा b इति पूर्णांशकयोः बृहत्तमः सामान्यभागकः प्रत्यावर्तयतु। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (3,5) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (25,15) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/5", "entry_point": "sortNumbers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = sortNumbers($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"three\";\n$x1 = sortNumbers($arg10);\n$v1 = \"three\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"three five nine\";\n$x2 = sortNumbers($arg20);\n$v2 = \"three five nine\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"five zero four seven nine eight\";\n$x3 = sortNumbers($arg30);\n$v3 = \"zero four five seven eight nine\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"six five four three two one zero\";\n$x4 = sortNumbers($arg40);\n$v4 = \"zero one two three four five six\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "इन्पुट् इति'शून्य'तः'नव'पर्यन्तं संख्यानां स्पेस्-डिलिमिटेड् स्ट्रिङ्ग् अस्ति। \n'शून्यः','एकः','द्वौ','त्रीणि','चत्वारः','पञ्च','षट्','सप्त','अष्ट'तथा'नव'इति वैधानि विकल्पानि सन्ति। \nलघुतमात् बृहत्तमं यावत् क्रमबद्धां सङ्ख्याभिः सह स्ट्रिङ्ग् प्रत्यावर्तयतु। \n>>> संख्यानां क्रमनिर्धारणं करोतु ('तिस्रः एकः पञ्च') \n\"एकत्रयं पञ्च\" इति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/6", "entry_point": "rescaleToUnit", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [2.0, 49.9];\n$x0 = rescaleToUnit($arg00);\n$v0 = [0.0, 1.0];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [100.0, 49.9];\n$x1 = rescaleToUnit($arg10);\n$v1 = [1.0, 0.0];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\n$x2 = rescaleToUnit($arg20);\n$v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\n$x3 = rescaleToUnit($arg30);\n$v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\n$x4 = rescaleToUnit($arg40);\n$v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "संख्यासूच्यां (न्यूनातिन्यूनं द्वयोः तत्त्वयोः) दत्तं, तस्मिन् सूच्यां रेखीयपरिवर्तनं प्रयुज्यताम्। \nयथा लघुतमः सङ्ख्या 0 भविष्यति, बृहत्तमा च 1 भविष्यति। \n>> रिकेल्-टु-युनिट् ([1,0,2,0,4,0]) \n[0,0,25,0,0,75,0,0]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/7", "entry_point": "flipCase", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = flipCase($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Hello!\";\n$x1 = flipCase($arg10);\n$v1 = \"hELLO!\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"These violent delights have violent ends\";\n$x2 = flipCase($arg20);\n$v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "निर्दिष्टस्य स्ट्रिङ्ग् इत्यस्य कृते, लोवर्केस्-अक्षरान् अपरकेस्-रूपेण, अपरकेस्-अक्षरान् लोवर्केस्-रूपेण च परिवर्तयतु। \n>>> फ़्लिप्-केस् ('हेलो') \n\"हेलो\" इति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/8", "entry_point": "getPositive", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [-1, -2, 4, 5, 6];\n$x0 = getPositive($arg00);\n$v0 = [4, 5, 6];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\n$x1 = getPositive($arg10);\n$v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-1, -2];\n$x2 = getPositive($arg20);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [];\n$x3 = getPositive($arg30);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "सूच्यां केवलं धनात्मकसङ्ख्याः प्रत्यर्पयतु। \n>>> धनात्मकं प्रापयन्तु ([-1,2,-4,5,6]) \n[2,5,6] \n>>> प्राप्यते ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/9", "entry_point": "isPrime", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 6;\n$x0 = isPrime($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 101;\n$x1 = isPrime($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 11;\n$x2 = isPrime($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 13441;\n$x3 = isPrime($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 61;\n$x4 = isPrime($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 4;\n$x5 = isPrime($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 1;\n$x6 = isPrime($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 5;\n$x7 = isPrime($arg70);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 11;\n$x8 = isPrime($arg80);\n$v8 = true;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 17;\n$x9 = isPrime($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 85;\n$x10 = isPrime($arg100);\n$v10 = false;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 77;\n$x11 = isPrime($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 255379;\n$x12 = isPrime($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n", "description": "यदि दत्तसङ्ख्या अभाज्य अस्ति तर्हि सत्यं प्रत्यावर्तयतु, अन्यथा असत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/10", "entry_point": "unique", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\n$x0 = unique($arg00);\n$v0 = [0, 2, 3, 5, 9, 123];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n", "description": "सूच्यां क्रमबद्धानि विशिष्टानि तत्त्वानि प्रत्यावर्तयतु। \n>>> अद्वितीयः ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/11", "entry_point": "primeFib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$x0 = primeFib($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 2;\n$x1 = primeFib($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$x2 = primeFib($arg20);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 4;\n$x3 = primeFib($arg30);\n$v3 = 13;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 5;\n$x4 = primeFib($arg40);\n$v4 = 89;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 6;\n$x5 = primeFib($arg50);\n$v5 = 233;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 7;\n$x6 = primeFib($arg60);\n$v6 = 1597;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 8;\n$x7 = primeFib($arg70);\n$v7 = 28657;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 9;\n$x8 = primeFib($arg80);\n$v8 = 514229;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 10;\n$x9 = primeFib($arg90);\n$v9 = 433494437;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "प्रैम्-फ़ैब् इतीदं n-तमं संख्यां प्रत्यर्पयति यत् फ़िबोनाची सङ्ख्या अपि च अभाज्यम् अस्ति। \n>>> प्रैम्-फैब् (1) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> प्रैम्-फैब् (2) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> प्रैम्-फैब् (3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> प्रैम्-फैब् (4) \n13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। \n>>> प्रैम्-फैब् (5) \n89।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/12", "entry_point": "triplesSumToZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 3, 5, 0];\n$x0 = triplesSumToZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 3, 5, -1];\n$x1 = triplesSumToZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, -2, 1];\n$x2 = triplesSumToZero($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 2, 3, 7];\n$x3 = triplesSumToZero($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 5, 7];\n$x4 = triplesSumToZero($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [2, 4, -5, 3, 9, 7];\n$x5 = triplesSumToZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [1];\n$x6 = triplesSumToZero($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [1, 3, 5, -100];\n$x7 = triplesSumToZero($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [100, 3, 5, -100];\n$x8 = triplesSumToZero($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "ट्रिपल्स्-सम्-तः-ज़ीरो-पर्यन्तं इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां त्रीणि विशिष्टानि तत्त्वानि सन्ति तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n\n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,35,5,0]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,3,-2,1]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,2,3,7]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([2,4,-5,3,9,7]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1]) \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/13", "entry_point": "pairsSumToZero", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 3, 5, 0];\n$x0 = pairsSumToZero($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 3, -2, 1];\n$x1 = pairsSumToZero($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, 3, 7];\n$x2 = pairsSumToZero($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [2, 4, -5, 3, 5, 7];\n$x3 = pairsSumToZero($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$x4 = pairsSumToZero($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [-3, 9, -1, 3, 2, 30];\n$x5 = pairsSumToZero($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-3, 9, -1, 3, 2, 31];\n$x6 = pairsSumToZero($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-3, 9, -1, 4, 2, 30];\n$x7 = pairsSumToZero($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-3, 9, -1, 4, 2, 31];\n$x8 = pairsSumToZero($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "pairs _ sum _ to _ zero इति इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां द्वे विशिष्टाः तत्त्वौ स्तः तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,3,5,0]) \nमिथ्याचारः। \n>>> युग्मानि _ राशिः _ तः _ शून्यं ([1,3,-2,1]) \nमिथ्याचारः। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,2,3,7]) \nमिथ्याचारः। \n>>> युग्म-राशि-तः-शून्यपर्यन्तं ([2,4,-5,3,5,7]) \nसत्यम्। \n>>> युग्मं _ सं _ तः _ शून्यं ([1]) \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/14", "entry_point": "fib4", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = fib4($arg00);\n$v0 = 4;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 8;\n$x1 = fib4($arg10);\n$v1 = 28;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$x2 = fib4($arg20);\n$v2 = 104;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 12;\n$x3 = fib4($arg30);\n$v3 = 386;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "फैब्-4 सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nFib4 (0)-> 0 \nFib4 (1)-> 0 \nफैब4 (2)-> 2 \nFib4 (3)-> 0 \nफैब्4 (एन्)-> फैब्4 (एन्-1) + फैब्4 (एन्-2) + फैब्4 (एन्-3) + फैब्4 (एन्-4)। \nफैब्-4 सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। पुनरावर्तनस्य उपयोगं मा करोतु। \n>>> फैब्4 (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्4 (6) \n8। \n>>> फैब्4 (7) \n14।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/15", "entry_point": "median", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 1, 2, 4, 5];\n$x0 = median($arg00);\n$v0 = 3;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [-10, 4, 6, 1000, 10, 20];\n$x1 = median($arg10);\n$v1 = 8.0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [5];\n$x2 = median($arg20);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [6, 5];\n$x3 = median($arg30);\n$v3 = 5.5;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [8, 1, 3, 9, 9, 2, 7];\n$x4 = median($arg40);\n$v4 = 7;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "सूची l मध्ये तत्त्वानां माध्यं प्रत्यावर्तयतु। \n>>> माध्यिका ([3,1,2,4,5]) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n0. 0।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/16", "entry_point": "isPalindrome", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = isPalindrome($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"aba\";\n$x1 = isPalindrome($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"aaaaa\";\n$x2 = isPalindrome($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"zbcd\";\n$x3 = isPalindrome($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"xywyx\";\n$x4 = isPalindrome($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"xywyz\";\n$x5 = isPalindrome($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"xywzx\";\n$x6 = isPalindrome($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "दत्तं स्ट्रिङ्ग् पालिण्ड्रोम् अस्ति वा इति पश्यतु। \n>>> अस्ति _ पालिण्ड्रोम् (\") \nसत्यम्। \n>>> अस्ति _ पालिण्ड्रोम् ('अबा') \nसत्यम्। \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n>>> is _ palindrome ('zbcd') अस्ति। \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/17", "entry_point": "removeVowels", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"\";\n$x0 = removeVowels($arg00);\n$v0 = \"\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdef\\nghijklm\";\n$x1 = removeVowels($arg10);\n$v1 = \"bcdf\\nghjklm\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"fedcba\";\n$x2 = removeVowels($arg20);\n$v2 = \"fdcb\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"eeeee\";\n$x3 = removeVowels($arg30);\n$v3 = \"\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"acBAA\";\n$x4 = removeVowels($arg40);\n$v4 = \"cB\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"EcBOO\";\n$x5 = removeVowels($arg50);\n$v5 = \"cB\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"ybcd\";\n$x6 = removeVowels($arg60);\n$v6 = \"ybcd\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "रिमूव् _ वोवेल्स् इति एकं फंक्षन् अस्ति यत् स्ट्रिङ्ग् स्वीकृत्य स्वरं विना स्ट्रिङ्ग् प्रत्यावर्तयति। \n>>> स्वरान् निष्कासयतु (\") \n\"इति। \n>>> स्वरान् निष्कासयतु (\"abcdef\\nghijklm\") \n'bcdf\\ nghjklm'\n>>> स्वरान् निष्कासयतु ('ए. बी. सी. डी. एफ़्.') \n'बी. सी. डी. एफ़्.'\n>>> स्वरान् निष्कासयतु ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"इति। \n>>> स्वरान् निष्कासयतु ('आब्बा') \n\"बी\" इति। \n>>> स्वरान् निष्कासयतु ('zbcd') \n'एस्. बी. सी. डी.'", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/18", "entry_point": "belowThreshold", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 4, 10];\n$arg01 = 100;\n$x0 = belowThreshold($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 20, 4, 10];\n$arg11 = 5;\n$x1 = belowThreshold($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 20, 4, 10];\n$arg21 = 21;\n$x2 = belowThreshold($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 20, 4, 10];\n$arg31 = 22;\n$x3 = belowThreshold($arg30, $arg31);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 8, 4, 10];\n$arg41 = 11;\n$x4 = belowThreshold($arg40, $arg41);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 8, 4, 10];\n$arg51 = 10;\n$x5 = belowThreshold($arg50, $arg51);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "यदि सूची l मध्ये सर्वाः सङ्ख्याः t-परिमितेः अधः सन्ति तर्हि सत्यं प्रत्यावर्तयतु। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,2,4,10], 100) \nसत्यम्। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,20,4,10], 5) \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/19", "entry_point": "add", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 0;\n$arg01 = 1;\n$x0 = add($arg00, $arg01);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 0;\n$x1 = add($arg10, $arg11);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 2;\n$arg21 = 3;\n$x2 = add($arg20, $arg21);\n$v2 = 5;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5;\n$arg31 = 7;\n$x3 = add($arg30, $arg31);\n$v3 = 12;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$arg41 = 5;\n$x4 = add($arg40, $arg41);\n$v4 = 12;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 572;\n$arg51 = 725;\n$x5 = add($arg50, $arg51);\n$v5 = 1297;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 51;\n$arg61 = 804;\n$x6 = add($arg60, $arg61);\n$v6 = 855;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 645;\n$arg71 = 96;\n$x7 = add($arg70, $arg71);\n$v7 = 741;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 712;\n$arg81 = 853;\n$x8 = add($arg80, $arg81);\n$v8 = 1565;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 223;\n$arg91 = 101;\n$x9 = add($arg90, $arg91);\n$v9 = 324;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 76;\n$arg101 = 29;\n$x10 = add($arg100, $arg101);\n$v10 = 105;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 416;\n$arg111 = 149;\n$x11 = add($arg110, $arg111);\n$v11 = 565;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 145;\n$arg121 = 409;\n$x12 = add($arg120, $arg121);\n$v12 = 554;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = 535;\n$arg131 = 430;\n$x13 = add($arg130, $arg131);\n$v13 = 965;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = 118;\n$arg141 = 303;\n$x14 = add($arg140, $arg141);\n$v14 = 421;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = 287;\n$arg151 = 94;\n$x15 = add($arg150, $arg151);\n$v15 = 381;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n$arg160 = 768;\n$arg161 = 257;\n$x16 = add($arg160, $arg161);\n$v16 = 1025;\nif (!compare($x16, $v16)) {\n    throw new Exception(\"Error at 17th assert statement.\");\n}\n$arg170 = 421;\n$arg171 = 677;\n$x17 = add($arg170, $arg171);\n$v17 = 1098;\nif (!compare($x17, $v17)) {\n    throw new Exception(\"Error at 18th assert statement.\");\n}\n$arg180 = 802;\n$arg181 = 814;\n$x18 = add($arg180, $arg181);\n$v18 = 1616;\nif (!compare($x18, $v18)) {\n    throw new Exception(\"Error at 19th assert statement.\");\n}\n$arg190 = 510;\n$arg191 = 922;\n$x19 = add($arg190, $arg191);\n$v19 = 1432;\nif (!compare($x19, $v19)) {\n    throw new Exception(\"Error at 20th assert statement.\");\n}\n$arg200 = 345;\n$arg201 = 819;\n$x20 = add($arg200, $arg201);\n$v20 = 1164;\nif (!compare($x20, $v20)) {\n    throw new Exception(\"Error at 21th assert statement.\");\n}\n$arg210 = 895;\n$arg211 = 436;\n$x21 = add($arg210, $arg211);\n$v21 = 1331;\nif (!compare($x21, $v21)) {\n    throw new Exception(\"Error at 22th assert statement.\");\n}\n$arg220 = 123;\n$arg221 = 424;\n$x22 = add($arg220, $arg221);\n$v22 = 547;\nif (!compare($x22, $v22)) {\n    throw new Exception(\"Error at 23th assert statement.\");\n}\n$arg230 = 923;\n$arg231 = 245;\n$x23 = add($arg230, $arg231);\n$v23 = 1168;\nif (!compare($x23, $v23)) {\n    throw new Exception(\"Error at 24th assert statement.\");\n}\n$arg240 = 23;\n$arg241 = 438;\n$x24 = add($arg240, $arg241);\n$v24 = 461;\nif (!compare($x24, $v24)) {\n    throw new Exception(\"Error at 25th assert statement.\");\n}\n$arg250 = 565;\n$arg251 = 133;\n$x25 = add($arg250, $arg251);\n$v25 = 698;\nif (!compare($x25, $v25)) {\n    throw new Exception(\"Error at 26th assert statement.\");\n}\n$arg260 = 945;\n$arg261 = 925;\n$x26 = add($arg260, $arg261);\n$v26 = 1870;\nif (!compare($x26, $v26)) {\n    throw new Exception(\"Error at 27th assert statement.\");\n}\n$arg270 = 261;\n$arg271 = 983;\n$x27 = add($arg270, $arg271);\n$v27 = 1244;\nif (!compare($x27, $v27)) {\n    throw new Exception(\"Error at 28th assert statement.\");\n}\n$arg280 = 139;\n$arg281 = 577;\n$x28 = add($arg280, $arg281);\n$v28 = 716;\nif (!compare($x28, $v28)) {\n    throw new Exception(\"Error at 29th assert statement.\");\n}\n$arg290 = 763;\n$arg291 = 178;\n$x29 = add($arg290, $arg291);\n$v29 = 941;\nif (!compare($x29, $v29)) {\n    throw new Exception(\"Error at 30th assert statement.\");\n}\n$arg300 = 147;\n$arg301 = 892;\n$x30 = add($arg300, $arg301);\n$v30 = 1039;\nif (!compare($x30, $v30)) {\n    throw new Exception(\"Error at 31th assert statement.\");\n}\n$arg310 = 436;\n$arg311 = 402;\n$x31 = add($arg310, $arg311);\n$v31 = 838;\nif (!compare($x31, $v31)) {\n    throw new Exception(\"Error at 32th assert statement.\");\n}\n$arg320 = 610;\n$arg321 = 581;\n$x32 = add($arg320, $arg321);\n$v32 = 1191;\nif (!compare($x32, $v32)) {\n    throw new Exception(\"Error at 33th assert statement.\");\n}\n$arg330 = 103;\n$arg331 = 416;\n$x33 = add($arg330, $arg331);\n$v33 = 519;\nif (!compare($x33, $v33)) {\n    throw new Exception(\"Error at 34th assert statement.\");\n}\n$arg340 = 339;\n$arg341 = 990;\n$x34 = add($arg340, $arg341);\n$v34 = 1329;\nif (!compare($x34, $v34)) {\n    throw new Exception(\"Error at 35th assert statement.\");\n}\n$arg350 = 130;\n$arg351 = 504;\n$x35 = add($arg350, $arg351);\n$v35 = 634;\nif (!compare($x35, $v35)) {\n    throw new Exception(\"Error at 36th assert statement.\");\n}\n$arg360 = 242;\n$arg361 = 717;\n$x36 = add($arg360, $arg361);\n$v36 = 959;\nif (!compare($x36, $v36)) {\n    throw new Exception(\"Error at 37th assert statement.\");\n}\n$arg370 = 562;\n$arg371 = 110;\n$x37 = add($arg370, $arg371);\n$v37 = 672;\nif (!compare($x37, $v37)) {\n    throw new Exception(\"Error at 38th assert statement.\");\n}\n$arg380 = 396;\n$arg381 = 909;\n$x38 = add($arg380, $arg381);\n$v38 = 1305;\nif (!compare($x38, $v38)) {\n    throw new Exception(\"Error at 39th assert statement.\");\n}\n$arg390 = 887;\n$arg391 = 703;\n$x39 = add($arg390, $arg391);\n$v39 = 1590;\nif (!compare($x39, $v39)) {\n    throw new Exception(\"Error at 40th assert statement.\");\n}\n$arg400 = 870;\n$arg401 = 551;\n$x40 = add($arg400, $arg401);\n$v40 = 1421;\nif (!compare($x40, $v40)) {\n    throw new Exception(\"Error at 41th assert statement.\");\n}\n$arg410 = 422;\n$arg411 = 391;\n$x41 = add($arg410, $arg411);\n$v41 = 813;\nif (!compare($x41, $v41)) {\n    throw new Exception(\"Error at 42th assert statement.\");\n}\n$arg420 = 299;\n$arg421 = 505;\n$x42 = add($arg420, $arg421);\n$v42 = 804;\nif (!compare($x42, $v42)) {\n    throw new Exception(\"Error at 43th assert statement.\");\n}\n$arg430 = 346;\n$arg431 = 56;\n$x43 = add($arg430, $arg431);\n$v43 = 402;\nif (!compare($x43, $v43)) {\n    throw new Exception(\"Error at 44th assert statement.\");\n}\n$arg440 = 36;\n$arg441 = 706;\n$x44 = add($arg440, $arg441);\n$v44 = 742;\nif (!compare($x44, $v44)) {\n    throw new Exception(\"Error at 45th assert statement.\");\n}\n$arg450 = 738;\n$arg451 = 411;\n$x45 = add($arg450, $arg451);\n$v45 = 1149;\nif (!compare($x45, $v45)) {\n    throw new Exception(\"Error at 46th assert statement.\");\n}\n$arg460 = 679;\n$arg461 = 87;\n$x46 = add($arg460, $arg461);\n$v46 = 766;\nif (!compare($x46, $v46)) {\n    throw new Exception(\"Error at 47th assert statement.\");\n}\n$arg470 = 25;\n$arg471 = 303;\n$x47 = add($arg470, $arg471);\n$v47 = 328;\nif (!compare($x47, $v47)) {\n    throw new Exception(\"Error at 48th assert statement.\");\n}\n$arg480 = 161;\n$arg481 = 612;\n$x48 = add($arg480, $arg481);\n$v48 = 773;\nif (!compare($x48, $v48)) {\n    throw new Exception(\"Error at 49th assert statement.\");\n}\n$arg490 = 306;\n$arg491 = 841;\n$x49 = add($arg490, $arg491);\n$v49 = 1147;\nif (!compare($x49, $v49)) {\n    throw new Exception(\"Error at 50th assert statement.\");\n}\n$arg500 = 973;\n$arg501 = 411;\n$x50 = add($arg500, $arg501);\n$v50 = 1384;\nif (!compare($x50, $v50)) {\n    throw new Exception(\"Error at 51th assert statement.\");\n}\n$arg510 = 711;\n$arg511 = 157;\n$x51 = add($arg510, $arg511);\n$v51 = 868;\nif (!compare($x51, $v51)) {\n    throw new Exception(\"Error at 52th assert statement.\");\n}\n$arg520 = 471;\n$arg521 = 27;\n$x52 = add($arg520, $arg521);\n$v52 = 498;\nif (!compare($x52, $v52)) {\n    throw new Exception(\"Error at 53th assert statement.\");\n}\n$arg530 = 714;\n$arg531 = 792;\n$x53 = add($arg530, $arg531);\n$v53 = 1506;\nif (!compare($x53, $v53)) {\n    throw new Exception(\"Error at 54th assert statement.\");\n}\n$arg540 = 38;\n$arg541 = 206;\n$x54 = add($arg540, $arg541);\n$v54 = 244;\nif (!compare($x54, $v54)) {\n    throw new Exception(\"Error at 55th assert statement.\");\n}\n$arg550 = 907;\n$arg551 = 343;\n$x55 = add($arg550, $arg551);\n$v55 = 1250;\nif (!compare($x55, $v55)) {\n    throw new Exception(\"Error at 56th assert statement.\");\n}\n$arg560 = 23;\n$arg561 = 760;\n$x56 = add($arg560, $arg561);\n$v56 = 783;\nif (!compare($x56, $v56)) {\n    throw new Exception(\"Error at 57th assert statement.\");\n}\n$arg570 = 524;\n$arg571 = 859;\n$x57 = add($arg570, $arg571);\n$v57 = 1383;\nif (!compare($x57, $v57)) {\n    throw new Exception(\"Error at 58th assert statement.\");\n}\n$arg580 = 30;\n$arg581 = 529;\n$x58 = add($arg580, $arg581);\n$v58 = 559;\nif (!compare($x58, $v58)) {\n    throw new Exception(\"Error at 59th assert statement.\");\n}\n$arg590 = 341;\n$arg591 = 691;\n$x59 = add($arg590, $arg591);\n$v59 = 1032;\nif (!compare($x59, $v59)) {\n    throw new Exception(\"Error at 60th assert statement.\");\n}\n$arg600 = 167;\n$arg601 = 729;\n$x60 = add($arg600, $arg601);\n$v60 = 896;\nif (!compare($x60, $v60)) {\n    throw new Exception(\"Error at 61th assert statement.\");\n}\n$arg610 = 636;\n$arg611 = 289;\n$x61 = add($arg610, $arg611);\n$v61 = 925;\nif (!compare($x61, $v61)) {\n    throw new Exception(\"Error at 62th assert statement.\");\n}\n$arg620 = 503;\n$arg621 = 144;\n$x62 = add($arg620, $arg621);\n$v62 = 647;\nif (!compare($x62, $v62)) {\n    throw new Exception(\"Error at 63th assert statement.\");\n}\n$arg630 = 51;\n$arg631 = 985;\n$x63 = add($arg630, $arg631);\n$v63 = 1036;\nif (!compare($x63, $v63)) {\n    throw new Exception(\"Error at 64th assert statement.\");\n}\n$arg640 = 287;\n$arg641 = 149;\n$x64 = add($arg640, $arg641);\n$v64 = 436;\nif (!compare($x64, $v64)) {\n    throw new Exception(\"Error at 65th assert statement.\");\n}\n$arg650 = 659;\n$arg651 = 75;\n$x65 = add($arg650, $arg651);\n$v65 = 734;\nif (!compare($x65, $v65)) {\n    throw new Exception(\"Error at 66th assert statement.\");\n}\n$arg660 = 462;\n$arg661 = 797;\n$x66 = add($arg660, $arg661);\n$v66 = 1259;\nif (!compare($x66, $v66)) {\n    throw new Exception(\"Error at 67th assert statement.\");\n}\n$arg670 = 406;\n$arg671 = 141;\n$x67 = add($arg670, $arg671);\n$v67 = 547;\nif (!compare($x67, $v67)) {\n    throw new Exception(\"Error at 68th assert statement.\");\n}\n$arg680 = 106;\n$arg681 = 44;\n$x68 = add($arg680, $arg681);\n$v68 = 150;\nif (!compare($x68, $v68)) {\n    throw new Exception(\"Error at 69th assert statement.\");\n}\n$arg690 = 300;\n$arg691 = 934;\n$x69 = add($arg690, $arg691);\n$v69 = 1234;\nif (!compare($x69, $v69)) {\n    throw new Exception(\"Error at 70th assert statement.\");\n}\n$arg700 = 471;\n$arg701 = 524;\n$x70 = add($arg700, $arg701);\n$v70 = 995;\nif (!compare($x70, $v70)) {\n    throw new Exception(\"Error at 71th assert statement.\");\n}\n$arg710 = 122;\n$arg711 = 429;\n$x71 = add($arg710, $arg711);\n$v71 = 551;\nif (!compare($x71, $v71)) {\n    throw new Exception(\"Error at 72th assert statement.\");\n}\n$arg720 = 735;\n$arg721 = 195;\n$x72 = add($arg720, $arg721);\n$v72 = 930;\nif (!compare($x72, $v72)) {\n    throw new Exception(\"Error at 73th assert statement.\");\n}\n$arg730 = 335;\n$arg731 = 484;\n$x73 = add($arg730, $arg731);\n$v73 = 819;\nif (!compare($x73, $v73)) {\n    throw new Exception(\"Error at 74th assert statement.\");\n}\n$arg740 = 28;\n$arg741 = 809;\n$x74 = add($arg740, $arg741);\n$v74 = 837;\nif (!compare($x74, $v74)) {\n    throw new Exception(\"Error at 75th assert statement.\");\n}\n$arg750 = 430;\n$arg751 = 20;\n$x75 = add($arg750, $arg751);\n$v75 = 450;\nif (!compare($x75, $v75)) {\n    throw new Exception(\"Error at 76th assert statement.\");\n}\n$arg760 = 916;\n$arg761 = 635;\n$x76 = add($arg760, $arg761);\n$v76 = 1551;\nif (!compare($x76, $v76)) {\n    throw new Exception(\"Error at 77th assert statement.\");\n}\n$arg770 = 301;\n$arg771 = 999;\n$x77 = add($arg770, $arg771);\n$v77 = 1300;\nif (!compare($x77, $v77)) {\n    throw new Exception(\"Error at 78th assert statement.\");\n}\n$arg780 = 454;\n$arg781 = 466;\n$x78 = add($arg780, $arg781);\n$v78 = 920;\nif (!compare($x78, $v78)) {\n    throw new Exception(\"Error at 79th assert statement.\");\n}\n$arg790 = 905;\n$arg791 = 259;\n$x79 = add($arg790, $arg791);\n$v79 = 1164;\nif (!compare($x79, $v79)) {\n    throw new Exception(\"Error at 80th assert statement.\");\n}\n$arg800 = 168;\n$arg801 = 205;\n$x80 = add($arg800, $arg801);\n$v80 = 373;\nif (!compare($x80, $v80)) {\n    throw new Exception(\"Error at 81th assert statement.\");\n}\n$arg810 = 570;\n$arg811 = 434;\n$x81 = add($arg810, $arg811);\n$v81 = 1004;\nif (!compare($x81, $v81)) {\n    throw new Exception(\"Error at 82th assert statement.\");\n}\n$arg820 = 64;\n$arg821 = 959;\n$x82 = add($arg820, $arg821);\n$v82 = 1023;\nif (!compare($x82, $v82)) {\n    throw new Exception(\"Error at 83th assert statement.\");\n}\n$arg830 = 957;\n$arg831 = 510;\n$x83 = add($arg830, $arg831);\n$v83 = 1467;\nif (!compare($x83, $v83)) {\n    throw new Exception(\"Error at 84th assert statement.\");\n}\n$arg840 = 722;\n$arg841 = 598;\n$x84 = add($arg840, $arg841);\n$v84 = 1320;\nif (!compare($x84, $v84)) {\n    throw new Exception(\"Error at 85th assert statement.\");\n}\n$arg850 = 770;\n$arg851 = 226;\n$x85 = add($arg850, $arg851);\n$v85 = 996;\nif (!compare($x85, $v85)) {\n    throw new Exception(\"Error at 86th assert statement.\");\n}\n$arg860 = 579;\n$arg861 = 66;\n$x86 = add($arg860, $arg861);\n$v86 = 645;\nif (!compare($x86, $v86)) {\n    throw new Exception(\"Error at 87th assert statement.\");\n}\n$arg870 = 117;\n$arg871 = 674;\n$x87 = add($arg870, $arg871);\n$v87 = 791;\nif (!compare($x87, $v87)) {\n    throw new Exception(\"Error at 88th assert statement.\");\n}\n$arg880 = 530;\n$arg881 = 30;\n$x88 = add($arg880, $arg881);\n$v88 = 560;\nif (!compare($x88, $v88)) {\n    throw new Exception(\"Error at 89th assert statement.\");\n}\n$arg890 = 776;\n$arg891 = 345;\n$x89 = add($arg890, $arg891);\n$v89 = 1121;\nif (!compare($x89, $v89)) {\n    throw new Exception(\"Error at 90th assert statement.\");\n}\n$arg900 = 327;\n$arg901 = 389;\n$x90 = add($arg900, $arg901);\n$v90 = 716;\nif (!compare($x90, $v90)) {\n    throw new Exception(\"Error at 91th assert statement.\");\n}\n$arg910 = 596;\n$arg911 = 12;\n$x91 = add($arg910, $arg911);\n$v91 = 608;\nif (!compare($x91, $v91)) {\n    throw new Exception(\"Error at 92th assert statement.\");\n}\n$arg920 = 599;\n$arg921 = 511;\n$x92 = add($arg920, $arg921);\n$v92 = 1110;\nif (!compare($x92, $v92)) {\n    throw new Exception(\"Error at 93th assert statement.\");\n}\n$arg930 = 936;\n$arg931 = 476;\n$x93 = add($arg930, $arg931);\n$v93 = 1412;\nif (!compare($x93, $v93)) {\n    throw new Exception(\"Error at 94th assert statement.\");\n}\n$arg940 = 461;\n$arg941 = 14;\n$x94 = add($arg940, $arg941);\n$v94 = 475;\nif (!compare($x94, $v94)) {\n    throw new Exception(\"Error at 95th assert statement.\");\n}\n$arg950 = 966;\n$arg951 = 157;\n$x95 = add($arg950, $arg951);\n$v95 = 1123;\nif (!compare($x95, $v95)) {\n    throw new Exception(\"Error at 96th assert statement.\");\n}\n$arg960 = 326;\n$arg961 = 91;\n$x96 = add($arg960, $arg961);\n$v96 = 417;\nif (!compare($x96, $v96)) {\n    throw new Exception(\"Error at 97th assert statement.\");\n}\n$arg970 = 392;\n$arg971 = 455;\n$x97 = add($arg970, $arg971);\n$v97 = 847;\nif (!compare($x97, $v97)) {\n    throw new Exception(\"Error at 98th assert statement.\");\n}\n$arg980 = 446;\n$arg981 = 477;\n$x98 = add($arg980, $arg981);\n$v98 = 923;\nif (!compare($x98, $v98)) {\n    throw new Exception(\"Error at 99th assert statement.\");\n}\n$arg990 = 324;\n$arg991 = 860;\n$x99 = add($arg990, $arg991);\n$v99 = 1184;\nif (!compare($x99, $v99)) {\n    throw new Exception(\"Error at 100th assert statement.\");\n}\n$arg1000 = 945;\n$arg1001 = 85;\n$x100 = add($arg1000, $arg1001);\n$v100 = 1030;\nif (!compare($x100, $v100)) {\n    throw new Exception(\"Error at 101th assert statement.\");\n}\n$arg1010 = 886;\n$arg1011 = 582;\n$x101 = add($arg1010, $arg1011);\n$v101 = 1468;\nif (!compare($x101, $v101)) {\n    throw new Exception(\"Error at 102th assert statement.\");\n}\n$arg1020 = 886;\n$arg1021 = 712;\n$x102 = add($arg1020, $arg1021);\n$v102 = 1598;\nif (!compare($x102, $v102)) {\n    throw new Exception(\"Error at 103th assert statement.\");\n}\n$arg1030 = 842;\n$arg1031 = 953;\n$x103 = add($arg1030, $arg1031);\n$v103 = 1795;\nif (!compare($x103, $v103)) {\n    throw new Exception(\"Error at 104th assert statement.\");\n}\n", "description": "x तथा y संख्याद्वयं योजयतु। \n>>> योजयतु (2,3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> योजयतु (5,7) \n12।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/20", "entry_point": "sameChars", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"eabcdzzzz\";\n$arg01 = \"dddzzzzzzzddeddabc\";\n$x0 = sameChars($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcd\";\n$arg11 = \"dddddddabc\";\n$x1 = sameChars($arg10, $arg11);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"dddddddabc\";\n$arg21 = \"abcd\";\n$x2 = sameChars($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"eabcd\";\n$arg31 = \"dddddddabc\";\n$x3 = sameChars($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"abcd\";\n$arg41 = \"dddddddabcf\";\n$x4 = sameChars($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"eabcdzzzz\";\n$arg51 = \"dddzzzzzzzddddabc\";\n$x5 = sameChars($arg50, $arg51);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"aabb\";\n$arg61 = \"aaccc\";\n$x6 = sameChars($arg60, $arg61);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "द्वयोः शब्दयोः अक्षरद्वयम् समानम् अस्ति वा इति पश्यतु। \n>>> समान-अक्षरानि ('eabcdzzzz','dddzzzzzuddeddabc') \nसत्यम्। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nसत्यम्। \n>>> सेमचारस् ('ddddddabc','abcd') \nसत्यम्। \n>>> सेमचारस् ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>>> समान-अक्षरानि ('eabcdzzz','dddzzzzzddddddbc') \nमिथ्याचारः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/21", "entry_point": "fib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 10;\n$x0 = fib($arg00);\n$v0 = 55;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$x1 = fib($arg10);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 8;\n$x2 = fib($arg20);\n$v2 = 21;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 11;\n$x3 = fib($arg30);\n$v3 = 89;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 12;\n$x4 = fib($arg40);\n$v4 = 144;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "n-th फिबोनाची सङ्ख्या प्रत्यावर्तयतु। \n>>> फैब् (10) \n55। \n>>> फैब् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> फैब् (8) \n21।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/22", "entry_point": "common", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 4, 3, 34, 653, 2, 5];\n$arg01 = [5, 7, 1, 5, 9, 653, 121];\n$x0 = common($arg00, $arg01);\n$v0 = [1, 5, 653];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 3, 2, 8];\n$arg11 = [3, 2];\n$x1 = common($arg10, $arg11);\n$v1 = [2, 3];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [4, 3, 2, 8];\n$arg21 = [3, 2, 4];\n$x2 = common($arg20, $arg21);\n$v2 = [2, 3, 4];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 3, 2, 8];\n$arg31 = [];\n$x3 = common($arg30, $arg31);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "द्वयोः सूच्याः कृते विशिष्टान् सामान्यान् तत्त्वान् पुनः क्रमबद्धं करोतु। \n>> सामान्यः ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्यः ([5,3,2,8], [3,2]) \n[2,3]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/23", "entry_point": "largestPrimeFactor", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 15;\n$x0 = largestPrimeFactor($arg00);\n$v0 = 5;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 27;\n$x1 = largestPrimeFactor($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 63;\n$x2 = largestPrimeFactor($arg20);\n$v2 = 7;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 330;\n$x3 = largestPrimeFactor($arg30);\n$v3 = 11;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 13195;\n$x4 = largestPrimeFactor($arg40);\n$v4 = 29;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "n इत्यस्य बृहत्तमं अभाज्यघटकं प्रत्यावर्तयतु। n> 1 इति अमन्यताम्, सः अभाज्यः नास्ति। \n>>> बृहत्तमः _ प्रधानः _ कारकः (13195) \n29। \n>>> बृहत्तमं _ प्रधानम् _ कारकं (2048) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/24", "entry_point": "sumToN", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$x0 = sumToN($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 6;\n$x1 = sumToN($arg10);\n$v1 = 21;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 11;\n$x2 = sumToN($arg20);\n$v2 = 66;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 30;\n$x3 = sumToN($arg30);\n$v3 = 465;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 100;\n$x4 = sumToN($arg40);\n$v4 = 5050;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "sum _ to _ n इति एकं फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यानां योग्यं करोति। \n>>> सम्-टु-एन् (30) \n465। \n>>> सम्-टु-एन् (100) \n5050 \n>>> सम्-टु-एन् (5) \n15। \n>>> सम्-टु-एन् (10) \n55। \n>>> सम्-टु-एन् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/25", "entry_point": "derivative", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 1, 2, 4, 5];\n$x0 = derivative($arg00);\n$v0 = [1, 4, 12, 20];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 3];\n$x1 = derivative($arg10);\n$v1 = [2, 6];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3, 2, 1];\n$x2 = derivative($arg20);\n$v2 = [2, 2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 2, 1, 0, 4];\n$x3 = derivative($arg30);\n$v3 = [2, 2, 0, 16];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$x4 = derivative($arg40);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "xs तु बहुपदस्य गुणकं निर्दिशति। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nअस्य बहुपदस्य व्युत्पन्नम् समानरूपेण प्रत्यावर्तयतु। \n>>> व्युत्पन्नम् ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्नम् ([1,2,3]) \n[2,6]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/26", "entry_point": "fibfib", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 2;\n$x0 = fibfib($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$x1 = fibfib($arg10);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = fibfib($arg20);\n$v2 = 4;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 8;\n$x3 = fibfib($arg30);\n$v3 = 24;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 10;\n$x4 = fibfib($arg40);\n$v4 = 81;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 12;\n$x5 = fibfib($arg50);\n$v5 = 274;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 14;\n$x6 = fibfib($arg60);\n$v6 = 927;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "फैब्-फैब् सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nफैबफ़िब (0) = = 0 \nफैबफ़िब (1) = = 0 \nफैबफ़िब (2) = = 1 \nfibfib (n) = = fibfib (n-1) + fibfib (n-2) + fibfib (n-3)। \nफैब्फैब् सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। \n>>> फैब्फैब् (1) \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>>> फैब्फैब् (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्फैब् (8) \n24।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/27", "entry_point": "vowelsCount", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"abcde\";\n$x0 = vowelsCount($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Alone\";\n$x1 = vowelsCount($arg10);\n$v1 = 3;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"key\";\n$x2 = vowelsCount($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"bye\";\n$x3 = vowelsCount($arg30);\n$v3 = 1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"keY\";\n$x4 = vowelsCount($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"bYe\";\n$x5 = vowelsCount($arg50);\n$v5 = 1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"ACEDY\";\n$x6 = vowelsCount($arg60);\n$v6 = 3;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "एकं फंक्षन्-वोवेल्स्-कौण्ट् इति लिखतु यत् तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं \nएकं पदं इन्पुट्-रूपेण तथा स्ट्रिङ्ग्-मध्ये स्वराणां संख्यां प्रत्यर्पयति। \nअस्मिन् सन्दर्भे स्वराः'a','e','i','o','u'च सन्ति। अत्र'y'अपि a अस्ति। \nस्वरः, परन्तु केवलं यदा सः प्रदत्तस्य शब्दस्य अन्ते भवति। \n\nउदाहरणम्-\n>>> स्वरगणनाः (\"ए. बी. सी. डी\".) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> स्वरगणनाः (\"ACEDY\") \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/28", "entry_point": "search", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, 5, 5, 5, 1];\n$x0 = search($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [4, 1, 4, 1, 4, 4];\n$x1 = search($arg10);\n$v1 = 4;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3, 3];\n$x2 = search($arg20);\n$v2 = -1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\n$x3 = search($arg30);\n$v3 = 8;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [2, 3, 3, 2, 2];\n$x4 = search($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\n$x5 = search($arg50);\n$v5 = 1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [3, 2, 8, 2];\n$x6 = search($arg60);\n$v6 = 2;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\n$x7 = search($arg70);\n$v7 = 1;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [8, 8, 3, 6, 5, 6, 4];\n$x8 = search($arg80);\n$v8 = -1;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\n$x9 = search($arg90);\n$v9 = 1;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [1, 9, 10, 1, 3];\n$x10 = search($arg100);\n$v10 = 1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\n$x11 = search($arg110);\n$v11 = 5;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = [1];\n$x12 = search($arg120);\n$v12 = 1;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\n$x13 = search($arg130);\n$v13 = 4;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\n$x14 = search($arg140);\n$v14 = 2;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\n$x15 = search($arg150);\n$v15 = 1;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n$arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\n$x16 = search($arg160);\n$v16 = 4;\nif (!compare($x16, $v16)) {\n    throw new Exception(\"Error at 17th assert statement.\");\n}\n$arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\n$x17 = search($arg170);\n$v17 = 4;\nif (!compare($x17, $v17)) {\n    throw new Exception(\"Error at 18th assert statement.\");\n}\n$arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\n$x18 = search($arg180);\n$v18 = 2;\nif (!compare($x18, $v18)) {\n    throw new Exception(\"Error at 19th assert statement.\");\n}\n$arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\n$x19 = search($arg190);\n$v19 = -1;\nif (!compare($x19, $v19)) {\n    throw new Exception(\"Error at 20th assert statement.\");\n}\n$arg200 = [10];\n$x20 = search($arg200);\n$v20 = -1;\nif (!compare($x20, $v20)) {\n    throw new Exception(\"Error at 21th assert statement.\");\n}\n$arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\n$x21 = search($arg210);\n$v21 = 2;\nif (!compare($x21, $v21)) {\n    throw new Exception(\"Error at 22th assert statement.\");\n}\n$arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\n$x22 = search($arg220);\n$v22 = 1;\nif (!compare($x22, $v22)) {\n    throw new Exception(\"Error at 23th assert statement.\");\n}\n$arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\n$x23 = search($arg230);\n$v23 = 1;\nif (!compare($x23, $v23)) {\n    throw new Exception(\"Error at 24th assert statement.\");\n}\n$arg240 = [3, 10, 10, 9, 2];\n$x24 = search($arg240);\n$v24 = -1;\nif (!compare($x24, $v24)) {\n    throw new Exception(\"Error at 25th assert statement.\");\n}\n", "description": "भवते धनात्मक-पूर्णांकानां रिक्त-सूची दत्ता भवति। तस्य अपेक्षया बृहत्तमा पूर्णांकं प्रत्यर्पयतु। \nशून्यं, तथा च तस्य आवृत्तिः पूर्णांकस्य मूल्यात् अधिका वा समानं वा भवति। \nपूर्णांकस्य आवृत्तिः सूच्यां कियत् प्रावश्यं दृश्यते इति निर्दिशति। \nयदि एतादृशं मूल्यं नास्ति तर्हि-1 प्रत्यर्पयतु। \nउदाहरणानि-\nअन्वेषणम् ([4,1,2,2,3,1]) = = 2 \nअन्वेषणम् ([1,2,3,3,4,4]) = = 3 \nअन्वेषणम् ([5,5,4,4]) = =-1", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/29", "entry_point": "triangleArea", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 4;\n$arg02 = 5;\n$x0 = triangleArea($arg00, $arg01, $arg02);\n$v0 = 6.0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 2;\n$arg12 = 10;\n$x1 = triangleArea($arg10, $arg11, $arg12);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 4;\n$arg21 = 8;\n$arg22 = 5;\n$x2 = triangleArea($arg20, $arg21, $arg22);\n$v2 = 8.18;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 2;\n$arg31 = 2;\n$arg32 = 2;\n$x3 = triangleArea($arg30, $arg31, $arg32);\n$v3 = 1.73;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 1;\n$arg41 = 2;\n$arg42 = 3;\n$x4 = triangleArea($arg40, $arg41, $arg42);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 10;\n$arg51 = 5;\n$arg52 = 7;\n$x5 = triangleArea($arg50, $arg51, $arg52);\n$v5 = 16.25;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 2;\n$arg61 = 6;\n$arg62 = 3;\n$x6 = triangleArea($arg60, $arg61, $arg62);\n$v6 = -1;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 1;\n$arg71 = 1;\n$arg72 = 1;\n$x7 = triangleArea($arg70, $arg71, $arg72);\n$v7 = 0.43;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 2;\n$arg81 = 2;\n$arg82 = 10;\n$x8 = triangleArea($arg80, $arg81, $arg82);\n$v8 = -1;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। अस्य क्षेत्रफलं प्रत्यावर्तयतु। \nत्रिकोणमितिः 2 दशमांश-बिन्दुभिः वृत्ताकारः भवति, यदि त्रिभिः पक्षैः वैधत्रिकोणमितिः कल्प्यते। \nअन्यथा पुनरागमनं-1 \nउभयपक्षयोः योगः अधिकः भवति चेत् त्रिभुजपक्षाः त्रिकोणं निर्मीयन्ते। \nतृतीयपक्षस्य अपेक्षया। \nउदाहरणम्-\nत्रिभुज-क्षेत्रफलं (3,4,5) = = 6.00 \nत्रिभुजक्षेत्रम् (1,2,10) = =-1", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/30", "entry_point": "willItFly", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 2, 3];\n$arg01 = 9;\n$x0 = willItFly($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2];\n$arg11 = 5;\n$x1 = willItFly($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [3];\n$arg21 = 5;\n$x2 = willItFly($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 2, 3];\n$arg31 = 1;\n$x3 = willItFly($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 3];\n$arg41 = 6;\n$x4 = willItFly($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [5];\n$arg51 = 5;\n$x5 = willItFly($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "यदि q वस्तु उड्डीयते तर्हि सत्यं प्रत्यावर्तयति, अन्यथा असत्यम् इति फलनम् लिखतु। \nयदि वस्तु q सन्तुलितम् अस्ति (एषा पालिण्ड्रोमिक्-सूची अस्ति) तथा च तस्य तत्त्वानां योगः अधिकतम-संभव-भारस्य डब्ल्यू-तः न्यूनं वा समानं वा भवति तर्हि तत् उड्डीयते। \n\nउदाहरणम्-\nविल् _ इट् _ फ़्लै ([1,2], 5) ′ फाल्स् \n#1 + 2 अधिकतम-संभव-भारात् न्यूनम् अस्ति, परन्तु असंतुलितम् अस्ति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 1) ′ फाल्स् \n#एतत् सन्तुलितम् अस्ति, परन्तु 3 + 2 + 3 अधिकतम-सम्भव-भारात् अधिकं भवति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 9) ट्रु \n#3 + 2 + 3 अधिकतम-संभव-भारात् न्यूनं भवति, सन्तुलितं च भवति। \n\nविल् _ इट् _ फ़्लै ([3], 5) ट्रु \n#3 अधिकतम-संभव-भारात् न्यूनः अस्ति, सन्तुलितः च अस्ति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/31", "entry_point": "isMultiplyPrime", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = isMultiplyPrime($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 30;\n$x1 = isMultiplyPrime($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 8;\n$x2 = isMultiplyPrime($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 10;\n$x3 = isMultiplyPrime($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 125;\n$x4 = isMultiplyPrime($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 105;\n$x5 = isMultiplyPrime($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 126;\n$x6 = isMultiplyPrime($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 729;\n$x7 = isMultiplyPrime($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 891;\n$x8 = isMultiplyPrime($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1001;\n$x9 = isMultiplyPrime($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "यदि दत्तसङ्ख्या 3 अभाज्यसङ्ख्याणां गुणनम् अस्ति तर्हि सत्यं प्रत्यावर्त्यमानं फलनम् लिखतु। \nअन्यथा असत्यम्। \n(अ) 100 तः न्यूनम् इति ज्ञात्वा। \nउदाहरणम्-\nगुणितं अभाज्यम् (30) = = सत्यम् \n30 = 2 * 3 * 5", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/32", "entry_point": "decimalToBinary", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 0;\n$x0 = decimalToBinary($arg00);\n$v0 = \"db0db\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 32;\n$x1 = decimalToBinary($arg10);\n$v1 = \"db100000db\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 103;\n$x2 = decimalToBinary($arg20);\n$v2 = \"db1100111db\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 15;\n$x3 = decimalToBinary($arg30);\n$v3 = \"db1111db\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "भवते दशमांश-रूपेण संख्या दीयते तथा च भवतः कार्यम् अस्ति तत् दशमांश-रूपेण परिवर्तयेत्। \nद्वैतीयं स्वरूपम्। फलनम् एकं स्ट्रिङ्ग् प्रत्यावर्तयेत्, यत्र प्रत्येकं अक्षरं द्वैतीयं प्रतिनिधित्वं करोति। \nसंख्या। तन्त्रे प्रत्येकं अक्षरं'0'अथवा'1'भविष्यति। \n\nस्ट्रिङ्ग् इत्यस्य आरम्भे अन्ते च'db'इति अक्षरयोः अतिरिक्तयुगलः भविष्यन्ति। \nविन्यासे साहाय्यं कर्तुं अतिरिक्तानि अक्षरानि सन्ति। \n\nउदाहरणानि-\nदशमांशतः द्वैतीयं प्रति (15) #\"db1111db\" प्रत्यावर्तयति। \nदशमांशतः द्वैतीयं प्रति (32) #\"db100000db\" प्रत्यावर्तयति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/33", "entry_point": "isHappy", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"a\";\n$x0 = isHappy($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"aa\";\n$x1 = isHappy($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"abcd\";\n$x2 = isHappy($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"aabb\";\n$x3 = isHappy($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"adb\";\n$x4 = isHappy($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"xyy\";\n$x5 = isHappy($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"iopaxpoi\";\n$x6 = isHappy($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"iopaxioi\";\n$x7 = isHappy($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nस्ट्रिङ्ग् प्रसन्नः अस्ति वा न वा इति अन्वेष्टुं भवतः कार्यम् अस्ति। \nएकः सूत्रः प्रसन्नः भवति यदि तस्य दीर्घता न्यूनातिन्यूनं 3 भवति तथा च प्रति 3 क्रमानुगत-अक्षराणि विशिष्टाः भवन्ति। \nयथा-\nअस्ति _ प्रसन्नः (अ) => मिथ्या \nईस् _ हेप्पी (एए) => फाल्स् \nअस्ति _ प्रसन्नः (ए. बी. सी. डी.) => सत्यः \nईस् _ हेप्पी (आब्ब्) => फाल्स् इति। \nअस्ति _ प्रसन्नः (ए. डि. बि.) => सत्यः \nअस्ति _ प्रसन्नः (xyy) => मिथ्या", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/34", "entry_point": "numericalLetterGrade", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [4.0, 3, 1.7, 2, 3.5];\n$x0 = numericalLetterGrade($arg00);\n$v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1.2];\n$x1 = numericalLetterGrade($arg10);\n$v1 = [\"D+\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [0.5];\n$x2 = numericalLetterGrade($arg20);\n$v2 = [\"D-\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [0.0];\n$x3 = numericalLetterGrade($arg30);\n$v3 = [\"E\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 0.3, 1.5, 2.8, 3.3];\n$x4 = numericalLetterGrade($arg40);\n$v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 0.7];\n$x5 = numericalLetterGrade($arg50);\n$v5 = [\"E\", \"D-\"];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "एषः सत्रस्य अन्तिमः सप्ताहः अस्ति, शिक्षकः श्रेण्याः दातव्यम् अस्ति। \nछात्राणां कृते। शिक्षिका ग्रेडिङ्ग् कृते स्वकीयं एल्गोरिथ्म् निर्मायन्ती अस्ति। \nएकमात्रा समस्या एषा अस्ति यत् सा ग्रेडिङ्ग् कृते प्रयुक्तं कोड् नष्टवती। \nसा भवतः कृते केषाञ्चन छात्राणां कृते जी. पी. ए. इत्येतेषां सूचीं दत्तवती, भवन्तं लेखनीयम् अस्ति। \nएकः प्रकारः यः निम्नलिखितं पट्टिकाम् उपयुज्य अक्षरश्रेण्याः सूचीं निर्गन्तुं शक्नोतिः \nजी. पी. ए। अक्षरश्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n3. 0 बी + \n> 2.7 बी \n> 2.3 बी-\n2. 0 सी + \n> 1.7 सी \n> 1.3 सी-\n1. 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणम्-\nश्रेणी-समीकरणं ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/35", "entry_point": "primeLength", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello\";\n$x0 = primeLength($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdcba\";\n$x1 = primeLength($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"kittens\";\n$x2 = primeLength($arg20);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"orange\";\n$x3 = primeLength($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"wow\";\n$x4 = primeLength($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"world\";\n$x5 = primeLength($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"MadaM\";\n$x6 = primeLength($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"Wow\";\n$x7 = primeLength($arg70);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"\";\n$x8 = primeLength($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"HI\";\n$x9 = primeLength($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"go\";\n$x10 = primeLength($arg100);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"gogo\";\n$x11 = primeLength($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"aaaaaaaaaaaaaaa\";\n$x12 = primeLength($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = \"Madam\";\n$x13 = primeLength($arg130);\n$v13 = true;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n$arg140 = \"M\";\n$x14 = primeLength($arg140);\n$v14 = false;\nif (!compare($x14, $v14)) {\n    throw new Exception(\"Error at 15th assert statement.\");\n}\n$arg150 = \"0\";\n$x15 = primeLength($arg150);\n$v15 = false;\nif (!compare($x15, $v15)) {\n    throw new Exception(\"Error at 16th assert statement.\");\n}\n", "description": "एकं फंक्षन् लिखतु यत् स्ट्रिङ्ग् स्वीकृत्य सत्यं प्रत्यर्पयति यदि स्ट्रिङ्ग् अस्ति। \nदीर्घता अभाज्यसङ्ख्या अस्ति अथवा अन्यथा मिथ्या अस्ति। \nउदाहरणानि \nप्राइम-लेन्थ् ('हेलो') = = ट्रू \nअभाज्य-दीर्घता ('ए. बी. सी. डी. सी. बी. ए') = = सत्यम् \nप्रैम् _ लेन्थ् ('किटन्स्') = = ट्रू \nप्राइम-लेन्थ् ('नारङ्गवर्णः') = = मिथ्या", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/36", "entry_point": "solve", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1000;\n$x0 = solve($arg00);\n$v0 = \"1\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 150;\n$x1 = solve($arg10);\n$v1 = \"110\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 147;\n$x2 = solve($arg20);\n$v2 = \"1100\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 333;\n$x3 = solve($arg30);\n$v3 = \"1001\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 963;\n$x4 = solve($arg40);\n$v4 = \"10010\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "धनात्मकं पूर्णांकं N दत्तं चेत्, तस्य अङ्कानां कुलसमं द्वैतीये प्रत्यावर्तयतु। \n\nउदाहरणम्। \nएन = 1000 इत्यस्य कृते अङ्कानां योगः 1 भविष्यति, निर्गमः \"1\" भवेत्। \nएन = 150 इत्यस्य कृते अङ्कानां योगः 6 भविष्यति, निर्गमः \"110\" भवेत्। \nएन = 147 इत्यस्य कृते अङ्कानां योगः 12 भविष्यति, निर्गमः \"1100\" भवेत्। \n\nपरिवर्तनशीलः। \n@N पूर्णांकः \nअवरोधः 0 ≤ एन ≤ 10000। \nनिर्गमः। \nद्वैती-सङ्ख्यायाः पङ्क्तिः।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/37", "entry_point": "getRow", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$arg01 = 1;\n$x0 = getRow($arg00, $arg01);\n$v0 = [];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [[1]];\n$arg11 = 2;\n$x1 = getRow($arg10, $arg11);\n$v1 = [];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [[], [1], [1, 2, 3]];\n$arg21 = 3;\n$x2 = getRow($arg20, $arg21);\n$v2 = [[2, 2]];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n", "description": "भवते द्विमितीय-दत्तांशः दत्तः अस्ति, नेस्टड्-लिस्ट्-रूपेण, \nयत् म्याट्रिक्स्-सदृशम् अस्ति, तथापि, म्याट्रिक्स्-विपरीतम्, \nप्रत्येकं पङ्क्तौ भिन्नसङ्ख्याकाः स्तम्भाः भवेयुः। \nदत्तं lst, तथा च पूर्णांकं x, सूच्यां x इति पूर्णांशाः अन्विष्यतु। \nतथा च टुपल्-सूचीः प्रत्यावर्तयतु, [(x1, y1), (x2, y2)...] यथा \nप्रत्येकं टुपल् एकं कोआर्डिनेट्-(रो, कालम्स्) भवति, यत् 0 तः आरभ्यते। \nप्रारम्भे आरोहणक्रमेण पङ्क्तिद्वारा निर्देशांकान् क्रमबद्धं करोतु। \nअपि च, पङ्क्त्याः निर्देशांकान् स्तम्भैः अवरोहणक्रमेण क्रमबद्धं करोतु। \n\nउदाहरणानि-\nरो (रो) प्रापयन्तु (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nप्राप्नोतु _ रो ([], 1) = = [] \nरो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/38", "entry_point": "nextSmallest", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3, 4, 5];\n$x0 = nextSmallest($arg00);\n$v0 = 2;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 1, 4, 3, 2];\n$x1 = nextSmallest($arg10);\n$v1 = 2;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [];\n$x2 = nextSmallest($arg20);\n$v2 = null;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, 1];\n$x3 = nextSmallest($arg30);\n$v3 = null;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 1, 1, 1, 0];\n$x4 = nextSmallest($arg40);\n$v4 = 1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 1];\n$x5 = nextSmallest($arg50);\n$v5 = null;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-35, 34, 12, -45];\n$x6 = nextSmallest($arg60);\n$v6 = -35;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nनेक्स्ट्-लैटेस्ट् () इति एकं फंक्षन् लिखतु यत् सूच्याः द्वितीयं लघुतमं तत्त्वं प्रत्यर्पयति। \nयदि एतादृशं तत्त्वं नास्ति तर्हि शून्यम् प्रत्यर्पयतु। \n\nअग्रिमे _ लघुतमे ([1,2,3,4,5]) = = 2 \nअग्रिमे _ लघुतमे ([5,1,4,3,2]) = = 2 \nअग्रिमे _ लघुतमे ([]) = = न \nअग्रिमे _ लघुतमे ([1,1]) = = न।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/39", "entry_point": "isBored", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello world\";\n$x0 = isBored($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Is the sky blue?\";\n$x1 = isBored($arg10);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"I love It !\";\n$x2 = isBored($arg20);\n$v2 = 1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"bIt\";\n$x3 = isBored($arg30);\n$v3 = 0;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"I feel good today. I will be productive. will kill It\";\n$x4 = isBored($arg40);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"You and I are going for a walk\";\n$x5 = isBored($arg50);\n$v5 = 0;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "भवते शब्दानां पङ्क्तिः दीयते, संख्यां गणयितुं च भवतः कार्यम् अस्ति। \nविरक्तिः। विरक्तिः एकं वाक्यम् अस्ति यत् \"अहं\" इति शब्देन आरभ्यते। \nवाक्यानि '.', '?'अथवा '!'इत्यनेन परिमिताः भवन्ति। \n\nयथा-\n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/40", "entry_point": "skjkasdkd", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\n$x0 = skjkasdkd($arg00);\n$v0 = 10;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\n$x1 = skjkasdkd($arg10);\n$v1 = 25;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\n$x2 = skjkasdkd($arg20);\n$v2 = 13;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\n$x3 = skjkasdkd($arg30);\n$v3 = 11;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [0, 81, 12, 3, 1, 21];\n$x4 = skjkasdkd($arg40);\n$v4 = 3;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 8, 1, 2, 1, 7];\n$x5 = skjkasdkd($arg50);\n$v5 = 7;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [8191];\n$x6 = skjkasdkd($arg60);\n$v6 = 19;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [8191, 123456, 127, 7];\n$x7 = skjkasdkd($arg70);\n$v7 = 19;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [127, 97, 8192];\n$x8 = skjkasdkd($arg80);\n$v8 = 10;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nभवन्तः बृहत्तमं अभाज्यमूल्यं अन्विष्य तस्य अङ्कानां योगम् प्रत्यर्पितुम् अर्हन्ति। \n\nउदाहरणानि-\nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] कृते निर्गमः 10 भवेत्। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] कृते निर्गमः 25 भवेत्। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] कृते निर्गमः 13 भवेत्। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] कृते निर्गमः 11 भवेत्। \nlst = [0,81,12, 3,1,21] कृते निर्गमः 3 भवेत्। \nlst = [0,8,1, 2,1,7] कृते निर्गमः 7 भवेत्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/41", "entry_point": "checkDictCase", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [\"p\" => \"pineapple\", \"b\" => \"banana\"];\n$x0 = checkDictCase($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"];\n$x1 = checkDictCase($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"];\n$x2 = checkDictCase($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"];\n$x3 = checkDictCase($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [\"STATE\" => \"NC\", \"ZIP\" => \"12345\"];\n$x4 = checkDictCase($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"];\n$x5 = checkDictCase($arg50);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [];\n$x6 = checkDictCase($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "यदि सर्वाः चाबिः अधः स्ट्रिङ्ग्-रूपेण सन्ति तर्हि शब्दकोशस्य दृष्ट्या सत्यं प्रत्यर्पयतु। \nकेस् अथवा सर्वाः चाबिः अपरकेस् इत्यस्मिन् स्ट्रिङ्ग्-रूपेण भवन्ति, अन्यथा फाल्स् इति प्रत्यर्पयन्ति। \nयत् फंक्षन् रिटर्न् कर्तव्यं तत् फाल्स् इति अस्ति यत् दत्तः शब्दकोशः रिक्तः अस्ति। \nउदाहरणानि-\nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"b\": \"बनाना\"}) सत्यं प्रत्यावर्तयेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"A\": \"बनाना\", \"B\": \"बनाना\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", 8: \"बनाना\", \"a\": \"आपल्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"नाम\": \"जान्\", \"आयुः\": \"36\", \"सिटी\": \"ह्यूस्टन्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) सत्यं प्रत्यावर्तयेत्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/42", "entry_point": "closestInteger", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"10\";\n$x0 = closestInteger($arg00);\n$v0 = 10;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"14.5\";\n$x1 = closestInteger($arg10);\n$v1 = 15;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"-15.5\";\n$x2 = closestInteger($arg20);\n$v2 = -16;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"15.3\";\n$x3 = closestInteger($arg30);\n$v3 = 15;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"0\";\n$x4 = closestInteger($arg40);\n$v4 = 0;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "संख्यायाः प्रतिनिधित्वं कुर्वतां मूल्यं (स्ट्रिङ्ग्) स्वीकृत्य एकं फंक्षन् निर्मायतु। \nतस्य समीपस्थं पूर्णकं प्रत्यर्पयति। यदि संख्या समदूरे अस्ति। \nपूर्णांकद्वयात्, शून्यात् दूरे तस्य वृत्तं करोतु। \n\nउदाहरणानि \n>>> निकटतम-पूर्णांकः (\"10\") \n10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। \n>>> निकटतम-पूर्णांकः (\"15.3\") \n15। \n\nटिप्पणीः \nशून्यात् दूरे वृत्ताकारस्य अर्थः यदि दत्तसङ्ख्या समदूरम् अस्ति इति। \nपूर्णांकद्वये यः प्रत्यावर्तनीयः, सः एव पूर्णांकः। \nशून्यात् सुदूरतमम्। उदाहरणार्थं निकटतमं पूर्णांकं (\"14.5\") भवेत्। \n15 प्रत्यावर्तयतु तथा च समीपस्थः पूर्णांकः (\"-14.5\")-15 प्रत्यावर्तयेत्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/43", "entry_point": "makeAPile", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$x0 = makeAPile($arg00);\n$v0 = [3, 5, 7];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 4;\n$x1 = makeAPile($arg10);\n$v1 = [4, 6, 8, 10];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = makeAPile($arg20);\n$v2 = [5, 7, 9, 11, 13];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 6;\n$x3 = makeAPile($arg30);\n$v3 = [6, 8, 10, 12, 14, 16];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 8;\n$x4 = makeAPile($arg40);\n$v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "धनात्मक-पूर्णांकस्य n इत्यस्य दृष्ट्या, भवन्तः n-स्तराणां शिलाखण्डं निर्मातुम् अर्हन्ति। \nप्रथमस्तरे एन-शिलाः सन्ति। \nअग्रिमस्तरे शिलानाम् सङ्ख्या अस्ति-\n- अग्रिमः विषमसङ्ख्या यदि n विषम अस्ति। \n- अग्रिमं समसङ्ख्या यदि n समम् अस्ति। \nसूच्यां प्रत्येकस्तरे शिलानां सङ्ख्या प्रत्यावर्तयतु, यत्र सूचकाङ्के तत्त्वम् अस्ति। \ni स्तरस्य शिलानां संख्यां सूचयति (i + 1)। \n\nउदाहरणानि-\n>>> मेक्-अ-पैल् (3) \n[3,5,7]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/44", "entry_point": "wordsString", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hi, my name is John\";\n$x0 = wordsString($arg00);\n$v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"One, two, three, four, five, six\";\n$x1 = wordsString($arg10);\n$v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"Hi, my name\";\n$x2 = wordsString($arg20);\n$v2 = [\"Hi\", \"my\", \"name\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"One,, two, three, four, five, six,\";\n$x3 = wordsString($arg30);\n$v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"\";\n$x4 = wordsString($arg40);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"ahmed     , gamal\";\n$x5 = wordsString($arg50);\n$v5 = [\"ahmed\", \"gamal\"];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "भवते अल्पविरामाः रिक्तस्थानानि वा विभक्तानि शब्दशृङ्खला दीयन्ते। भवतः कार्यम् अस्ति-\nसूत्रं शब्दैः विभज्य शब्दानां श्रेणीं प्रत्यावर्तयेत्। \n\nयथा-\nशब्दः _ स्ट्रिङ्ग् (\"हाय्, मम नाम जान् अस्ति\") = = [\"हाय्\", \"मै\", \"नेम्\", \"इस्\", \"जान्\"] \n\"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\",", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/45", "entry_point": "chooseNum", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 12;\n$arg01 = 15;\n$x0 = chooseNum($arg00, $arg01);\n$v0 = 14;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 13;\n$arg11 = 12;\n$x1 = chooseNum($arg10, $arg11);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 33;\n$arg21 = 12354;\n$x2 = chooseNum($arg20, $arg21);\n$v2 = 12354;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5234;\n$arg31 = 5233;\n$x3 = chooseNum($arg30, $arg31);\n$v3 = -1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 6;\n$arg41 = 29;\n$x4 = chooseNum($arg40, $arg41);\n$v4 = 28;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 27;\n$arg51 = 10;\n$x5 = chooseNum($arg50, $arg51);\n$v5 = -1;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 7;\n$arg61 = 7;\n$x6 = chooseNum($arg60, $arg61);\n$v6 = -1;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 546;\n$arg71 = 546;\n$x7 = chooseNum($arg70, $arg71);\n$v7 = 546;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "एतत् फलनम् x तथा y इति धनात्मक-संख्याद्वयं स्वीकृत्य तत् प्रत्यावर्तयति। \nबृहत्तमः सम-पूर्णांकसङ्ख्या, या [x, y] समावेशीपरिधिमध्ये अस्ति। \nतत्र एतादृशी सङ्ख्या नास्ति, ततः फंक्षन्-1 पुनः प्राप्नुयात्। \n\nयथा-\nसंख्यां चिनोतु (12,15) = 14 \nसंख्यां चिनोतु (13,12) =-1", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/46", "entry_point": "roundedAvg", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 1;\n$arg01 = 5;\n$x0 = roundedAvg($arg00, $arg01);\n$v0 = \"0b11\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 7;\n$arg11 = 13;\n$x1 = roundedAvg($arg10, $arg11);\n$v1 = \"0b1010\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 964;\n$arg21 = 977;\n$x2 = roundedAvg($arg20, $arg21);\n$v2 = \"0b1111001010\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 996;\n$arg31 = 997;\n$x3 = roundedAvg($arg30, $arg31);\n$v3 = \"0b1111100100\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 560;\n$arg41 = 851;\n$x4 = roundedAvg($arg40, $arg41);\n$v4 = \"0b1011000010\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 185;\n$arg51 = 546;\n$x5 = roundedAvg($arg50, $arg51);\n$v5 = \"0b101101110\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 362;\n$arg61 = 496;\n$x6 = roundedAvg($arg60, $arg61);\n$v6 = \"0b110101101\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 350;\n$arg71 = 902;\n$x7 = roundedAvg($arg70, $arg71);\n$v7 = \"0b1001110010\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 197;\n$arg81 = 233;\n$x8 = roundedAvg($arg80, $arg81);\n$v8 = \"0b11010111\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 7;\n$arg91 = 5;\n$x9 = roundedAvg($arg90, $arg91);\n$v9 = -1;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 5;\n$arg101 = 1;\n$x10 = roundedAvg($arg100, $arg101);\n$v10 = -1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 5;\n$arg111 = 5;\n$x11 = roundedAvg($arg110, $arg111);\n$v11 = \"0b101\";\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n", "description": "भवते n तथा m इति धनात्मक-पूर्णांकद्वयम् दत्तं भवति, तथा च भवतः कार्यम् गणना इति अस्ति। \nn तः m पर्यन्तं पूर्णांकानां माध्यं (n तथा m सहितं)। \nसमीपस्थस्य पूर्णांकस्य उत्तरस्य वृत्तं कृत्वा तं द्विमानरूपेण परिवर्तयतु। \nयदि n, m तः अधिकः अस्ति, तर्हि-1 प्रत्यावर्तयतु। \nउदाहरणम्-\nगोलः एव्ग् (1,5) => \"0बि11\" \nआवर्तितः (7,5) =>-1 \nगोलः एव्ग् (10,20) => \"0बि1111\" \nगोलः एव्ग् (20,33) => \"0बि11010\"", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/47", "entry_point": "f", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = f($arg00);\n$v0 = [1, 2, 6, 24, 15];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 7;\n$x1 = f($arg10);\n$v1 = [1, 2, 6, 24, 15, 720, 28];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 1;\n$x2 = f($arg20);\n$v2 = [1];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 3;\n$x3 = f($arg30);\n$v3 = [1, 2, 6];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "फलनस्य f इत्यस्य कार्यान्वयनं करोतु यत् n इत्येतं परिमापरूपेण स्वीकरोति, \nतथा च n परिमाणस्य सूचीं प्रत्यर्पयति, येन सूचकाङ्कः i इत्यत्र तत्त्वस्य मूल्यं i इत्यस्य भाज्यम् अस्ति, यदि i समः अस्ति। \nअथवा अन्यथा 1 तः i पर्यन्तं संख्यानां योगः। \nअहं 1 तः आरभत। \n1 तः i (1 * 2 *................................................................................................................................................................................................ \nउदाहरणम्-\nf (5) = = [1,2,6,24,15]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/48", "entry_point": "evenOddPalindrome", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 123;\n$x0 = evenOddPalindrome($arg00);\n$v0 = [8, 13];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 12;\n$x1 = evenOddPalindrome($arg10);\n$v1 = [4, 6];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$x2 = evenOddPalindrome($arg20);\n$v2 = [1, 2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 63;\n$x3 = evenOddPalindrome($arg30);\n$v3 = [6, 8];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 25;\n$x4 = evenOddPalindrome($arg40);\n$v4 = [5, 6];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 19;\n$x5 = evenOddPalindrome($arg50);\n$v5 = [4, 6];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 9;\n$x6 = evenOddPalindrome($arg60);\n$v6 = [4, 5];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 1;\n$x7 = evenOddPalindrome($arg70);\n$v7 = [0, 1];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, सम-विषम-संख्यायुक्तम् एकं टुपल् प्रत्यर्पयतु। \nपूर्णांक-पालिण्ड्रोम् इत्येतानि (1, n) इति परिधौ अन्तर्भवन्ति, सर्वसमावेशकानि। \n\nउदाहरणम्-1: \n\nनिवेशः 3 \nउत्पादनः (1,2) \nव्याख्याः \nइन्टिजर्-पालिण्ड्रोम् इत्येताः 1,2,3 सन्ति। तेषु एकः समः, द्वौ च विषमौ स्तः। \n\nउदाहरणं 2: \n\nनिवेशः 12 \nउत्पादनः (4,6) \nव्याख्याः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 इति पूर्णांकपेलिण्ड्रोम् अस्ति। तेषु चत्वारः समानि, 6 विषमानि च सन्ति। \n\nटिप्पणीः \n1. 1 <= n <= 10 ^ 3 \n2. प्रत्यावर्तित-टुपल्-मध्ये क्रमशः सम-विषम-पूर्णांक-पालिण्ड्रोम्-सङ्ख्या भवति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/49", "entry_point": "moveOneBall", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [3, 4, 5, 1, 2];\n$x0 = moveOneBall($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [3, 5, 10, 1, 2];\n$x1 = moveOneBall($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [4, 3, 1, 2];\n$x2 = moveOneBall($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [3, 5, 4, 1, 2];\n$x3 = moveOneBall($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [];\n$x4 = moveOneBall($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "अस्माकं समीपे'arr'इति एन-पूर्णांकानां arr [1], arr [2],..., arr [N] इति व्यूहः अस्ति। \nश्रेण्यां संख्याः यादृच्छिकरूपेण क्रमिताः भविष्यन्ति। भवतः कार्यम् निर्धारणीयम् अस्ति यत् किम् इति। \nनिष्पादनेन अर्रे इत्यस्य क्रमनिर्धारणं न न्यूनीकर्तुं शक्यते। \nप्रदत्तश्रेण्यां निम्नलिखितं कार्यम् अस्ति। \nभवान् बहुवारं सम्यक् शिफ्ट्-शल्यक्रिया कर्तुं अनुमतः अस्ति। \n\nएकं रैट्-शिफ्ट्-आपरेशन् इत्यस्य अर्थः आरे इत्यस्य सर्वान् तत्त्वान् एकेन स्थानान्तरं कारयेत् इति। \nसम्यक् दिशायां स्थितिं करोतु। व्यूहस्य अन्तिमं तत्त्वं प्रति स्थानान्तरितं भविष्यति। \nआरे मध्ये आरम्भिक-स्थितिः अर्थात् 0 तम-सूचकाङ्कः। \n\nयदि उपर्युक्तकार्यस्य निष्पादनेन क्रमबद्धं व्यूहं प्राप्तुं शक्यते। \nततः ट्रू इति प्रत्यावर्तयतु अन्यथा फाल्स् इति प्रत्यावर्तयतु। \nयदि प्रदत्तः व्यूहः रिक्तः अस्ति तर्हि सत्यं प्रत्यर्पयतु। \n\nटिप्पणिः दत्तसूच्यां विशिष्टानि तत्त्वानि सन्ति इति सुनिश्चितं भवति। \n\nउदाहरणार्थं-\n\nमूव्-वन्-बाल् ([3,4,5,1,2]) = => ट्रू \nस्पष्टीकरणम्-2 रैट्-शिफ्ट्-आपरेशन्-मध्ये निष्पादनेन, अ-डीक्रीसिङ्ग्-आर्डर् कर्तुं शक्यते। \nप्रदत्तस्य श्रेण्याः कृते प्राप्यते। \nमूव्-वन्-बाल् ([3,5,4,1,2]) = => फाल्स् \nस्पष्टीकरणम्-दत्तस्य कृते अ-ह्रास-आदेशं प्राप्तुं न शक्यते। \nकस्यापि सङ्ख्यायां रैट्-शिफ्ट्-कार्याणि कृत्वा एरे।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/50", "entry_point": "exchange", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3, 4];\n$arg01 = [1, 2, 3, 4];\n$x0 = exchange($arg00, $arg01);\n$v0 = \"YES\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 3, 4];\n$arg11 = [1, 5, 3, 4];\n$x1 = exchange($arg10, $arg11);\n$v1 = \"NO\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 2, 3, 4];\n$arg21 = [2, 1, 4, 3];\n$x2 = exchange($arg20, $arg21);\n$v2 = \"YES\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [5, 7, 3];\n$arg31 = [2, 6, 4];\n$x3 = exchange($arg30, $arg31);\n$v3 = \"YES\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [5, 7, 3];\n$arg41 = [2, 6, 3];\n$x4 = exchange($arg40, $arg41);\n$v4 = \"NO\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [3, 2, 6, 1, 8, 9];\n$arg51 = [3, 5, 5, 1, 1, 1];\n$x5 = exchange($arg50, $arg51);\n$v5 = \"NO\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [100, 200];\n$arg61 = [200, 200];\n$x6 = exchange($arg60, $arg61);\n$v6 = \"YES\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "अस्मिन् समस्यायां, भवान् एकं फंक्षन् प्रवर्तयिष्यति यत् संख्यानां सूचीं द्वयं स्वीकरोति, \nतथा च तत्त्वानां विनिमयं कर्तुं शक्यते वा इति निर्धारयति। \nतेषां मध्ये एल्. एस्. टि. 1 इतीदं केवलं समसङ्ख्याणां सूचीं निर्मातुम्। \nएल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये विनिमयितानां तत्त्वानां सङ्ख्यायाः सीमा नास्ति। \nयदि एल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये तत्त्वानां विनिमयं कर्तुं शक्यते। \nएल्. एस्. टि. 1 इत्यस्य सर्वाणि तत्त्वानि समानि भवेयुः चेत् \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयथा-\nविनिमयः ([1,2,3,4], [1,2,3,4]) => \"यस्\" \nविनिमयः ([1,2,3,4], [1,5,3,4]) => \"न\" \nनिवेशसूचीः रिक्तानि न भविष्यन्ति इति कल्प्यते।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/51", "entry_point": "reverseDelete", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"abcde\";\n$arg01 = \"ae\";\n$x0 = reverseDelete($arg00, $arg01);\n$v0 = [\"bcd\", false];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"abcdef\";\n$arg11 = \"b\";\n$x1 = reverseDelete($arg10, $arg11);\n$v1 = [\"acdef\", false];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"abcdedcba\";\n$arg21 = \"ab\";\n$x2 = reverseDelete($arg20, $arg21);\n$v2 = [\"cdedc\", true];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"dwik\";\n$arg31 = \"w\";\n$x3 = reverseDelete($arg30, $arg31);\n$v3 = [\"dik\", false];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"a\";\n$arg41 = \"a\";\n$x4 = reverseDelete($arg40, $arg41);\n$v4 = [\"\", true];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"abcdedcba\";\n$arg51 = \"\";\n$x5 = reverseDelete($arg50, $arg51);\n$v5 = [\"abcdedcba\", true];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"abcdedcba\";\n$arg61 = \"v\";\n$x6 = reverseDelete($arg60, $arg61);\n$v6 = [\"abcdedcba\", true];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"vabba\";\n$arg71 = \"v\";\n$x7 = reverseDelete($arg70, $arg71);\n$v7 = [\"abba\", true];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"mamma\";\n$arg81 = \"mia\";\n$x8 = reverseDelete($arg80, $arg81);\n$v8 = [\"\", true];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "कार्यम्। \nअस्माभिः एस् तथा सी इति स्ट्रिङ्ग् द्वयं दत्तम् अस्ति, भवन्तः एस् इत्यस्मिन् सर्वाणि अक्षरानि निष्कासयेयुः यानि सी इत्यस्मिन् कस्यापि अक्षरस्य समानानि सन्ति। \nततः परीक्षयतु यत् परिणामसूत्रं पालिण्ड्रोम् अस्ति वा इति। \nस्ट्रिङ्ग् इतीदं पालिण्ड्रोम् इति कथ्यते यदि तत् अग्रे पृष्ठतः एव पठ्यते। \nभवान् चेकस्य कृते ट्रु/फाल्स् इति परिणाम-स्ट्रिङ्ग् युक्तं टुपल् प्रत्यर्पयेत्। \nउदाहरणम्। \ns = \"एबिसिडि\", c = \"एइ\" कृते, परिणामः ('बिसिडि', फाल्स्) भवेत्। \ns = \"abcdef\", c = \"b\" इत्यस्य कृते परिणामः भवेत् ('acdef', असत्यम्)। \ns = \"abcdedcba\", c = \"ab\" कृते, परिणामः भवेत् ('cdedc', सत्यं)।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/52", "entry_point": "maxFill", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n$arg01 = 1;\n$x0 = maxFill($arg00, $arg01);\n$v0 = 6;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\n$arg11 = 2;\n$x1 = maxFill($arg10, $arg11);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [[0, 0, 0], [0, 0, 0]];\n$arg21 = 5;\n$x2 = maxFill($arg20, $arg21);\n$v2 = 0;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\n$arg31 = 2;\n$x3 = maxFill($arg30, $arg31);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\n$arg41 = 9;\n$x4 = maxFill($arg40, $arg41);\n$v4 = 2;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "भवते कूपानां आयताकार-ग्रिड् दीयते। प्रत्येकं पङ्क्तिः एकस्य कूपस्य प्रतिनिधित्वं करोति। \nतथा च पङ्क्तिमध्ये प्रत्येकं 1 जलस्य एककं प्रतिनिधित्वं करोति। \nप्रत्येकस्य कूपस्य अनुरूपं बाल्टी वर्तते यस्य उपयोगेन तस्य जलं निष्कासयितुं शक्यते। \nअपि च सर्वाणि बाल्टिकाः समानक्षमतायुक्तानि भवन्ति। \nकूपान् रिक्तं कर्तुं बाल्टिकाः उपयोक्तुं भवतः कार्यम् अस्ति। \nबाल्टिकाः न्यूनीकर्तुं कियत् प्रावश्यं आवश्यकं भवति तत् निर्दिशतु। \n\nउदाहरणम्-1: \nनिवेशः। \nग्रिड्ः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1] \nबाल्टी-क्षमताः 1 \nउत्पादनः 6 \n\nउदाहरणं 2: \nनिवेशः। \nग्रिड्ः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबाल्टी-क्षमताः 2 \nउत्पादनः 5 \n\nउदाहरणं 3: \nनिवेशः। \nग्रिड्ः [[0,0,0], [0,0,0] \nबाल्टी-क्षमताः 5 \nउत्पादनः 0 \n\nबाधिताः। \n* सर्वाणि कूपाणि समानदीर्घानि भवन्ति। \n* 1 <= grid.length <= 102 \n* 1 <= ग्रिड् [:, 1]. दीर्घता <= 102 \nग्रिड् [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/53", "entry_point": "selectWords", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Mary had a little lamb\";\n$arg01 = 4;\n$x0 = selectWords($arg00, $arg01);\n$v0 = [\"little\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Mary had a little lamb\";\n$arg11 = 3;\n$x1 = selectWords($arg10, $arg11);\n$v1 = [\"Mary\", \"lamb\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"simple white space\";\n$arg21 = 2;\n$x2 = selectWords($arg20, $arg21);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Hello world\";\n$arg31 = 4;\n$x3 = selectWords($arg30, $arg31);\n$v3 = [\"world\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Uncle sam\";\n$arg41 = 3;\n$x4 = selectWords($arg40, $arg41);\n$v4 = [\"Uncle\"];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"\";\n$arg51 = 4;\n$x5 = selectWords($arg50, $arg51);\n$v5 = [];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"a b c d e f\";\n$arg61 = 1;\n$x6 = selectWords($arg60, $arg61);\n$v6 = [\"b\", \"c\", \"d\", \"f\"];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "स्ट्रिङ्ग् एस् तथा प्राकृतिकसङ्ख्या एन् इत्येतयोः दृष्ट्या, भवन्तं कार्यान्वितुम् कार्यभारः दत्तः अस्ति। \nएकं फंक्षन् यत् स्ट्रिङ्ग्-एस् इत्यतः सर्वाः शब्दानां सूचीं प्रत्यर्पयति यत्र यथार्थरूपेण सन्ति। \nn व्यञ्जनाः, क्रमशः एतानि शब्दानि स्ट्रिङ्ग् s मध्ये दृश्यन्ते। \nयदि स्ट्रिङ्ग् s रिक्तः अस्ति तर्हि फंक्षन् रिक्तसूचीम् प्रत्यर्पयेत्। \nटिप्पणिः भवन्तः अनुमन्यन्ते यत् इन्पुट् स्ट्रिङ्ग् मध्ये केवलं अक्षराणि रिक्तस्थानानि च सन्ति इति। \nउदाहरणानि-\nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 4) = => [\"लघुः\"] \nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 3) = => [\"मरियम\", \"मेषः\"] \nपदानि चिनोतु (\"सादा श्वेतस्थानम्\", 2) = => [] \nपदानि चिनोतु (\"नमस्ते वर्ल्ड्\", 4) = => [\"वर्ल्ड्\"] \nपदानि चिनोतु (\"अंकल् स्याम्\", 3) = => [\"अंकल्\"]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/54", "entry_point": "maximum", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [-3, -4, 5];\n$arg01 = 3;\n$x0 = maximum($arg00, $arg01);\n$v0 = [-4, -3, 5];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [4, -4, 4];\n$arg11 = 2;\n$x1 = maximum($arg10, $arg11);\n$v1 = [4, 4];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-3, 2, 1, 2, -1, -2, 1];\n$arg21 = 1;\n$x2 = maximum($arg20, $arg21);\n$v2 = [2];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [123, -123, 20, 0, 1, 2, -3];\n$arg31 = 3;\n$x3 = maximum($arg30, $arg31);\n$v3 = [2, 20, 123];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-123, 20, 0, 1, 2, -3];\n$arg41 = 4;\n$x4 = maximum($arg40, $arg41);\n$v4 = [0, 1, 2, 20];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [5, 15, 0, 3, -13, -8, 0];\n$arg51 = 7;\n$x5 = maximum($arg50, $arg51);\n$v5 = [-13, -8, 0, 0, 3, 5, 15];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-1, 0, 2, 5, 3, -10];\n$arg61 = 2;\n$x6 = maximum($arg60, $arg61);\n$v6 = [3, 5];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [1, 0, 5, -7];\n$arg71 = 1;\n$x7 = maximum($arg70, $arg71);\n$v7 = [5];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [4, -4];\n$arg81 = 2;\n$x8 = maximum($arg80, $arg81);\n$v8 = [-4, 4];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [-10, 10];\n$arg91 = 2;\n$x9 = maximum($arg90, $arg91);\n$v9 = [-10, 10];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [1, 2, 3, -23, 243, -400, 0];\n$arg101 = 0;\n$x10 = maximum($arg100, $arg101);\n$v10 = [];\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "पूर्णांकानां एरे-आर् तथा धनात्मकं पूर्णांकं के च दत्तं चेत्, क्रमबद्धां सूचीं प्रत्यर्पयतु। \nआर्-आर् मध्ये अधिकतम-के-सङ्ख्याभिः सह के-इत्यस्य दीर्घता। \n\nउदाहरणम्-1: \n\nनिवेशः arr = [-3,-4,5], k = 3 \nनिर्गमः [-4,-3,5] \n\nउदाहरणं 2: \n\nनिवेशः arr = [4,-4,4], k = 2 \nनिर्गमः [4,4] \n\nउदाहरणं 3: \n\nनिवेशः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटिप्पणीः \n1. व्यूहस्य दीर्घता [1000] इति परिधौ भविष्यति। \n2. श्रेण्यां तत्त्वानि [-1000] इति परिधौ भविष्यन्ति। \n3. 0 <= k <= लेन (arr)", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/55", "entry_point": "addElements", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\n$arg01 = 3;\n$x0 = addElements($arg00, $arg01);\n$v0 = -4;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [111, 121, 3, 4000, 5, 6];\n$arg11 = 2;\n$x1 = addElements($arg10, $arg11);\n$v1 = 0;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\n$arg21 = 4;\n$x2 = addElements($arg20, $arg21);\n$v2 = 125;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$arg31 = 4;\n$x3 = addElements($arg30, $arg31);\n$v3 = 24;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1];\n$arg41 = 1;\n$x4 = addElements($arg40, $arg41);\n$v4 = 1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "ए. आर्. आर्. इति पूर्णांकस्य, के. इति पूर्णांकस्य च रिक्ततरश्रेण्या प्रदत्तं चेत्, पुनरागमनं करोतु। \nए. आर्. आर्. इत्यस्य प्रथम-के-तत्त्वात् अधिकतम-अङ्कद्वयेन युक्तानां तत्त्वानां योगः। \n\nउदाहरणम्-\n\nनिवेशः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nनिर्गमः 24 #21 + 3 इत्यस्य योगः \n\nबाधिताः। \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/56", "entry_point": "intersection", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2];\n$arg01 = [2, 3];\n$x0 = intersection($arg00, $arg01);\n$v0 = \"NO\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [-1, 1];\n$arg11 = [0, 4];\n$x1 = intersection($arg10, $arg11);\n$v1 = \"NO\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [-3, -1];\n$arg21 = [-5, 5];\n$x2 = intersection($arg20, $arg21);\n$v2 = \"YES\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [-2, 2];\n$arg31 = [-4, 0];\n$x3 = intersection($arg30, $arg31);\n$v3 = \"YES\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-11, 2];\n$arg41 = [-1, -1];\n$x4 = intersection($arg40, $arg41);\n$v4 = \"NO\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1, 2];\n$arg51 = [3, 5];\n$x5 = intersection($arg50, $arg51);\n$v5 = \"NO\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [1, 2];\n$arg61 = [1, 2];\n$x6 = intersection($arg60, $arg61);\n$v6 = \"NO\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-2, -2];\n$arg71 = [-3, -2];\n$x7 = intersection($arg70, $arg71);\n$v7 = \"NO\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "भवते द्वौ अन्तरालौ दीयन्ते। \nयत्र प्रत्येकः अन्तरालः पूर्णांकयुगलः भवति। यथा, अन्तरालः = (आरम्भः, समाप्तिः) = (1,2)। \nप्रदत्तानि अन्तरालानि परिवेष्टितानि भवन्ति यस्य अर्थः अन्तरालः (आरम्भः, समाप्तिः) इति। \nतत्र आरम्भः समाप्तिः च स्तः। \nप्रत्येकस्मिन् निर्दिष्टावधौ, तस्य आरम्भः तस्य अन्तात् न्यूनः अथवा समानः इति कल्प्यते। \nएतयोः द्वयोः प्रतिच्छेदनस्य दीर्घता कियत् इति निर्णेतुं भवतः कार्यम् अस्ति। \nअन्तरालः अभाज्यसङ्ख्या अस्ति। \nउदाहरणार्थं, अन्तरालानां (1,3), (2,4) प्रतिच्छेदनम् (2,3) अस्ति। \nयस्य दीर्घता 1 अस्ति, या अभाज्यसङ्ख्या नास्ति। \nयदि प्रतिच्छेदनस्य दीर्घता अभाज्यसङ्ख्या अस्ति, तर्हि \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयदि द्वयोः अन्तरालयोः प्रतिच्छेदनम् न भवति तर्हि \"न\" इति प्रत्यावर्तयतु। \n\n[इन्पुट्/औट्पुट्] प्रतिमानानिः \nप्रतिच्छेदनम् ((1,2,3)) = => \"न\" \nप्रतिच्छेदनम् ((-1,1), (0,4)) = => \"न\" \nप्रतिच्छेदनम् ((-3,-1), (-5,5)) = => \"यस्\"", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/57", "entry_point": "tri", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$x0 = tri($arg00);\n$v0 = [1, 3, 2.0, 8.0];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 4;\n$x1 = tri($arg10);\n$v1 = [1, 3, 2.0, 8.0, 3.0];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 5;\n$x2 = tri($arg20);\n$v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 6;\n$x3 = tri($arg30);\n$v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$x4 = tri($arg40);\n$v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 8;\n$x5 = tri($arg50);\n$v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 9;\n$x6 = tri($arg60);\n$v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 20;\n$x7 = tri($arg70);\n$v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 0;\n$x8 = tri($arg80);\n$v8 = [1];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1;\n$x9 = tri($arg90);\n$v9 = [1, 3];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "फिबोनाची-क्रमं सर्वे जानन्ति, गणितशास्त्रज्ञैः तस्य गहनः अध्ययनम् अभूत्। \nअन्तिमानि युगयुगानि। तथापि, यत् जनाः न जानन्ति तत् ट्रिबोनाचि-क्रमः अस्ति। \nट्रैबोनाचि-क्रमः पुनरावर्तनेन परिभाषितः अस्ति। \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, यदि n समः अस्ति। \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), यदि n अयुग्मः अस्ति। \nयथा-\nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nभवते अ-ऋणात्मक-पूर्णांकसङ्ख्या n दीयते, भवते सूचीं प्रत्यर्पयेत्। \nट्रिबोनाची-क्रमस्य प्रथमा n + 1 सङ्ख्याः। \nउदाहरणानि-\nत्रि (3) = [1,3,2,8]", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/58", "entry_point": "digits", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = digits($arg00);\n$v0 = 5;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 54;\n$x1 = digits($arg10);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 120;\n$x2 = digits($arg20);\n$v2 = 1;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 5014;\n$x3 = digits($arg30);\n$v3 = 5;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 98765;\n$x4 = digits($arg40);\n$v4 = 315;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 5576543;\n$x5 = digits($arg50);\n$v5 = 2625;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 2468;\n$x6 = digits($arg60);\n$v6 = 0;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, विषम-अङ्कानां गुणितं प्रत्यावर्तयतु। \nयदि सर्वाणि अङ्कानि समानि सन्ति तर्हि 0 प्रत्यावर्तयतु। \nयथा-\nअङ्कः (1) = 1 \nसंख्या (4) = 0 \nअङ्कानि (235) = = 15", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/59", "entry_point": "isNested", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"[[]]\";\n$x0 = isNested($arg00);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"[]]]]]]][[[[[]\";\n$x1 = isNested($arg10);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"[][]\";\n$x2 = isNested($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"[]\";\n$x3 = isNested($arg30);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"[[[[]]]]\";\n$x4 = isNested($arg40);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"[]]]]]]]]]]\";\n$x5 = isNested($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"[][][[]]\";\n$x6 = isNested($arg60);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"[[]\";\n$x7 = isNested($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"[]]\";\n$x8 = isNested($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"[[]][[\";\n$x9 = isNested($arg90);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"[[][]]\";\n$x10 = isNested($arg100);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"\";\n$x11 = isNested($arg110);\n$v11 = false;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"[[[[[[[[\";\n$x12 = isNested($arg120);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = \"]]]]]]]]\";\n$x13 = isNested($arg130);\n$v13 = false;\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n", "description": "एकं फंक्षन् रचयतु यत् स्ट्रिङ्ग् इतीदं इन्पुट् रूपेण स्वीकरोतु यस्मिन् केवलं वर्ग-कोष्ठकाः एव भवन्ति। \nयदि केवलम् कोष्ठकानां वैधम् अनुवर्तनं भवति तर्हि एव फंक्षन् ट्रू इति प्रत्यावर्तयेत्। \nयत्र अनुवर्तने न्यूनातिन्यूनं एकः कोष्ठकः निहितः भवति। \n\nइस नेस्टेड ('[[]]') सही है। \nis _ nested ('[]]]]] [[[[]') असत्यम् \nis _ nested ('[] []') असत्यम् अस्ति। \nis _ nested ('[]') असत्यम् अस्ति। \nनेस्टेड ('[[] []]') सत्यम् अस्ति। \nनेस्टेड ('[[]] [[') सत्यम् अस्ति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/60", "entry_point": "sumSquares", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 3];\n$x0 = sumSquares($arg00);\n$v0 = 14;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1.0, 2, 3];\n$x1 = sumSquares($arg10);\n$v1 = 14;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 5, 7];\n$x2 = sumSquares($arg20);\n$v2 = 84;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1.4, 4.2, 0];\n$x3 = sumSquares($arg30);\n$v3 = 29;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-2.4, 1, 1];\n$x4 = sumSquares($arg40);\n$v4 = 6;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [100, 1, 15, 2];\n$x5 = sumSquares($arg50);\n$v5 = 10230;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [10000, 10000];\n$x6 = sumSquares($arg60);\n$v6 = 200000000;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-1.4, 4.6, 6.3];\n$x7 = sumSquares($arg70);\n$v7 = 75;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-1.4, 17.9, 18.9, 19.9];\n$x8 = sumSquares($arg80);\n$v8 = 1086;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [0];\n$x9 = sumSquares($arg90);\n$v9 = 0;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [-1];\n$x10 = sumSquares($arg100);\n$v10 = 1;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = [-1, 1, 0];\n$x11 = sumSquares($arg110);\n$v11 = 2;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n", "description": "भवते अङ्कानां सूची दत्ता भवति। \nभवान् दत्तसूच्यां वर्गसंख्यानां योगम् प्रत्यर्पयेत्। \nसूच्याः प्रत्येकं तत्त्वं प्रथमं उपरितनं इन्ट् (सीलिङ्ग्) प्रति परिभ्रमयतु। \nउदाहरणानि-\nlst = [1,2,3] इत्यस्य कृते निर्गमः 14 भवेत्। \nlst = [1,4,9] कृते निर्गमः 98 भवेत्। \nlst = [1,3,5, 7] कृते उत्पादनं 84 भवेत्। \nlst = [1.4,4.2, 0] कृते निर्गमः 29 भवेत्। \nlst = [-2.4,1, 1] कृते निर्गमः 6 भवेत्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/61", "entry_point": "checkIfLastCharIsALetter", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"apple\";\n$x0 = checkIfLastCharIsALetter($arg00);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"apple pi e\";\n$x1 = checkIfLastCharIsALetter($arg10);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"eeeee\";\n$x2 = checkIfLastCharIsALetter($arg20);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"A\";\n$x3 = checkIfLastCharIsALetter($arg30);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Pumpkin pie \";\n$x4 = checkIfLastCharIsALetter($arg40);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"Pumpkin pie 1\";\n$x5 = checkIfLastCharIsALetter($arg50);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"\";\n$x6 = checkIfLastCharIsALetter($arg60);\n$v6 = false;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"eeeee e \";\n$x7 = checkIfLastCharIsALetter($arg70);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"apple pie\";\n$x8 = checkIfLastCharIsALetter($arg80);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"apple pi e \";\n$x9 = checkIfLastCharIsALetter($arg90);\n$v9 = false;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "एकं फंक्षन् क्रीयेट् करोतु यत् ट्रु इति प्रत्यावर्तयति यदि अन्तिमः अक्षरः अस्ति। \nदत्तस्य स्ट्रिङ्ग् इत्यस्य वर्णमाला अस्ति, न च अस्ति। \nएकस्य शब्दस्य अंशः, अन्यथा असत्यम्। \nटिप्पणीः \"शब्दः\" इति अक्षराणां समूहः अस्ति यः स्थानैः विभक्तः अस्ति। \n\nउदाहरणानि-\nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\")-सत्यम् इति परीक्षयतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"\") इति पश्यतु।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/62", "entry_point": "canArrange", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 2, 4, 3, 5];\n$x0 = canArrange($arg00);\n$v0 = 3;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1, 2, 4, 5];\n$x1 = canArrange($arg10);\n$v1 = -1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\n$x2 = canArrange($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 8, 5, 7, 3];\n$x3 = canArrange($arg30);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [];\n$x4 = canArrange($arg40);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n", "description": "एकं फंक्षन् रचयतु यत् तत्वस्य बृहत्तमं सूचकाङ्कं प्रत्यर्पयति यत् \nतत्क्षणात् पूर्ववर्तिनः तत्त्वात् बृहत्तरं वा समानं वा नास्ति। यदि \nएतादृशं तत्त्वं नास्ति, ततः रिटर्न्-1 भवति। दत्तश्रेण्यां तत् न भविष्यति। \nद्विगुणितानि मूल्यानि। \n\nउदाहरणानि-\nकेन _ अरेंज् ([1,2,4, 3,5]) = 3 \nकेन-अरेंज् ([1,2,3]) =-1", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/63", "entry_point": "largestSmallestIntegers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [2, 4, 1, 3, 5, 7];\n$x0 = largestSmallestIntegers($arg00);\n$v0 = [null, 1];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [2, 4, 1, 3, 5, 7, 0];\n$x1 = largestSmallestIntegers($arg10);\n$v1 = [null, 1];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [1, 3, 2, 4, 5, 6, -2];\n$x2 = largestSmallestIntegers($arg20);\n$v2 = [-2, 1];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [4, 5, 3, 6, 2, 7, -7];\n$x3 = largestSmallestIntegers($arg30);\n$v3 = [-7, 2];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\n$x4 = largestSmallestIntegers($arg40);\n$v4 = [-9, 2];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [];\n$x5 = largestSmallestIntegers($arg50);\n$v5 = [null, null];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [0];\n$x6 = largestSmallestIntegers($arg60);\n$v6 = [null, null];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = [-1, -3, -5, -6];\n$x7 = largestSmallestIntegers($arg70);\n$v7 = [-1, null];\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = [-1, -3, -5, -6, 0];\n$x8 = largestSmallestIntegers($arg80);\n$v8 = [-1, null];\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = [-6, -4, -4, -3, 1];\n$x9 = largestSmallestIntegers($arg90);\n$v9 = [-3, 1];\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = [-6, -4, -4, -3, -100, 1];\n$x10 = largestSmallestIntegers($arg100);\n$v10 = [-3, 1];\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "एकं फंक्षन् निर्माय यत् टुपल् (a, b) प्रत्यावर्तयति, यत्र'a'अस्ति। \nऋणात्मक-पूर्णांशेषु बृहत्तमः, तथा च'b'लघुतमः अस्ति। \nसूच्यां धनात्मक-पूर्णांशाः सन्ति। \nयदि ऋणात्मकं वा धनात्मकं वा पूर्णांकं नास्ति तर्हि तान् नन् इति प्रत्यर्पयतु। \n\nउदाहरणानि-\nबृहत्तम-लघुतमः-पूर्णांकः ([2,4,1,3,5,7]) = = (न, 1) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([]) = = (न, न) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([0]) = = (न, न)", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/64", "entry_point": "specialFactorial", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 4;\n$x0 = specialFactorial($arg00);\n$v0 = 288;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 5;\n$x1 = specialFactorial($arg10);\n$v1 = 34560;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 7;\n$x2 = specialFactorial($arg20);\n$v2 = 125411328000;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 1;\n$x3 = specialFactorial($arg30);\n$v3 = 1;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "ब्राजीलीन्-फ़ैक्टोरियल् इतीदं एवं परिभाषितः अस्ति। \nब्राज़ीलियन्-फ़ैक्टोरियल् (n) = n! * (n-1)! * (n-2)! *... * 1! \nयत्र n> 0 \n\nयथा-\n>>> स्पेशिअल-फ़ैक्टोरियल् (4) \n288। \n\nफलनम् इन्पुट्-रूपेण पूर्णांकं प्राप्स्यति, विशेषम् प्रत्यर्पयेत् च। \nअस्य पूर्णांकस्य भाज्यम्।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/65", "entry_point": "wordsInSentence", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"This is a test\";\n$x0 = wordsInSentence($arg00);\n$v0 = \"is\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"lets go for swimming\";\n$x1 = wordsInSentence($arg10);\n$v1 = \"go for\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"there is no place available here\";\n$x2 = wordsInSentence($arg20);\n$v2 = \"there is no place\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Hi I am Hussein\";\n$x3 = wordsInSentence($arg30);\n$v3 = \"Hi am Hussein\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"go for it\";\n$x4 = wordsInSentence($arg40);\n$v4 = \"go for it\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"here\";\n$x5 = wordsInSentence($arg50);\n$v5 = \"\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"here is\";\n$x6 = wordsInSentence($arg60);\n$v6 = \"is\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "भवते वाक्यस्य प्रतिनिधित्वं कुर्वती स्ट्रिङ्ग् दीयते। \nअस्मिन् वाक्ये केषाञ्चन शब्दानि स्थानात् पृथक्कृतानि सन्ति, \nतथा च भवन्तः मूलवाक्यस्य शब्दयुक्तं स्ट्रिङ्ग् प्रत्यर्पयेयुः, \nयस्य दीर्घता अभाज्यसङ्ख्या अस्ति, \nनूतने तन्त्रे शब्दानां क्रमः मूलस्य समानः भवेत्। \n\nउदाहरणम्-1: \nनिवेशः वाक्य = \"एषा परीक्षा अस्ति\" \nनिर्गमः \"अस्ति\" इति। \n\nउदाहरणं 2: \nनिवेशः वाक्यम् = \"लॆट्स् गो फ़ार् स्विम्मिङ्ग्\" \nनिर्गमः \"गो फ़ार्\" इति। \n\nबाधिताः। \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्ये केवलं अक्षराणि एव सन्ति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/66", "entry_point": "simplify", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"1/5\";\n$arg01 = \"5/1\";\n$x0 = simplify($arg00, $arg01);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1/6\";\n$arg11 = \"2/1\";\n$x1 = simplify($arg10, $arg11);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"5/1\";\n$arg21 = \"3/1\";\n$x2 = simplify($arg20, $arg21);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"7/10\";\n$arg31 = \"10/2\";\n$x3 = simplify($arg30, $arg31);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"2/10\";\n$arg41 = \"50/10\";\n$x4 = simplify($arg40, $arg41);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"7/2\";\n$arg51 = \"4/2\";\n$x5 = simplify($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"11/6\";\n$arg61 = \"6/1\";\n$x6 = simplify($arg60, $arg61);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"2/3\";\n$arg71 = \"5/2\";\n$x7 = simplify($arg70, $arg71);\n$v7 = false;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"5/2\";\n$arg81 = \"3/5\";\n$x8 = simplify($arg80, $arg81);\n$v8 = false;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = \"2/4\";\n$arg91 = \"8/4\";\n$x9 = simplify($arg90, $arg91);\n$v9 = true;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = \"2/4\";\n$arg101 = \"4/2\";\n$x10 = simplify($arg100, $arg101);\n$v10 = true;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = \"1/5\";\n$arg111 = \"5/1\";\n$x11 = simplify($arg110, $arg111);\n$v11 = true;\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = \"1/5\";\n$arg121 = \"1/5\";\n$x12 = simplify($arg120, $arg121);\n$v12 = false;\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n", "description": "भवतः कार्यम् एकं फंक्षन् इत्यस्य कार्यान्वयनम् अस्ति येन अभिव्यक्तिः सरलीभवति। \nx * n. यदि x * n पूर्णसङ्ख्यायाः कृते मूल्याङ्कनं करोति तथा च असत्यम् इति फलनम् सत्यम् इति प्रत्यावर्तयति। \nअन्यथा। x तथा n द्वयोः अपि, भिन्नांशस्य स्ट्रिङ्ग्-प्रतिनिधित्वम् अस्ति, तथा च निम्नलिखितं स्वरूपम् अस्ति, \n<न्यूमरेटर्> <डिनोमिनेटर्> यत्र न्यूमरेटर् तथा डिनोमिनेटर् उभौ अपि धनात्मकं पूर्णसङ्ख्याः भवन्ति। \n\nभवन्तः अनुमातुं शक्नुवन्ति यत् x, n च वैधानि भिन्नांशानि सन्ति, तेषां विभाजकरूपेण शून्यं नास्ति। \n\nसरलीकरणम् (\"1/5\", \"5/1\") = सत्यं \nसरलीकरणम् (\"1/6\", \"2/1\") = असत्यम् \nसरलीकरणम् (\"7/10\", \"10/2\") = असत्यम्", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/67", "entry_point": "orderByPoints", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [1, 11, -1, -11, -12];\n$x0 = orderByPoints($arg00);\n$v0 = [-1, -11, 1, -12, 11];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\n$x1 = orderByPoints($arg10);\n$v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [];\n$x2 = orderByPoints($arg20);\n$v2 = [];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\n$x3 = orderByPoints($arg30);\n$v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n$x4 = orderByPoints($arg40);\n$v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0, 6, 6, -76, -21, 23, 4];\n$x5 = orderByPoints($arg50);\n$v5 = [-76, -21, 0, 4, 23, 6, 6];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "एकं फंक्षन् लिखतु यत् दत्तानां पूर्णांकानां सूचीं क्रमबद्धं करोति। \nतेषां अङ्कानां योगानुगुणं आरोहणक्रमेण। \nटिप्पणिः यदि समान-अङ्कयुक्ताः अनेकाः वस्तूनि सन्ति, \nमूलसूच्यां तेषां सूचकाङ्कस्य आधारेण तान् आर्डर् कुर्वन्तु। \n\nयथा-\n>>> आर्डर्-बै-पोयिन्ट्स् ([1,11,-1,11,-12]) = = [-1,11,-1,1,-12,11] \n>>> आर्डर्-बै-पोयिन्ट्स् ([]) = = []", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/68", "entry_point": "specialfilter", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [5, -2, 1, -5];\n$x0 = specialfilter($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [15, -73, 14, -15];\n$x1 = specialfilter($arg10);\n$v1 = 1;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [33, -2, -3, 45, 21, 109];\n$x2 = specialfilter($arg20);\n$v2 = 2;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [43, -12, 93, 125, 121, 109];\n$x3 = specialfilter($arg30);\n$v3 = 4;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [71, -2, -33, 75, 21, 19];\n$x4 = specialfilter($arg40);\n$v4 = 3;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [1];\n$x5 = specialfilter($arg50);\n$v5 = 0;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [];\n$x6 = specialfilter($arg60);\n$v6 = 0;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "एकं फंक्षन् लिखतु यत् इन्पुट्-रिटर्न्स्-रूपेण संख्यानां श्रेणिं स्वीकरोति। \nश्रेण्यां तत्त्वानां सङ्ख्या या 10 तः अधिका अस्ति तथा च उभयोः। \nएकस्य अङ्कस्य प्रथमस्य अन्तिमस्य च अङ्कयोः विषमता भवति (1,3,5,7,9)। \nयथा-\nस्पेशिफ़िल्टर् ([15,-73,14,-15]) => 1 \nस्पेशिफ़िल्टर् ([33,-2,-3,45,21,109]) => 2", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/69", "entry_point": "getMaxTriples", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 5;\n$x0 = getMaxTriples($arg00);\n$v0 = 1;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 6;\n$x1 = getMaxTriples($arg10);\n$v1 = 4;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$x2 = getMaxTriples($arg20);\n$v2 = 36;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 100;\n$x3 = getMaxTriples($arg30);\n$v3 = 53361;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "भवते n इति धनात्मकं पूर्णांकं दीयते। भवते n इति दीर्घतायाः a इति पूर्णांकश्रेण्याः निर्माणं करणीयम्। \nप्रत्येकस्य i (1 ≤ i ≤ n) कृते, a [i] = i * i-i + 1 इत्यस्य मूल्यं भवति। \nत्रिकानां सङ्ख्याः प्रत्यावर्तयतु (a [i], a [j], a [k]) यत्र i <j <k, \nतथा च a [i] + a [j] + a [k] इति 3 इत्यस्य गुणितं भवति। \n\nउदाहरणम्-\nनिवेशः n = 5 \nउत्पादनः 1 \nव्याख्याः \nअ = [1,3,7,13,21] \nएकमात्रं वैधं त्रिगुणं (1,7,13) अस्ति।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/70", "entry_point": "bf", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Jupiter\";\n$arg01 = \"Neptune\";\n$x0 = bf($arg00, $arg01);\n$v0 = [\"Saturn\", \"Uranus\"];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Earth\";\n$arg11 = \"Mercury\";\n$x1 = bf($arg10, $arg11);\n$v1 = [\"Venus\"];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"Mercury\";\n$arg21 = \"Uranus\";\n$x2 = bf($arg20, $arg21);\n$v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"Neptune\";\n$arg31 = \"Venus\";\n$x3 = bf($arg30, $arg31);\n$v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"Earth\";\n$arg41 = \"Earth\";\n$x4 = bf($arg40, $arg41);\n$v4 = [];\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"Mars\";\n$arg51 = \"Earth\";\n$x5 = bf($arg50, $arg51);\n$v5 = [];\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"Jupiter\";\n$arg61 = \"Makemake\";\n$x6 = bf($arg60, $arg61);\n$v6 = [];\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "अस्माकं सौरमण्डले अष्टग्रहाः सन्ति-सूर्यस्य समीपस्थाः। \nबुधः अस्ति, अग्रिमः शुक्रः अस्ति, ततः पृथिव्या, मङ्गलः, गुरुः, शनिः, \nयुरेनस्, नेप्च्यून्। \nप्लैनेट्-1 तथा प्लैनेट्-2 इति द्वयोः ग्रहयोः नामौ स्वीकृत्य एकं फंक्षन् लिखतु। \nअयं प्रकार्यक्रमः सर्वान् ग्रहान् समाविशत् एकं टुपल् प्रत्यावर्तयेत् यस्य परिक्रमणं भवति-\nग्रह-1 इत्यस्य कक्षायाः ग्रह-2 इत्यस्य कक्षायाः च मध्ये स्थितः, द्वारा क्रमबद्धः \nसूर्यस्य सामीप्यम्। \nयदि प्लैनेट्1 अथवा प्लैनेट्2 अस्ति तर्हि फंक्षन् रिक्तं टुपल् प्रत्यावर्तयेत्। \nग्रहाणां नामानि सम्यक् न सन्ति। \nउदाहरणानि \nbf (\"जुपिटर्\", \"नेप्च्यून्\") = => (\"स्याटर्न्\", \"युरेनस्\") \nbf (\"पृथिव्या\", \"बुधः\") = => (\"शुक्रः\") \nbf (\"बुधः\", \"युरेनस्\") = => (\"शुक्रः\", \"पृथिव्या\", \"मङ्गलः\", \"गुरुः\", \"शनिः\")", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/71", "entry_point": "xOrY", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 7;\n$arg01 = 34;\n$arg02 = 12;\n$x0 = xOrY($arg00, $arg01, $arg02);\n$v0 = 34;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 15;\n$arg11 = 8;\n$arg12 = 5;\n$x1 = xOrY($arg10, $arg11, $arg12);\n$v1 = 5;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 3;\n$arg21 = 33;\n$arg22 = 5212;\n$x2 = xOrY($arg20, $arg21, $arg22);\n$v2 = 33;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 1259;\n$arg31 = 3;\n$arg32 = 52;\n$x3 = xOrY($arg30, $arg31, $arg32);\n$v3 = 3;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7919;\n$arg41 = -1;\n$arg42 = 12;\n$x4 = xOrY($arg40, $arg41, $arg42);\n$v4 = -1;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 3609;\n$arg51 = 1245;\n$arg52 = 583;\n$x5 = xOrY($arg50, $arg51, $arg52);\n$v5 = 583;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 91;\n$arg61 = 56;\n$arg62 = 129;\n$x6 = xOrY($arg60, $arg61, $arg62);\n$v6 = 129;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 6;\n$arg71 = 34;\n$arg72 = 1234;\n$x7 = xOrY($arg70, $arg71, $arg72);\n$v7 = 1234;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 1;\n$arg81 = 2;\n$arg82 = 0;\n$x8 = xOrY($arg80, $arg81, $arg82);\n$v8 = 0;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 2;\n$arg91 = 2;\n$arg92 = 0;\n$x9 = xOrY($arg90, $arg91, $arg92);\n$v9 = 2;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n", "description": "एकं सरलं प्रोग्राम् यत् x इत्यस्य मूल्यं प्रत्यर्पयेत् यदि n अस्ति। \nअभाज्यसङ्ख्या तथा च अन्यथा y इत्यस्य मूल्यं प्रत्यर्पयेत्। \n\nउदाहरणानि-\nx _ अथवा _ y कृते (7,34,12) = = 34 \nx _ अथवा _ y कृते (15,8,5) = = 5", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/72", "entry_point": "doubleTheDifference", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = [];\n$x0 = doubleTheDifference($arg00);\n$v0 = 0;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = [5, 4];\n$x1 = doubleTheDifference($arg10);\n$v1 = 25;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = [0.1, 0.2, 0.3];\n$x2 = doubleTheDifference($arg20);\n$v2 = 0;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = [-10, -20, -30];\n$x3 = doubleTheDifference($arg30);\n$v3 = 0;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = [-1, -2, 8];\n$x4 = doubleTheDifference($arg40);\n$v4 = 0;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = [0.2, 3, 5];\n$x5 = doubleTheDifference($arg50);\n$v5 = 34;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\n$x6 = doubleTheDifference($arg60);\n$v6 = 166650;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n", "description": "संख्यानां सूच्यां दत्तं चेत्, संख्यानां वर्गाणां योगम् प्रत्यर्पयतु। \nअसङ्गत्याः सूच्यां पश्यन्तु। ये संख्याः ऋणात्मकं वा पूर्णांशाः न वा सन्ति तान् अवगच्छन्तु। \n\nद्विगुणः भेदः ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nद्विगुणः भेदः ([-1,2,0]) = = 0 \nद्विगुणः भेदः ([9,-2]) = = 81 \nद्विगुणित-द-भेदः ([0]) = = 0 \n\nयदि इन्पुट्-सूची रिक्तः अस्ति तर्हि 0 प्रत्यावर्तयतु।", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/73", "entry_point": "strongestExtension", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Watashi\";\n$arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\n$x0 = strongestExtension($arg00, $arg01);\n$v0 = \"Watashi.eIGHt8OKe\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"Boku123\";\n$arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\n$x1 = strongestExtension($arg10, $arg11);\n$v1 = \"Boku123.YEs.WeCaNe\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"__YESIMHERE\";\n$arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\n$x2 = strongestExtension($arg20, $arg21);\n$v2 = \"__YESIMHERE.NuLl__\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"K\";\n$arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\n$x3 = strongestExtension($arg30, $arg31);\n$v3 = \"K.TAR\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"__HAHA\";\n$arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\n$x4 = strongestExtension($arg40, $arg41);\n$v4 = \"__HAHA.123\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"YameRore\";\n$arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\n$x5 = strongestExtension($arg50, $arg51);\n$v5 = \"YameRore.okIWILL123\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"finNNalLLly\";\n$arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\n$x6 = strongestExtension($arg60, $arg61);\n$v6 = \"finNNalLLly.WoW\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"_\";\n$arg71 = [\"Bb\", \"91245\"];\n$x7 = strongestExtension($arg70, $arg71);\n$v7 = \"_.Bb\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = \"Sp\";\n$arg81 = [\"671235\", \"Bb\"];\n$x8 = strongestExtension($arg80, $arg81);\n$v8 = \"Sp.671235\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n", "description": "भवते वर्गस्य नाम (स्ट्रिङ्ग्) विस्ताराणां सूची च दीयते। \nवर्गस्य कृते अतिरिक्तवर्गान् भारयितुं विस्ताराणाम् उपयोगः करणीयः। \nविस्तारस्य शक्तिः ईदृशः अस्ति-CAP इतीदं अपरकेस् सङ्ख्या स्यात् इति मन्यन्ते। \nविस्तारस्य नाम्नः अक्षराणि, तथा च एस्. एम्. इतीदं लघु-अक्षरानां सङ्ख्या भवेत्। \nविस्तारस्य नाम्ना बलं CAP-एसएम इति भिन्नांशेन दीयते। \nभवन्तः प्रबलतमं विस्तारणं अन्विष्य अस्मिन् स्ट्रिङ्ग् प्रत्यर्पयतु। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि समानशक्तियुक्तौ द्वौ वा अधिकौ विस्तारौ स्तः तर्हि भवन्तः \nसूच्यां प्रथमं यत् आगच्छति तत् चिनोतु। \nयथा, यदि भवते \"स्लैस्\" इति वर्गरूपेण, सूचीरूपेण च दत्तं भवति। \nविस्तारः ['SERVINGSliCes','Cheese','StuFfed'] तदा भवन्तः कर्तुम् अर्हन्ति। \n'Slices.SErviNGSliCes'इति प्रत्यावर्तयतु यतः'SERVINGSliCes'प्रबलतमः विस्तारः अस्ति। \n(तस्य शक्तिः-1 अस्ति)। \nउदाहरणम्-\nस्ट्राङ्गेस्ट्-एक्स्टेन्शन् कृते ('मै _ क्लास्', ['AA','Be','CC']) = ='my_class.AA'", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/74", "entry_point": "cycpatternCheck", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"xyzw\";\n$arg01 = \"xyw\";\n$x0 = cycpatternCheck($arg00, $arg01);\n$v0 = false;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"yello\";\n$arg11 = \"ell\";\n$x1 = cycpatternCheck($arg10, $arg11);\n$v1 = true;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"whattup\";\n$arg21 = \"ptut\";\n$x2 = cycpatternCheck($arg20, $arg21);\n$v2 = false;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"efef\";\n$arg31 = \"fee\";\n$x3 = cycpatternCheck($arg30, $arg31);\n$v3 = true;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"abab\";\n$arg41 = \"aabb\";\n$x4 = cycpatternCheck($arg40, $arg41);\n$v4 = false;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"winemtt\";\n$arg51 = \"tinem\";\n$x5 = cycpatternCheck($arg50, $arg51);\n$v5 = true;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n", "description": "भवते 2 शब्दानि दीयन्ते। यदि द्वितीयः शब्दः अथवा तस्य कस्यापि परिभ्रमणम् प्रथमशब्दस्य सब्स्ट्रिङ्ग् अस्ति तर्हि भवते ट्रू इति प्रत्यावर्तितव्यम्। \nसैक्पेटर्न् _ चेक् (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हलो\", \"एल्\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"वास्सुप्\", \"प्सुस्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"अबाब\", \"बा\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"ईफ़ेफ़्\", \"ईफ़ेफ़्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हिमेन्स्\", \"सिमेन्\") => सत्यं", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/75", "entry_point": "intToMiniRoman", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 19;\n$x0 = intToMiniRoman($arg00);\n$v0 = \"xix\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 152;\n$x1 = intToMiniRoman($arg10);\n$v1 = \"clii\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 251;\n$x2 = intToMiniRoman($arg20);\n$v2 = \"ccli\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 426;\n$x3 = intToMiniRoman($arg30);\n$v3 = \"cdxxvi\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 500;\n$x4 = intToMiniRoman($arg40);\n$v4 = \"d\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 1;\n$x5 = intToMiniRoman($arg50);\n$v5 = \"i\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 4;\n$x6 = intToMiniRoman($arg60);\n$v6 = \"iv\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 43;\n$x7 = intToMiniRoman($arg70);\n$v7 = \"xliii\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 90;\n$x8 = intToMiniRoman($arg80);\n$v8 = \"xc\";\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 94;\n$x9 = intToMiniRoman($arg90);\n$v9 = \"xciv\";\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 532;\n$x10 = intToMiniRoman($arg100);\n$v10 = \"dxxxii\";\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n$arg110 = 900;\n$x11 = intToMiniRoman($arg110);\n$v11 = \"cm\";\nif (!compare($x11, $v11)) {\n    throw new Exception(\"Error at 12th assert statement.\");\n}\n$arg120 = 994;\n$x12 = intToMiniRoman($arg120);\n$v12 = \"cmxciv\";\nif (!compare($x12, $v12)) {\n    throw new Exception(\"Error at 13th assert statement.\");\n}\n$arg130 = 1000;\n$x13 = intToMiniRoman($arg130);\n$v13 = \"m\";\nif (!compare($x13, $v13)) {\n    throw new Exception(\"Error at 14th assert statement.\");\n}\n", "description": "धनात्मक-पूर्णांकं दत्तं चेत्, तस्य रोमन्-अङ्कस्य समतुल्यं स्ट्रिङ्ग्-रूपेण प्राप्नुयात्। \nतथा लघुकरणे प्रत्यर्पयतु। \nप्रतिबन्धः 1 <= संख्या <= 1000 \n\nउदाहरणानि-\n>> इन्ट्-टु-मिनि-रोमन् (19) = ='xix'\n>> इन्ट्-टु-मिनि-रोमन् (152) = ='क्लि'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/76", "entry_point": "rightAngleTriangle", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 3;\n$arg01 = 4;\n$arg02 = 5;\n$x0 = rightAngleTriangle($arg00, $arg01, $arg02);\n$v0 = true;\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 1;\n$arg11 = 2;\n$arg12 = 3;\n$x1 = rightAngleTriangle($arg10, $arg11, $arg12);\n$v1 = false;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 10;\n$arg21 = 6;\n$arg22 = 8;\n$x2 = rightAngleTriangle($arg20, $arg21, $arg22);\n$v2 = true;\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 2;\n$arg31 = 2;\n$arg32 = 2;\n$x3 = rightAngleTriangle($arg30, $arg31, $arg32);\n$v3 = false;\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = 7;\n$arg41 = 24;\n$arg42 = 25;\n$x4 = rightAngleTriangle($arg40, $arg41, $arg42);\n$v4 = true;\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = 10;\n$arg51 = 5;\n$arg52 = 7;\n$x5 = rightAngleTriangle($arg50, $arg51, $arg52);\n$v5 = false;\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = 5;\n$arg61 = 12;\n$arg62 = 13;\n$x6 = rightAngleTriangle($arg60, $arg61, $arg62);\n$v6 = true;\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = 15;\n$arg71 = 8;\n$arg72 = 17;\n$x7 = rightAngleTriangle($arg70, $arg71, $arg72);\n$v7 = true;\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n$arg80 = 48;\n$arg81 = 55;\n$arg82 = 73;\n$x8 = rightAngleTriangle($arg80, $arg81, $arg82);\n$v8 = true;\nif (!compare($x8, $v8)) {\n    throw new Exception(\"Error at 9th assert statement.\");\n}\n$arg90 = 1;\n$arg91 = 1;\n$arg92 = 1;\n$x9 = rightAngleTriangle($arg90, $arg91, $arg92);\n$v9 = false;\nif (!compare($x9, $v9)) {\n    throw new Exception(\"Error at 10th assert statement.\");\n}\n$arg100 = 2;\n$arg101 = 2;\n$arg102 = 10;\n$x10 = rightAngleTriangle($arg100, $arg101, $arg102);\n$v10 = false;\nif (!compare($x10, $v10)) {\n    throw new Exception(\"Error at 11th assert statement.\");\n}\n", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। सत्यम् प्रत्यावर्तयतु यदि त्रिः। \nपार्श्वभागाः दक्षिणकोणीयं त्रिकोणं निर्मीयन्ते, अन्यथा असत्यं भवति। \nसमकोणी त्रिभुजः एकः त्रिभुजः अस्ति यस्मिन् एकः कोणः समकोणः अथवा समकोणः भवति। \n90 डिग्री। \nउदाहरणम्-\nसमकोण-त्रिभुजम् (3,4,5) = = सत्यम् \nसमकोण-त्रिभुजम् (1,2,3) = = असत्यम्", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/77", "entry_point": "solve", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"AsDf\";\n$x0 = solve($arg00);\n$v0 = \"aSdF\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"1234\";\n$x1 = solve($arg10);\n$v1 = \"4321\";\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"ab\";\n$x2 = solve($arg20);\n$v2 = \"AB\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"#a@C\";\n$x3 = solve($arg30);\n$v3 = \"#A@c\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n$arg40 = \"#AsdfW^45\";\n$x4 = solve($arg40);\n$v4 = \"#aSDFw^45\";\nif (!compare($x4, $v4)) {\n    throw new Exception(\"Error at 5th assert statement.\");\n}\n$arg50 = \"#6@2\";\n$x5 = solve($arg50);\n$v5 = \"2@6#\";\nif (!compare($x5, $v5)) {\n    throw new Exception(\"Error at 6th assert statement.\");\n}\n$arg60 = \"#\\$a^D\";\n$x6 = solve($arg60);\n$v6 = \"#\\$A^d\";\nif (!compare($x6, $v6)) {\n    throw new Exception(\"Error at 7th assert statement.\");\n}\n$arg70 = \"#ccc\";\n$x7 = solve($arg70);\n$v7 = \"#CCC\";\nif (!compare($x7, $v7)) {\n    throw new Exception(\"Error at 8th assert statement.\");\n}\n", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nयदि s [i] एकः अक्षरः अस्ति, तर्हि तस्य प्रकरणं निम्नतः ऊर्ध्वं प्रति अथवा तद्विरुद्धं प्रतिवर्तयतु। \nअन्यथा तत् यथावत् स्थापयतु। \nयदि तन्त्रे अक्षराणि न सन्ति तर्हि तन्त्रे व्युत्क्रमं करोतु। \nफलनम् परिणामितं स्ट्रिङ्ग् प्रत्यावर्तयेत्। \nउदाहरणानि \nसमाधानम् (\"1234\") = \"4321\" \nसमाधानः (\"अब\") = \"एबी\" \nसमाधानम् (\"#a @C\") = \"#A @c\"", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/78", "entry_point": "stringToMd5", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = \"Hello world\";\n$x0 = stringToMd5($arg00);\n$v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = \"\";\n$x1 = stringToMd5($arg10);\n$v1 = null;\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = \"A B C\";\n$x2 = stringToMd5($arg20);\n$v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = \"password\";\n$x3 = stringToMd5($arg30);\n$v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "'टेक्सट्'इति स्ट्रिङ्ग् दत्तं चेत्, तस्य md5 ह्याश्-समतुल्यं स्ट्रिङ्ग् प्रत्यर्पयतु। \nयदि'टेक्सट्'रिक्तं स्ट्रिङ्ग् अस्ति तर्हि शून्यं प्रत्यर्पयतु। \n\n>> स्ट्रिङ्ग् _ तः _ md5 ('नमस्ते वर्ल्ड्') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "php/79", "entry_point": "generateIntegers", "test": "\n\nfunction compare($x, $y) {\n    return $x == $y;\n}\n\n$arg00 = 2;\n$arg01 = 10;\n$x0 = generateIntegers($arg00, $arg01);\n$v0 = [2, 4, 6, 8];\nif (!compare($x0, $v0)) {\n    throw new Exception(\"Error at 1th assert statement.\");\n}\n$arg10 = 10;\n$arg11 = 2;\n$x1 = generateIntegers($arg10, $arg11);\n$v1 = [2, 4, 6, 8];\nif (!compare($x1, $v1)) {\n    throw new Exception(\"Error at 2th assert statement.\");\n}\n$arg20 = 132;\n$arg21 = 2;\n$x2 = generateIntegers($arg20, $arg21);\n$v2 = [2, 4, 6, 8];\nif (!compare($x2, $v2)) {\n    throw new Exception(\"Error at 3th assert statement.\");\n}\n$arg30 = 17;\n$arg31 = 89;\n$x3 = generateIntegers($arg30, $arg31);\n$v3 = [];\nif (!compare($x3, $v3)) {\n    throw new Exception(\"Error at 4th assert statement.\");\n}\n", "description": "a तथा b इति धनात्मक-पूर्णांकद्वयं दत्तं चेत्, a मध्ये सम-अङ्कान् प्रत्यर्पयतु। \nतथा च b, आरोहणक्रमेण। \n\nयथा-\nजनरेट्-इन्टिजर् (2,8) => [2,4,6,8] \nजनरेट्-इन्टिजर् (8,2) => [2,4,6,8] \nजनरेट्-इन्टिजर् (10,14) => []", "language": "php", "canonical_solution": null, "natural_language": "Sanskrit"}
