{"task_id": "typescript/0", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = below_zero([]);\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = below_zero([1, 2, -3, 1, 2, -3]);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = below_zero([1, 2, -4, 5, 6]);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = below_zero([1, -1, 2, -2, 5, -5, 4, -4]);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = below_zero([1, -1, 2, -2, 5, -5, 4, -5]);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = below_zero([1, -2, 2, -2, 5, -5, 4, -4]);\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு வங்கிக் கணக்கில் வைப்பு மற்றும் திரும்பப் பெறும் செயல்பாடுகளின் பட்டியல் உங்களுக்கு வழங்கப்படுகிறது. \nபூஜ்ஜிய இருப்பு. உங்கள் பணி எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்கு கீழே விழுகிறதா என்பதைக் கண்டறிவது, மற்றும் \nஅந்த நேரத்தில் செயல்பாடு சரி என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறு என்று திரும்ப வேண்டும். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,3]) \nபொய். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,-4,5]) \nஉண்மை.", "entry_point": "below_zero", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/1", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = sum_product([]);\nlet expected_1 = [0, 1];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = sum_product([1, 1, 1]);\nlet expected_2 = [3, 1];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = sum_product([100, 0]);\nlet expected_3 = [100, 0];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = sum_product([3, 5, 7]);\nlet expected_4 = [15, 105];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = sum_product([10]);\nlet expected_5 = [10, 10];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் பெருக்கல் ஆகியவற்றைக் கொண்ட ஒரு டப்பிளைத் திருப்பித் தரவும். \nகாலியான தொகை 0 க்கு சமமாகவும், காலியான பெருக்கல் 1 க்கு சமமாகவும் இருக்க வேண்டும். \n>>> கூட்டுத்தொகை ([]) \n(0,1) \n>> தொகை _ தயாரிப்பு ([1,2,3,4]) \n(10,24)", "entry_point": "sum_product", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/2", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = string_xor(\"111000\",\"101010\");\nlet expected_1 = \"010010\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = string_xor(\"1\",\"1\");\nlet expected_2 = \"0\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = string_xor(\"0101\",\"0000\");\nlet expected_3 = \"0101\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\n", "language": "typescript", "description": "உள்ளீடு என்பது 1s மற்றும் 0s ஐ மட்டுமே கொண்ட இரண்டு சரங்கள் a மற்றும் b ஆகும். \nஇந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள், மேலும் ரிட்டர்ன் ரிசல்ட்டையும் ஒரு சரமாக வழங்கவும். \n>> சரம் _ xor ('010','110') \n'100'", "entry_point": "string_xor", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/3", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = longest([]);\nlet expected_1 = undefined;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = longest([\"x\", \"y\", \"z\"]);\nlet expected_2 = \"x\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = longest([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\nlet expected_3 = \"zzzz\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\n", "language": "typescript", "description": "சரங்களின் பட்டியலிலிருந்து, நீளமான சரத்தை திருப்பி அனுப்புங்கள். பல சரங்கள் இருந்தால் முதல் சரத்தை திருப்பி அனுப்புங்கள். \nஅதே நீளமுள்ள சரங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் பூஜ்யத்தைத் திருப்பவும். \n>>> நீளமானது ([]) \n\n>>> நீளமானது (['a','b','c']) \n\"அ\"... \n>>> நீளமானது (['a','bb','ccc']) \n\"சிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசி", "entry_point": "longest", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/4", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = greatest_common_divisor(3,7);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = greatest_common_divisor(10,15);\nlet expected_2 = 5;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = greatest_common_divisor(49,14);\nlet expected_3 = 7;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = greatest_common_divisor(144,60);\nlet expected_4 = 12;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "a மற்றும் b ஆகிய இரண்டு முழு எண்களின் மிகப் பெரிய பொதுவான வகுத்தியைத் திருப்பித் தரவும். \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (3,5) \n1. \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (25,15) \n5.......................................................................................................................................................................................................", "entry_point": "greatest_common_divisor", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/5", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = sort_numbers(\"\");\nlet expected_1 = \"\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = sort_numbers(\"three\");\nlet expected_2 = \"three\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = sort_numbers(\"three five nine\");\nlet expected_3 = \"three five nine\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = sort_numbers(\"five zero four seven nine eight\");\nlet expected_4 = \"zero four five seven eight nine\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = sort_numbers(\"six five four three two one zero\");\nlet expected_5 = \"zero one two three four five six\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "உள்ளீடு என்பது'பூஜ்ஜியம்'முதல்'ஒன்பது'வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம் ஆகும். \nசெல்லுபடியாகும் தேர்வுகள்'பூஜ்ஜியம்','ஒன்று','இரண்டு','மூன்று','நான்கு','ஐந்து','ஆறு','ஏழு','எட்டு'மற்றும்'ஒன்பது'ஆகும். \nசிறியது முதல் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தைத் திருப்பவும் \n>>> வரிசைப்படுத்தப்பட்ட எண்கள் ('மூன்று ஒன்று ஐந்து') \n'ஒன் த்ரீ ஃபைவ்'", "entry_point": "sort_numbers", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/6", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = rescale_to_unit([2.0, 49.9]);\nlet expected_1 = [0.0, 1.0];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = rescale_to_unit([100.0, 49.9]);\nlet expected_2 = [1.0, 0.0];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]);\nlet expected_3 = [0.0, 0.25, 0.5, 0.75, 1.0];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]);\nlet expected_4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]);\nlet expected_5 = [0.25, 0.0, 1.0, 0.5, 0.75];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு உறுப்புகளின்), அந்த பட்டியலுக்கு ஒரு நேரியல் மாற்றத்தைப் பயன்படுத்துங்கள், \nஅதாவது மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும். \n>> மீட்டமை _ முதல் _ அலகு வரை ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "entry_point": "rescale_to_unit", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/7", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = flip_case(\"\");\nlet expected_1 = \"\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = flip_case(\"Hello!\");\nlet expected_2 = \"hELLO!\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = flip_case(\"These violent delights have violent ends\");\nlet expected_3 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும். \n>>> ஃபிளிப் கேஸ் ('ஹலோ') \n'ஹலோ'", "entry_point": "flip_case", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/8", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = get_positive([-1, -2, 4, 5, 6]);\nlet expected_1 = [4, 5, 6];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]);\nlet expected_2 = [5, 3, 2, 3, 3, 9, 123, 1];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = get_positive([-1, -2]);\nlet expected_3 = [];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = get_positive([]);\nlet expected_4 = [];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திருப்பி அனுப்புங்கள். \n>>> பெட் பாசிட்டிவ் ([-1,2,-4,5,6]) \n[2,5,6] \n>>> நேர்மறையைப் பெறுங்கள் ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "entry_point": "get_positive", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/9", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_prime(6);\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_prime(101);\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_prime(11);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_prime(13441);\nlet expected_4 = true;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_prime(61);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_prime(4);\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = is_prime(1);\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = is_prime(5);\nlet expected_8 = true;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = is_prime(11);\nlet expected_9 = true;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = is_prime(17);\nlet expected_10 = true;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = is_prime(85);\nlet expected_11 = false;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = is_prime(77);\nlet expected_12 = false;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = is_prime(255379);\nlet expected_13 = false;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட எண் பகா எண்ணாக இருந்தால் சரி என்றும், இல்லையெனில் தவறு என்றும் காட்டவும். \n>>> என்பது _ பிரைம் (6) \nபொய். \n>>> என்பது _ பிரைம் (101) \nஉண்மை. \n>>> என்பது _ பிரைம் (11) \nஉண்மை. \n>>> is _ Prime (13441) \nஉண்மை. \n>>> என்பது _ பிரைம் (61) \nஉண்மை. \n>>> என்பது _ பிரைம் (4) \nபொய். \n>>> என்பது _ பிரைம் (1) \nபொய்.", "entry_point": "is_prime", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/10", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = unique([5, 3, 5, 2, 3, 3, 9, 0, 123]);\nlet expected_1 = [0, 2, 3, 5, 9, 123];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளை திருப்பி அனுப்பவும் \n>>> தனித்துவமானது ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "entry_point": "unique", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/11", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = prime_fib(1);\nlet expected_1 = 2;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = prime_fib(2);\nlet expected_2 = 3;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = prime_fib(3);\nlet expected_3 = 5;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = prime_fib(4);\nlet expected_4 = 13;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = prime_fib(5);\nlet expected_5 = 89;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = prime_fib(6);\nlet expected_6 = 233;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = prime_fib(7);\nlet expected_7 = 1597;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = prime_fib(8);\nlet expected_8 = 28657;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = prime_fib(9);\nlet expected_9 = 514229;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = prime_fib(10);\nlet expected_10 = 433494437;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\n", "language": "typescript", "description": "பிரைம் _ ஃபைப் n-வது எண்ணை வழங்குகிறது, இது ஒரு ஃபிபோனாச்சி எண் மற்றும் அது பகா எண்ணாகும். \n>>> பிரைம் ஃபைப் (1) \n2. \n>>> பிரைம் ஃபைப் (2) \n3. \n>>> பிரைம் ஃபைப் (3) \n5....................................................................................................................................................................................................... \n>>> பிரைம் ஃபைப் (4) \n13. \n>>> பிரைம் ஃபைப் (5) \n89", "entry_point": "prime_fib", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/12", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = triples_sum_to_zero([1, 3, 5, 0]);\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = triples_sum_to_zero([1, 3, 5, -1]);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = triples_sum_to_zero([1, 3, -2, 1]);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = triples_sum_to_zero([1, 2, 3, 7]);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = triples_sum_to_zero([1, 2, 5, 7]);\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = triples_sum_to_zero([2, 4, -5, 3, 9, 7]);\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = triples_sum_to_zero([1]);\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = triples_sum_to_zero([1, 3, 5, -100]);\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = triples_sum_to_zero([100, 3, 5, -100]);\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n\n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> மூன்று மடங்கு _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,9,7]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "entry_point": "triples_sum_to_zero", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/13", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = pairs_sum_to_zero([1, 3, 5, 0]);\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = pairs_sum_to_zero([1, 3, -2, 1]);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = pairs_sum_to_zero([1, 2, 3, 7]);\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = pairs_sum_to_zero([2, 4, -5, 3, 5, 7]);\nlet expected_4 = true;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = pairs_sum_to_zero([1]);\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]);\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]);\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]);\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]);\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,5,7]) \nஉண்மை. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "entry_point": "pairs_sum_to_zero", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/14", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = fib4(5);\nlet expected_1 = 4;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = fib4(8);\nlet expected_2 = 28;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = fib4(10);\nlet expected_3 = 104;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = fib4(12);\nlet expected_4 = 386;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "ஃபைப் 4 எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப் 4 (0)-> 0 \nஃபைப் 4 (1)-> 0 \nஃபைப் 4 (2)-> 2 \nஃபைப் 4 (3)-> 0 \nஃபைப் 4 (என்)-> ஃபைப் 4 (என்-1) + ஃபைப் 4 (என்-2) + ஃபைப் 4 (என்-3) + ஃபைப் 4 (என்-4). \nஃபைப் 4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுநிகழ்வைப் பயன்படுத்த வேண்டாம். \n>>> ஃபைப்4 (5) \n4. \n>>> ஃபைப்4 (6) \n8. \n>>> ஃபைப்4 (7) \n14.", "entry_point": "fib4", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/15", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = median([3, 1, 2, 4, 5]);\nlet expected_1 = 3;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = median([-10, 4, 6, 1000, 10, 20]);\nlet expected_2 = 8.0;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = median([5]);\nlet expected_3 = 5;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = median([6, 5]);\nlet expected_4 = 5.5;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = median([8, 1, 3, 9, 9, 2, 7]);\nlet expected_5 = 7;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "பட்டியலில் உள்ள உறுப்புகளின் சராசரி l ஐத் திருப்பித் தரவும். \n>>> சராசரி ([3,1,2,4,5]) \n3. \n>>> சராசரி ([-10,4,6,1000,10,20]) \n15. 0", "entry_point": "median", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/16", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_palindrome(\"\");\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_palindrome(\"aba\");\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_palindrome(\"aaaaa\");\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_palindrome(\"zbcd\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_palindrome(\"xywyx\");\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_palindrome(\"xywyz\");\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = is_palindrome(\"xywzx\");\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சரிபார்க்கிறது \n>>> என்பது _ பாலிண்ட்ரோம் (\") \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('அபா') \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('zbcd') \nபொய்.", "entry_point": "is_palindrome", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/17", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = remove_vowels(\"\");\nlet expected_1 = \"\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = remove_vowels(\"abcdef\\nghijklm\");\nlet expected_2 = \"bcdf\\nghjklm\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = remove_vowels(\"fedcba\");\nlet expected_3 = \"fdcb\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = remove_vowels(\"eeeee\");\nlet expected_4 = \"\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = remove_vowels(\"acBAA\");\nlet expected_5 = \"cB\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = remove_vowels(\"EcBOO\");\nlet expected_6 = \"cB\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = remove_vowels(\"ybcd\");\nlet expected_7 = \"ybcd\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "நீக்குதல் உயிரெழுத்துக்கள் என்பது சரத்தை எடுத்து உயிரெழுத்துக்கள் இல்லாமல் சரத்தை திருப்பித் தரும் ஒரு செயல்பாடாகும். \n>>> உயிரெழுத்துக்களை அகற்று (\") \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று (\"abcdef\\ nghijklm\") \n'bcdf\\ nghjklm'\n>>> உயிரெழுத்துக்களை அகற்று ('abcdef') \n'பிசிடிஎஃப்'\n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏபிஏஏ') \n'பி'\n>>> உயிரெழுத்துக்களை அகற்று ('zbcd') \n'zbcd'", "entry_point": "remove_vowels", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/18", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = below_threshold([1, 2, 4, 10],100);\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = below_threshold([1, 20, 4, 10],5);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = below_threshold([1, 20, 4, 10],21);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = below_threshold([1, 20, 4, 10],22);\nlet expected_4 = true;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = below_threshold([1, 8, 4, 10],11);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = below_threshold([1, 8, 4, 10],10);\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "பட்டியலில் உள்ள அனைத்து எண்களும் t வரம்பிற்குக் கீழே இருந்தால் சரி என்று திரும்பவும். \n>>> கீழ் வரம்பு ([1,2,4,10], 100) \nஉண்மை. \n>>> கீழ் வரம்பு ([1,20,4,10], 5) \nபொய்.", "entry_point": "below_threshold", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/19", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = add(0,1);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = add(1,0);\nlet expected_2 = 1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = add(2,3);\nlet expected_3 = 5;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = add(5,7);\nlet expected_4 = 12;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = add(7,5);\nlet expected_5 = 12;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = add(572,725);\nlet expected_6 = 1297;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = add(51,804);\nlet expected_7 = 855;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = add(645,96);\nlet expected_8 = 741;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = add(712,853);\nlet expected_9 = 1565;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = add(223,101);\nlet expected_10 = 324;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = add(76,29);\nlet expected_11 = 105;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = add(416,149);\nlet expected_12 = 565;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = add(145,409);\nlet expected_13 = 554;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\nlet actual_14 = add(535,430);\nlet expected_14 = 965;\nassert.deepEqual(actual_14, expected_14, \"Exception --- test case 13 failed to pass\");\n\nlet actual_15 = add(118,303);\nlet expected_15 = 421;\nassert.deepEqual(actual_15, expected_15, \"Exception --- test case 14 failed to pass\");\n\nlet actual_16 = add(287,94);\nlet expected_16 = 381;\nassert.deepEqual(actual_16, expected_16, \"Exception --- test case 15 failed to pass\");\n\nlet actual_17 = add(768,257);\nlet expected_17 = 1025;\nassert.deepEqual(actual_17, expected_17, \"Exception --- test case 16 failed to pass\");\n\nlet actual_18 = add(421,677);\nlet expected_18 = 1098;\nassert.deepEqual(actual_18, expected_18, \"Exception --- test case 17 failed to pass\");\n\nlet actual_19 = add(802,814);\nlet expected_19 = 1616;\nassert.deepEqual(actual_19, expected_19, \"Exception --- test case 18 failed to pass\");\n\nlet actual_20 = add(510,922);\nlet expected_20 = 1432;\nassert.deepEqual(actual_20, expected_20, \"Exception --- test case 19 failed to pass\");\n\nlet actual_21 = add(345,819);\nlet expected_21 = 1164;\nassert.deepEqual(actual_21, expected_21, \"Exception --- test case 20 failed to pass\");\n\nlet actual_22 = add(895,436);\nlet expected_22 = 1331;\nassert.deepEqual(actual_22, expected_22, \"Exception --- test case 21 failed to pass\");\n\nlet actual_23 = add(123,424);\nlet expected_23 = 547;\nassert.deepEqual(actual_23, expected_23, \"Exception --- test case 22 failed to pass\");\n\nlet actual_24 = add(923,245);\nlet expected_24 = 1168;\nassert.deepEqual(actual_24, expected_24, \"Exception --- test case 23 failed to pass\");\n\nlet actual_25 = add(23,438);\nlet expected_25 = 461;\nassert.deepEqual(actual_25, expected_25, \"Exception --- test case 24 failed to pass\");\n\nlet actual_26 = add(565,133);\nlet expected_26 = 698;\nassert.deepEqual(actual_26, expected_26, \"Exception --- test case 25 failed to pass\");\n\nlet actual_27 = add(945,925);\nlet expected_27 = 1870;\nassert.deepEqual(actual_27, expected_27, \"Exception --- test case 26 failed to pass\");\n\nlet actual_28 = add(261,983);\nlet expected_28 = 1244;\nassert.deepEqual(actual_28, expected_28, \"Exception --- test case 27 failed to pass\");\n\nlet actual_29 = add(139,577);\nlet expected_29 = 716;\nassert.deepEqual(actual_29, expected_29, \"Exception --- test case 28 failed to pass\");\n\nlet actual_30 = add(763,178);\nlet expected_30 = 941;\nassert.deepEqual(actual_30, expected_30, \"Exception --- test case 29 failed to pass\");\n\nlet actual_31 = add(147,892);\nlet expected_31 = 1039;\nassert.deepEqual(actual_31, expected_31, \"Exception --- test case 30 failed to pass\");\n\nlet actual_32 = add(436,402);\nlet expected_32 = 838;\nassert.deepEqual(actual_32, expected_32, \"Exception --- test case 31 failed to pass\");\n\nlet actual_33 = add(610,581);\nlet expected_33 = 1191;\nassert.deepEqual(actual_33, expected_33, \"Exception --- test case 32 failed to pass\");\n\nlet actual_34 = add(103,416);\nlet expected_34 = 519;\nassert.deepEqual(actual_34, expected_34, \"Exception --- test case 33 failed to pass\");\n\nlet actual_35 = add(339,990);\nlet expected_35 = 1329;\nassert.deepEqual(actual_35, expected_35, \"Exception --- test case 34 failed to pass\");\n\nlet actual_36 = add(130,504);\nlet expected_36 = 634;\nassert.deepEqual(actual_36, expected_36, \"Exception --- test case 35 failed to pass\");\n\nlet actual_37 = add(242,717);\nlet expected_37 = 959;\nassert.deepEqual(actual_37, expected_37, \"Exception --- test case 36 failed to pass\");\n\nlet actual_38 = add(562,110);\nlet expected_38 = 672;\nassert.deepEqual(actual_38, expected_38, \"Exception --- test case 37 failed to pass\");\n\nlet actual_39 = add(396,909);\nlet expected_39 = 1305;\nassert.deepEqual(actual_39, expected_39, \"Exception --- test case 38 failed to pass\");\n\nlet actual_40 = add(887,703);\nlet expected_40 = 1590;\nassert.deepEqual(actual_40, expected_40, \"Exception --- test case 39 failed to pass\");\n\nlet actual_41 = add(870,551);\nlet expected_41 = 1421;\nassert.deepEqual(actual_41, expected_41, \"Exception --- test case 40 failed to pass\");\n\nlet actual_42 = add(422,391);\nlet expected_42 = 813;\nassert.deepEqual(actual_42, expected_42, \"Exception --- test case 41 failed to pass\");\n\nlet actual_43 = add(299,505);\nlet expected_43 = 804;\nassert.deepEqual(actual_43, expected_43, \"Exception --- test case 42 failed to pass\");\n\nlet actual_44 = add(346,56);\nlet expected_44 = 402;\nassert.deepEqual(actual_44, expected_44, \"Exception --- test case 43 failed to pass\");\n\nlet actual_45 = add(36,706);\nlet expected_45 = 742;\nassert.deepEqual(actual_45, expected_45, \"Exception --- test case 44 failed to pass\");\n\nlet actual_46 = add(738,411);\nlet expected_46 = 1149;\nassert.deepEqual(actual_46, expected_46, \"Exception --- test case 45 failed to pass\");\n\nlet actual_47 = add(679,87);\nlet expected_47 = 766;\nassert.deepEqual(actual_47, expected_47, \"Exception --- test case 46 failed to pass\");\n\nlet actual_48 = add(25,303);\nlet expected_48 = 328;\nassert.deepEqual(actual_48, expected_48, \"Exception --- test case 47 failed to pass\");\n\nlet actual_49 = add(161,612);\nlet expected_49 = 773;\nassert.deepEqual(actual_49, expected_49, \"Exception --- test case 48 failed to pass\");\n\nlet actual_50 = add(306,841);\nlet expected_50 = 1147;\nassert.deepEqual(actual_50, expected_50, \"Exception --- test case 49 failed to pass\");\n\nlet actual_51 = add(973,411);\nlet expected_51 = 1384;\nassert.deepEqual(actual_51, expected_51, \"Exception --- test case 50 failed to pass\");\n\nlet actual_52 = add(711,157);\nlet expected_52 = 868;\nassert.deepEqual(actual_52, expected_52, \"Exception --- test case 51 failed to pass\");\n\nlet actual_53 = add(471,27);\nlet expected_53 = 498;\nassert.deepEqual(actual_53, expected_53, \"Exception --- test case 52 failed to pass\");\n\nlet actual_54 = add(714,792);\nlet expected_54 = 1506;\nassert.deepEqual(actual_54, expected_54, \"Exception --- test case 53 failed to pass\");\n\nlet actual_55 = add(38,206);\nlet expected_55 = 244;\nassert.deepEqual(actual_55, expected_55, \"Exception --- test case 54 failed to pass\");\n\nlet actual_56 = add(907,343);\nlet expected_56 = 1250;\nassert.deepEqual(actual_56, expected_56, \"Exception --- test case 55 failed to pass\");\n\nlet actual_57 = add(23,760);\nlet expected_57 = 783;\nassert.deepEqual(actual_57, expected_57, \"Exception --- test case 56 failed to pass\");\n\nlet actual_58 = add(524,859);\nlet expected_58 = 1383;\nassert.deepEqual(actual_58, expected_58, \"Exception --- test case 57 failed to pass\");\n\nlet actual_59 = add(30,529);\nlet expected_59 = 559;\nassert.deepEqual(actual_59, expected_59, \"Exception --- test case 58 failed to pass\");\n\nlet actual_60 = add(341,691);\nlet expected_60 = 1032;\nassert.deepEqual(actual_60, expected_60, \"Exception --- test case 59 failed to pass\");\n\nlet actual_61 = add(167,729);\nlet expected_61 = 896;\nassert.deepEqual(actual_61, expected_61, \"Exception --- test case 60 failed to pass\");\n\nlet actual_62 = add(636,289);\nlet expected_62 = 925;\nassert.deepEqual(actual_62, expected_62, \"Exception --- test case 61 failed to pass\");\n\nlet actual_63 = add(503,144);\nlet expected_63 = 647;\nassert.deepEqual(actual_63, expected_63, \"Exception --- test case 62 failed to pass\");\n\nlet actual_64 = add(51,985);\nlet expected_64 = 1036;\nassert.deepEqual(actual_64, expected_64, \"Exception --- test case 63 failed to pass\");\n\nlet actual_65 = add(287,149);\nlet expected_65 = 436;\nassert.deepEqual(actual_65, expected_65, \"Exception --- test case 64 failed to pass\");\n\nlet actual_66 = add(659,75);\nlet expected_66 = 734;\nassert.deepEqual(actual_66, expected_66, \"Exception --- test case 65 failed to pass\");\n\nlet actual_67 = add(462,797);\nlet expected_67 = 1259;\nassert.deepEqual(actual_67, expected_67, \"Exception --- test case 66 failed to pass\");\n\nlet actual_68 = add(406,141);\nlet expected_68 = 547;\nassert.deepEqual(actual_68, expected_68, \"Exception --- test case 67 failed to pass\");\n\nlet actual_69 = add(106,44);\nlet expected_69 = 150;\nassert.deepEqual(actual_69, expected_69, \"Exception --- test case 68 failed to pass\");\n\nlet actual_70 = add(300,934);\nlet expected_70 = 1234;\nassert.deepEqual(actual_70, expected_70, \"Exception --- test case 69 failed to pass\");\n\nlet actual_71 = add(471,524);\nlet expected_71 = 995;\nassert.deepEqual(actual_71, expected_71, \"Exception --- test case 70 failed to pass\");\n\nlet actual_72 = add(122,429);\nlet expected_72 = 551;\nassert.deepEqual(actual_72, expected_72, \"Exception --- test case 71 failed to pass\");\n\nlet actual_73 = add(735,195);\nlet expected_73 = 930;\nassert.deepEqual(actual_73, expected_73, \"Exception --- test case 72 failed to pass\");\n\nlet actual_74 = add(335,484);\nlet expected_74 = 819;\nassert.deepEqual(actual_74, expected_74, \"Exception --- test case 73 failed to pass\");\n\nlet actual_75 = add(28,809);\nlet expected_75 = 837;\nassert.deepEqual(actual_75, expected_75, \"Exception --- test case 74 failed to pass\");\n\nlet actual_76 = add(430,20);\nlet expected_76 = 450;\nassert.deepEqual(actual_76, expected_76, \"Exception --- test case 75 failed to pass\");\n\nlet actual_77 = add(916,635);\nlet expected_77 = 1551;\nassert.deepEqual(actual_77, expected_77, \"Exception --- test case 76 failed to pass\");\n\nlet actual_78 = add(301,999);\nlet expected_78 = 1300;\nassert.deepEqual(actual_78, expected_78, \"Exception --- test case 77 failed to pass\");\n\nlet actual_79 = add(454,466);\nlet expected_79 = 920;\nassert.deepEqual(actual_79, expected_79, \"Exception --- test case 78 failed to pass\");\n\nlet actual_80 = add(905,259);\nlet expected_80 = 1164;\nassert.deepEqual(actual_80, expected_80, \"Exception --- test case 79 failed to pass\");\n\nlet actual_81 = add(168,205);\nlet expected_81 = 373;\nassert.deepEqual(actual_81, expected_81, \"Exception --- test case 80 failed to pass\");\n\nlet actual_82 = add(570,434);\nlet expected_82 = 1004;\nassert.deepEqual(actual_82, expected_82, \"Exception --- test case 81 failed to pass\");\n\nlet actual_83 = add(64,959);\nlet expected_83 = 1023;\nassert.deepEqual(actual_83, expected_83, \"Exception --- test case 82 failed to pass\");\n\nlet actual_84 = add(957,510);\nlet expected_84 = 1467;\nassert.deepEqual(actual_84, expected_84, \"Exception --- test case 83 failed to pass\");\n\nlet actual_85 = add(722,598);\nlet expected_85 = 1320;\nassert.deepEqual(actual_85, expected_85, \"Exception --- test case 84 failed to pass\");\n\nlet actual_86 = add(770,226);\nlet expected_86 = 996;\nassert.deepEqual(actual_86, expected_86, \"Exception --- test case 85 failed to pass\");\n\nlet actual_87 = add(579,66);\nlet expected_87 = 645;\nassert.deepEqual(actual_87, expected_87, \"Exception --- test case 86 failed to pass\");\n\nlet actual_88 = add(117,674);\nlet expected_88 = 791;\nassert.deepEqual(actual_88, expected_88, \"Exception --- test case 87 failed to pass\");\n\nlet actual_89 = add(530,30);\nlet expected_89 = 560;\nassert.deepEqual(actual_89, expected_89, \"Exception --- test case 88 failed to pass\");\n\nlet actual_90 = add(776,345);\nlet expected_90 = 1121;\nassert.deepEqual(actual_90, expected_90, \"Exception --- test case 89 failed to pass\");\n\nlet actual_91 = add(327,389);\nlet expected_91 = 716;\nassert.deepEqual(actual_91, expected_91, \"Exception --- test case 90 failed to pass\");\n\nlet actual_92 = add(596,12);\nlet expected_92 = 608;\nassert.deepEqual(actual_92, expected_92, \"Exception --- test case 91 failed to pass\");\n\nlet actual_93 = add(599,511);\nlet expected_93 = 1110;\nassert.deepEqual(actual_93, expected_93, \"Exception --- test case 92 failed to pass\");\n\nlet actual_94 = add(936,476);\nlet expected_94 = 1412;\nassert.deepEqual(actual_94, expected_94, \"Exception --- test case 93 failed to pass\");\n\nlet actual_95 = add(461,14);\nlet expected_95 = 475;\nassert.deepEqual(actual_95, expected_95, \"Exception --- test case 94 failed to pass\");\n\nlet actual_96 = add(966,157);\nlet expected_96 = 1123;\nassert.deepEqual(actual_96, expected_96, \"Exception --- test case 95 failed to pass\");\n\nlet actual_97 = add(326,91);\nlet expected_97 = 417;\nassert.deepEqual(actual_97, expected_97, \"Exception --- test case 96 failed to pass\");\n\nlet actual_98 = add(392,455);\nlet expected_98 = 847;\nassert.deepEqual(actual_98, expected_98, \"Exception --- test case 97 failed to pass\");\n\nlet actual_99 = add(446,477);\nlet expected_99 = 923;\nassert.deepEqual(actual_99, expected_99, \"Exception --- test case 98 failed to pass\");\n\nlet actual_100 = add(324,860);\nlet expected_100 = 1184;\nassert.deepEqual(actual_100, expected_100, \"Exception --- test case 99 failed to pass\");\n\nlet actual_101 = add(945,85);\nlet expected_101 = 1030;\nassert.deepEqual(actual_101, expected_101, \"Exception --- test case 100 failed to pass\");\n\nlet actual_102 = add(886,582);\nlet expected_102 = 1468;\nassert.deepEqual(actual_102, expected_102, \"Exception --- test case 101 failed to pass\");\n\nlet actual_103 = add(886,712);\nlet expected_103 = 1598;\nassert.deepEqual(actual_103, expected_103, \"Exception --- test case 102 failed to pass\");\n\nlet actual_104 = add(842,953);\nlet expected_104 = 1795;\nassert.deepEqual(actual_104, expected_104, \"Exception --- test case 103 failed to pass\");\n\n", "language": "typescript", "description": "x மற்றும் y என்ற இரண்டு எண்களைச் சேர்க்கவும். \n>>> சேர் (2,3) \n5....................................................................................................................................................................................................... \n>>> சேர் (5,7) \n12.", "entry_point": "add", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/20", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = same_chars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\");\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = same_chars(\"abcd\",\"dddddddabc\");\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = same_chars(\"dddddddabc\",\"abcd\");\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = same_chars(\"eabcd\",\"dddddddabc\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = same_chars(\"abcd\",\"dddddddabcf\");\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = same_chars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\");\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = same_chars(\"aabb\",\"aaccc\");\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "இரண்டு சொற்களும் ஒரே எழுத்துக்களைக் கொண்டுள்ளனவா என்று சரிபார்க்கவும். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzuddeddabc') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடிபிசி') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('dddddddabc','abcd') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஈஏபிசிடி','டிடிடிடிடிபிசி') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடாப்ஸ்') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzdddddadbc') \nபொய்.", "entry_point": "same_chars", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/21", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = fib(10);\nlet expected_1 = 55;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = fib(1);\nlet expected_2 = 1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = fib(8);\nlet expected_3 = 21;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = fib(11);\nlet expected_4 = 89;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = fib(12);\nlet expected_5 = 144;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "n-th ஃபிபோனாச்சி எண்ணைத் திருப்பித் தரவும். \n>>> ஃபைப் (10) \n55 \n>>> ஃபைப் (1) \n1. \n>>> ஃபைப் (8) \n21", "entry_point": "fib", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/22", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = common([1, 4, 3, 34, 653, 2, 5],[5, 7, 1, 5, 9, 653, 121]);\nlet expected_1 = [1, 5, 653];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = common([5, 3, 2, 8],[3, 2]);\nlet expected_2 = [2, 3];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = common([4, 3, 2, 8],[3, 2, 4]);\nlet expected_3 = [2, 3, 4];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = common([4, 3, 2, 8],[]);\nlet expected_4 = [];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "இரண்டு பட்டியல்களுக்கு தனித்துவமான பொதுவான கூறுகளை வரிசைப்படுத்துங்கள். \n>> பொதுவான ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>> பொதுவான ([5,3,2,8], [3,2]) \n[2,3]", "entry_point": "common", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/23", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = largest_prime_factor(15);\nlet expected_1 = 5;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = largest_prime_factor(27);\nlet expected_2 = 3;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = largest_prime_factor(63);\nlet expected_3 = 7;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = largest_prime_factor(330);\nlet expected_4 = 11;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = largest_prime_factor(13195);\nlet expected_5 = 29;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "n இன் மிகப்பெரிய பகாக் காரணியை திருப்பிக் கொடுங்கள். n> 1 என்று வைத்துக்கொள்வோம், அது பகாக் காரணி அல்ல. \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (13195) \n29 \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (2048) \n2.", "entry_point": "largest_prime_factor", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/24", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = sum_to_n(1);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = sum_to_n(6);\nlet expected_2 = 21;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = sum_to_n(11);\nlet expected_3 = 66;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = sum_to_n(30);\nlet expected_4 = 465;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = sum_to_n(100);\nlet expected_5 = 5050;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "sum _ to _ n என்பது 1 முதல் n வரையிலான எண்களைச் சேர்க்கும் ஒரு சார்பாகும். \n>>> கூட்டுத்தொகை _ முதல் _ வரை (30) \n465 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (100) \n5050 \n>>> கூட்டுத்தொகை _ முதல் _ வரை (5) \n15. \n>>> கூட்டுத்தொகை _ முதல் _ வரை (10) \n55 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (1) \n1.", "entry_point": "sum_to_n", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/25", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = derivative([3, 1, 2, 4, 5]);\nlet expected_1 = [1, 4, 12, 20];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = derivative([1, 2, 3]);\nlet expected_2 = [2, 6];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = derivative([3, 2, 1]);\nlet expected_3 = [2, 2];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = derivative([3, 2, 1, 0, 4]);\nlet expected_4 = [2, 2, 0, 16];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = derivative([1]);\nlet expected_5 = [];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "xs என்பது ஒரு பல்லுறுப்புக்கோவையின் குணகங்களைக் குறிக்கிறது. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nஅதே வடிவத்தில் இந்த பல்லுறுப்புக்கோவையின் திரும்ப வழித்தோன்றல். \n>>> வழித்தோன்றல் ([3,1,2,4,5]) \n[1,4,12,20] \n>>> வழித்தோன்றல் ([1,2,3]) \n[2,6]", "entry_point": "derivative", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/26", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = fibfib(2);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = fibfib(1);\nlet expected_2 = 0;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = fibfib(5);\nlet expected_3 = 4;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = fibfib(8);\nlet expected_4 = 24;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = fibfib(10);\nlet expected_5 = 81;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = fibfib(12);\nlet expected_6 = 274;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = fibfib(14);\nlet expected_7 = 927;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஃபைப்ஃபைப் எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப்ஃபைப் (0) = = 0 \nஃபைப்ஃபைப் (1) = = 0 \nஃபைப்ஃபைப் (2) = = 1 \nஃபைப்ஃபைப் (n) = = ஃபைப்ஃபைப் (n-1) + ஃபைப்ஃபைப் (n-2) + ஃபைப்ஃபைப் (n-3). \nஃபைப்ஃபைப் எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். \n>>> ஃபைப்ஃபைப் (1) \n0 \n>>> ஃபைப்ஃபைப் (5) \n4. \n>>> ஃபைப்ஃபைப் (8) \n24.", "entry_point": "fibfib", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/27", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = vowels_count(\"abcde\");\nlet expected_1 = 2;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = vowels_count(\"Alone\");\nlet expected_2 = 3;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = vowels_count(\"key\");\nlet expected_3 = 2;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = vowels_count(\"bye\");\nlet expected_4 = 1;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = vowels_count(\"keY\");\nlet expected_5 = 2;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = vowels_count(\"bYe\");\nlet expected_6 = 1;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = vowels_count(\"ACEDY\");\nlet expected_7 = 3;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு செயல்பாட்டை எழுதுங்கள் உயிரெழுத்துக்கள் _ எண்ணிக்கை இது ஒரு சரத்தை குறிக்கிறது \nஉள்ளீடாக ஒரு சொல் மற்றும் சரத்தில் உள்ள உயிரெழுத்துக்களின் எண்ணிக்கையைத் தருகிறது. \nஇந்த வழக்கில் அச்சுகள்'a','e','i','o','u'. இங்கே,'y'கூட ஒரு \nஉயிரெழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. \n\nஉதாரணம்ஃ \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"அப்ச்டே\") \n2. \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"ACEDY\") \n3.", "entry_point": "vowels_count", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/28", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = search([5, 5, 5, 5, 1]);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = search([4, 1, 4, 1, 4, 4]);\nlet expected_2 = 4;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = search([3, 3]);\nlet expected_3 = -1;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = search([8, 8, 8, 8, 8, 8, 8, 8]);\nlet expected_4 = 8;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = search([2, 3, 3, 2, 2]);\nlet expected_5 = 2;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]);\nlet expected_6 = 1;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = search([3, 2, 8, 2]);\nlet expected_7 = 2;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]);\nlet expected_8 = 1;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = search([8, 8, 3, 6, 5, 6, 4]);\nlet expected_9 = -1;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]);\nlet expected_10 = 1;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = search([1, 9, 10, 1, 3]);\nlet expected_11 = 1;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]);\nlet expected_12 = 5;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = search([1]);\nlet expected_13 = 1;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\nlet actual_14 = search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]);\nlet expected_14 = 4;\nassert.deepEqual(actual_14, expected_14, \"Exception --- test case 13 failed to pass\");\n\nlet actual_15 = search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]);\nlet expected_15 = 2;\nassert.deepEqual(actual_15, expected_15, \"Exception --- test case 14 failed to pass\");\n\nlet actual_16 = search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]);\nlet expected_16 = 1;\nassert.deepEqual(actual_16, expected_16, \"Exception --- test case 15 failed to pass\");\n\nlet actual_17 = search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]);\nlet expected_17 = 4;\nassert.deepEqual(actual_17, expected_17, \"Exception --- test case 16 failed to pass\");\n\nlet actual_18 = search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]);\nlet expected_18 = 4;\nassert.deepEqual(actual_18, expected_18, \"Exception --- test case 17 failed to pass\");\n\nlet actual_19 = search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]);\nlet expected_19 = 2;\nassert.deepEqual(actual_19, expected_19, \"Exception --- test case 18 failed to pass\");\n\nlet actual_20 = search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]);\nlet expected_20 = -1;\nassert.deepEqual(actual_20, expected_20, \"Exception --- test case 19 failed to pass\");\n\nlet actual_21 = search([10]);\nlet expected_21 = -1;\nassert.deepEqual(actual_21, expected_21, \"Exception --- test case 20 failed to pass\");\n\nlet actual_22 = search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]);\nlet expected_22 = 2;\nassert.deepEqual(actual_22, expected_22, \"Exception --- test case 21 failed to pass\");\n\nlet actual_23 = search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]);\nlet expected_23 = 1;\nassert.deepEqual(actual_23, expected_23, \"Exception --- test case 22 failed to pass\");\n\nlet actual_24 = search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]);\nlet expected_24 = 1;\nassert.deepEqual(actual_24, expected_24, \"Exception --- test case 23 failed to pass\");\n\nlet actual_25 = search([3, 10, 10, 9, 2]);\nlet expected_25 = -1;\nassert.deepEqual(actual_25, expected_25, \"Exception --- test case 24 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு வெற்றிடமற்ற நேர்மறை முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. அதை விட பெரிய முழு எண்ணை கொடுக்கவும். \nபூஜ்ஜியம், மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ அதிர்வெண் உள்ளது. \nஒரு முழு எண்ணின் அதிர்வெண் என்பது அது பட்டியலில் எத்தனை முறை தோன்றுகிறது என்பதாகும். \nஅத்தகைய மதிப்பு இல்லை என்றால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணங்கள்ஃ \nதேடல் ([4,1,2,2,3,1]) = = 2 \nதேடல் ([1,2,3,3,4,4]) = = 3 \nதேடல் ([5,5,4,4]) = =-1", "entry_point": "search", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/29", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = triangle_area(3,4,5);\nlet expected_1 = 6.0;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = triangle_area(1,2,10);\nlet expected_2 = -1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = triangle_area(4,8,5);\nlet expected_3 = 8.18;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = triangle_area(2,2,2);\nlet expected_4 = 1.73;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = triangle_area(1,2,3);\nlet expected_5 = -1;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = triangle_area(10,5,7);\nlet expected_6 = 16.25;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = triangle_area(2,6,3);\nlet expected_7 = -1;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = triangle_area(1,1,1);\nlet expected_8 = 0.43;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = triangle_area(2,2,10);\nlet expected_9 = -1;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. \nமூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்கினால் முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமிடப்படுகிறது. \nஇல்லையெனில் திரும்ப-1 \nஏதேனும் இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருக்கும்போது மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. \nமூன்றாவது பக்கத்தை விட. \nஉதாரணம்ஃ \nமுக்கோணப் பரப்பளவு (3,4,5) = = 6 \nமுக்கோணப் பரப்பளவு (1,2,10) = =-1", "entry_point": "triangle_area", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/30", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = will_it_fly([3, 2, 3],9);\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = will_it_fly([1, 2],5);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = will_it_fly([3],5);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = will_it_fly([3, 2, 3],1);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = will_it_fly([1, 2, 3],6);\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = will_it_fly([5],5);\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "பொருள் q பறக்கும் என்றால் சரி, இல்லையெனில் தவறு என்று காட்டும் செயல்பாட்டை எழுதுங்கள். \nபொருள் q சமநிலையாக இருந்தால் பறக்கும் (இது ஒரு பாலிண்ட்ரோமிக் பட்டியல்) மற்றும் அதன் உறுப்புகளின் கூட்டுத்தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால். \n\nஉதாரணம்ஃ \nவில் _ இட் _ ஃப்ளை ([1,2], 5) பொய் \n#1 + 2 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 1) பொய் \n#இது சமநிலையானது, ஆனால் 3 + 2 + 3 என்பது அதிகபட்ச எடையை விட அதிகமாகும். \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 9) ட்ரு \n#3 + 2 + 3 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது. \n\nவில் _ இட் _ ஃப்ளை ([3], 5) ட்ரு \n#3 அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது.", "entry_point": "will_it_fly", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/31", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_multiply_prime(5);\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_multiply_prime(30);\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_multiply_prime(8);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_multiply_prime(10);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_multiply_prime(125);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_multiply_prime(105);\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = is_multiply_prime(126);\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = is_multiply_prime(729);\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = is_multiply_prime(891);\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = is_multiply_prime(1001);\nlet expected_10 = true;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட எண் 3 பகா எண்களின் பெருக்கமாக இருந்தால் உண்மை என்று திரும்பும் செயல்பாட்டை எழுதுங்கள். \nஇல்லையெனில் பொய்யானது. \n(அ) என்பது 100க்கும் குறைவானது என்பதை அறிவது. \nஉதாரணம்ஃ \nபெருக்கல் பகா எண் (30) = = உண்மை \n30 = 2 * 3 * 5", "entry_point": "is_multiply_prime", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/32", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = decimal_to_binary(0);\nlet expected_1 = \"db0db\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = decimal_to_binary(32);\nlet expected_2 = \"db100000db\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = decimal_to_binary(103);\nlet expected_3 = \"db1100111db\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = decimal_to_binary(15);\nlet expected_4 = \"db1111db\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு தசம வடிவத்தில் ஒரு எண் வழங்கப்படும், அதை ஒரு எண்ணாக மாற்றுவதே உங்கள் பணியாகும். \nபைனரி வடிவம். செயல்பாடு ஒரு சரத்தைத் திருப்ப வேண்டும், ஒவ்வொரு எழுத்தும் ஒரு பைனரியைக் குறிக்கும் \nஎண். சரத்தில் உள்ள ஒவ்வொரு எழுத்தும்'0'அல்லது'1'ஆக இருக்கும். \n\nசரத்தின் தொடக்கத்திலும் முடிவிலும் கூடுதலாக இரண்டு எழுத்துக்கள்'db'இருக்கும். \nவடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன. \n\nஉதாரணங்கள்ஃ \nடெசிமல் _ டு _ பைனரி (15) #\"db1111db\" ஐத் தருகிறது \nடெசிமல் _ டு _ பைனரி (32) #\"db100000db\" ஐத் தருகிறது", "entry_point": "decimal_to_binary", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/33", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_happy(\"a\");\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_happy(\"aa\");\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_happy(\"abcd\");\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_happy(\"aabb\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_happy(\"adb\");\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_happy(\"xyy\");\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = is_happy(\"iopaxpoi\");\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = is_happy(\"iopaxioi\");\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nசரம் மகிழ்ச்சியாக உள்ளதா இல்லையா என்பதைச் சரிபார்ப்பது உங்கள் பணியாகும். \nஒரு சரத்தின் நீளம் குறைந்தது 3 ஆகவும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் தனித்துவமாகவும் இருந்தால் அது மகிழ்ச்சியாக இருக்கும். \nஉதாரணத்திற்குஃ \nமகிழ்ச்சியாக உள்ளது (a) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏஏ) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏபிசிடி) => உண்மை \nமகிழ்ச்சியாக உள்ளது (ஆப்) => பொய் \nமகிழ்ச்சியாக உள்ளது (adb) => உண்மை \nமகிழ்ச்சியாக உள்ளது (xyy) => தவறு", "entry_point": "is_happy", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/34", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]);\nlet expected_1 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = numerical_letter_grade([1.2]);\nlet expected_2 = [\"D+\"];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = numerical_letter_grade([0.5]);\nlet expected_3 = [\"D-\"];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = numerical_letter_grade([0.0]);\nlet expected_4 = [\"E\"];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]);\nlet expected_5 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = numerical_letter_grade([0, 0.7]);\nlet expected_6 = [\"E\", \"D-\"];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் தரங்களை வழங்க வேண்டும். \nமாணவர்களுக்கு. ஆசிரியர் தரப்படுத்தலுக்கான தனது சொந்த வழிமுறையை உருவாக்கி வருகிறார். \nஒரே பிரச்சனை என்னவென்றால், தரப்படுத்துவதற்கு அவர் பயன்படுத்திய குறியீட்டை அவர் இழந்துவிட்டார். \nசில மாணவர்களுக்கான ஜி. பி. ஏ. களின் பட்டியலை அவர் உங்களுக்கு வழங்கியுள்ளார், நீங்கள் எழுத வேண்டும். \nபின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் பட்டியலை வெளியிடக்கூடிய ஒரு செயல்பாடுஃ \nஜிபிஏ | எழுத்து தரம் \n4. 0 ஏ + \n> 3.7 ஏ \n> 3.3 ஏ-\n> 3 பி + \n> 2.7 பி \n> 2.3 பி-\n> 2 சி + \n> 1.7 டிகிரி செல். \n> 1.3 சி-\n> 1. 0 டி + \n> 0.7 டி \n> 0.0 டி-\n0. 0 ஈ \n\nஉதாரணம்ஃ \nதரச் சமன்பாடு ([4.0,3,17,2,3,5]) = => ['A +','B','C-','C','A -']", "entry_point": "numerical_letter_grade", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/35", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = prime_length(\"Hello\");\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = prime_length(\"abcdcba\");\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = prime_length(\"kittens\");\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = prime_length(\"orange\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = prime_length(\"wow\");\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = prime_length(\"world\");\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = prime_length(\"MadaM\");\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = prime_length(\"Wow\");\nlet expected_8 = true;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = prime_length(\"\");\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = prime_length(\"HI\");\nlet expected_10 = true;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = prime_length(\"go\");\nlet expected_11 = true;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = prime_length(\"gogo\");\nlet expected_12 = false;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = prime_length(\"aaaaaaaaaaaaaaa\");\nlet expected_13 = false;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\nlet actual_14 = prime_length(\"Madam\");\nlet expected_14 = true;\nassert.deepEqual(actual_14, expected_14, \"Exception --- test case 13 failed to pass\");\n\nlet actual_15 = prime_length(\"M\");\nlet expected_15 = false;\nassert.deepEqual(actual_15, expected_15, \"Exception --- test case 14 failed to pass\");\n\nlet actual_16 = prime_length(\"0\");\nlet expected_16 = false;\nassert.deepEqual(actual_16, expected_16, \"Exception --- test case 15 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு சரத்தை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள், சரம் இருந்தால் சரி என்று திருப்பித் தருகிறது \nநீளம் ஒரு பகா எண் அல்லது இல்லையெனில் தவறு \nஉதாரணங்கள் \nபகா நீளம் ('ஹலோ') = = உண்மை \nபகா நீளம் ('abcdcba') = = உண்மை \nபகா நீளம் ('பூனைகள்') = = உண்மை \nபகா நீளம் ('ஆரஞ்சு') = = தவறு", "entry_point": "prime_length", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/36", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = solve(1000);\nlet expected_1 = \"1\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = solve(150);\nlet expected_2 = \"110\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = solve(147);\nlet expected_3 = \"1100\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = solve(333);\nlet expected_4 = \"1001\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = solve(963);\nlet expected_5 = \"10010\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த கூட்டுத்தொகையை பைனரியில் திருப்பித் தரவும். \n\nஉதாரணம் \nN = 1000 க்கு, இலக்கங்களின் கூட்டுத்தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். \nN = 150 க்கு, இலக்கங்களின் கூட்டுத்தொகை 6 ஆகவும், வெளியீடு \"110\" ஆகவும் இருக்க வேண்டும். \nN = 147 க்கு, இலக்கங்களின் கூட்டுத்தொகை 12 ஆகவும், வெளியீடு \"1100\" ஆகவும் இருக்க வேண்டும். \n\nமாறுபாடுகள்ஃ \n@N முழு எண் \nகட்டுப்பாடுகள்ஃ 0 ≤ N ≤ 10000. \nவெளியீடுஃ \nபைனரி எண்ணின் சரம்", "entry_point": "solve", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/37", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],1);\nlet expected_1 = [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],2);\nlet expected_2 = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],1);\nlet expected_3 = [[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = get_row([],1);\nlet expected_4 = [];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = get_row([[1]],2);\nlet expected_5 = [];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = get_row([[], [1], [1, 2, 3]],3);\nlet expected_6 = [[2, 2]];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியல்களாக வழங்கப்படுகிறது, \nஇது மேட்ரிக்ஸைப் போன்றது, இருப்பினும், மேட்ரிக்ஸ்களைப் போலல்லாமல், \nஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். \nகொடுக்கப்பட்ட lst மற்றும் முழு எண் x, பட்டியலில் உள்ள x முழு எண்களைக் கண்டறியவும், \nமற்றும் டப்பிள்களின் திரும்பும் பட்டியல், [(x1, y1), (x2, y2)...] \nஒவ்வொரு டுபிலும் ஒரு ஒருங்கிணைப்பு-(வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. \nஏறுவரிசையில் வரிசைகளால் ஆரம்பத்தில் ஆயங்களை வரிசைப்படுத்துங்கள். \nமேலும், வரிசையின் ஆயத்தொகுதிகளை நெடுவரிசைகளால் இறங்கு வரிசையில் வரிசைப்படுத்துங்கள். \n\nஉதாரணங்கள்ஃ \nவரிசை பெறு (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nபெற _ வரிசை ([], 1) = = [] \nபெற _ வரிசை ([[], [1], [1,2,3]], 3) = = [(2,2)]", "entry_point": "get_row", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/38", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = next_smallest([1, 2, 3, 4, 5]);\nlet expected_1 = 2;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = next_smallest([5, 1, 4, 3, 2]);\nlet expected_2 = 2;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = next_smallest([]);\nlet expected_3 = undefined;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = next_smallest([1, 1]);\nlet expected_4 = undefined;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = next_smallest([1, 1, 1, 1, 0]);\nlet expected_5 = 1;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = next_smallest([1, 1]);\nlet expected_6 = undefined;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = next_smallest([-35, 34, 12, -45]);\nlet expected_7 = -35;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nபட்டியலின் 2 வது மிகச்சிறிய உறுப்பைத் தரும் அடுத்த _ மிகச்சிறிய () செயல்பாட்டை எழுதுங்கள். \nஅத்தகைய உறுப்பு இல்லையென்றால் பூஜ்யத்தைத் திருப்பவும். \n\nஅடுத்தது _ மிகச்சிறியது ([1,2,3,4,5]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([5,1,4,3,2]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([]) = = எதுவும் இல்லை \nஅடுத்தது _ மிகச்சிறியது ([1,1]) = = எதுவும் இல்லை", "entry_point": "next_smallest", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/39", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_bored(\"Hello world\");\nlet expected_1 = 0;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_bored(\"Is the sky blue?\");\nlet expected_2 = 0;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_bored(\"I love It !\");\nlet expected_3 = 1;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_bored(\"bIt\");\nlet expected_4 = 0;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_bored(\"I feel good today. I will be productive. will kill It\");\nlet expected_5 = 2;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_bored(\"You and I are going for a walk\");\nlet expected_6 = 0;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு வார்த்தைகளின் சரம் வழங்கப்படும், மேலும் உங்கள் பணி எண்ணிக்கையை எண்ணுவதாகும். \nசலிப்பு. சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். \nவாக்கியங்கள் '.', '?'அல்லது '!'ஆகியவற்றால் வரையறுக்கப்படுகின்றன. \n\nஉதாரணத்திற்குஃ \n>>> பரவாயில்லை (\"ஹலோ வேர்ல்ட்\") \n0 \n>>> பரவாயில்லை (\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. எனக்கு இந்த வானிலை பிடிக்கும்\") \n1.", "entry_point": "is_bored", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/40", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]);\nlet expected_1 = 10;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]);\nlet expected_2 = 25;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]);\nlet expected_3 = 13;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]);\nlet expected_4 = 11;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = skjkasdkd([0, 81, 12, 3, 1, 21]);\nlet expected_5 = 3;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = skjkasdkd([0, 8, 1, 2, 1, 7]);\nlet expected_6 = 7;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = skjkasdkd([8191]);\nlet expected_7 = 19;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = skjkasdkd([8191, 123456, 127, 7]);\nlet expected_8 = 19;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = skjkasdkd([127, 97, 8192]);\nlet expected_9 = 10;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nநீங்கள் மிகப்பெரிய பகா மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] க்கு வெளியீடு 10 ஆக இருக்க வேண்டும். \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] க்கு வெளியீடு 25 ஆக இருக்க வேண்டும். \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] க்கு வெளியீடு 13 ஆக இருக்க வேண்டும். \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] க்கு வெளியீடு 11 ஆக இருக்க வேண்டும். \nlst = [0,81,12, 3,1,21] க்கு வெளியீடு 3 ஆக இருக்க வேண்டும். \nlst = [0,8,1, 2,1,7] க்கு வெளியீடு 7 ஆக இருக்க வேண்டும்.", "entry_point": "skjkasdkd", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/41", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = check_dict_case(new Map<any, any>([[\"p\", \"pineapple\"], [\"b\", \"banana\"]]));\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = check_dict_case(new Map<any, any>([[\"p\", \"pineapple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]));\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = check_dict_case(new Map<any, any>([[\"p\", \"pineapple\"], [5, \"banana\"], [\"a\", \"apple\"]]));\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = check_dict_case(new Map<any, any>([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]));\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = check_dict_case(new Map<any, any>([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]));\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = check_dict_case(new Map<any, any>([[\"fruit\", \"Orange\"], [\"taste\", \"Sweet\"]]));\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = check_dict_case(new Map<any, any>([]));\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு அகராதியைக் கொடுத்தால், அனைத்து விசைகளும் கீழே உள்ள சரங்களாக இருந்தால் சரி என்று திருப்பித் தரவும். \nவழக்கு அல்லது அனைத்து விசைகளும் பெரிய வழக்கில் சரங்கள், இல்லையெனில் தவறானது. \nகொடுக்கப்பட்ட அகராதி காலியாக இருப்பதால் செயல்பாடு தவறாக திரும்ப வேண்டும். \nஉதாரணங்கள்ஃ \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"b\": \"வாழைப்பழம்\"}) சரி என்று திரும்ப வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"A\": \"வாழைப்பழம்\", \"B\": \"வாழைப்பழம்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", 8: \"வாழைப்பழம்\", \"a\": \"ஆப்பிள்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"பெயர்\": \"ஜான்\", \"வயது\": \"36\", \"சிட்டி\": \"ஹூஸ்டன்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) சரி என்று திரும்ப வேண்டும்.", "entry_point": "check_dict_case", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/42", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = closest_integer(\"10\");\nlet expected_1 = 10;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = closest_integer(\"14.5\");\nlet expected_2 = 15;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = closest_integer(\"-15.5\");\nlet expected_3 = -16;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = closest_integer(\"15.3\");\nlet expected_4 = 15;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = closest_integer(\"0\");\nlet expected_5 = 0;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு எண்ணைக் குறிக்கும் மதிப்பை (சரம்) எடுக்கும் செயல்பாட்டை உருவாக்கவும் \nஅதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தருகிறது. எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். \n\nஉதாரணங்கள் \n>>> நெருங்கிய முழு எண் (\"10\") \n10. \n>>> நெருங்கிய முழு எண் (\"15.3\") \n15. \n\nகுறிப்புஃ \nபூஜ்ஜியத்திலிருந்து வட்டமிடுவது என்பது கொடுக்கப்பட்ட எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, நீங்கள் திருப்பித் தர வேண்டிய ஒன்று \nபூஜ்ஜியத்திலிருந்து மிகத் தொலைவில் உள்ளது. எடுத்துக்காட்டாக, அருகிலுள்ள முழு எண் (\"14.5\") இருக்க வேண்டும். \n15 ஐத் திருப்பி, அருகிலுள்ள முழு எண் (\"-14.5\")-15 ஐத் திருப்பித் தர வேண்டும்.", "entry_point": "closest_integer", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/43", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = make_a_pile(3);\nlet expected_1 = [3, 5, 7];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = make_a_pile(4);\nlet expected_2 = [4, 6, 8, 10];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = make_a_pile(5);\nlet expected_3 = [5, 7, 9, 11, 13];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = make_a_pile(6);\nlet expected_4 = [6, 8, 10, 12, 14, 16];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = make_a_pile(8);\nlet expected_5 = [8, 10, 12, 14, 16, 18, 20, 22];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலைகளின் கற்களின் குவியலை உருவாக்க வேண்டும். \nமுதல் மட்டத்தில் n கற்கள் உள்ளன. \nஅடுத்த கட்டத்தில் உள்ள கற்களின் எண்ணிக்கை பின்வருமாறுஃ \n- n ஒற்றைப்படை என்றால் அடுத்த ஒற்றைப்படை எண். \n- n சமமாக இருந்தால் அடுத்த சம எண். \nஒரு பட்டியலில் உள்ள ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் திருப்பித் தரவும், அங்கு குறியீட்டில் உள்ள உறுப்பு \ni என்பது மட்டத்தில் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது (i + 1). \n\nஉதாரணங்கள்ஃ \n>>> ஒரு குவியலை உருவாக்குங்கள் (3) \n[3,5,7]", "entry_point": "make_a_pile", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/44", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = words_string(\"Hi, my name is John\");\nlet expected_1 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = words_string(\"One, two, three, four, five, six\");\nlet expected_2 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = words_string(\"Hi, my name\");\nlet expected_3 = [\"Hi\", \"my\", \"name\"];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = words_string(\"One,, two, three, four, five, six,\");\nlet expected_4 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = words_string(\"\");\nlet expected_5 = [];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = words_string(\"ahmed     , gamal\");\nlet expected_6 = [\"ahmed\", \"gamal\"];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட சொற்களின் சரம் உங்களுக்கு வழங்கப்படும். உங்கள் பணி \nசரத்தை வார்த்தைகளாகப் பிரிக்கவும், சொற்களின் வரிசையைத் திருப்பவும். \n\nஉதாரணத்திற்குஃ \nசொற்கள் _ சரம் (\"ஹாய், என் பெயர் ஜான்\") = = [\"ஹாய்\", \"என்\", \"பெயர்\", \"\", ஜான் \"] \nசொற்கள் _ சரம் (\"ஒன்று, இரண்டு, மூன்று, நான்கு, ஐந்து, ஆறு\") = = [\"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\"]", "entry_point": "words_string", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/45", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = choose_num(12,15);\nlet expected_1 = 14;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = choose_num(13,12);\nlet expected_2 = -1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = choose_num(33,12354);\nlet expected_3 = 12354;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = choose_num(5234,5233);\nlet expected_4 = -1;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = choose_num(6,29);\nlet expected_5 = 28;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = choose_num(27,10);\nlet expected_6 = -1;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = choose_num(7,7);\nlet expected_7 = -1;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = choose_num(546,546);\nlet expected_8 = 546;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\n", "language": "typescript", "description": "இந்த சார்பு x மற்றும் y என்ற இரண்டு நேர்மறை எண்களை எடுத்து, \n[x, y] வரம்பில் உள்ள மிகப் பெரிய இரட்டை முழு எண். \nஅத்தகைய எண் இல்லை, பின்னர் செயல்பாடு-1 ஐத் திருப்ப வேண்டும். \n\nஉதாரணத்திற்குஃ \nதேர்வு செய்க (12,15) = 14 \nதேர்வு செய்க (13,12) =-1", "entry_point": "choose_num", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/46", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = rounded_avg(1,5);\nlet expected_1 = \"0b11\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = rounded_avg(7,13);\nlet expected_2 = \"0b1010\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = rounded_avg(964,977);\nlet expected_3 = \"0b1111001010\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = rounded_avg(996,997);\nlet expected_4 = \"0b1111100100\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = rounded_avg(560,851);\nlet expected_5 = \"0b1011000010\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = rounded_avg(185,546);\nlet expected_6 = \"0b101101110\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = rounded_avg(362,496);\nlet expected_7 = \"0b110101101\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = rounded_avg(350,902);\nlet expected_8 = \"0b1001110010\";\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = rounded_avg(197,233);\nlet expected_9 = \"0b11010111\";\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = rounded_avg(7,5);\nlet expected_10 = -1;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = rounded_avg(5,1);\nlet expected_11 = -1;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = rounded_avg(5,5);\nlet expected_12 = \"0b101\";\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m வழங்கப்படுகின்றன, மேலும் உங்கள் பணி கணக்கிடுவதாகும் \nn முதல் m வரையிலான முழு எண்களின் சராசரி (n மற்றும் m உட்பட). \nஅருகிலுள்ள முழு எண்ணுக்கு பதிலை வட்டமிட்டு அதை பைனரியாக மாற்றவும். \nn என்பது m ஐ விட அதிகமாக இருந்தால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணம்ஃ \nவட்டமான _ avg (1,5) => \"0b11\" \nவட்டமான (7,5) =>-1 \nவட்டமான _ அவ்ஜி (10,20) => \"0பி1111\" \nவட்டமான _ avg (20,33) => \"0b11010\"", "entry_point": "rounded_avg", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/47", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = f(5);\nlet expected_1 = [1, 2, 6, 24, 15];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = f(7);\nlet expected_2 = [1, 2, 6, 24, 15, 720, 28];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = f(1);\nlet expected_3 = [1];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = f(3);\nlet expected_4 = [1, 2, 6];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "n ஐ ஒரு அளவுருவாக எடுக்கும் f செயல்பாட்டை செயல்படுத்தவும், \nமற்றும் அளவு n இன் பட்டியலைத் திருப்பித் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணியாக இருந்தால் i சமமாக இருந்தால் \nஅல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை. \nநான் 1 இல் தொடங்குகிறேன். \ni இன் காரணி என்பது 1 முதல் i (1 * 2 *... * i) வரையிலான எண்களின் பெருக்கமாகும். \nஉதாரணம்ஃ \nf (5) = = [1,2,6,24,15]", "entry_point": "f", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/48", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = even_odd_palindrome(123);\nlet expected_1 = [8, 13];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = even_odd_palindrome(12);\nlet expected_2 = [4, 6];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = even_odd_palindrome(3);\nlet expected_3 = [1, 2];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = even_odd_palindrome(63);\nlet expected_4 = [6, 8];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = even_odd_palindrome(25);\nlet expected_5 = [5, 6];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = even_odd_palindrome(19);\nlet expected_6 = [4, 6];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = even_odd_palindrome(9);\nlet expected_7 = [4, 5];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = even_odd_palindrome(1);\nlet expected_8 = [0, 1];\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், சம மற்றும் ஒற்றைப்படை எண்ணிக்கையைக் கொண்ட ஒரு டுபிலைத் திருப்பவும் \n(1, n) வரம்பிற்குள் வரும் முழு எண் பாலிண்ட்ரோம்கள் உட்பட. \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ 3 \nவெளியீடுஃ (1,2) \nவிளக்கம்ஃ \nமுழு எண் பாலிண்ட்ரோம் 1,2,3. அவற்றில் ஒன்று சமம், அவற்றில் இரண்டு ஒற்றைப்படை. \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ 12 \nவெளியீடுஃ (4,6) \nவிளக்கம்ஃ \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவற்றில் நான்கு சமமானவை, அவற்றில் 6 ஒற்றைப்படை. \n\nகுறிப்புஃ \n1. 1 <= n <= 10 3 \n2. திரும்பிய டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு எண் பாலிண்ட்ரோம்களின் எண்ணிக்கையைக் கொண்டுள்ளது.", "entry_point": "even_odd_palindrome", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/49", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = move_one_ball([3, 4, 5, 1, 2]);\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = move_one_ball([3, 5, 10, 1, 2]);\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = move_one_ball([4, 3, 1, 2]);\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = move_one_ball([3, 5, 4, 1, 2]);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = move_one_ball([]);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "நம்மிடம் n முழு எண்களின் வரிசை'arr'உள்ளது arr [1], arr [2],..., arr [N]. \nவரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். என்பதைத் தீர்மானிப்பதே உங்கள் பணி \nசெயல்பாட்டின் மூலம் ஒரு வரிசையை குறைக்காத வரிசையில் வரிசைப்படுத்த முடியும் \nகொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ \nஎத்தனை முறை வேண்டுமானாலும் சரியான ஷிப்ட் செயல்பாட்டைச் செய்ய நீங்கள் அனுமதிக்கப்படுகிறீர்கள். \n\nஒரு வலது ஷிப்ட் செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் ஒன்றால் மாற்றுவதாகும். \nசரியான திசையில் நிலை. வரிசையின் கடைசி உறுப்பு நகர்த்தப்படும் \nவரிசையில் தொடக்க நிலை அதாவது 0 வது குறியீடு. \n\nமேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் \nபின்னர் ட்ரு இல்லையெனில் ஃபால்ஸ் என்று திருப்பிக் கொடுங்கள். \nகொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், சரி என்று திருப்பி விடுங்கள். \n\nகுறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பது உறுதி செய்யப்படுகிறது. \n\nஉதாரணத்திற்குஃ \n\nமூவ் ஒன் பந்து ([3,4,5,1,2]) = => உண்மை \nவிளக்கம்ஃ 2 வலது ஷிப்ட் செயல்பாடுகளில் செயல்படுவதன் மூலம், குறைக்கப்படாத வரிசை முடியும் \nகொடுக்கப்பட்ட வரிசைக்கு அடைய வேண்டும். \nமூவ் ஒன் பந்து ([3,5,4,1,2]) = => பொய் \nவிளக்கம்ஃ கொடுக்கப்பட்ட ஆர்டருக்கு குறைக்கப்படாத ஆர்டரைப் பெற முடியாது \nஎந்த எண்ணிக்கையிலான சரியான ஷிப்ட் செயல்பாடுகளைச் செய்வதன் மூலம் வரிசை.", "entry_point": "move_one_ball", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/50", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = exchange([1, 2, 3, 4],[1, 2, 3, 4]);\nlet expected_1 = \"YES\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = exchange([1, 2, 3, 4],[1, 5, 3, 4]);\nlet expected_2 = \"NO\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = exchange([1, 2, 3, 4],[2, 1, 4, 3]);\nlet expected_3 = \"YES\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = exchange([5, 7, 3],[2, 6, 4]);\nlet expected_4 = \"YES\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = exchange([5, 7, 3],[2, 6, 3]);\nlet expected_5 = \"NO\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = exchange([3, 2, 6, 1, 8, 9],[3, 5, 5, 1, 1, 1]);\nlet expected_6 = \"NO\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = exchange([100, 200],[200, 200]);\nlet expected_7 = \"YES\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "இந்த சிக்கலில், எண்களின் இரண்டு பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை நீங்கள் செயல்படுத்துவீர்கள், \nமற்றும் கூறுகளின் பரிமாற்றத்தை செய்ய முடியுமா என்பதை தீர்மானிக்கிறது \nஅவர்களிடையே lst1 ஐ இரட்டை எண்களின் பட்டியலை மட்டுமே உருவாக்க வேண்டும். \nlst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. \nசெய்ய lst1 மற்றும் lst2 க்கு இடையில் கூறுகளை பரிமாறிக்கொள்ள முடிந்தால் \nlst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"ஆம்\" என்று திருப்பித் தரவும். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஉதாரணத்திற்குஃ \nபரிமாற்றம் ([1,2,3,4], [1,2,3,4]) => \"ஆம்\" \nபரிமாற்றம் ([1,2,3,4], [1,5,3,4]) => \"இல்லை\" \nஉள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.", "entry_point": "exchange", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/51", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = reverse_delete(\"abcde\",\"ae\");\nlet expected_1 = [\"bcd\", false];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = reverse_delete(\"abcdef\",\"b\");\nlet expected_2 = [\"acdef\", false];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = reverse_delete(\"abcdedcba\",\"ab\");\nlet expected_3 = [\"cdedc\", true];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = reverse_delete(\"dwik\",\"w\");\nlet expected_4 = [\"dik\", false];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = reverse_delete(\"a\",\"a\");\nlet expected_5 = [\"\", true];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = reverse_delete(\"abcdedcba\",\"\");\nlet expected_6 = [\"abcdedcba\", true];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = reverse_delete(\"abcdedcba\",\"v\");\nlet expected_7 = [\"abcdedcba\", true];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = reverse_delete(\"vabba\",\"v\");\nlet expected_8 = [\"abba\", true];\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = reverse_delete(\"mamma\",\"mia\");\nlet expected_9 = [\"\", true];\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "பணி \nஎங்களுக்கு இரண்டு சரங்கள் s மற்றும் c வழங்கப்பட்டுள்ளன, c இல் உள்ள எந்த எழுத்துக்கும் சமமான s இல் உள்ள அனைத்து எழுத்துக்களையும் நீங்கள் நீக்க வேண்டும். \nபின்னர் ரிசல்ட் ஸ்ட்ரிங் பாலிண்ட்ரோமா என்பதைச் சரிபார்க்கவும். \nஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. \nகாசோலைக்கு முடிவு சரம் மற்றும் உண்மை/தவறு ஆகியவற்றைக் கொண்ட ஒரு டப்பிளை நீங்கள் திருப்பித் தர வேண்டும். \nஉதாரணம் \nஎஸ் = \"ஏபிசிடிஇ\", சி = \"ஏஇ\" க்கு, முடிவு ('பிசிடி', தவறானது) ஆக இருக்க வேண்டும். \ns = \"abcdef\", c = \"b\" க்கு முடிவு ('acdef', பொய்) ஆக இருக்க வேண்டும். \ns = \"abcdedcba\", c = \"ab\" க்கு, முடிவு ('cdedc', உண்மை) ஆக இருக்க வேண்டும்.", "entry_point": "reverse_delete", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/52", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],1);\nlet expected_1 = 6;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],2);\nlet expected_2 = 5;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = max_fill([[0, 0, 0], [0, 0, 0]],5);\nlet expected_3 = 0;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = max_fill([[1, 1, 1, 1], [1, 1, 1, 1]],2);\nlet expected_4 = 4;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = max_fill([[1, 1, 1, 1], [1, 1, 1, 1]],9);\nlet expected_5 = 2;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு செவ்வக கிணறு கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றைக் குறிக்கிறது. \nஒரு வரிசையில் உள்ள ஒவ்வொன்றும் ஒரு ஒற்றை அலகு தண்ணீரைக் குறிக்கிறது. \nஒவ்வொரு கிணற்றிலும் அதனுடன் தொடர்புடைய ஒரு வாளி உள்ளது, அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்க இது பயன்படுத்தப்படலாம். \nமேலும் அனைத்து வாளிகளும் ஒரே மாதிரியான திறனைக் கொண்டுள்ளன. \nகிணறுகளை காலி செய்ய வாளிகளைப் பயன்படுத்துவதே உங்கள் பணி. \nநீங்கள் வாளிகளைக் குறைக்க வேண்டிய எண்ணிக்கையை உள்ளிடவும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nவாளி திறன் (_ c): 1 \nவெளியீடுஃ 6 \n\nஉதாரணம் 2: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1] \nவாளி திறன் (_ c): 2 \nவெளியீடுஃ 5 \n\nஉதாரணம் 3: \nஉள்ளீடுஃ \nகட்டம்ஃ [0,0,0], [0,0,0] \nவாளி திறன்ஃ 5 \nவெளியீடுஃ 0 \n\nகட்டுப்பாடுகள்ஃ \n* அனைத்து கிணறுகளுக்கும் ஒரே நீளம் இருக்கும். \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= கட்டம் [:, 1]. நீளம் <= 10 ^ 2 \nகட்டம் [i] [j]-> 0 | 1 \n* 1 <= திறன் <= 10", "entry_point": "max_fill", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/53", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = select_words(\"Mary had a little lamb\",4);\nlet expected_1 = [\"little\"];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = select_words(\"Mary had a little lamb\",3);\nlet expected_2 = [\"Mary\", \"lamb\"];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = select_words(\"simple white space\",2);\nlet expected_3 = [];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = select_words(\"Hello world\",4);\nlet expected_4 = [\"world\"];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = select_words(\"Uncle sam\",3);\nlet expected_5 = [\"Uncle\"];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = select_words(\"\",4);\nlet expected_6 = [];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = select_words(\"a b c d e f\",1);\nlet expected_7 = [\"b\", \"c\", \"d\", \"f\"];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிக்கப்பட்டுள்ளீர்கள் \nசரம் s இலிருந்து அனைத்து சொற்களின் பட்டியலையும் சரியாக உள்ளடக்கிய ஒரு செயல்பாடு \nn மெய், வரிசையில் இந்த சொற்கள் சரம் s இல் தோன்றும். \nசரம் s காலியாக இருந்தால், செயல்பாடு ஒரு வெற்று பட்டியலைத் திருப்பித் தர வேண்டும். \nகுறிப்புஃ உள்ளீட்டு சரத்தில் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே உள்ளன என்று நீங்கள் கருதலாம். \nஉதாரணங்கள்ஃ \nதேர்ந்தெடுக்கும் சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) = => [\"சிறிய\"] \nதேர்ந்தெடுக்கப்பட்ட சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) = => [\"மேரி\", \"ஆட்டுக்குட்டி\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"எளிய வெள்ளை இடம்\", 2) = => [] \nதேர்ந்தெடுக்கும் சொற்கள் (\"ஹலோ வேர்ல்ட்\", 4) = => [\"வேர்ல்ட்\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"மாமா சாம்\", 3) = => [\"மாமா\"]", "entry_point": "select_words", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/54", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = maximum([-3, -4, 5],3);\nlet expected_1 = [-4, -3, 5];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = maximum([4, -4, 4],2);\nlet expected_2 = [4, 4];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = maximum([-3, 2, 1, 2, -1, -2, 1],1);\nlet expected_3 = [2];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = maximum([123, -123, 20, 0, 1, 2, -3],3);\nlet expected_4 = [2, 20, 123];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = maximum([-123, 20, 0, 1, 2, -3],4);\nlet expected_5 = [0, 1, 2, 20];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = maximum([5, 15, 0, 3, -13, -8, 0],7);\nlet expected_6 = [-13, -8, 0, 0, 3, 5, 15];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = maximum([-1, 0, 2, 5, 3, -10],2);\nlet expected_7 = [3, 5];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = maximum([1, 0, 5, -7],1);\nlet expected_8 = [5];\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = maximum([4, -4],2);\nlet expected_9 = [-4, 4];\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = maximum([-10, 10],2);\nlet expected_10 = [-10, 10];\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = maximum([1, 2, 3, -23, 243, -400, 0],0);\nlet expected_11 = [];\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\n", "language": "typescript", "description": "முழு எண்களின் வரிசை arr மற்றும் நேர்மறை முழு எண் k கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பித் தரவும். \narr இல் அதிகபட்ச k எண்களுடன் k நீளம். \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ arr = [-3,-4,5], k = 3 \nவெளியீடுஃ [-4,-3,5] \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ arr = [4,-4,4], k = 2 \nவெளியீடுஃ [4,4] \n\nஉதாரணம் 3: \n\nஉள்ளீடுஃ arr = [-3,2,1,2,-1,2,1], k = 1 \nவெளியீடுஃ [2] \n\nகுறிப்புஃ \n1. வரிசையின் நீளம் [1000] வரம்பில் இருக்கும். \n2. வரிசையில் உள்ள உறுப்புகள் [-1000] வரம்பில் இருக்கும். \n3. 0 <= k <= லென் (arr)", "entry_point": "maximum", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/55", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99],3);\nlet expected_1 = -4;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = add_elements([111, 121, 3, 4000, 5, 6],2);\nlet expected_2 = 0;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9],4);\nlet expected_3 = 125;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],4);\nlet expected_4 = 24;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = add_elements([1],1);\nlet expected_5 = 1;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்பவும் \narr இன் முதல் k உறுப்புகளிலிருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் கூட்டுத்தொகை. \n\nஉதாரணம்ஃ \n\nஉள்ளீடுஃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nவெளியீடுஃ 24 #21 + 3 இன் கூட்டுத்தொகை \n\nகட்டுப்பாடுகள்ஃ \n1. 1 <= லென் (arr) <= 100 \n2. 1 <= k <= லென் (arr)", "entry_point": "add_elements", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/56", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = intersection([1, 2],[2, 3]);\nlet expected_1 = \"NO\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = intersection([-1, 1],[0, 4]);\nlet expected_2 = \"NO\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = intersection([-3, -1],[-5, 5]);\nlet expected_3 = \"YES\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = intersection([-2, 2],[-4, 0]);\nlet expected_4 = \"YES\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = intersection([-11, 2],[-1, -1]);\nlet expected_5 = \"NO\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = intersection([1, 2],[3, 5]);\nlet expected_6 = \"NO\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = intersection([1, 2],[1, 2]);\nlet expected_7 = \"NO\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = intersection([-2, -2],[-3, -2]);\nlet expected_8 = \"NO\";\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு இரண்டு இடைவெளிகள் வழங்கப்படுகின்றன, \nஇங்கு ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்களாகும். எடுத்துக்காட்டாக, இடைவெளி = (தொடக்கம், முடிவு) = (1,2). \nகொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டுள்ளன, அதாவது இடைவெளி (தொடக்கம், முடிவு) \nஇதில் தொடக்கமும் முடிவும் அடங்கும். \nகொடுக்கப்பட்ட ஒவ்வொரு இடைவெளியிலும், அதன் தொடக்கம் அதன் முடிவை விட குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது. \nஇந்த இரண்டின் குறுக்குவெட்டின் நீளம் எவ்வளவு என்பதைத் தீர்மானிப்பதே உங்கள் பணி. \nஇடைவெளிகள் ஒரு பகா எண். \nஎடுத்துக்காட்டாக, (1,3), (2,4) இடைவெளிகளின் குறுக்குவெட்டு (2,3) ஆகும். \nஅதன் நீளம் 1, இது ஒரு பகா எண் அல்ல. \nகுறுக்குவெட்டின் நீளம் ஒரு பகா எண்ணாக இருந்தால், \"ஆம்\" என்று திருப்பிக் கொடுங்கள். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஇரண்டு இடைவெளிகளும் வெட்டவில்லை என்றால், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \n\n[உள்ளீடு/வெளியீடு] மாதிரிகள்ஃ \nகுறுக்குவெட்டு ((1,2,3)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-1,1), (0,4)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-3,-1), (-5,5)) = => \"ஆம்\"", "entry_point": "intersection", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/57", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = tri(3);\nlet expected_1 = [1, 3, 2.0, 8.0];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = tri(4);\nlet expected_2 = [1, 3, 2.0, 8.0, 3.0];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = tri(5);\nlet expected_3 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = tri(6);\nlet expected_4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = tri(7);\nlet expected_5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = tri(8);\nlet expected_6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = tri(9);\nlet expected_7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = tri(20);\nlet expected_8 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = tri(0);\nlet expected_9 = [1];\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = tri(1);\nlet expected_10 = [1, 3];\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\n", "language": "typescript", "description": "எல்லோருக்கும் ஃபிபோனாச்சி வரிசை தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது \nகடந்த இரண்டு நூற்றாண்டுகள். இருப்பினும், மக்களுக்குத் தெரியாதது டிரிபோனாச்சி வரிசை. \nடிரிபோனாச்சி வரிசை மீண்டும் மீண்டும் வரையறுக்கப்படுகிறதுஃ \nமுக்கோணம் (1) = 3 \nமுக்கோணம் (n) = 1 + n/2, n சமமாக இருந்தால். \nமுக்கோணம் (n) = முக்கோணம் (n-1) + முக்கோணம் (n-2) + முக்கோணம் (n + 1), n ஒற்றைப்படை என்றால். \nஉதாரணத்திற்குஃ \nமுக்கோணம் (2) = 1 + (2/2) = 2 \nமுக்கோணம் (4) = 3 \nமுக்கோணம் (3) = முக்கோணம் (2) + முக்கோணம் (1) + முக்கோணம் (4) \n= 2 + 3 + 3 = 8 \nஉங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n வழங்கப்படுகிறது, நீங்கள் ஒரு பட்டியலைத் திருப்பித் தர வேண்டும் \nடிரிபோனாச்சி வரிசையின் முதல் n + 1 எண்கள். \nஉதாரணங்கள்ஃ \nமுக்கோணம் (3) = [1,3,2,8]", "entry_point": "tri", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/58", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = digits(5);\nlet expected_1 = 5;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = digits(54);\nlet expected_2 = 5;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = digits(120);\nlet expected_3 = 1;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = digits(5014);\nlet expected_4 = 5;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = digits(98765);\nlet expected_5 = 315;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = digits(5576543);\nlet expected_6 = 2625;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = digits(2468);\nlet expected_7 = 0;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றைப்படை இலக்கங்களின் பெருக்கல் திரும்பும். \nஅனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பவும். \nஉதாரணத்திற்குஃ \nஇலக்கங்கள் (1) = = 1 \nஇலக்கங்கள் (4) = = 0 \nஇலக்கங்கள் (235) = = 15", "entry_point": "digits", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/59", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = is_nested(\"[[]]\");\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = is_nested(\"[]]]]]]][[[[[]\");\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = is_nested(\"[][]\");\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = is_nested(\"[]\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = is_nested(\"[[[[]]]]\");\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = is_nested(\"[]]]]]]]]]]\");\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = is_nested(\"[][][[]]\");\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = is_nested(\"[[]\");\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = is_nested(\"[]]\");\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = is_nested(\"[[]][[\");\nlet expected_10 = true;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = is_nested(\"[[][]]\");\nlet expected_11 = true;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = is_nested(\"\");\nlet expected_12 = false;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = is_nested(\"[[[[[[[[\");\nlet expected_13 = false;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\nlet actual_14 = is_nested(\"]]]]]]]]\");\nlet expected_14 = false;\nassert.deepEqual(actual_14, expected_14, \"Exception --- test case 13 failed to pass\");\n\n", "language": "typescript", "description": "சதுர அடைப்புகளை மட்டுமே கொண்ட ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். \nஅடைப்புக்குறிகளின் செல்லுபடியாகும் பின்தொடர்தல் இருந்தால் மட்டுமே செயல்பாடு உண்மை என்று திரும்ப வேண்டும் \nஅங்கு அடுத்தடுத்த குறைந்தபட்சம் ஒரு அடைப்புக்குறிப்பு கூடு கட்டப்பட்டுள்ளது. \n\nnested ('[[]]') என்பது உண்மை \nis _ nested ('[]]]]] [[[[]') பொய் \nis _ nested ('[] []') பொய் \nis _ nested ('[]') என்பது தவறானது \nnested ('[[] []]') என்பது உண்மை \nnested ('[[]] [[') என்பது உண்மை", "entry_point": "is_nested", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/60", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = sum_squares([1, 2, 3]);\nlet expected_1 = 14;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = sum_squares([1.0, 2, 3]);\nlet expected_2 = 14;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = sum_squares([1, 3, 5, 7]);\nlet expected_3 = 84;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = sum_squares([1.4, 4.2, 0]);\nlet expected_4 = 29;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = sum_squares([-2.4, 1, 1]);\nlet expected_5 = 6;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = sum_squares([100, 1, 15, 2]);\nlet expected_6 = 10230;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = sum_squares([10000, 10000]);\nlet expected_7 = 200000000;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = sum_squares([-1.4, 4.6, 6.3]);\nlet expected_8 = 75;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = sum_squares([-1.4, 17.9, 18.9, 19.9]);\nlet expected_9 = 1086;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = sum_squares([0]);\nlet expected_10 = 0;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = sum_squares([-1]);\nlet expected_11 = 1;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = sum_squares([-1, 1, 0]);\nlet expected_12 = 2;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nகொடுக்கப்பட்ட பட்டியலில் உள்ள வர்க்க எண்களின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும், \nபட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் முதலில் மேல் உள்ளீடு (உச்சவரம்பு) க்கு சுற்றவும். \nஉதாரணங்கள்ஃ \nlst = [1,2,3] க்கு வெளியீடு 14 ஆக இருக்க வேண்டும். \nlst = [1,4,9] க்கு வெளியீடு 98 ஆக இருக்க வேண்டும். \nlst = [1,3,5, 7] க்கு வெளியீடு 84 ஆக இருக்க வேண்டும். \nlst = [1.4,4.2, 0] க்கு வெளியீடு 29 ஆக இருக்க வேண்டும். \nlst = [-2.4,1, 1] க்கு வெளியீடு 6 ஆக இருக்க வேண்டும்.", "entry_point": "sum_squares", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/61", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = check_if_last_char_is_a_letter(\"apple\");\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = check_if_last_char_is_a_letter(\"apple pi e\");\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = check_if_last_char_is_a_letter(\"eeeee\");\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = check_if_last_char_is_a_letter(\"A\");\nlet expected_4 = true;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = check_if_last_char_is_a_letter(\"Pumpkin pie \");\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = check_if_last_char_is_a_letter(\"Pumpkin pie 1\");\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = check_if_last_char_is_a_letter(\"\");\nlet expected_7 = false;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = check_if_last_char_is_a_letter(\"eeeee e \");\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = check_if_last_char_is_a_letter(\"apple pie\");\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = check_if_last_char_is_a_letter(\"apple pi e \");\nlet expected_10 = false;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\n", "language": "typescript", "description": "கடைசி எழுத்து இருந்தால் சரி என்று திரும்பும் செயல்பாட்டை உருவாக்கவும் \nகொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை \nஒரு வார்த்தையின் ஒரு பகுதி, இல்லையெனில் பொய். \nகுறிப்புஃ \"சொல்\" என்பது இடத்தால் பிரிக்கப்பட்ட எழுத்துக்களின் தொகுப்பாகும். \n\nஉதாரணங்கள்ஃ \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ ஒரு _ எழுத்து (\"ஆப்பிள் பை\") \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") சரி \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") பொய் \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"\") பொய்", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/62", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = can_arrange([1, 2, 4, 3, 5]);\nlet expected_1 = 3;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = can_arrange([1, 2, 4, 5]);\nlet expected_2 = -1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = can_arrange([1, 4, 2, 5, 6, 7, 8, 9, 10]);\nlet expected_3 = 2;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = can_arrange([4, 8, 5, 7, 3]);\nlet expected_4 = 4;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = can_arrange([]);\nlet expected_5 = -1;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு தனிமத்தின் மிகப்பெரிய குறியீட்டைத் தரும் செயல்பாட்டை உருவாக்கவும் \nஅது உடனடியாக அதற்கு முந்தைய உறுப்பை விட பெரியதாகவோ அல்லது சமமாகவோ இல்லை. \nஅத்தகைய உறுப்பு எதுவும் இல்லை, பின்னர் திரும்பும்-1. கொடுக்கப்பட்ட வரிசை கொண்டிருக்காது \nஇரட்டை மதிப்புகள். \n\nஉதாரணங்கள்ஃ \ncan _ அரங்கேற்றலாம் ([1,2,4, 3,5]) = 3 \nசெய்ய முடியும் ([1,2,3]) =-1", "entry_point": "can_arrange", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/63", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = largest_smallest_integers([2, 4, 1, 3, 5, 7]);\nlet expected_1 = [undefined, 1];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]);\nlet expected_2 = [undefined, 1];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]);\nlet expected_3 = [-2, 1];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]);\nlet expected_4 = [-7, 2];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]);\nlet expected_5 = [-9, 2];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = largest_smallest_integers([]);\nlet expected_6 = [undefined, undefined];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = largest_smallest_integers([0]);\nlet expected_7 = [undefined, undefined];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = largest_smallest_integers([-1, -3, -5, -6]);\nlet expected_8 = [-1, undefined];\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = largest_smallest_integers([-1, -3, -5, -6, 0]);\nlet expected_9 = [-1, undefined];\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = largest_smallest_integers([-6, -4, -4, -3, 1]);\nlet expected_10 = [-3, 1];\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = largest_smallest_integers([-6, -4, -4, -3, -100, 1]);\nlet expected_11 = [-3, 1];\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு டுபில் (a, b) ஐத் தரும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு'a'என்பது \nஎதிர்மறை முழு எண்களில் மிகப் பெரியது, மற்றும்'b'மிகச்சிறியது \nஒரு பட்டியலில் நேர்மறை முழு எண்கள். \nஎதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை இல்லை என்று திருப்பித் தரவும். \n\nஉதாரணங்கள்ஃ \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([2,4,1,3,5,7]) = = (எதுவும் இல்லை, 1) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([]) = = (எதுவும் இல்லை, எதுவும் இல்லை) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([0]) = = (எதுவும் இல்லை, எதுவும் இல்லை)", "entry_point": "largest_smallest_integers", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/64", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = special_factorial(4);\nlet expected_1 = 288;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = special_factorial(5);\nlet expected_2 = 34560;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = special_factorial(7);\nlet expected_3 = 125411328000;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = special_factorial(1);\nlet expected_4 = 1;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nபிரேசில் _ காரணி (n) = n! * (n-1)! * (n-2)! *... * 1! \nஇங்கு n> 0 \n\nஉதாரணத்திற்குஃ \n>>> சிறப்பு _ காரணி (4) \n288 \n\nசெயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும், மேலும் சிறப்புத் தொகையைத் திருப்பித் தர வேண்டும். \nஇந்த முழு எண்ணின் காரணி.", "entry_point": "special_factorial", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/65", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = words_in_sentence(\"This is a test\");\nlet expected_1 = \"is\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = words_in_sentence(\"lets go for swimming\");\nlet expected_2 = \"go for\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = words_in_sentence(\"there is no place available here\");\nlet expected_3 = \"there is no place\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = words_in_sentence(\"Hi I am Hussein\");\nlet expected_4 = \"Hi am Hussein\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = words_in_sentence(\"go for it\");\nlet expected_5 = \"go for it\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = words_in_sentence(\"here\");\nlet expected_6 = \"\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = words_in_sentence(\"here is\");\nlet expected_7 = \"is\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு வாக்கியத்தைக் குறிக்கும் சரம் உங்களுக்கு வழங்கப்படுகிறது, \nவாக்கியத்தில் ஒரு இடைவெளியால் பிரிக்கப்பட்ட சில சொற்கள் உள்ளன, \nஅசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை நீங்கள் திருப்பித் தர வேண்டும், \nஅதன் நீளம் பகா எண்கள், \nபுதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் வரிசையைப் போலவே இருக்க வேண்டும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" \nவெளியீடுஃ \"உள்ளது\" \n\nஉதாரணம் 2: \nஉள்ளீடுஃ வாக்கியம் = \"நீச்சலுக்கு செல்வோம்\" \nவெளியீடுஃ \"செல்லுங்கள்\" \n\nகட்டுப்பாடுகள்ஃ \n* 1 <= லென் (வாக்கியம்) <= 100 \n* வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன", "entry_point": "words_in_sentence", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/66", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = simplify(\"1/5\",\"5/1\");\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = simplify(\"1/6\",\"2/1\");\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = simplify(\"5/1\",\"3/1\");\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = simplify(\"7/10\",\"10/2\");\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = simplify(\"2/10\",\"50/10\");\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = simplify(\"7/2\",\"4/2\");\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = simplify(\"11/6\",\"6/1\");\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = simplify(\"2/3\",\"5/2\");\nlet expected_8 = false;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = simplify(\"5/2\",\"3/5\");\nlet expected_9 = false;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = simplify(\"2/4\",\"8/4\");\nlet expected_10 = true;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = simplify(\"2/4\",\"4/2\");\nlet expected_11 = true;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = simplify(\"1/5\",\"5/1\");\nlet expected_12 = true;\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = simplify(\"1/5\",\"1/5\");\nlet expected_13 = false;\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\n", "language": "typescript", "description": "உங்கள் பணி வெளிப்பாட்டை எளிதாக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவதாகும் \nx * n. x * n ஒரு முழு எண்ணை மதிப்பீடு செய்தால் சரி மற்றும் தவறு என்று செயல்பாடு காட்டும். \nஇல்லையெனில். x மற்றும் n இரண்டும், ஒரு பின்னத்தின் சரம் பிரதிநிதித்துவம் மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, \nஇங்கு எண் மற்றும் வகுத்தல் இரண்டும் நேர்மறை முழு எண்களாகும். \n\nx, மற்றும் n ஆகியவை செல்லுபடியாகும் பின்னங்கள் என்றும், பூஜ்ஜியத்தை வகுப்பாகக் கொண்டிருக்கவில்லை என்றும் நீங்கள் கருதலாம். \n\nஎளிமைப்படுத்தவும் (\"1/5\", \"5/1\") = உண்மை \nஎளிமைப்படுத்துதல் (\"1/6\", \"2/1\") = தவறு \nஎளிமைப்படுத்தவும் (\"7/10\", \"10/2\") = தவறு", "entry_point": "simplify", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/67", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = order_by_points([1, 11, -1, -11, -12]);\nlet expected_1 = [-1, -11, 1, -12, 11];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = order_by_points([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]);\nlet expected_2 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = order_by_points([]);\nlet expected_3 = [];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = order_by_points([1, -11, -32, 43, 54, -98, 2, -3]);\nlet expected_4 = [-3, -32, -98, -11, 1, 2, 43, 54];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nlet expected_5 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = order_by_points([0, 6, 6, -76, -21, 23, 4]);\nlet expected_6 = [-76, -21, 0, 4, 23, 6, 6];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள் \nஅவற்றின் இலக்கங்களின் கூட்டுத்தொகையின்படி ஏறுவரிசையில். \nகுறிப்புஃ பல உருப்படிகள் அவற்றின் இலக்கங்களின் ஒத்த கூட்டுத்தொகையுடன் இருந்தால், \nஅசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை ஆர்டர் செய்யுங்கள். \n\nஉதாரணத்திற்குஃ \n>> வரிசைப் புள்ளிகள் ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ஆர்டர் _ பை _ பாயிண்ட்ஸ் ([]) = = []", "entry_point": "order_by_points", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/68", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = specialFilter([5, -2, 1, -5]);\nlet expected_1 = 0;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = specialFilter([15, -73, 14, -15]);\nlet expected_2 = 1;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = specialFilter([33, -2, -3, 45, 21, 109]);\nlet expected_3 = 2;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = specialFilter([43, -12, 93, 125, 121, 109]);\nlet expected_4 = 4;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = specialFilter([71, -2, -33, 75, 21, 19]);\nlet expected_5 = 3;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = specialFilter([1]);\nlet expected_6 = 0;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = specialFilter([]);\nlet expected_7 = 0;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "எண்களின் வரிசையை உள்ளீடாகவும் திரும்பவும் எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள் \nவரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 க்கும் அதிகமாக உள்ளது மற்றும் இரண்டும் \nஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1,3,5,7,9). \nஉதாரணத்திற்குஃ \nசிறப்பு வடிகட்டி ([15,-73,14,-15]) => 1 \nசிறப்பு வடிகட்டி ([33,-2,-3,45,21,109]) => 2", "entry_point": "specialFilter", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/69", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = get_max_triples(5);\nlet expected_1 = 1;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = get_max_triples(6);\nlet expected_2 = 4;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = get_max_triples(10);\nlet expected_3 = 36;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = get_max_triples(100);\nlet expected_4 = 53361;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீங்கள் n நீளமுள்ள ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும். \nஒவ்வொரு i க்கும் (1 ≤ i ≤ n), a [i] = i * i-i + 1 இன் மதிப்பு. \ni <j <k என்ற இடத்தின் மூன்று மடங்குகளின் (a [i], a [j], a [k]) எண்ணிக்கையைத் திருப்பித் தரவும். \nமேலும் a [i] + a [j] + a [k] என்பது 3 இன் பெருக்கமாகும். \n\nஉதாரணம்ஃ \nஉள்ளீடுஃ n = 5 \nவெளியீடுஃ 1 \nவிளக்கம்ஃ \na = [1,3,7,13,21] \nஒரே செல்லுபடியாகும் மூன்று (1,7,13) ஆகும்.", "entry_point": "get_max_triples", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/70", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = bf(\"Jupiter\",\"Neptune\");\nlet expected_1 = [\"Saturn\", \"Uranus\"];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = bf(\"Earth\",\"Mercury\");\nlet expected_2 = [\"Venus\"];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = bf(\"Mercury\",\"Uranus\");\nlet expected_3 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = bf(\"Neptune\",\"Venus\");\nlet expected_4 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = bf(\"Earth\",\"Earth\");\nlet expected_5 = [];\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = bf(\"Mars\",\"Earth\");\nlet expected_6 = [];\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = bf(\"Jupiter\",\"Makemake\");\nlet expected_7 = [];\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளனஃ சூரியனுக்கு மிக நெருக்கமானவை. \nபுதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, \nயுரேனஸ், நெப்டியூன். \nகிரகம் 1 மற்றும் கிரகம் 2 என இரண்டு கிரக பெயர்களை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள். \nசெயல்பாடு அதன் சுற்றுப்பாதைகள் அனைத்து கிரகங்கள் கொண்ட ஒரு tuple திரும்ப வேண்டும் \nகிரகம் 1 இன் சுற்றுப்பாதைக்கும் கிரகம் 2 இன் சுற்றுப்பாதைக்கும் இடையில் அமைந்துள்ளது, வரிசைப்படுத்தப்பட்டுள்ளது \nசூரியனின் அருகாமை. \nகிரகம் 1 அல்லது கிரகம் 2 என்றால் செயல்பாடு ஒரு வெற்று டப்பிளை திருப்ப வேண்டும் \nகிரகங்களின் பெயர்கள் சரியானவை அல்ல. \nஉதாரணங்கள் \nbf (\"வியாழன்\", \"நெப்டியூன்\") = => (\"சனி\", \"யுரேனஸ்\") \nbf (\"பூமி\", \"புதன்\") = => (\"வீனஸ்\") \nbf (\"புதன்\", \"யுரேனஸ்\") = => (\"வீனஸ்\", \"பூமி\", \"செவ்வாய்\", \"வியாழன்\", \"சனி\")", "entry_point": "bf", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/71", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = x_or_y(7,34,12);\nlet expected_1 = 34;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = x_or_y(15,8,5);\nlet expected_2 = 5;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = x_or_y(3,33,5212);\nlet expected_3 = 33;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = x_or_y(1259,3,52);\nlet expected_4 = 3;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = x_or_y(7919,-1,12);\nlet expected_5 = -1;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = x_or_y(3609,1245,583);\nlet expected_6 = 583;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = x_or_y(91,56,129);\nlet expected_7 = 129;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = x_or_y(6,34,1234);\nlet expected_8 = 1234;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = x_or_y(1,2,0);\nlet expected_9 = 0;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = x_or_y(2,2,0);\nlet expected_10 = 2;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு எளிய நிரல், இது n என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும் \nஒரு பகா எண் மற்றும் இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nx _ அல்லது _ y க்கு (7,34,12) = = 34 \nx _ அல்லது _ y க்கு (15,8,5) = = 5", "entry_point": "x_or_y", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/72", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = double_the_difference([]);\nlet expected_1 = 0;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = double_the_difference([5, 4]);\nlet expected_2 = 25;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = double_the_difference([0.1, 0.2, 0.3]);\nlet expected_3 = 0;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = double_the_difference([-10, -20, -30]);\nlet expected_4 = 0;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = double_the_difference([-1, -2, 8]);\nlet expected_5 = 0;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = double_the_difference([0.2, 3, 5]);\nlet expected_6 = 34;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = double_the_difference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]);\nlet expected_7 = 166650;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\n", "language": "typescript", "description": "எண்களின் பட்டியலைக் கொடுத்தால், எண்களின் வர்க்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். \nஒற்றைப்படை பட்டியலில். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். \n\nஇரட்டை வேறுபாடு ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nஇரட்டை வேறுபாடு ([-1,0]) = = 0 \nஇரட்டை வேறுபாடு ([9,-2]) = = 81 \nஇரட்டை _ தி _ வேறுபாடு ([0]) = = 0 \n\nஉள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பித் தரவும்.", "entry_point": "double_the_difference", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/73", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = Strongest_Extension(\"Watashi\",[\"tEN\", \"niNE\", \"eIGHt8OKe\"]);\nlet expected_1 = \"Watashi.eIGHt8OKe\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = Strongest_Extension(\"Boku123\",[\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]);\nlet expected_2 = \"Boku123.YEs.WeCaNe\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = Strongest_Extension(\"__YESIMHERE\",[\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]);\nlet expected_3 = \"__YESIMHERE.NuLl__\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = Strongest_Extension(\"K\",[\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]);\nlet expected_4 = \"K.TAR\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = Strongest_Extension(\"__HAHA\",[\"Tab\", \"123\", \"781345\", \"-_-\"]);\nlet expected_5 = \"__HAHA.123\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = Strongest_Extension(\"YameRore\",[\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]);\nlet expected_6 = \"YameRore.okIWILL123\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = Strongest_Extension(\"finNNalLLly\",[\"Die\", \"NowW\", \"Wow\", \"WoW\"]);\nlet expected_7 = \"finNNalLLly.WoW\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = Strongest_Extension(\"_\",[\"Bb\", \"91245\"]);\nlet expected_8 = \"_.Bb\";\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = Strongest_Extension(\"Sp\",[\"671235\", \"Bb\"]);\nlet expected_9 = \"Sp.671235\";\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் வழங்கப்படும். \nவகுப்புக்கு கூடுதல் வகுப்புகளை ஏற்றுவதற்கு நீட்டிப்புகள் பயன்படுத்தப்பட வேண்டும். \nநீட்டிப்பின் வலிமை பின்வருமாறுஃ CAP என்பது பெரிய எழுத்தின் எண்ணாக இருக்கட்டும். \nநீட்டிப்பின் பெயரில் உள்ள எழுத்துக்கள், மற்றும் எஸ். எம் சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும் \nநீட்டிப்பின் பெயரில், வலிமை CAP-ஏஸஏம என்ற பின்னத்தால் வழங்கப்படுகிறது. \nநீங்கள் வலுவான நீட்டிப்பைக் கண்டுபிடித்து இதில் ஒரு சரத்தைத் திருப்ப வேண்டும். \nவடிவம்ஃ ClassName.StrongestExtensionName. \nஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், நீங்கள் செய்ய வேண்டும் \nபட்டியலில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும். \nஎடுத்துக்காட்டாக, உங்களுக்கு \"ஸ்லைஸ்கள்\" வகுப்பாகவும் ஒரு பட்டியலாகவும் வழங்கப்பட்டால் \nநீட்டிப்புகள்ஃ ['SERVINGSliCes','சீஸ்','ஸ்டுஃபெட்'] பின்னர் நீங்கள் செய்ய வேண்டும் \n'SERVINGSliCes'வலுவான நீட்டிப்பாக இருப்பதால்'Slices.SErviNGSliCes'ஐத் திருப்பவும் \n(அதன் வலிமை-1). \nஉதாரணம்ஃ \nவலுவான _ நீட்டிப்புக்கு ('எனது _ வகுப்பு', ['AA','Be','CC']) = ='my_class.AA'", "entry_point": "Strongest_Extension", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/74", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = cycpattern_check(\"xyzw\",\"xyw\");\nlet expected_1 = false;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = cycpattern_check(\"yello\",\"ell\");\nlet expected_2 = true;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = cycpattern_check(\"whattup\",\"ptut\");\nlet expected_3 = false;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = cycpattern_check(\"efef\",\"fee\");\nlet expected_4 = true;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = cycpattern_check(\"abab\",\"aabb\");\nlet expected_5 = false;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = cycpattern_check(\"winemtt\",\"tinem\");\nlet expected_6 = true;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு அடி மூலக்கூறாக இருந்தால் நீங்கள் உண்மை என்று திருப்பித் தர வேண்டும். \nசைக்பாடர்ன் _ செக் (\"abcd\", \"abd\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹலோ\", \"எல்\") => உண்மை \nசைக்பேட்டர்ன் _ செக் (\"வஸ்ஸப்\", \"psus\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"அபாப்\", \"பா\") => உண்மை \nசைக்பாடர்ன் _ செக் (\"ஈஃபெஃப்\", \"ஈஃபெஃப்\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹீமென்ஸ்\", \"சைமென்\") => உண்மை", "entry_point": "cycpattern_check", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/75", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = int_to_mini_roman(19);\nlet expected_1 = \"xix\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = int_to_mini_roman(152);\nlet expected_2 = \"clii\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = int_to_mini_roman(251);\nlet expected_3 = \"ccli\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = int_to_mini_roman(426);\nlet expected_4 = \"cdxxvi\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = int_to_mini_roman(500);\nlet expected_5 = \"d\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = int_to_mini_roman(1);\nlet expected_6 = \"i\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = int_to_mini_roman(4);\nlet expected_7 = \"iv\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = int_to_mini_roman(43);\nlet expected_8 = \"xliii\";\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = int_to_mini_roman(90);\nlet expected_9 = \"xc\";\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = int_to_mini_roman(94);\nlet expected_10 = \"xciv\";\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = int_to_mini_roman(532);\nlet expected_11 = \"dxxxii\";\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\nlet actual_12 = int_to_mini_roman(900);\nlet expected_12 = \"cm\";\nassert.deepEqual(actual_12, expected_12, \"Exception --- test case 11 failed to pass\");\n\nlet actual_13 = int_to_mini_roman(994);\nlet expected_13 = \"cmxciv\";\nassert.deepEqual(actual_13, expected_13, \"Exception --- test case 12 failed to pass\");\n\nlet actual_14 = int_to_mini_roman(1000);\nlet expected_14 = \"m\";\nassert.deepEqual(actual_14, expected_14, \"Exception --- test case 13 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு நேர்மறை முழு எண்ணைக் கொடுத்தால், அதன் ரோமானிய எண்ணை ஒரு சரமாக சமமாகப் பெறுங்கள், \nஅதை சிறிய எழுத்தில் திருப்பி விடுங்கள். \nகட்டுப்பாடுகள்ஃ 1 <= எண் <= 1000 \n\nஉதாரணங்கள்ஃ \n>> இன்ட் _ டு _ மினி _ ரோமன் (19) = ='xix'\n>> இன்ட் _ டு _ மினி _ ரோமன் (152) = ='க்ளி'\n>> இன்ட் _ டு _ மினி _ ரோமன் (426) = ='cdxxvi'", "entry_point": "int_to_mini_roman", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/76", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = right_angle_triangle(3,4,5);\nlet expected_1 = true;\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = right_angle_triangle(1,2,3);\nlet expected_2 = false;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = right_angle_triangle(10,6,8);\nlet expected_3 = true;\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = right_angle_triangle(2,2,2);\nlet expected_4 = false;\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = right_angle_triangle(7,24,25);\nlet expected_5 = true;\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = right_angle_triangle(10,5,7);\nlet expected_6 = false;\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = right_angle_triangle(5,12,13);\nlet expected_7 = true;\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = right_angle_triangle(15,8,17);\nlet expected_8 = true;\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\nlet actual_9 = right_angle_triangle(48,55,73);\nlet expected_9 = true;\nassert.deepEqual(actual_9, expected_9, \"Exception --- test case 8 failed to pass\");\n\nlet actual_10 = right_angle_triangle(1,1,1);\nlet expected_10 = false;\nassert.deepEqual(actual_10, expected_10, \"Exception --- test case 9 failed to pass\");\n\nlet actual_11 = right_angle_triangle(2,2,10);\nlet expected_11 = false;\nassert.deepEqual(actual_11, expected_11, \"Exception --- test case 10 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. இவை மூன்றும் இருந்தால் சரி என்று திரும்பவும். \nபக்கங்கள் வலது கோண முக்கோணத்தை உருவாக்குகின்றன, இல்லையெனில் தவறானது. \nஒரு வலது கோண முக்கோணம் என்பது ஒரு கோணம் வலது கோணமாக அல்லது வலது கோணமாக இருக்கும் ஒரு முக்கோணம் ஆகும். \n90 டிகிரி. \nஉதாரணம்ஃ \nவலது கோண முக்கோணம் (3,4,5) = = உண்மை \nவலது கோண முக்கோணம் (1,2,3) = = தவறு", "entry_point": "right_angle_triangle", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/77", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = solve(\"AsDf\");\nlet expected_1 = \"aSdF\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = solve(\"1234\");\nlet expected_2 = \"4321\";\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = solve(\"ab\");\nlet expected_3 = \"AB\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = solve(\"#a@C\");\nlet expected_4 = \"#A@c\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\nlet actual_5 = solve(\"#AsdfW^45\");\nlet expected_5 = \"#aSDFw^45\";\nassert.deepEqual(actual_5, expected_5, \"Exception --- test case 4 failed to pass\");\n\nlet actual_6 = solve(\"#6@2\");\nlet expected_6 = \"2@6#\";\nassert.deepEqual(actual_6, expected_6, \"Exception --- test case 5 failed to pass\");\n\nlet actual_7 = solve(\"#$a^D\");\nlet expected_7 = \"#$A^d\";\nassert.deepEqual(actual_7, expected_7, \"Exception --- test case 6 failed to pass\");\n\nlet actual_8 = solve(\"#ccc\");\nlet expected_8 = \"#CCC\";\nassert.deepEqual(actual_8, expected_8, \"Exception --- test case 7 failed to pass\");\n\n", "language": "typescript", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nஎஸ் [ஐ] ஒரு எழுத்தாக இருந்தால், அதன் வழக்கை கீழ் இருந்து மேல் அல்லது நேர்மாறாக மாற்றவும், \nஇல்லையெனில் அதை அப்படியே வைத்திருங்கள். \nசரத்தில் எழுத்துக்கள் இல்லையென்றால், சரத்தை தலைகீழாக மாற்றவும். \nசெயல்பாடு விளைந்த சரத்தை திருப்பித் தர வேண்டும். \nஉதாரணங்கள் \nதீர்வு (\"1234\") = \"4321\" \nதீர்வு (\"ஏபி\") = \"ஏபி\" \nதீர்க்கவும் (\"#a @C\") = \"#A @c\"", "entry_point": "solve", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/78", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = string_to_md5(\"Hello world\");\nlet expected_1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = string_to_md5(\"\");\nlet expected_2 = undefined;\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = string_to_md5(\"A B C\");\nlet expected_3 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = string_to_md5(\"password\");\nlet expected_4 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "ஒரு சரம்'உரை'கொடுக்கப்பட்டால், அதன் md5 ஹாஷ் சமமான சரத்தைத் திருப்பித் தரவும். \n'உரை'ஒரு வெற்று சரம் என்றால், பூஜ்யத்தைத் திருப்பவும். \n\n>> சரம் _ முதல் _ md5 வரை ('வணக்கம் உலகம்') = ='3e25960a79dbc69b674cd4ec67a72c62'", "entry_point": "string_to_md5", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "typescript/79", "test": "\nimport * as assert from 'assert'\n\nlet actual_1 = generate_integers(2,10);\nlet expected_1 = [2, 4, 6, 8];\nassert.deepEqual(actual_1, expected_1, \"Exception --- test case 0 failed to pass\");\n\nlet actual_2 = generate_integers(10,2);\nlet expected_2 = [2, 4, 6, 8];\nassert.deepEqual(actual_2, expected_2, \"Exception --- test case 1 failed to pass\");\n\nlet actual_3 = generate_integers(132,2);\nlet expected_3 = [2, 4, 6, 8];\nassert.deepEqual(actual_3, expected_3, \"Exception --- test case 2 failed to pass\");\n\nlet actual_4 = generate_integers(17,89);\nlet expected_4 = [];\nassert.deepEqual(actual_4, expected_4, \"Exception --- test case 3 failed to pass\");\n\n", "language": "typescript", "description": "a மற்றும் b ஆகிய இரண்டு நேர்மறை முழு எண்களைக் கொடுத்தால், a க்கு இடையே உள்ள சம இலக்கங்களைத் திருப்பித் தரவும். \nமற்றும் b, ஏறுவரிசையில். \n\nஉதாரணத்திற்குஃ \nமுழு எண்களை உருவாக்குதல் (2,8) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (8,2) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (10,14) => []", "entry_point": "generate_integers", "canonical_solution": null, "natural_language": "Tamil"}
