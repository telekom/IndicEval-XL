{"task_id": "javascript/0", "entry_point": "belowZero", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [];\nvar x0 = belowZero(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, -3, 1, 2, -3];\nvar x1 = belowZero(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, -4, 5, 6];\nvar x2 = belowZero(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\nvar x3 = belowZero(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\nvar x4 = belowZero(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\nvar x5 = belowZero(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு வங்கிக் கணக்கில் வைப்பு மற்றும் திரும்பப் பெறும் செயல்பாடுகளின் பட்டியல் உங்களுக்கு வழங்கப்படுகிறது. \nபூஜ்ஜிய இருப்பு. உங்கள் பணி எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்கு கீழே விழுகிறதா என்பதைக் கண்டறிவது, மற்றும் \nஅந்த நேரத்தில் செயல்பாடு சரி என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறு என்று திரும்ப வேண்டும். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,3]) \nபொய். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,-4,5]) \nஉண்மை.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/1", "entry_point": "sumProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [];\nvar x0 = sumProduct(arg00);\nvar v0 = [0, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 1];\nvar x1 = sumProduct(arg10);\nvar v1 = [3, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [100, 0];\nvar x2 = sumProduct(arg20);\nvar v2 = [100, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [3, 5, 7];\nvar x3 = sumProduct(arg30);\nvar v3 = [15, 105];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [10];\nvar x4 = sumProduct(arg40);\nvar v4 = [10, 10];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் பெருக்கல் ஆகியவற்றைக் கொண்ட ஒரு டப்பிளைத் திருப்பித் தரவும். \nகாலியான தொகை 0 க்கு சமமாகவும், காலியான பெருக்கல் 1 க்கு சமமாகவும் இருக்க வேண்டும். \n>>> கூட்டுத்தொகை ([]) \n(0,1) \n>> தொகை _ தயாரிப்பு ([1,2,3,4]) \n(10,24)", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/2", "entry_point": "stringXor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"111000\";\nvar arg01 = \"101010\";\nvar x0 = stringXor(arg00, arg01);\nvar v0 = \"010010\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1\";\nvar arg11 = \"1\";\nvar x1 = stringXor(arg10, arg11);\nvar v1 = \"0\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"0101\";\nvar arg21 = \"0000\";\nvar x2 = stringXor(arg20, arg21);\nvar v2 = \"0101\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உள்ளீடு என்பது 1s மற்றும் 0s ஐ மட்டுமே கொண்ட இரண்டு சரங்கள் a மற்றும் b ஆகும். \nஇந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள், மேலும் ரிட்டர்ன் ரிசல்ட்டையும் ஒரு சரமாக வழங்கவும். \n>> சரம் _ xor ('010','110') \n'100'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/3", "entry_point": "longest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [];\nvar x0 = longest(arg00);\nvar v0 = null;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"x\", \"y\", \"z\"];\nvar x1 = longest(arg10);\nvar v1 = \"x\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\nvar x2 = longest(arg20);\nvar v2 = \"zzzz\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "சரங்களின் பட்டியலிலிருந்து, நீளமான சரத்தை திருப்பி அனுப்புங்கள். பல சரங்கள் இருந்தால் முதல் சரத்தை திருப்பி அனுப்புங்கள். \nஅதே நீளமுள்ள சரங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் பூஜ்யத்தைத் திருப்பவும். \n>>> நீளமானது ([]) \n\n>>> நீளமானது (['a','b','c']) \n\"அ\"... \n>>> நீளமானது (['a','bb','ccc']) \n\"சிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசி", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/4", "entry_point": "greatestCommonDivisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 7;\nvar x0 = greatestCommonDivisor(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = greatestCommonDivisor(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 49;\nvar arg21 = 14;\nvar x2 = greatestCommonDivisor(arg20, arg21);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 144;\nvar arg31 = 60;\nvar x3 = greatestCommonDivisor(arg30, arg31);\nvar v3 = 12;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "a மற்றும் b ஆகிய இரண்டு முழு எண்களின் மிகப் பெரிய பொதுவான வகுத்தியைத் திருப்பித் தரவும். \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (3,5) \n1. \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (25,15) \n5.......................................................................................................................................................................................................", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/5", "entry_point": "sortNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"\";\nvar x0 = sortNumbers(arg00);\nvar v0 = \"\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"three\";\nvar x1 = sortNumbers(arg10);\nvar v1 = \"three\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"three five nine\";\nvar x2 = sortNumbers(arg20);\nvar v2 = \"three five nine\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"five zero four seven nine eight\";\nvar x3 = sortNumbers(arg30);\nvar v3 = \"zero four five seven eight nine\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"six five four three two one zero\";\nvar x4 = sortNumbers(arg40);\nvar v4 = \"zero one two three four five six\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உள்ளீடு என்பது'பூஜ்ஜியம்'முதல்'ஒன்பது'வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம் ஆகும். \nசெல்லுபடியாகும் தேர்வுகள்'பூஜ்ஜியம்','ஒன்று','இரண்டு','மூன்று','நான்கு','ஐந்து','ஆறு','ஏழு','எட்டு'மற்றும்'ஒன்பது'ஆகும். \nசிறியது முதல் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தைத் திருப்பவும் \n>>> வரிசைப்படுத்தப்பட்ட எண்கள் ('மூன்று ஒன்று ஐந்து') \n'ஒன் த்ரீ ஃபைவ்'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/6", "entry_point": "rescaleToUnit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2.0, 49.9];\nvar x0 = rescaleToUnit(arg00);\nvar v0 = [0.0, 1.0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [100.0, 49.9];\nvar x1 = rescaleToUnit(arg10);\nvar v1 = [1.0, 0.0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nvar x2 = rescaleToUnit(arg20);\nvar v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\nvar x3 = rescaleToUnit(arg30);\nvar v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\nvar x4 = rescaleToUnit(arg40);\nvar v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு உறுப்புகளின்), அந்த பட்டியலுக்கு ஒரு நேரியல் மாற்றத்தைப் பயன்படுத்துங்கள், \nஅதாவது மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும். \n>> மீட்டமை _ முதல் _ அலகு வரை ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/7", "entry_point": "flipCase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"\";\nvar x0 = flipCase(arg00);\nvar v0 = \"\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Hello!\";\nvar x1 = flipCase(arg10);\nvar v1 = \"hELLO!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"These violent delights have violent ends\";\nvar x2 = flipCase(arg20);\nvar v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும். \n>>> ஃபிளிப் கேஸ் ('ஹலோ') \n'ஹலோ'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/8", "entry_point": "getPositive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 4, 5, 6];\nvar x0 = getPositive(arg00);\nvar v0 = [4, 5, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\nvar x1 = getPositive(arg10);\nvar v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-1, -2];\nvar x2 = getPositive(arg20);\nvar v2 = [];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [];\nvar x3 = getPositive(arg30);\nvar v3 = [];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திருப்பி அனுப்புங்கள். \n>>> பெட் பாசிட்டிவ் ([-1,2,-4,5,6]) \n[2,5,6] \n>>> நேர்மறையைப் பெறுங்கள் ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/9", "entry_point": "isPrime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = isPrime(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 101;\nvar x1 = isPrime(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = isPrime(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 13441;\nvar x3 = isPrime(arg30);\nvar v3 = true;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 61;\nvar x4 = isPrime(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 4;\nvar x5 = isPrime(arg50);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 1;\nvar x6 = isPrime(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 5;\nvar x7 = isPrime(arg70);\nvar v7 = true;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 11;\nvar x8 = isPrime(arg80);\nvar v8 = true;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 17;\nvar x9 = isPrime(arg90);\nvar v9 = true;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = 85;\nvar x10 = isPrime(arg100);\nvar v10 = false;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = 77;\nvar x11 = isPrime(arg110);\nvar v11 = false;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = 255379;\nvar x12 = isPrime(arg120);\nvar v12 = false;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட எண் பகா எண்ணாக இருந்தால் சரி என்றும், இல்லையெனில் தவறு என்றும் காட்டவும். \n>>> என்பது _ பிரைம் (6) \nபொய். \n>>> என்பது _ பிரைம் (101) \nஉண்மை. \n>>> என்பது _ பிரைம் (11) \nஉண்மை. \n>>> is _ Prime (13441) \nஉண்மை. \n>>> என்பது _ பிரைம் (61) \nஉண்மை. \n>>> என்பது _ பிரைம் (4) \nபொய். \n>>> என்பது _ பிரைம் (1) \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/10", "entry_point": "unique", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\nvar x0 = unique(arg00);\nvar v0 = [0, 2, 3, 5, 9, 123];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளை திருப்பி அனுப்பவும் \n>>> தனித்துவமானது ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/11", "entry_point": "primeFib", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = primeFib(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = primeFib(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = primeFib(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 4;\nvar x3 = primeFib(arg30);\nvar v3 = 13;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 5;\nvar x4 = primeFib(arg40);\nvar v4 = 89;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 6;\nvar x5 = primeFib(arg50);\nvar v5 = 233;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 7;\nvar x6 = primeFib(arg60);\nvar v6 = 1597;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 8;\nvar x7 = primeFib(arg70);\nvar v7 = 28657;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 9;\nvar x8 = primeFib(arg80);\nvar v8 = 514229;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 10;\nvar x9 = primeFib(arg90);\nvar v9 = 433494437;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பிரைம் _ ஃபைப் n-வது எண்ணை வழங்குகிறது, இது ஒரு ஃபிபோனாச்சி எண் மற்றும் அது பகா எண்ணாகும். \n>>> பிரைம் ஃபைப் (1) \n2. \n>>> பிரைம் ஃபைப் (2) \n3. \n>>> பிரைம் ஃபைப் (3) \n5....................................................................................................................................................................................................... \n>>> பிரைம் ஃபைப் (4) \n13. \n>>> பிரைம் ஃபைப் (5) \n89", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/12", "entry_point": "triplesSumToZero", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 0];\nvar x0 = triplesSumToZero(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 5, -1];\nvar x1 = triplesSumToZero(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, -2, 1];\nvar x2 = triplesSumToZero(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1, 2, 3, 7];\nvar x3 = triplesSumToZero(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 2, 5, 7];\nvar x4 = triplesSumToZero(arg40);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [2, 4, -5, 3, 9, 7];\nvar x5 = triplesSumToZero(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [1];\nvar x6 = triplesSumToZero(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [1, 3, 5, -100];\nvar x7 = triplesSumToZero(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [100, 3, 5, -100];\nvar x8 = triplesSumToZero(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n\n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> மூன்று மடங்கு _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,9,7]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/13", "entry_point": "pairsSumToZero", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 0];\nvar x0 = pairsSumToZero(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, -2, 1];\nvar x1 = pairsSumToZero(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 7];\nvar x2 = pairsSumToZero(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [2, 4, -5, 3, 5, 7];\nvar x3 = pairsSumToZero(arg30);\nvar v3 = true;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1];\nvar x4 = pairsSumToZero(arg40);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [-3, 9, -1, 3, 2, 30];\nvar x5 = pairsSumToZero(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [-3, 9, -1, 3, 2, 31];\nvar x6 = pairsSumToZero(arg60);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [-3, 9, -1, 4, 2, 30];\nvar x7 = pairsSumToZero(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [-3, 9, -1, 4, 2, 31];\nvar x8 = pairsSumToZero(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,5,7]) \nஉண்மை. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/14", "entry_point": "fib4", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = fib4(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 8;\nvar x1 = fib4(arg10);\nvar v1 = 28;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = fib4(arg20);\nvar v2 = 104;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 12;\nvar x3 = fib4(arg30);\nvar v3 = 386;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஃபைப் 4 எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப் 4 (0)-> 0 \nஃபைப் 4 (1)-> 0 \nஃபைப் 4 (2)-> 2 \nஃபைப் 4 (3)-> 0 \nஃபைப் 4 (என்)-> ஃபைப் 4 (என்-1) + ஃபைப் 4 (என்-2) + ஃபைப் 4 (என்-3) + ஃபைப் 4 (என்-4). \nஃபைப் 4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுநிகழ்வைப் பயன்படுத்த வேண்டாம். \n>>> ஃபைப்4 (5) \n4. \n>>> ஃபைப்4 (6) \n8. \n>>> ஃபைப்4 (7) \n14.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/15", "entry_point": "median", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 1, 2, 4, 5];\nvar x0 = median(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-10, 4, 6, 1000, 10, 20];\nvar x1 = median(arg10);\nvar v1 = 8.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5];\nvar x2 = median(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [6, 5];\nvar x3 = median(arg30);\nvar v3 = 5.5;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [8, 1, 3, 9, 9, 2, 7];\nvar x4 = median(arg40);\nvar v4 = 7;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பட்டியலில் உள்ள உறுப்புகளின் சராசரி l ஐத் திருப்பித் தரவும். \n>>> சராசரி ([3,1,2,4,5]) \n3. \n>>> சராசரி ([-10,4,6,1000,10,20]) \n15. 0", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/16", "entry_point": "isPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"\";\nvar x0 = isPalindrome(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aba\";\nvar x1 = isPalindrome(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aaaaa\";\nvar x2 = isPalindrome(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"zbcd\";\nvar x3 = isPalindrome(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"xywyx\";\nvar x4 = isPalindrome(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"xywyz\";\nvar x5 = isPalindrome(arg50);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"xywzx\";\nvar x6 = isPalindrome(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சரிபார்க்கிறது \n>>> என்பது _ பாலிண்ட்ரோம் (\") \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('அபா') \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('zbcd') \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/17", "entry_point": "removeVowels", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"\";\nvar x0 = removeVowels(arg00);\nvar v0 = \"\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcdef\\nghijklm\";\nvar x1 = removeVowels(arg10);\nvar v1 = \"bcdf\\nghjklm\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"fedcba\";\nvar x2 = removeVowels(arg20);\nvar v2 = \"fdcb\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"eeeee\";\nvar x3 = removeVowels(arg30);\nvar v3 = \"\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"acBAA\";\nvar x4 = removeVowels(arg40);\nvar v4 = \"cB\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"EcBOO\";\nvar x5 = removeVowels(arg50);\nvar v5 = \"cB\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"ybcd\";\nvar x6 = removeVowels(arg60);\nvar v6 = \"ybcd\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "நீக்குதல் உயிரெழுத்துக்கள் என்பது சரத்தை எடுத்து உயிரெழுத்துக்கள் இல்லாமல் சரத்தை திருப்பித் தரும் ஒரு செயல்பாடாகும். \n>>> உயிரெழுத்துக்களை அகற்று (\") \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று (\"abcdef\\ nghijklm\") \n'bcdf\\ nghjklm'\n>>> உயிரெழுத்துக்களை அகற்று ('abcdef') \n'பிசிடிஎஃப்'\n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏபிஏஏ') \n'பி'\n>>> உயிரெழுத்துக்களை அகற்று ('zbcd') \n'zbcd'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/18", "entry_point": "belowThreshold", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 4, 10];\nvar arg01 = 100;\nvar x0 = belowThreshold(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 20, 4, 10];\nvar arg11 = 5;\nvar x1 = belowThreshold(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 20, 4, 10];\nvar arg21 = 21;\nvar x2 = belowThreshold(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1, 20, 4, 10];\nvar arg31 = 22;\nvar x3 = belowThreshold(arg30, arg31);\nvar v3 = true;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 8, 4, 10];\nvar arg41 = 11;\nvar x4 = belowThreshold(arg40, arg41);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [1, 8, 4, 10];\nvar arg51 = 10;\nvar x5 = belowThreshold(arg50, arg51);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பட்டியலில் உள்ள அனைத்து எண்களும் t வரம்பிற்குக் கீழே இருந்தால் சரி என்று திரும்பவும். \n>>> கீழ் வரம்பு ([1,2,4,10], 100) \nஉண்மை. \n>>> கீழ் வரம்பு ([1,20,4,10], 5) \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/19", "entry_point": "add", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 0;\nvar arg01 = 1;\nvar x0 = add(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 0;\nvar x1 = add(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 3;\nvar x2 = add(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 5;\nvar arg31 = 7;\nvar x3 = add(arg30, arg31);\nvar v3 = 12;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 7;\nvar arg41 = 5;\nvar x4 = add(arg40, arg41);\nvar v4 = 12;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 572;\nvar arg51 = 725;\nvar x5 = add(arg50, arg51);\nvar v5 = 1297;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 51;\nvar arg61 = 804;\nvar x6 = add(arg60, arg61);\nvar v6 = 855;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 645;\nvar arg71 = 96;\nvar x7 = add(arg70, arg71);\nvar v7 = 741;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 712;\nvar arg81 = 853;\nvar x8 = add(arg80, arg81);\nvar v8 = 1565;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 223;\nvar arg91 = 101;\nvar x9 = add(arg90, arg91);\nvar v9 = 324;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = 76;\nvar arg101 = 29;\nvar x10 = add(arg100, arg101);\nvar v10 = 105;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = 416;\nvar arg111 = 149;\nvar x11 = add(arg110, arg111);\nvar v11 = 565;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = 145;\nvar arg121 = 409;\nvar x12 = add(arg120, arg121);\nvar v12 = 554;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg130 = 535;\nvar arg131 = 430;\nvar x13 = add(arg130, arg131);\nvar v13 = 965;\nif(!compare(x13, v13)){\n    throw 'Error at 14th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg140 = 118;\nvar arg141 = 303;\nvar x14 = add(arg140, arg141);\nvar v14 = 421;\nif(!compare(x14, v14)){\n    throw 'Error at 15th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg150 = 287;\nvar arg151 = 94;\nvar x15 = add(arg150, arg151);\nvar v15 = 381;\nif(!compare(x15, v15)){\n    throw 'Error at 16th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg160 = 768;\nvar arg161 = 257;\nvar x16 = add(arg160, arg161);\nvar v16 = 1025;\nif(!compare(x16, v16)){\n    throw 'Error at 17th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg170 = 421;\nvar arg171 = 677;\nvar x17 = add(arg170, arg171);\nvar v17 = 1098;\nif(!compare(x17, v17)){\n    throw 'Error at 18th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg180 = 802;\nvar arg181 = 814;\nvar x18 = add(arg180, arg181);\nvar v18 = 1616;\nif(!compare(x18, v18)){\n    throw 'Error at 19th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg190 = 510;\nvar arg191 = 922;\nvar x19 = add(arg190, arg191);\nvar v19 = 1432;\nif(!compare(x19, v19)){\n    throw 'Error at 20th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg200 = 345;\nvar arg201 = 819;\nvar x20 = add(arg200, arg201);\nvar v20 = 1164;\nif(!compare(x20, v20)){\n    throw 'Error at 21th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg210 = 895;\nvar arg211 = 436;\nvar x21 = add(arg210, arg211);\nvar v21 = 1331;\nif(!compare(x21, v21)){\n    throw 'Error at 22th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg220 = 123;\nvar arg221 = 424;\nvar x22 = add(arg220, arg221);\nvar v22 = 547;\nif(!compare(x22, v22)){\n    throw 'Error at 23th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg230 = 923;\nvar arg231 = 245;\nvar x23 = add(arg230, arg231);\nvar v23 = 1168;\nif(!compare(x23, v23)){\n    throw 'Error at 24th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg240 = 23;\nvar arg241 = 438;\nvar x24 = add(arg240, arg241);\nvar v24 = 461;\nif(!compare(x24, v24)){\n    throw 'Error at 25th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg250 = 565;\nvar arg251 = 133;\nvar x25 = add(arg250, arg251);\nvar v25 = 698;\nif(!compare(x25, v25)){\n    throw 'Error at 26th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg260 = 945;\nvar arg261 = 925;\nvar x26 = add(arg260, arg261);\nvar v26 = 1870;\nif(!compare(x26, v26)){\n    throw 'Error at 27th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg270 = 261;\nvar arg271 = 983;\nvar x27 = add(arg270, arg271);\nvar v27 = 1244;\nif(!compare(x27, v27)){\n    throw 'Error at 28th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg280 = 139;\nvar arg281 = 577;\nvar x28 = add(arg280, arg281);\nvar v28 = 716;\nif(!compare(x28, v28)){\n    throw 'Error at 29th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg290 = 763;\nvar arg291 = 178;\nvar x29 = add(arg290, arg291);\nvar v29 = 941;\nif(!compare(x29, v29)){\n    throw 'Error at 30th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg300 = 147;\nvar arg301 = 892;\nvar x30 = add(arg300, arg301);\nvar v30 = 1039;\nif(!compare(x30, v30)){\n    throw 'Error at 31th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg310 = 436;\nvar arg311 = 402;\nvar x31 = add(arg310, arg311);\nvar v31 = 838;\nif(!compare(x31, v31)){\n    throw 'Error at 32th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg320 = 610;\nvar arg321 = 581;\nvar x32 = add(arg320, arg321);\nvar v32 = 1191;\nif(!compare(x32, v32)){\n    throw 'Error at 33th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg330 = 103;\nvar arg331 = 416;\nvar x33 = add(arg330, arg331);\nvar v33 = 519;\nif(!compare(x33, v33)){\n    throw 'Error at 34th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg340 = 339;\nvar arg341 = 990;\nvar x34 = add(arg340, arg341);\nvar v34 = 1329;\nif(!compare(x34, v34)){\n    throw 'Error at 35th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg350 = 130;\nvar arg351 = 504;\nvar x35 = add(arg350, arg351);\nvar v35 = 634;\nif(!compare(x35, v35)){\n    throw 'Error at 36th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg360 = 242;\nvar arg361 = 717;\nvar x36 = add(arg360, arg361);\nvar v36 = 959;\nif(!compare(x36, v36)){\n    throw 'Error at 37th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg370 = 562;\nvar arg371 = 110;\nvar x37 = add(arg370, arg371);\nvar v37 = 672;\nif(!compare(x37, v37)){\n    throw 'Error at 38th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg380 = 396;\nvar arg381 = 909;\nvar x38 = add(arg380, arg381);\nvar v38 = 1305;\nif(!compare(x38, v38)){\n    throw 'Error at 39th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg390 = 887;\nvar arg391 = 703;\nvar x39 = add(arg390, arg391);\nvar v39 = 1590;\nif(!compare(x39, v39)){\n    throw 'Error at 40th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg400 = 870;\nvar arg401 = 551;\nvar x40 = add(arg400, arg401);\nvar v40 = 1421;\nif(!compare(x40, v40)){\n    throw 'Error at 41th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg410 = 422;\nvar arg411 = 391;\nvar x41 = add(arg410, arg411);\nvar v41 = 813;\nif(!compare(x41, v41)){\n    throw 'Error at 42th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg420 = 299;\nvar arg421 = 505;\nvar x42 = add(arg420, arg421);\nvar v42 = 804;\nif(!compare(x42, v42)){\n    throw 'Error at 43th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg430 = 346;\nvar arg431 = 56;\nvar x43 = add(arg430, arg431);\nvar v43 = 402;\nif(!compare(x43, v43)){\n    throw 'Error at 44th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg440 = 36;\nvar arg441 = 706;\nvar x44 = add(arg440, arg441);\nvar v44 = 742;\nif(!compare(x44, v44)){\n    throw 'Error at 45th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg450 = 738;\nvar arg451 = 411;\nvar x45 = add(arg450, arg451);\nvar v45 = 1149;\nif(!compare(x45, v45)){\n    throw 'Error at 46th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg460 = 679;\nvar arg461 = 87;\nvar x46 = add(arg460, arg461);\nvar v46 = 766;\nif(!compare(x46, v46)){\n    throw 'Error at 47th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg470 = 25;\nvar arg471 = 303;\nvar x47 = add(arg470, arg471);\nvar v47 = 328;\nif(!compare(x47, v47)){\n    throw 'Error at 48th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg480 = 161;\nvar arg481 = 612;\nvar x48 = add(arg480, arg481);\nvar v48 = 773;\nif(!compare(x48, v48)){\n    throw 'Error at 49th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg490 = 306;\nvar arg491 = 841;\nvar x49 = add(arg490, arg491);\nvar v49 = 1147;\nif(!compare(x49, v49)){\n    throw 'Error at 50th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg500 = 973;\nvar arg501 = 411;\nvar x50 = add(arg500, arg501);\nvar v50 = 1384;\nif(!compare(x50, v50)){\n    throw 'Error at 51th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg510 = 711;\nvar arg511 = 157;\nvar x51 = add(arg510, arg511);\nvar v51 = 868;\nif(!compare(x51, v51)){\n    throw 'Error at 52th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg520 = 471;\nvar arg521 = 27;\nvar x52 = add(arg520, arg521);\nvar v52 = 498;\nif(!compare(x52, v52)){\n    throw 'Error at 53th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg530 = 714;\nvar arg531 = 792;\nvar x53 = add(arg530, arg531);\nvar v53 = 1506;\nif(!compare(x53, v53)){\n    throw 'Error at 54th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg540 = 38;\nvar arg541 = 206;\nvar x54 = add(arg540, arg541);\nvar v54 = 244;\nif(!compare(x54, v54)){\n    throw 'Error at 55th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg550 = 907;\nvar arg551 = 343;\nvar x55 = add(arg550, arg551);\nvar v55 = 1250;\nif(!compare(x55, v55)){\n    throw 'Error at 56th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg560 = 23;\nvar arg561 = 760;\nvar x56 = add(arg560, arg561);\nvar v56 = 783;\nif(!compare(x56, v56)){\n    throw 'Error at 57th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg570 = 524;\nvar arg571 = 859;\nvar x57 = add(arg570, arg571);\nvar v57 = 1383;\nif(!compare(x57, v57)){\n    throw 'Error at 58th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg580 = 30;\nvar arg581 = 529;\nvar x58 = add(arg580, arg581);\nvar v58 = 559;\nif(!compare(x58, v58)){\n    throw 'Error at 59th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg590 = 341;\nvar arg591 = 691;\nvar x59 = add(arg590, arg591);\nvar v59 = 1032;\nif(!compare(x59, v59)){\n    throw 'Error at 60th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg600 = 167;\nvar arg601 = 729;\nvar x60 = add(arg600, arg601);\nvar v60 = 896;\nif(!compare(x60, v60)){\n    throw 'Error at 61th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg610 = 636;\nvar arg611 = 289;\nvar x61 = add(arg610, arg611);\nvar v61 = 925;\nif(!compare(x61, v61)){\n    throw 'Error at 62th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg620 = 503;\nvar arg621 = 144;\nvar x62 = add(arg620, arg621);\nvar v62 = 647;\nif(!compare(x62, v62)){\n    throw 'Error at 63th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg630 = 51;\nvar arg631 = 985;\nvar x63 = add(arg630, arg631);\nvar v63 = 1036;\nif(!compare(x63, v63)){\n    throw 'Error at 64th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg640 = 287;\nvar arg641 = 149;\nvar x64 = add(arg640, arg641);\nvar v64 = 436;\nif(!compare(x64, v64)){\n    throw 'Error at 65th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg650 = 659;\nvar arg651 = 75;\nvar x65 = add(arg650, arg651);\nvar v65 = 734;\nif(!compare(x65, v65)){\n    throw 'Error at 66th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg660 = 462;\nvar arg661 = 797;\nvar x66 = add(arg660, arg661);\nvar v66 = 1259;\nif(!compare(x66, v66)){\n    throw 'Error at 67th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg670 = 406;\nvar arg671 = 141;\nvar x67 = add(arg670, arg671);\nvar v67 = 547;\nif(!compare(x67, v67)){\n    throw 'Error at 68th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg680 = 106;\nvar arg681 = 44;\nvar x68 = add(arg680, arg681);\nvar v68 = 150;\nif(!compare(x68, v68)){\n    throw 'Error at 69th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg690 = 300;\nvar arg691 = 934;\nvar x69 = add(arg690, arg691);\nvar v69 = 1234;\nif(!compare(x69, v69)){\n    throw 'Error at 70th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg700 = 471;\nvar arg701 = 524;\nvar x70 = add(arg700, arg701);\nvar v70 = 995;\nif(!compare(x70, v70)){\n    throw 'Error at 71th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg710 = 122;\nvar arg711 = 429;\nvar x71 = add(arg710, arg711);\nvar v71 = 551;\nif(!compare(x71, v71)){\n    throw 'Error at 72th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg720 = 735;\nvar arg721 = 195;\nvar x72 = add(arg720, arg721);\nvar v72 = 930;\nif(!compare(x72, v72)){\n    throw 'Error at 73th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg730 = 335;\nvar arg731 = 484;\nvar x73 = add(arg730, arg731);\nvar v73 = 819;\nif(!compare(x73, v73)){\n    throw 'Error at 74th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg740 = 28;\nvar arg741 = 809;\nvar x74 = add(arg740, arg741);\nvar v74 = 837;\nif(!compare(x74, v74)){\n    throw 'Error at 75th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg750 = 430;\nvar arg751 = 20;\nvar x75 = add(arg750, arg751);\nvar v75 = 450;\nif(!compare(x75, v75)){\n    throw 'Error at 76th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg760 = 916;\nvar arg761 = 635;\nvar x76 = add(arg760, arg761);\nvar v76 = 1551;\nif(!compare(x76, v76)){\n    throw 'Error at 77th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg770 = 301;\nvar arg771 = 999;\nvar x77 = add(arg770, arg771);\nvar v77 = 1300;\nif(!compare(x77, v77)){\n    throw 'Error at 78th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg780 = 454;\nvar arg781 = 466;\nvar x78 = add(arg780, arg781);\nvar v78 = 920;\nif(!compare(x78, v78)){\n    throw 'Error at 79th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg790 = 905;\nvar arg791 = 259;\nvar x79 = add(arg790, arg791);\nvar v79 = 1164;\nif(!compare(x79, v79)){\n    throw 'Error at 80th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg800 = 168;\nvar arg801 = 205;\nvar x80 = add(arg800, arg801);\nvar v80 = 373;\nif(!compare(x80, v80)){\n    throw 'Error at 81th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg810 = 570;\nvar arg811 = 434;\nvar x81 = add(arg810, arg811);\nvar v81 = 1004;\nif(!compare(x81, v81)){\n    throw 'Error at 82th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg820 = 64;\nvar arg821 = 959;\nvar x82 = add(arg820, arg821);\nvar v82 = 1023;\nif(!compare(x82, v82)){\n    throw 'Error at 83th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg830 = 957;\nvar arg831 = 510;\nvar x83 = add(arg830, arg831);\nvar v83 = 1467;\nif(!compare(x83, v83)){\n    throw 'Error at 84th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg840 = 722;\nvar arg841 = 598;\nvar x84 = add(arg840, arg841);\nvar v84 = 1320;\nif(!compare(x84, v84)){\n    throw 'Error at 85th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg850 = 770;\nvar arg851 = 226;\nvar x85 = add(arg850, arg851);\nvar v85 = 996;\nif(!compare(x85, v85)){\n    throw 'Error at 86th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg860 = 579;\nvar arg861 = 66;\nvar x86 = add(arg860, arg861);\nvar v86 = 645;\nif(!compare(x86, v86)){\n    throw 'Error at 87th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg870 = 117;\nvar arg871 = 674;\nvar x87 = add(arg870, arg871);\nvar v87 = 791;\nif(!compare(x87, v87)){\n    throw 'Error at 88th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg880 = 530;\nvar arg881 = 30;\nvar x88 = add(arg880, arg881);\nvar v88 = 560;\nif(!compare(x88, v88)){\n    throw 'Error at 89th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg890 = 776;\nvar arg891 = 345;\nvar x89 = add(arg890, arg891);\nvar v89 = 1121;\nif(!compare(x89, v89)){\n    throw 'Error at 90th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg900 = 327;\nvar arg901 = 389;\nvar x90 = add(arg900, arg901);\nvar v90 = 716;\nif(!compare(x90, v90)){\n    throw 'Error at 91th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg910 = 596;\nvar arg911 = 12;\nvar x91 = add(arg910, arg911);\nvar v91 = 608;\nif(!compare(x91, v91)){\n    throw 'Error at 92th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg920 = 599;\nvar arg921 = 511;\nvar x92 = add(arg920, arg921);\nvar v92 = 1110;\nif(!compare(x92, v92)){\n    throw 'Error at 93th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg930 = 936;\nvar arg931 = 476;\nvar x93 = add(arg930, arg931);\nvar v93 = 1412;\nif(!compare(x93, v93)){\n    throw 'Error at 94th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg940 = 461;\nvar arg941 = 14;\nvar x94 = add(arg940, arg941);\nvar v94 = 475;\nif(!compare(x94, v94)){\n    throw 'Error at 95th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg950 = 966;\nvar arg951 = 157;\nvar x95 = add(arg950, arg951);\nvar v95 = 1123;\nif(!compare(x95, v95)){\n    throw 'Error at 96th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg960 = 326;\nvar arg961 = 91;\nvar x96 = add(arg960, arg961);\nvar v96 = 417;\nif(!compare(x96, v96)){\n    throw 'Error at 97th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg970 = 392;\nvar arg971 = 455;\nvar x97 = add(arg970, arg971);\nvar v97 = 847;\nif(!compare(x97, v97)){\n    throw 'Error at 98th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg980 = 446;\nvar arg981 = 477;\nvar x98 = add(arg980, arg981);\nvar v98 = 923;\nif(!compare(x98, v98)){\n    throw 'Error at 99th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg990 = 324;\nvar arg991 = 860;\nvar x99 = add(arg990, arg991);\nvar v99 = 1184;\nif(!compare(x99, v99)){\n    throw 'Error at 100th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg1000 = 945;\nvar arg1001 = 85;\nvar x100 = add(arg1000, arg1001);\nvar v100 = 1030;\nif(!compare(x100, v100)){\n    throw 'Error at 101th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg1010 = 886;\nvar arg1011 = 582;\nvar x101 = add(arg1010, arg1011);\nvar v101 = 1468;\nif(!compare(x101, v101)){\n    throw 'Error at 102th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg1020 = 886;\nvar arg1021 = 712;\nvar x102 = add(arg1020, arg1021);\nvar v102 = 1598;\nif(!compare(x102, v102)){\n    throw 'Error at 103th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg1030 = 842;\nvar arg1031 = 953;\nvar x103 = add(arg1030, arg1031);\nvar v103 = 1795;\nif(!compare(x103, v103)){\n    throw 'Error at 104th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "x மற்றும் y என்ற இரண்டு எண்களைச் சேர்க்கவும். \n>>> சேர் (2,3) \n5....................................................................................................................................................................................................... \n>>> சேர் (5,7) \n12.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/20", "entry_point": "sameChars", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"eabcdzzzz\";\nvar arg01 = \"dddzzzzzzzddeddabc\";\nvar x0 = sameChars(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcd\";\nvar arg11 = \"dddddddabc\";\nvar x1 = sameChars(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"dddddddabc\";\nvar arg21 = \"abcd\";\nvar x2 = sameChars(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"eabcd\";\nvar arg31 = \"dddddddabc\";\nvar x3 = sameChars(arg30, arg31);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"abcd\";\nvar arg41 = \"dddddddabcf\";\nvar x4 = sameChars(arg40, arg41);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"eabcdzzzz\";\nvar arg51 = \"dddzzzzzzzddddabc\";\nvar x5 = sameChars(arg50, arg51);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"aabb\";\nvar arg61 = \"aaccc\";\nvar x6 = sameChars(arg60, arg61);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "இரண்டு சொற்களும் ஒரே எழுத்துக்களைக் கொண்டுள்ளனவா என்று சரிபார்க்கவும். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzuddeddabc') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடிபிசி') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('dddddddabc','abcd') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஈஏபிசிடி','டிடிடிடிடிபிசி') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடாப்ஸ்') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzdddddadbc') \nபொய்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/21", "entry_point": "fib", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = fib(arg00);\nvar v0 = 55;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = fib(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = fib(arg20);\nvar v2 = 21;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 11;\nvar x3 = fib(arg30);\nvar v3 = 89;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 12;\nvar x4 = fib(arg40);\nvar v4 = 144;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "n-th ஃபிபோனாச்சி எண்ணைத் திருப்பித் தரவும். \n>>> ஃபைப் (10) \n55 \n>>> ஃபைப் (1) \n1. \n>>> ஃபைப் (8) \n21", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/22", "entry_point": "common", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 4, 3, 34, 653, 2, 5];\nvar arg01 = [5, 7, 1, 5, 9, 653, 121];\nvar x0 = common(arg00, arg01);\nvar v0 = [1, 5, 653];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 3, 2, 8];\nvar arg11 = [3, 2];\nvar x1 = common(arg10, arg11);\nvar v1 = [2, 3];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [4, 3, 2, 8];\nvar arg21 = [3, 2, 4];\nvar x2 = common(arg20, arg21);\nvar v2 = [2, 3, 4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [4, 3, 2, 8];\nvar arg31 = [];\nvar x3 = common(arg30, arg31);\nvar v3 = [];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "இரண்டு பட்டியல்களுக்கு தனித்துவமான பொதுவான கூறுகளை வரிசைப்படுத்துங்கள். \n>> பொதுவான ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>> பொதுவான ([5,3,2,8], [3,2]) \n[2,3]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/23", "entry_point": "largestPrimeFactor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = largestPrimeFactor(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 27;\nvar x1 = largestPrimeFactor(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 63;\nvar x2 = largestPrimeFactor(arg20);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 330;\nvar x3 = largestPrimeFactor(arg30);\nvar v3 = 11;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 13195;\nvar x4 = largestPrimeFactor(arg40);\nvar v4 = 29;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "n இன் மிகப்பெரிய பகாக் காரணியை திருப்பிக் கொடுங்கள். n> 1 என்று வைத்துக்கொள்வோம், அது பகாக் காரணி அல்ல. \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (13195) \n29 \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (2048) \n2.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/24", "entry_point": "sumToN", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = sumToN(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = sumToN(arg10);\nvar v1 = 21;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = sumToN(arg20);\nvar v2 = 66;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 30;\nvar x3 = sumToN(arg30);\nvar v3 = 465;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 100;\nvar x4 = sumToN(arg40);\nvar v4 = 5050;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "sum _ to _ n என்பது 1 முதல் n வரையிலான எண்களைச் சேர்க்கும் ஒரு சார்பாகும். \n>>> கூட்டுத்தொகை _ முதல் _ வரை (30) \n465 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (100) \n5050 \n>>> கூட்டுத்தொகை _ முதல் _ வரை (5) \n15. \n>>> கூட்டுத்தொகை _ முதல் _ வரை (10) \n55 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (1) \n1.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/25", "entry_point": "derivative", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 1, 2, 4, 5];\nvar x0 = derivative(arg00);\nvar v0 = [1, 4, 12, 20];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = derivative(arg10);\nvar v1 = [2, 6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1];\nvar x2 = derivative(arg20);\nvar v2 = [2, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [3, 2, 1, 0, 4];\nvar x3 = derivative(arg30);\nvar v3 = [2, 2, 0, 16];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1];\nvar x4 = derivative(arg40);\nvar v4 = [];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "xs என்பது ஒரு பல்லுறுப்புக்கோவையின் குணகங்களைக் குறிக்கிறது. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nஅதே வடிவத்தில் இந்த பல்லுறுப்புக்கோவையின் திரும்ப வழித்தோன்றல். \n>>> வழித்தோன்றல் ([3,1,2,4,5]) \n[1,4,12,20] \n>>> வழித்தோன்றல் ([1,2,3]) \n[2,6]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/26", "entry_point": "fibfib", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = fibfib(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = fibfib(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = fibfib(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 8;\nvar x3 = fibfib(arg30);\nvar v3 = 24;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 10;\nvar x4 = fibfib(arg40);\nvar v4 = 81;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 12;\nvar x5 = fibfib(arg50);\nvar v5 = 274;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 14;\nvar x6 = fibfib(arg60);\nvar v6 = 927;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஃபைப்ஃபைப் எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப்ஃபைப் (0) = = 0 \nஃபைப்ஃபைப் (1) = = 0 \nஃபைப்ஃபைப் (2) = = 1 \nஃபைப்ஃபைப் (n) = = ஃபைப்ஃபைப் (n-1) + ஃபைப்ஃபைப் (n-2) + ஃபைப்ஃபைப் (n-3). \nஃபைப்ஃபைப் எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். \n>>> ஃபைப்ஃபைப் (1) \n0 \n>>> ஃபைப்ஃபைப் (5) \n4. \n>>> ஃபைப்ஃபைப் (8) \n24.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/27", "entry_point": "vowelsCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcde\";\nvar x0 = vowelsCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Alone\";\nvar x1 = vowelsCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"key\";\nvar x2 = vowelsCount(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"bye\";\nvar x3 = vowelsCount(arg30);\nvar v3 = 1;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"keY\";\nvar x4 = vowelsCount(arg40);\nvar v4 = 2;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"bYe\";\nvar x5 = vowelsCount(arg50);\nvar v5 = 1;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"ACEDY\";\nvar x6 = vowelsCount(arg60);\nvar v6 = 3;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு செயல்பாட்டை எழுதுங்கள் உயிரெழுத்துக்கள் _ எண்ணிக்கை இது ஒரு சரத்தை குறிக்கிறது \nஉள்ளீடாக ஒரு சொல் மற்றும் சரத்தில் உள்ள உயிரெழுத்துக்களின் எண்ணிக்கையைத் தருகிறது. \nஇந்த வழக்கில் அச்சுகள்'a','e','i','o','u'. இங்கே,'y'கூட ஒரு \nஉயிரெழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. \n\nஉதாரணம்ஃ \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"அப்ச்டே\") \n2. \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"ACEDY\") \n3.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/28", "entry_point": "search", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 5, 5, 5, 1];\nvar x0 = search(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 1, 4, 1, 4, 4];\nvar x1 = search(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 3];\nvar x2 = search(arg20);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\nvar x3 = search(arg30);\nvar v3 = 8;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [2, 3, 3, 2, 2];\nvar x4 = search(arg40);\nvar v4 = 2;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\nvar x5 = search(arg50);\nvar v5 = 1;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [3, 2, 8, 2];\nvar x6 = search(arg60);\nvar v6 = 2;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\nvar x7 = search(arg70);\nvar v7 = 1;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [8, 8, 3, 6, 5, 6, 4];\nvar x8 = search(arg80);\nvar v8 = -1;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\nvar x9 = search(arg90);\nvar v9 = 1;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = [1, 9, 10, 1, 3];\nvar x10 = search(arg100);\nvar v10 = 1;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\nvar x11 = search(arg110);\nvar v11 = 5;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = [1];\nvar x12 = search(arg120);\nvar v12 = 1;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\nvar x13 = search(arg130);\nvar v13 = 4;\nif(!compare(x13, v13)){\n    throw 'Error at 14th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\nvar x14 = search(arg140);\nvar v14 = 2;\nif(!compare(x14, v14)){\n    throw 'Error at 15th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\nvar x15 = search(arg150);\nvar v15 = 1;\nif(!compare(x15, v15)){\n    throw 'Error at 16th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\nvar x16 = search(arg160);\nvar v16 = 4;\nif(!compare(x16, v16)){\n    throw 'Error at 17th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\nvar x17 = search(arg170);\nvar v17 = 4;\nif(!compare(x17, v17)){\n    throw 'Error at 18th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\nvar x18 = search(arg180);\nvar v18 = 2;\nif(!compare(x18, v18)){\n    throw 'Error at 19th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\nvar x19 = search(arg190);\nvar v19 = -1;\nif(!compare(x19, v19)){\n    throw 'Error at 20th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg200 = [10];\nvar x20 = search(arg200);\nvar v20 = -1;\nif(!compare(x20, v20)){\n    throw 'Error at 21th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\nvar x21 = search(arg210);\nvar v21 = 2;\nif(!compare(x21, v21)){\n    throw 'Error at 22th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\nvar x22 = search(arg220);\nvar v22 = 1;\nif(!compare(x22, v22)){\n    throw 'Error at 23th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\nvar x23 = search(arg230);\nvar v23 = 1;\nif(!compare(x23, v23)){\n    throw 'Error at 24th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg240 = [3, 10, 10, 9, 2];\nvar x24 = search(arg240);\nvar v24 = -1;\nif(!compare(x24, v24)){\n    throw 'Error at 25th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு வெற்றிடமற்ற நேர்மறை முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. அதை விட பெரிய முழு எண்ணை கொடுக்கவும். \nபூஜ்ஜியம், மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ அதிர்வெண் உள்ளது. \nஒரு முழு எண்ணின் அதிர்வெண் என்பது அது பட்டியலில் எத்தனை முறை தோன்றுகிறது என்பதாகும். \nஅத்தகைய மதிப்பு இல்லை என்றால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணங்கள்ஃ \nதேடல் ([4,1,2,2,3,1]) = = 2 \nதேடல் ([1,2,3,3,4,4]) = = 3 \nதேடல் ([5,5,4,4]) = =-1", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/29", "entry_point": "triangleArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar arg02 = 5;\nvar x0 = triangleArea(arg00, arg01, arg02);\nvar v0 = 6.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 10;\nvar x1 = triangleArea(arg10, arg11, arg12);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 8;\nvar arg22 = 5;\nvar x2 = triangleArea(arg20, arg21, arg22);\nvar v2 = 8.18;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 2;\nvar arg31 = 2;\nvar arg32 = 2;\nvar x3 = triangleArea(arg30, arg31, arg32);\nvar v3 = 1.73;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 1;\nvar arg41 = 2;\nvar arg42 = 3;\nvar x4 = triangleArea(arg40, arg41, arg42);\nvar v4 = -1;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 10;\nvar arg51 = 5;\nvar arg52 = 7;\nvar x5 = triangleArea(arg50, arg51, arg52);\nvar v5 = 16.25;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 2;\nvar arg61 = 6;\nvar arg62 = 3;\nvar x6 = triangleArea(arg60, arg61, arg62);\nvar v6 = -1;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 1;\nvar arg71 = 1;\nvar arg72 = 1;\nvar x7 = triangleArea(arg70, arg71, arg72);\nvar v7 = 0.43;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 2;\nvar arg81 = 2;\nvar arg82 = 10;\nvar x8 = triangleArea(arg80, arg81, arg82);\nvar v8 = -1;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. \nமூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்கினால் முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமிடப்படுகிறது. \nஇல்லையெனில் திரும்ப-1 \nஏதேனும் இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருக்கும்போது மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. \nமூன்றாவது பக்கத்தை விட. \nஉதாரணம்ஃ \nமுக்கோணப் பரப்பளவு (3,4,5) = = 6 \nமுக்கோணப் பரப்பளவு (1,2,10) = =-1", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/30", "entry_point": "willItFly", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 2, 3];\nvar arg01 = 9;\nvar x0 = willItFly(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = 5;\nvar x1 = willItFly(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3];\nvar arg21 = 5;\nvar x2 = willItFly(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [3, 2, 3];\nvar arg31 = 1;\nvar x3 = willItFly(arg30, arg31);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 2, 3];\nvar arg41 = 6;\nvar x4 = willItFly(arg40, arg41);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [5];\nvar arg51 = 5;\nvar x5 = willItFly(arg50, arg51);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பொருள் q பறக்கும் என்றால் சரி, இல்லையெனில் தவறு என்று காட்டும் செயல்பாட்டை எழுதுங்கள். \nபொருள் q சமநிலையாக இருந்தால் பறக்கும் (இது ஒரு பாலிண்ட்ரோமிக் பட்டியல்) மற்றும் அதன் உறுப்புகளின் கூட்டுத்தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால். \n\nஉதாரணம்ஃ \nவில் _ இட் _ ஃப்ளை ([1,2], 5) பொய் \n#1 + 2 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 1) பொய் \n#இது சமநிலையானது, ஆனால் 3 + 2 + 3 என்பது அதிகபட்ச எடையை விட அதிகமாகும். \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 9) ட்ரு \n#3 + 2 + 3 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது. \n\nவில் _ இட் _ ஃப்ளை ([3], 5) ட்ரு \n#3 அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/31", "entry_point": "isMultiplyPrime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = isMultiplyPrime(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = isMultiplyPrime(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = isMultiplyPrime(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 10;\nvar x3 = isMultiplyPrime(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 125;\nvar x4 = isMultiplyPrime(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 105;\nvar x5 = isMultiplyPrime(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 126;\nvar x6 = isMultiplyPrime(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 729;\nvar x7 = isMultiplyPrime(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 891;\nvar x8 = isMultiplyPrime(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 1001;\nvar x9 = isMultiplyPrime(arg90);\nvar v9 = true;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட எண் 3 பகா எண்களின் பெருக்கமாக இருந்தால் உண்மை என்று திரும்பும் செயல்பாட்டை எழுதுங்கள். \nஇல்லையெனில் பொய்யானது. \n(அ) என்பது 100க்கும் குறைவானது என்பதை அறிவது. \nஉதாரணம்ஃ \nபெருக்கல் பகா எண் (30) = = உண்மை \n30 = 2 * 3 * 5", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/32", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 0;\nvar x0 = decimalToBinary(arg00);\nvar v0 = \"db0db\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 32;\nvar x1 = decimalToBinary(arg10);\nvar v1 = \"db100000db\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 103;\nvar x2 = decimalToBinary(arg20);\nvar v2 = \"db1100111db\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 15;\nvar x3 = decimalToBinary(arg30);\nvar v3 = \"db1111db\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு தசம வடிவத்தில் ஒரு எண் வழங்கப்படும், அதை ஒரு எண்ணாக மாற்றுவதே உங்கள் பணியாகும். \nபைனரி வடிவம். செயல்பாடு ஒரு சரத்தைத் திருப்ப வேண்டும், ஒவ்வொரு எழுத்தும் ஒரு பைனரியைக் குறிக்கும் \nஎண். சரத்தில் உள்ள ஒவ்வொரு எழுத்தும்'0'அல்லது'1'ஆக இருக்கும். \n\nசரத்தின் தொடக்கத்திலும் முடிவிலும் கூடுதலாக இரண்டு எழுத்துக்கள்'db'இருக்கும். \nவடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன. \n\nஉதாரணங்கள்ஃ \nடெசிமல் _ டு _ பைனரி (15) #\"db1111db\" ஐத் தருகிறது \nடெசிமல் _ டு _ பைனரி (32) #\"db100000db\" ஐத் தருகிறது", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/33", "entry_point": "isHappy", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"a\";\nvar x0 = isHappy(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aa\";\nvar x1 = isHappy(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = isHappy(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"aabb\";\nvar x3 = isHappy(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"adb\";\nvar x4 = isHappy(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"xyy\";\nvar x5 = isHappy(arg50);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"iopaxpoi\";\nvar x6 = isHappy(arg60);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"iopaxioi\";\nvar x7 = isHappy(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nசரம் மகிழ்ச்சியாக உள்ளதா இல்லையா என்பதைச் சரிபார்ப்பது உங்கள் பணியாகும். \nஒரு சரத்தின் நீளம் குறைந்தது 3 ஆகவும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் தனித்துவமாகவும் இருந்தால் அது மகிழ்ச்சியாக இருக்கும். \nஉதாரணத்திற்குஃ \nமகிழ்ச்சியாக உள்ளது (a) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏஏ) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏபிசிடி) => உண்மை \nமகிழ்ச்சியாக உள்ளது (ஆப்) => பொய் \nமகிழ்ச்சியாக உள்ளது (adb) => உண்மை \nமகிழ்ச்சியாக உள்ளது (xyy) => தவறு", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/34", "entry_point": "numericalLetterGrade", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [4.0, 3, 1.7, 2, 3.5];\nvar x0 = numericalLetterGrade(arg00);\nvar v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1.2];\nvar x1 = numericalLetterGrade(arg10);\nvar v1 = [\"D+\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0.5];\nvar x2 = numericalLetterGrade(arg20);\nvar v2 = [\"D-\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [0.0];\nvar x3 = numericalLetterGrade(arg30);\nvar v3 = [\"E\"];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 0.3, 1.5, 2.8, 3.3];\nvar x4 = numericalLetterGrade(arg40);\nvar v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [0, 0.7];\nvar x5 = numericalLetterGrade(arg50);\nvar v5 = [\"E\", \"D-\"];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் தரங்களை வழங்க வேண்டும். \nமாணவர்களுக்கு. ஆசிரியர் தரப்படுத்தலுக்கான தனது சொந்த வழிமுறையை உருவாக்கி வருகிறார். \nஒரே பிரச்சனை என்னவென்றால், தரப்படுத்துவதற்கு அவர் பயன்படுத்திய குறியீட்டை அவர் இழந்துவிட்டார். \nசில மாணவர்களுக்கான ஜி. பி. ஏ. களின் பட்டியலை அவர் உங்களுக்கு வழங்கியுள்ளார், நீங்கள் எழுத வேண்டும். \nபின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் பட்டியலை வெளியிடக்கூடிய ஒரு செயல்பாடுஃ \nஜிபிஏ | எழுத்து தரம் \n4. 0 ஏ + \n> 3.7 ஏ \n> 3.3 ஏ-\n> 3 பி + \n> 2.7 பி \n> 2.3 பி-\n> 2 சி + \n> 1.7 டிகிரி செல். \n> 1.3 சி-\n> 1. 0 டி + \n> 0.7 டி \n> 0.0 டி-\n0. 0 ஈ \n\nஉதாரணம்ஃ \nதரச் சமன்பாடு ([4.0,3,17,2,3,5]) = => ['A +','B','C-','C','A -']", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/35", "entry_point": "primeLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hello\";\nvar x0 = primeLength(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcdcba\";\nvar x1 = primeLength(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"kittens\";\nvar x2 = primeLength(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"orange\";\nvar x3 = primeLength(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"wow\";\nvar x4 = primeLength(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"world\";\nvar x5 = primeLength(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"MadaM\";\nvar x6 = primeLength(arg60);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"Wow\";\nvar x7 = primeLength(arg70);\nvar v7 = true;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"\";\nvar x8 = primeLength(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = \"HI\";\nvar x9 = primeLength(arg90);\nvar v9 = true;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = \"go\";\nvar x10 = primeLength(arg100);\nvar v10 = true;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = \"gogo\";\nvar x11 = primeLength(arg110);\nvar v11 = false;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = \"aaaaaaaaaaaaaaa\";\nvar x12 = primeLength(arg120);\nvar v12 = false;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg130 = \"Madam\";\nvar x13 = primeLength(arg130);\nvar v13 = true;\nif(!compare(x13, v13)){\n    throw 'Error at 14th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg140 = \"M\";\nvar x14 = primeLength(arg140);\nvar v14 = false;\nif(!compare(x14, v14)){\n    throw 'Error at 15th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg150 = \"0\";\nvar x15 = primeLength(arg150);\nvar v15 = false;\nif(!compare(x15, v15)){\n    throw 'Error at 16th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு சரத்தை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள், சரம் இருந்தால் சரி என்று திருப்பித் தருகிறது \nநீளம் ஒரு பகா எண் அல்லது இல்லையெனில் தவறு \nஉதாரணங்கள் \nபகா நீளம் ('ஹலோ') = = உண்மை \nபகா நீளம் ('abcdcba') = = உண்மை \nபகா நீளம் ('பூனைகள்') = = உண்மை \nபகா நீளம் ('ஆரஞ்சு') = = தவறு", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/36", "entry_point": "solve", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1000;\nvar x0 = solve(arg00);\nvar v0 = \"1\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 150;\nvar x1 = solve(arg10);\nvar v1 = \"110\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 147;\nvar x2 = solve(arg20);\nvar v2 = \"1100\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 333;\nvar x3 = solve(arg30);\nvar v3 = \"1001\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 963;\nvar x4 = solve(arg40);\nvar v4 = \"10010\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த கூட்டுத்தொகையை பைனரியில் திருப்பித் தரவும். \n\nஉதாரணம் \nN = 1000 க்கு, இலக்கங்களின் கூட்டுத்தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். \nN = 150 க்கு, இலக்கங்களின் கூட்டுத்தொகை 6 ஆகவும், வெளியீடு \"110\" ஆகவும் இருக்க வேண்டும். \nN = 147 க்கு, இலக்கங்களின் கூட்டுத்தொகை 12 ஆகவும், வெளியீடு \"1100\" ஆகவும் இருக்க வேண்டும். \n\nமாறுபாடுகள்ஃ \n@N முழு எண் \nகட்டுப்பாடுகள்ஃ 0 ≤ N ≤ 10000. \nவெளியீடுஃ \nபைனரி எண்ணின் சரம்", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/37", "entry_point": "getRow", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [];\nvar arg01 = 1;\nvar x0 = getRow(arg00, arg01);\nvar v0 = [];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1]];\nvar arg11 = 2;\nvar x1 = getRow(arg10, arg11);\nvar v1 = [];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[], [1], [1, 2, 3]];\nvar arg21 = 3;\nvar x2 = getRow(arg20, arg21);\nvar v2 = [[2, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியல்களாக வழங்கப்படுகிறது, \nஇது மேட்ரிக்ஸைப் போன்றது, இருப்பினும், மேட்ரிக்ஸ்களைப் போலல்லாமல், \nஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். \nகொடுக்கப்பட்ட lst மற்றும் முழு எண் x, பட்டியலில் உள்ள x முழு எண்களைக் கண்டறியவும், \nமற்றும் டப்பிள்களின் திரும்பும் பட்டியல், [(x1, y1), (x2, y2)...] \nஒவ்வொரு டுபிலும் ஒரு ஒருங்கிணைப்பு-(வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. \nஏறுவரிசையில் வரிசைகளால் ஆரம்பத்தில் ஆயங்களை வரிசைப்படுத்துங்கள். \nமேலும், வரிசையின் ஆயத்தொகுதிகளை நெடுவரிசைகளால் இறங்கு வரிசையில் வரிசைப்படுத்துங்கள். \n\nஉதாரணங்கள்ஃ \nவரிசை பெறு (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nபெற _ வரிசை ([], 1) = = [] \nபெற _ வரிசை ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/38", "entry_point": "nextSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = nextSmallest(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 1, 4, 3, 2];\nvar x1 = nextSmallest(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [];\nvar x2 = nextSmallest(arg20);\nvar v2 = null;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1, 1];\nvar x3 = nextSmallest(arg30);\nvar v3 = null;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 1, 1, 1, 0];\nvar x4 = nextSmallest(arg40);\nvar v4 = 1;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [1, 1];\nvar x5 = nextSmallest(arg50);\nvar v5 = null;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [-35, 34, 12, -45];\nvar x6 = nextSmallest(arg60);\nvar v6 = -35;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nபட்டியலின் 2 வது மிகச்சிறிய உறுப்பைத் தரும் அடுத்த _ மிகச்சிறிய () செயல்பாட்டை எழுதுங்கள். \nஅத்தகைய உறுப்பு இல்லையென்றால் பூஜ்யத்தைத் திருப்பவும். \n\nஅடுத்தது _ மிகச்சிறியது ([1,2,3,4,5]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([5,1,4,3,2]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([]) = = எதுவும் இல்லை \nஅடுத்தது _ மிகச்சிறியது ([1,1]) = = எதுவும் இல்லை", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/39", "entry_point": "isBored", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hello world\";\nvar x0 = isBored(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Is the sky blue?\";\nvar x1 = isBored(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"I love It !\";\nvar x2 = isBored(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"bIt\";\nvar x3 = isBored(arg30);\nvar v3 = 0;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"I feel good today. I will be productive. will kill It\";\nvar x4 = isBored(arg40);\nvar v4 = 2;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"You and I are going for a walk\";\nvar x5 = isBored(arg50);\nvar v5 = 0;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு வார்த்தைகளின் சரம் வழங்கப்படும், மேலும் உங்கள் பணி எண்ணிக்கையை எண்ணுவதாகும். \nசலிப்பு. சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். \nவாக்கியங்கள் '.', '?'அல்லது '!'ஆகியவற்றால் வரையறுக்கப்படுகின்றன. \n\nஉதாரணத்திற்குஃ \n>>> பரவாயில்லை (\"ஹலோ வேர்ல்ட்\") \n0 \n>>> பரவாயில்லை (\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. எனக்கு இந்த வானிலை பிடிக்கும்\") \n1.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/40", "entry_point": "skjkasdkd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nvar x0 = skjkasdkd(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\nvar x1 = skjkasdkd(arg10);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\nvar x2 = skjkasdkd(arg20);\nvar v2 = 13;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\nvar x3 = skjkasdkd(arg30);\nvar v3 = 11;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [0, 81, 12, 3, 1, 21];\nvar x4 = skjkasdkd(arg40);\nvar v4 = 3;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [0, 8, 1, 2, 1, 7];\nvar x5 = skjkasdkd(arg50);\nvar v5 = 7;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [8191];\nvar x6 = skjkasdkd(arg60);\nvar v6 = 19;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [8191, 123456, 127, 7];\nvar x7 = skjkasdkd(arg70);\nvar v7 = 19;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [127, 97, 8192];\nvar x8 = skjkasdkd(arg80);\nvar v8 = 10;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nநீங்கள் மிகப்பெரிய பகா மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] க்கு வெளியீடு 10 ஆக இருக்க வேண்டும். \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] க்கு வெளியீடு 25 ஆக இருக்க வேண்டும். \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] க்கு வெளியீடு 13 ஆக இருக்க வேண்டும். \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] க்கு வெளியீடு 11 ஆக இருக்க வேண்டும். \nlst = [0,81,12, 3,1,21] க்கு வெளியீடு 3 ஆக இருக்க வேண்டும். \nlst = [0,8,1, 2,1,7] க்கு வெளியீடு 7 ஆக இருக்க வேண்டும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/41", "entry_point": "checkDictCase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"p\"':\"pineapple\",'\"b\"':\"banana\"};\nvar x0 = checkDictCase(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"p\"':\"pineapple\",'\"A\"':\"banana\",'\"B\"':\"banana\"};\nvar x1 = checkDictCase(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"p\"':\"pineapple\",\"5\":\"banana\",'\"a\"':\"apple\"};\nvar x2 = checkDictCase(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = {'\"Name\"':\"John\",'\"Age\"':\"36\",'\"City\"':\"Houston\"};\nvar x3 = checkDictCase(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = {'\"STATE\"':\"NC\",'\"ZIP\"':\"12345\"};\nvar x4 = checkDictCase(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = {'\"fruit\"':\"Orange\",'\"taste\"':\"Sweet\"};\nvar x5 = checkDictCase(arg50);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = {};\nvar x6 = checkDictCase(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு அகராதியைக் கொடுத்தால், அனைத்து விசைகளும் கீழே உள்ள சரங்களாக இருந்தால் சரி என்று திருப்பித் தரவும். \nவழக்கு அல்லது அனைத்து விசைகளும் பெரிய வழக்கில் சரங்கள், இல்லையெனில் தவறானது. \nகொடுக்கப்பட்ட அகராதி காலியாக இருப்பதால் செயல்பாடு தவறாக திரும்ப வேண்டும். \nஉதாரணங்கள்ஃ \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"b\": \"வாழைப்பழம்\"}) சரி என்று திரும்ப வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"A\": \"வாழைப்பழம்\", \"B\": \"வாழைப்பழம்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", 8: \"வாழைப்பழம்\", \"a\": \"ஆப்பிள்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"பெயர்\": \"ஜான்\", \"வயது\": \"36\", \"சிட்டி\": \"ஹூஸ்டன்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) சரி என்று திரும்ப வேண்டும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/42", "entry_point": "closestInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"10\";\nvar x0 = closestInteger(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"14.5\";\nvar x1 = closestInteger(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"-15.5\";\nvar x2 = closestInteger(arg20);\nvar v2 = -16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"15.3\";\nvar x3 = closestInteger(arg30);\nvar v3 = 15;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"0\";\nvar x4 = closestInteger(arg40);\nvar v4 = 0;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு எண்ணைக் குறிக்கும் மதிப்பை (சரம்) எடுக்கும் செயல்பாட்டை உருவாக்கவும் \nஅதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தருகிறது. எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். \n\nஉதாரணங்கள் \n>>> நெருங்கிய முழு எண் (\"10\") \n10. \n>>> நெருங்கிய முழு எண் (\"15.3\") \n15. \n\nகுறிப்புஃ \nபூஜ்ஜியத்திலிருந்து வட்டமிடுவது என்பது கொடுக்கப்பட்ட எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, நீங்கள் திருப்பித் தர வேண்டிய ஒன்று \nபூஜ்ஜியத்திலிருந்து மிகத் தொலைவில் உள்ளது. எடுத்துக்காட்டாக, அருகிலுள்ள முழு எண் (\"14.5\") இருக்க வேண்டும். \n15 ஐத் திருப்பி, அருகிலுள்ள முழு எண் (\"-14.5\")-15 ஐத் திருப்பித் தர வேண்டும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/43", "entry_point": "makeAPile", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = makeAPile(arg00);\nvar v0 = [3, 5, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = makeAPile(arg10);\nvar v1 = [4, 6, 8, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = makeAPile(arg20);\nvar v2 = [5, 7, 9, 11, 13];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 6;\nvar x3 = makeAPile(arg30);\nvar v3 = [6, 8, 10, 12, 14, 16];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 8;\nvar x4 = makeAPile(arg40);\nvar v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலைகளின் கற்களின் குவியலை உருவாக்க வேண்டும். \nமுதல் மட்டத்தில் n கற்கள் உள்ளன. \nஅடுத்த கட்டத்தில் உள்ள கற்களின் எண்ணிக்கை பின்வருமாறுஃ \n- n ஒற்றைப்படை என்றால் அடுத்த ஒற்றைப்படை எண். \n- n சமமாக இருந்தால் அடுத்த சம எண். \nஒரு பட்டியலில் உள்ள ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் திருப்பித் தரவும், அங்கு குறியீட்டில் உள்ள உறுப்பு \ni என்பது மட்டத்தில் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது (i + 1). \n\nஉதாரணங்கள்ஃ \n>>> ஒரு குவியலை உருவாக்குங்கள் (3) \n[3,5,7]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/44", "entry_point": "wordsString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hi, my name is John\";\nvar x0 = wordsString(arg00);\nvar v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"One, two, three, four, five, six\";\nvar x1 = wordsString(arg10);\nvar v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Hi, my name\";\nvar x2 = wordsString(arg20);\nvar v2 = [\"Hi\", \"my\", \"name\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"One,, two, three, four, five, six,\";\nvar x3 = wordsString(arg30);\nvar v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"\";\nvar x4 = wordsString(arg40);\nvar v4 = [];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"ahmed     , gamal\";\nvar x5 = wordsString(arg50);\nvar v5 = [\"ahmed\", \"gamal\"];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட சொற்களின் சரம் உங்களுக்கு வழங்கப்படும். உங்கள் பணி \nசரத்தை வார்த்தைகளாகப் பிரிக்கவும், சொற்களின் வரிசையைத் திருப்பவும். \n\nஉதாரணத்திற்குஃ \nசொற்கள் _ சரம் (\"ஹாய், என் பெயர் ஜான்\") = = [\"ஹாய்\", \"என்\", \"பெயர்\", \"\", ஜான் \"] \nசொற்கள் _ சரம் (\"ஒன்று, இரண்டு, மூன்று, நான்கு, ஐந்து, ஆறு\") = = [\"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\"]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/45", "entry_point": "chooseNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar arg01 = 15;\nvar x0 = chooseNum(arg00, arg01);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 13;\nvar arg11 = 12;\nvar x1 = chooseNum(arg10, arg11);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 33;\nvar arg21 = 12354;\nvar x2 = chooseNum(arg20, arg21);\nvar v2 = 12354;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 5234;\nvar arg31 = 5233;\nvar x3 = chooseNum(arg30, arg31);\nvar v3 = -1;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 6;\nvar arg41 = 29;\nvar x4 = chooseNum(arg40, arg41);\nvar v4 = 28;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 27;\nvar arg51 = 10;\nvar x5 = chooseNum(arg50, arg51);\nvar v5 = -1;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 7;\nvar arg61 = 7;\nvar x6 = chooseNum(arg60, arg61);\nvar v6 = -1;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 546;\nvar arg71 = 546;\nvar x7 = chooseNum(arg70, arg71);\nvar v7 = 546;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "இந்த சார்பு x மற்றும் y என்ற இரண்டு நேர்மறை எண்களை எடுத்து, \n[x, y] வரம்பில் உள்ள மிகப் பெரிய இரட்டை முழு எண். \nஅத்தகைய எண் இல்லை, பின்னர் செயல்பாடு-1 ஐத் திருப்ப வேண்டும். \n\nஉதாரணத்திற்குஃ \nதேர்வு செய்க (12,15) = 14 \nதேர்வு செய்க (13,12) =-1", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/46", "entry_point": "roundedAvg", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar x0 = roundedAvg(arg00, arg01);\nvar v0 = \"0b11\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = 13;\nvar x1 = roundedAvg(arg10, arg11);\nvar v1 = \"0b1010\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 964;\nvar arg21 = 977;\nvar x2 = roundedAvg(arg20, arg21);\nvar v2 = \"0b1111001010\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 996;\nvar arg31 = 997;\nvar x3 = roundedAvg(arg30, arg31);\nvar v3 = \"0b1111100100\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 560;\nvar arg41 = 851;\nvar x4 = roundedAvg(arg40, arg41);\nvar v4 = \"0b1011000010\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 185;\nvar arg51 = 546;\nvar x5 = roundedAvg(arg50, arg51);\nvar v5 = \"0b101101110\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 362;\nvar arg61 = 496;\nvar x6 = roundedAvg(arg60, arg61);\nvar v6 = \"0b110101101\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 350;\nvar arg71 = 902;\nvar x7 = roundedAvg(arg70, arg71);\nvar v7 = \"0b1001110010\";\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 197;\nvar arg81 = 233;\nvar x8 = roundedAvg(arg80, arg81);\nvar v8 = \"0b11010111\";\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 7;\nvar arg91 = 5;\nvar x9 = roundedAvg(arg90, arg91);\nvar v9 = -1;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = 5;\nvar arg101 = 1;\nvar x10 = roundedAvg(arg100, arg101);\nvar v10 = -1;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = 5;\nvar arg111 = 5;\nvar x11 = roundedAvg(arg110, arg111);\nvar v11 = \"0b101\";\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m வழங்கப்படுகின்றன, மேலும் உங்கள் பணி கணக்கிடுவதாகும் \nn முதல் m வரையிலான முழு எண்களின் சராசரி (n மற்றும் m உட்பட). \nஅருகிலுள்ள முழு எண்ணுக்கு பதிலை வட்டமிட்டு அதை பைனரியாக மாற்றவும். \nn என்பது m ஐ விட அதிகமாக இருந்தால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணம்ஃ \nவட்டமான _ avg (1,5) => \"0b11\" \nவட்டமான (7,5) =>-1 \nவட்டமான _ அவ்ஜி (10,20) => \"0பி1111\" \nவட்டமான _ avg (20,33) => \"0b11010\"", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/47", "entry_point": "f", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = f(arg00);\nvar v0 = [1, 2, 6, 24, 15];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = f(arg10);\nvar v1 = [1, 2, 6, 24, 15, 720, 28];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = f(arg20);\nvar v2 = [1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 3;\nvar x3 = f(arg30);\nvar v3 = [1, 2, 6];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "n ஐ ஒரு அளவுருவாக எடுக்கும் f செயல்பாட்டை செயல்படுத்தவும், \nமற்றும் அளவு n இன் பட்டியலைத் திருப்பித் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணியாக இருந்தால் i சமமாக இருந்தால் \nஅல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை. \nநான் 1 இல் தொடங்குகிறேன். \ni இன் காரணி என்பது 1 முதல் i (1 * 2 *... * i) வரையிலான எண்களின் பெருக்கமாகும். \nஉதாரணம்ஃ \nf (5) = = [1,2,6,24,15]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/48", "entry_point": "evenOddPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = evenOddPalindrome(arg00);\nvar v0 = [8, 13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = evenOddPalindrome(arg10);\nvar v1 = [4, 6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = evenOddPalindrome(arg20);\nvar v2 = [1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 63;\nvar x3 = evenOddPalindrome(arg30);\nvar v3 = [6, 8];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 25;\nvar x4 = evenOddPalindrome(arg40);\nvar v4 = [5, 6];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 19;\nvar x5 = evenOddPalindrome(arg50);\nvar v5 = [4, 6];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 9;\nvar x6 = evenOddPalindrome(arg60);\nvar v6 = [4, 5];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 1;\nvar x7 = evenOddPalindrome(arg70);\nvar v7 = [0, 1];\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், சம மற்றும் ஒற்றைப்படை எண்ணிக்கையைக் கொண்ட ஒரு டுபிலைத் திருப்பவும் \n(1, n) வரம்பிற்குள் வரும் முழு எண் பாலிண்ட்ரோம்கள் உட்பட. \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ 3 \nவெளியீடுஃ (1,2) \nவிளக்கம்ஃ \nமுழு எண் பாலிண்ட்ரோம் 1,2,3. அவற்றில் ஒன்று சமம், அவற்றில் இரண்டு ஒற்றைப்படை. \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ 12 \nவெளியீடுஃ (4,6) \nவிளக்கம்ஃ \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவற்றில் நான்கு சமமானவை, அவற்றில் 6 ஒற்றைப்படை. \n\nகுறிப்புஃ \n1. 1 <= n <= 10 3 \n2. திரும்பிய டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு எண் பாலிண்ட்ரோம்களின் எண்ணிக்கையைக் கொண்டுள்ளது.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/49", "entry_point": "moveOneBall", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 4, 5, 1, 2];\nvar x0 = moveOneBall(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 5, 10, 1, 2];\nvar x1 = moveOneBall(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [4, 3, 1, 2];\nvar x2 = moveOneBall(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [3, 5, 4, 1, 2];\nvar x3 = moveOneBall(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [];\nvar x4 = moveOneBall(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "நம்மிடம் n முழு எண்களின் வரிசை'arr'உள்ளது arr [1], arr [2],..., arr [N]. \nவரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். என்பதைத் தீர்மானிப்பதே உங்கள் பணி \nசெயல்பாட்டின் மூலம் ஒரு வரிசையை குறைக்காத வரிசையில் வரிசைப்படுத்த முடியும் \nகொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ \nஎத்தனை முறை வேண்டுமானாலும் சரியான ஷிப்ட் செயல்பாட்டைச் செய்ய நீங்கள் அனுமதிக்கப்படுகிறீர்கள். \n\nஒரு வலது ஷிப்ட் செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் ஒன்றால் மாற்றுவதாகும். \nசரியான திசையில் நிலை. வரிசையின் கடைசி உறுப்பு நகர்த்தப்படும் \nவரிசையில் தொடக்க நிலை அதாவது 0 வது குறியீடு. \n\nமேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் \nபின்னர் ட்ரு இல்லையெனில் ஃபால்ஸ் என்று திருப்பிக் கொடுங்கள். \nகொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், சரி என்று திருப்பி விடுங்கள். \n\nகுறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பது உறுதி செய்யப்படுகிறது. \n\nஉதாரணத்திற்குஃ \n\nமூவ் ஒன் பந்து ([3,4,5,1,2]) = => உண்மை \nவிளக்கம்ஃ 2 வலது ஷிப்ட் செயல்பாடுகளில் செயல்படுவதன் மூலம், குறைக்கப்படாத வரிசை முடியும் \nகொடுக்கப்பட்ட வரிசைக்கு அடைய வேண்டும். \nமூவ் ஒன் பந்து ([3,5,4,1,2]) = => பொய் \nவிளக்கம்ஃ கொடுக்கப்பட்ட ஆர்டருக்கு குறைக்கப்படாத ஆர்டரைப் பெற முடியாது \nஎந்த எண்ணிக்கையிலான சரியான ஷிப்ட் செயல்பாடுகளைச் செய்வதன் மூலம் வரிசை.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/50", "entry_point": "exchange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = [1, 2, 3, 4];\nvar x0 = exchange(arg00, arg01);\nvar v0 = \"YES\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [1, 5, 3, 4];\nvar x1 = exchange(arg10, arg11);\nvar v1 = \"NO\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = [2, 1, 4, 3];\nvar x2 = exchange(arg20, arg21);\nvar v2 = \"YES\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [5, 7, 3];\nvar arg31 = [2, 6, 4];\nvar x3 = exchange(arg30, arg31);\nvar v3 = \"YES\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [5, 7, 3];\nvar arg41 = [2, 6, 3];\nvar x4 = exchange(arg40, arg41);\nvar v4 = \"NO\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [3, 2, 6, 1, 8, 9];\nvar arg51 = [3, 5, 5, 1, 1, 1];\nvar x5 = exchange(arg50, arg51);\nvar v5 = \"NO\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [100, 200];\nvar arg61 = [200, 200];\nvar x6 = exchange(arg60, arg61);\nvar v6 = \"YES\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "இந்த சிக்கலில், எண்களின் இரண்டு பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை நீங்கள் செயல்படுத்துவீர்கள், \nமற்றும் கூறுகளின் பரிமாற்றத்தை செய்ய முடியுமா என்பதை தீர்மானிக்கிறது \nஅவர்களிடையே lst1 ஐ இரட்டை எண்களின் பட்டியலை மட்டுமே உருவாக்க வேண்டும். \nlst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. \nசெய்ய lst1 மற்றும் lst2 க்கு இடையில் கூறுகளை பரிமாறிக்கொள்ள முடிந்தால் \nlst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"ஆம்\" என்று திருப்பித் தரவும். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஉதாரணத்திற்குஃ \nபரிமாற்றம் ([1,2,3,4], [1,2,3,4]) => \"ஆம்\" \nபரிமாற்றம் ([1,2,3,4], [1,5,3,4]) => \"இல்லை\" \nஉள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/51", "entry_point": "reverseDelete", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcde\";\nvar arg01 = \"ae\";\nvar x0 = reverseDelete(arg00, arg01);\nvar v0 = [\"bcd\", false];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcdef\";\nvar arg11 = \"b\";\nvar x1 = reverseDelete(arg10, arg11);\nvar v1 = [\"acdef\", false];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcdedcba\";\nvar arg21 = \"ab\";\nvar x2 = reverseDelete(arg20, arg21);\nvar v2 = [\"cdedc\", true];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"dwik\";\nvar arg31 = \"w\";\nvar x3 = reverseDelete(arg30, arg31);\nvar v3 = [\"dik\", false];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"a\";\nvar arg41 = \"a\";\nvar x4 = reverseDelete(arg40, arg41);\nvar v4 = [\"\", true];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"abcdedcba\";\nvar arg51 = \"\";\nvar x5 = reverseDelete(arg50, arg51);\nvar v5 = [\"abcdedcba\", true];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"abcdedcba\";\nvar arg61 = \"v\";\nvar x6 = reverseDelete(arg60, arg61);\nvar v6 = [\"abcdedcba\", true];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"vabba\";\nvar arg71 = \"v\";\nvar x7 = reverseDelete(arg70, arg71);\nvar v7 = [\"abba\", true];\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"mamma\";\nvar arg81 = \"mia\";\nvar x8 = reverseDelete(arg80, arg81);\nvar v8 = [\"\", true];\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பணி \nஎங்களுக்கு இரண்டு சரங்கள் s மற்றும் c வழங்கப்பட்டுள்ளன, c இல் உள்ள எந்த எழுத்துக்கும் சமமான s இல் உள்ள அனைத்து எழுத்துக்களையும் நீங்கள் நீக்க வேண்டும். \nபின்னர் ரிசல்ட் ஸ்ட்ரிங் பாலிண்ட்ரோமா என்பதைச் சரிபார்க்கவும். \nஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. \nகாசோலைக்கு முடிவு சரம் மற்றும் உண்மை/தவறு ஆகியவற்றைக் கொண்ட ஒரு டப்பிளை நீங்கள் திருப்பித் தர வேண்டும். \nஉதாரணம் \nஎஸ் = \"ஏபிசிடிஇ\", சி = \"ஏஇ\" க்கு, முடிவு ('பிசிடி', தவறானது) ஆக இருக்க வேண்டும். \ns = \"abcdef\", c = \"b\" க்கு முடிவு ('acdef', பொய்) ஆக இருக்க வேண்டும். \ns = \"abcdedcba\", c = \"ab\" க்கு, முடிவு ('cdedc', உண்மை) ஆக இருக்க வேண்டும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/52", "entry_point": "maxFill", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nvar arg01 = 1;\nvar x0 = maxFill(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nvar arg11 = 2;\nvar x1 = maxFill(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[0, 0, 0], [0, 0, 0]];\nvar arg21 = 5;\nvar x2 = maxFill(arg20, arg21);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nvar arg31 = 2;\nvar x3 = maxFill(arg30, arg31);\nvar v3 = 4;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nvar arg41 = 9;\nvar x4 = maxFill(arg40, arg41);\nvar v4 = 2;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு செவ்வக கிணறு கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றைக் குறிக்கிறது. \nஒரு வரிசையில் உள்ள ஒவ்வொன்றும் ஒரு ஒற்றை அலகு தண்ணீரைக் குறிக்கிறது. \nஒவ்வொரு கிணற்றிலும் அதனுடன் தொடர்புடைய ஒரு வாளி உள்ளது, அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்க இது பயன்படுத்தப்படலாம். \nமேலும் அனைத்து வாளிகளும் ஒரே மாதிரியான திறனைக் கொண்டுள்ளன. \nகிணறுகளை காலி செய்ய வாளிகளைப் பயன்படுத்துவதே உங்கள் பணி. \nநீங்கள் வாளிகளைக் குறைக்க வேண்டிய எண்ணிக்கையை உள்ளிடவும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nவாளி திறன் (_ c): 1 \nவெளியீடுஃ 6 \n\nஉதாரணம் 2: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1] \nவாளி திறன் (_ c): 2 \nவெளியீடுஃ 5 \n\nஉதாரணம் 3: \nஉள்ளீடுஃ \nகட்டம்ஃ [0,0,0], [0,0,0] \nவாளி திறன்ஃ 5 \nவெளியீடுஃ 0 \n\nகட்டுப்பாடுகள்ஃ \n* அனைத்து கிணறுகளுக்கும் ஒரே நீளம் இருக்கும். \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= கட்டம் [:, 1]. நீளம் <= 10 ^ 2 \nகட்டம் [i] [j]-> 0 | 1 \n* 1 <= திறன் <= 10", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/53", "entry_point": "selectWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Mary had a little lamb\";\nvar arg01 = 4;\nvar x0 = selectWords(arg00, arg01);\nvar v0 = [\"little\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Mary had a little lamb\";\nvar arg11 = 3;\nvar x1 = selectWords(arg10, arg11);\nvar v1 = [\"Mary\", \"lamb\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"simple white space\";\nvar arg21 = 2;\nvar x2 = selectWords(arg20, arg21);\nvar v2 = [];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"Hello world\";\nvar arg31 = 4;\nvar x3 = selectWords(arg30, arg31);\nvar v3 = [\"world\"];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"Uncle sam\";\nvar arg41 = 3;\nvar x4 = selectWords(arg40, arg41);\nvar v4 = [\"Uncle\"];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"\";\nvar arg51 = 4;\nvar x5 = selectWords(arg50, arg51);\nvar v5 = [];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"a b c d e f\";\nvar arg61 = 1;\nvar x6 = selectWords(arg60, arg61);\nvar v6 = [\"b\", \"c\", \"d\", \"f\"];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிக்கப்பட்டுள்ளீர்கள் \nசரம் s இலிருந்து அனைத்து சொற்களின் பட்டியலையும் சரியாக உள்ளடக்கிய ஒரு செயல்பாடு \nn மெய், வரிசையில் இந்த சொற்கள் சரம் s இல் தோன்றும். \nசரம் s காலியாக இருந்தால், செயல்பாடு ஒரு வெற்று பட்டியலைத் திருப்பித் தர வேண்டும். \nகுறிப்புஃ உள்ளீட்டு சரத்தில் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே உள்ளன என்று நீங்கள் கருதலாம். \nஉதாரணங்கள்ஃ \nதேர்ந்தெடுக்கும் சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) = => [\"சிறிய\"] \nதேர்ந்தெடுக்கப்பட்ட சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) = => [\"மேரி\", \"ஆட்டுக்குட்டி\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"எளிய வெள்ளை இடம்\", 2) = => [] \nதேர்ந்தெடுக்கும் சொற்கள் (\"ஹலோ வேர்ல்ட்\", 4) = => [\"வேர்ல்ட்\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"மாமா சாம்\", 3) = => [\"மாமா\"]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/54", "entry_point": "maximum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-3, -4, 5];\nvar arg01 = 3;\nvar x0 = maximum(arg00, arg01);\nvar v0 = [-4, -3, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, -4, 4];\nvar arg11 = 2;\nvar x1 = maximum(arg10, arg11);\nvar v1 = [4, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-3, 2, 1, 2, -1, -2, 1];\nvar arg21 = 1;\nvar x2 = maximum(arg20, arg21);\nvar v2 = [2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [123, -123, 20, 0, 1, 2, -3];\nvar arg31 = 3;\nvar x3 = maximum(arg30, arg31);\nvar v3 = [2, 20, 123];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [-123, 20, 0, 1, 2, -3];\nvar arg41 = 4;\nvar x4 = maximum(arg40, arg41);\nvar v4 = [0, 1, 2, 20];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [5, 15, 0, 3, -13, -8, 0];\nvar arg51 = 7;\nvar x5 = maximum(arg50, arg51);\nvar v5 = [-13, -8, 0, 0, 3, 5, 15];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [-1, 0, 2, 5, 3, -10];\nvar arg61 = 2;\nvar x6 = maximum(arg60, arg61);\nvar v6 = [3, 5];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [1, 0, 5, -7];\nvar arg71 = 1;\nvar x7 = maximum(arg70, arg71);\nvar v7 = [5];\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [4, -4];\nvar arg81 = 2;\nvar x8 = maximum(arg80, arg81);\nvar v8 = [-4, 4];\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = [-10, 10];\nvar arg91 = 2;\nvar x9 = maximum(arg90, arg91);\nvar v9 = [-10, 10];\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = [1, 2, 3, -23, 243, -400, 0];\nvar arg101 = 0;\nvar x10 = maximum(arg100, arg101);\nvar v10 = [];\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "முழு எண்களின் வரிசை arr மற்றும் நேர்மறை முழு எண் k கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பித் தரவும். \narr இல் அதிகபட்ச k எண்களுடன் k நீளம். \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ arr = [-3,-4,5], k = 3 \nவெளியீடுஃ [-4,-3,5] \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ arr = [4,-4,4], k = 2 \nவெளியீடுஃ [4,4] \n\nஉதாரணம் 3: \n\nஉள்ளீடுஃ arr = [-3,2,1,2,-1,2,1], k = 1 \nவெளியீடுஃ [2] \n\nகுறிப்புஃ \n1. வரிசையின் நீளம் [1000] வரம்பில் இருக்கும். \n2. வரிசையில் உள்ள உறுப்புகள் [-1000] வரம்பில் இருக்கும். \n3. 0 <= k <= லென் (arr)", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/55", "entry_point": "addElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\nvar arg01 = 3;\nvar x0 = addElements(arg00, arg01);\nvar v0 = -4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [111, 121, 3, 4000, 5, 6];\nvar arg11 = 2;\nvar x1 = addElements(arg10, arg11);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\nvar arg21 = 4;\nvar x2 = addElements(arg20, arg21);\nvar v2 = 125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nvar arg31 = 4;\nvar x3 = addElements(arg30, arg31);\nvar v3 = 24;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1];\nvar arg41 = 1;\nvar x4 = addElements(arg40, arg41);\nvar v4 = 1;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்பவும் \narr இன் முதல் k உறுப்புகளிலிருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் கூட்டுத்தொகை. \n\nஉதாரணம்ஃ \n\nஉள்ளீடுஃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nவெளியீடுஃ 24 #21 + 3 இன் கூட்டுத்தொகை \n\nகட்டுப்பாடுகள்ஃ \n1. 1 <= லென் (arr) <= 100 \n2. 1 <= k <= லென் (arr)", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/56", "entry_point": "intersection", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2];\nvar arg01 = [2, 3];\nvar x0 = intersection(arg00, arg01);\nvar v0 = \"NO\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 1];\nvar arg11 = [0, 4];\nvar x1 = intersection(arg10, arg11);\nvar v1 = \"NO\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-3, -1];\nvar arg21 = [-5, 5];\nvar x2 = intersection(arg20, arg21);\nvar v2 = \"YES\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [-2, 2];\nvar arg31 = [-4, 0];\nvar x3 = intersection(arg30, arg31);\nvar v3 = \"YES\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [-11, 2];\nvar arg41 = [-1, -1];\nvar x4 = intersection(arg40, arg41);\nvar v4 = \"NO\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [1, 2];\nvar arg51 = [3, 5];\nvar x5 = intersection(arg50, arg51);\nvar v5 = \"NO\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [1, 2];\nvar arg61 = [1, 2];\nvar x6 = intersection(arg60, arg61);\nvar v6 = \"NO\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [-2, -2];\nvar arg71 = [-3, -2];\nvar x7 = intersection(arg70, arg71);\nvar v7 = \"NO\";\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு இரண்டு இடைவெளிகள் வழங்கப்படுகின்றன, \nஇங்கு ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்களாகும். எடுத்துக்காட்டாக, இடைவெளி = (தொடக்கம், முடிவு) = (1,2). \nகொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டுள்ளன, அதாவது இடைவெளி (தொடக்கம், முடிவு) \nஇதில் தொடக்கமும் முடிவும் அடங்கும். \nகொடுக்கப்பட்ட ஒவ்வொரு இடைவெளியிலும், அதன் தொடக்கம் அதன் முடிவை விட குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது. \nஇந்த இரண்டின் குறுக்குவெட்டின் நீளம் எவ்வளவு என்பதைத் தீர்மானிப்பதே உங்கள் பணி. \nஇடைவெளிகள் ஒரு பகா எண். \nஎடுத்துக்காட்டாக, (1,3), (2,4) இடைவெளிகளின் குறுக்குவெட்டு (2,3) ஆகும். \nஅதன் நீளம் 1, இது ஒரு பகா எண் அல்ல. \nகுறுக்குவெட்டின் நீளம் ஒரு பகா எண்ணாக இருந்தால், \"ஆம்\" என்று திருப்பிக் கொடுங்கள். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஇரண்டு இடைவெளிகளும் வெட்டவில்லை என்றால், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \n\n[உள்ளீடு/வெளியீடு] மாதிரிகள்ஃ \nகுறுக்குவெட்டு ((1,2,3)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-1,1), (0,4)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-3,-1), (-5,5)) = => \"ஆம்\"", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/57", "entry_point": "tri", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = tri(arg00);\nvar v0 = [1, 3, 2.0, 8.0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = tri(arg10);\nvar v1 = [1, 3, 2.0, 8.0, 3.0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = tri(arg20);\nvar v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 6;\nvar x3 = tri(arg30);\nvar v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 7;\nvar x4 = tri(arg40);\nvar v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 8;\nvar x5 = tri(arg50);\nvar v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 9;\nvar x6 = tri(arg60);\nvar v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 20;\nvar x7 = tri(arg70);\nvar v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 0;\nvar x8 = tri(arg80);\nvar v8 = [1];\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 1;\nvar x9 = tri(arg90);\nvar v9 = [1, 3];\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "எல்லோருக்கும் ஃபிபோனாச்சி வரிசை தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது \nகடந்த இரண்டு நூற்றாண்டுகள். இருப்பினும், மக்களுக்குத் தெரியாதது டிரிபோனாச்சி வரிசை. \nடிரிபோனாச்சி வரிசை மீண்டும் மீண்டும் வரையறுக்கப்படுகிறதுஃ \nமுக்கோணம் (1) = 3 \nமுக்கோணம் (n) = 1 + n/2, n சமமாக இருந்தால். \nமுக்கோணம் (n) = முக்கோணம் (n-1) + முக்கோணம் (n-2) + முக்கோணம் (n + 1), n ஒற்றைப்படை என்றால். \nஉதாரணத்திற்குஃ \nமுக்கோணம் (2) = 1 + (2/2) = 2 \nமுக்கோணம் (4) = 3 \nமுக்கோணம் (3) = முக்கோணம் (2) + முக்கோணம் (1) + முக்கோணம் (4) \n= 2 + 3 + 3 = 8 \nஉங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n வழங்கப்படுகிறது, நீங்கள் ஒரு பட்டியலைத் திருப்பித் தர வேண்டும் \nடிரிபோனாச்சி வரிசையின் முதல் n + 1 எண்கள். \nஉதாரணங்கள்ஃ \nமுக்கோணம் (3) = [1,3,2,8]", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/58", "entry_point": "digits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = digits(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 54;\nvar x1 = digits(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = digits(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 5014;\nvar x3 = digits(arg30);\nvar v3 = 5;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 98765;\nvar x4 = digits(arg40);\nvar v4 = 315;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 5576543;\nvar x5 = digits(arg50);\nvar v5 = 2625;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 2468;\nvar x6 = digits(arg60);\nvar v6 = 0;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றைப்படை இலக்கங்களின் பெருக்கல் திரும்பும். \nஅனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பவும். \nஉதாரணத்திற்குஃ \nஇலக்கங்கள் (1) = = 1 \nஇலக்கங்கள் (4) = = 0 \nஇலக்கங்கள் (235) = = 15", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/59", "entry_point": "isNested", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"[[]]\";\nvar x0 = isNested(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"[]]]]]]][[[[[]\";\nvar x1 = isNested(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"[][]\";\nvar x2 = isNested(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"[]\";\nvar x3 = isNested(arg30);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"[[[[]]]]\";\nvar x4 = isNested(arg40);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"[]]]]]]]]]]\";\nvar x5 = isNested(arg50);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"[][][[]]\";\nvar x6 = isNested(arg60);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"[[]\";\nvar x7 = isNested(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"[]]\";\nvar x8 = isNested(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = \"[[]][[\";\nvar x9 = isNested(arg90);\nvar v9 = true;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = \"[[][]]\";\nvar x10 = isNested(arg100);\nvar v10 = true;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = \"\";\nvar x11 = isNested(arg110);\nvar v11 = false;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = \"[[[[[[[[\";\nvar x12 = isNested(arg120);\nvar v12 = false;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg130 = \"]]]]]]]]\";\nvar x13 = isNested(arg130);\nvar v13 = false;\nif(!compare(x13, v13)){\n    throw 'Error at 14th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "சதுர அடைப்புகளை மட்டுமே கொண்ட ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். \nஅடைப்புக்குறிகளின் செல்லுபடியாகும் பின்தொடர்தல் இருந்தால் மட்டுமே செயல்பாடு உண்மை என்று திரும்ப வேண்டும் \nஅங்கு அடுத்தடுத்த குறைந்தபட்சம் ஒரு அடைப்புக்குறிப்பு கூடு கட்டப்பட்டுள்ளது. \n\nnested ('[[]]') என்பது உண்மை \nis _ nested ('[]]]]] [[[[]') பொய் \nis _ nested ('[] []') பொய் \nis _ nested ('[]') என்பது தவறானது \nnested ('[[] []]') என்பது உண்மை \nnested ('[[]] [[') என்பது உண்மை", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/60", "entry_point": "sumSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = sumSquares(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1.0, 2, 3];\nvar x1 = sumSquares(arg10);\nvar v1 = 14;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 5, 7];\nvar x2 = sumSquares(arg20);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1.4, 4.2, 0];\nvar x3 = sumSquares(arg30);\nvar v3 = 29;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [-2.4, 1, 1];\nvar x4 = sumSquares(arg40);\nvar v4 = 6;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [100, 1, 15, 2];\nvar x5 = sumSquares(arg50);\nvar v5 = 10230;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [10000, 10000];\nvar x6 = sumSquares(arg60);\nvar v6 = 200000000;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [-1.4, 4.6, 6.3];\nvar x7 = sumSquares(arg70);\nvar v7 = 75;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [-1.4, 17.9, 18.9, 19.9];\nvar x8 = sumSquares(arg80);\nvar v8 = 1086;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = [0];\nvar x9 = sumSquares(arg90);\nvar v9 = 0;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = [-1];\nvar x10 = sumSquares(arg100);\nvar v10 = 1;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = [-1, 1, 0];\nvar x11 = sumSquares(arg110);\nvar v11 = 2;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nகொடுக்கப்பட்ட பட்டியலில் உள்ள வர்க்க எண்களின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும், \nபட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் முதலில் மேல் உள்ளீடு (உச்சவரம்பு) க்கு சுற்றவும். \nஉதாரணங்கள்ஃ \nlst = [1,2,3] க்கு வெளியீடு 14 ஆக இருக்க வேண்டும். \nlst = [1,4,9] க்கு வெளியீடு 98 ஆக இருக்க வேண்டும். \nlst = [1,3,5, 7] க்கு வெளியீடு 84 ஆக இருக்க வேண்டும். \nlst = [1.4,4.2, 0] க்கு வெளியீடு 29 ஆக இருக்க வேண்டும். \nlst = [-2.4,1, 1] க்கு வெளியீடு 6 ஆக இருக்க வேண்டும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/61", "entry_point": "checkIfLastCharIsALetter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"apple\";\nvar x0 = checkIfLastCharIsALetter(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"apple pi e\";\nvar x1 = checkIfLastCharIsALetter(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"eeeee\";\nvar x2 = checkIfLastCharIsALetter(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"A\";\nvar x3 = checkIfLastCharIsALetter(arg30);\nvar v3 = true;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"Pumpkin pie \";\nvar x4 = checkIfLastCharIsALetter(arg40);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"Pumpkin pie 1\";\nvar x5 = checkIfLastCharIsALetter(arg50);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"\";\nvar x6 = checkIfLastCharIsALetter(arg60);\nvar v6 = false;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"eeeee e \";\nvar x7 = checkIfLastCharIsALetter(arg70);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"apple pie\";\nvar x8 = checkIfLastCharIsALetter(arg80);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = \"apple pi e \";\nvar x9 = checkIfLastCharIsALetter(arg90);\nvar v9 = false;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கடைசி எழுத்து இருந்தால் சரி என்று திரும்பும் செயல்பாட்டை உருவாக்கவும் \nகொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை \nஒரு வார்த்தையின் ஒரு பகுதி, இல்லையெனில் பொய். \nகுறிப்புஃ \"சொல்\" என்பது இடத்தால் பிரிக்கப்பட்ட எழுத்துக்களின் தொகுப்பாகும். \n\nஉதாரணங்கள்ஃ \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ ஒரு _ எழுத்து (\"ஆப்பிள் பை\") \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") சரி \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") பொய் \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"\") பொய்", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/62", "entry_point": "canArrange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 4, 3, 5];\nvar x0 = canArrange(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 4, 5];\nvar x1 = canArrange(arg10);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\nvar x2 = canArrange(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [4, 8, 5, 7, 3];\nvar x3 = canArrange(arg30);\nvar v3 = 4;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [];\nvar x4 = canArrange(arg40);\nvar v4 = -1;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு தனிமத்தின் மிகப்பெரிய குறியீட்டைத் தரும் செயல்பாட்டை உருவாக்கவும் \nஅது உடனடியாக அதற்கு முந்தைய உறுப்பை விட பெரியதாகவோ அல்லது சமமாகவோ இல்லை. \nஅத்தகைய உறுப்பு எதுவும் இல்லை, பின்னர் திரும்பும்-1. கொடுக்கப்பட்ட வரிசை கொண்டிருக்காது \nஇரட்டை மதிப்புகள். \n\nஉதாரணங்கள்ஃ \ncan _ அரங்கேற்றலாம் ([1,2,4, 3,5]) = 3 \nசெய்ய முடியும் ([1,2,3]) =-1", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/63", "entry_point": "largestSmallestIntegers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 1, 3, 5, 7];\nvar x0 = largestSmallestIntegers(arg00);\nvar v0 = [null, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 1, 3, 5, 7, 0];\nvar x1 = largestSmallestIntegers(arg10);\nvar v1 = [null, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 2, 4, 5, 6, -2];\nvar x2 = largestSmallestIntegers(arg20);\nvar v2 = [-2, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [4, 5, 3, 6, 2, 7, -7];\nvar x3 = largestSmallestIntegers(arg30);\nvar v3 = [-7, 2];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\nvar x4 = largestSmallestIntegers(arg40);\nvar v4 = [-9, 2];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [];\nvar x5 = largestSmallestIntegers(arg50);\nvar v5 = [null, null];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [0];\nvar x6 = largestSmallestIntegers(arg60);\nvar v6 = [null, null];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = [-1, -3, -5, -6];\nvar x7 = largestSmallestIntegers(arg70);\nvar v7 = [-1, null];\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = [-1, -3, -5, -6, 0];\nvar x8 = largestSmallestIntegers(arg80);\nvar v8 = [-1, null];\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = [-6, -4, -4, -3, 1];\nvar x9 = largestSmallestIntegers(arg90);\nvar v9 = [-3, 1];\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = [-6, -4, -4, -3, -100, 1];\nvar x10 = largestSmallestIntegers(arg100);\nvar v10 = [-3, 1];\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு டுபில் (a, b) ஐத் தரும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு'a'என்பது \nஎதிர்மறை முழு எண்களில் மிகப் பெரியது, மற்றும்'b'மிகச்சிறியது \nஒரு பட்டியலில் நேர்மறை முழு எண்கள். \nஎதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை இல்லை என்று திருப்பித் தரவும். \n\nஉதாரணங்கள்ஃ \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([2,4,1,3,5,7]) = = (எதுவும் இல்லை, 1) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([]) = = (எதுவும் இல்லை, எதுவும் இல்லை) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([0]) = = (எதுவும் இல்லை, எதுவும் இல்லை)", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/64", "entry_point": "specialFactorial", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = specialFactorial(arg00);\nvar v0 = 288;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = specialFactorial(arg10);\nvar v1 = 34560;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = specialFactorial(arg20);\nvar v2 = 125411328000;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 1;\nvar x3 = specialFactorial(arg30);\nvar v3 = 1;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nபிரேசில் _ காரணி (n) = n! * (n-1)! * (n-2)! *... * 1! \nஇங்கு n> 0 \n\nஉதாரணத்திற்குஃ \n>>> சிறப்பு _ காரணி (4) \n288 \n\nசெயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும், மேலும் சிறப்புத் தொகையைத் திருப்பித் தர வேண்டும். \nஇந்த முழு எண்ணின் காரணி.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/65", "entry_point": "wordsInSentence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"This is a test\";\nvar x0 = wordsInSentence(arg00);\nvar v0 = \"is\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"lets go for swimming\";\nvar x1 = wordsInSentence(arg10);\nvar v1 = \"go for\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"there is no place available here\";\nvar x2 = wordsInSentence(arg20);\nvar v2 = \"there is no place\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"Hi I am Hussein\";\nvar x3 = wordsInSentence(arg30);\nvar v3 = \"Hi am Hussein\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"go for it\";\nvar x4 = wordsInSentence(arg40);\nvar v4 = \"go for it\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"here\";\nvar x5 = wordsInSentence(arg50);\nvar v5 = \"\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"here is\";\nvar x6 = wordsInSentence(arg60);\nvar v6 = \"is\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு வாக்கியத்தைக் குறிக்கும் சரம் உங்களுக்கு வழங்கப்படுகிறது, \nவாக்கியத்தில் ஒரு இடைவெளியால் பிரிக்கப்பட்ட சில சொற்கள் உள்ளன, \nஅசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை நீங்கள் திருப்பித் தர வேண்டும், \nஅதன் நீளம் பகா எண்கள், \nபுதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் வரிசையைப் போலவே இருக்க வேண்டும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" \nவெளியீடுஃ \"உள்ளது\" \n\nஉதாரணம் 2: \nஉள்ளீடுஃ வாக்கியம் = \"நீச்சலுக்கு செல்வோம்\" \nவெளியீடுஃ \"செல்லுங்கள்\" \n\nகட்டுப்பாடுகள்ஃ \n* 1 <= லென் (வாக்கியம்) <= 100 \n* வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/66", "entry_point": "simplify", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"1/5\";\nvar arg01 = \"5/1\";\nvar x0 = simplify(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1/6\";\nvar arg11 = \"2/1\";\nvar x1 = simplify(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"5/1\";\nvar arg21 = \"3/1\";\nvar x2 = simplify(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"7/10\";\nvar arg31 = \"10/2\";\nvar x3 = simplify(arg30, arg31);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"2/10\";\nvar arg41 = \"50/10\";\nvar x4 = simplify(arg40, arg41);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"7/2\";\nvar arg51 = \"4/2\";\nvar x5 = simplify(arg50, arg51);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"11/6\";\nvar arg61 = \"6/1\";\nvar x6 = simplify(arg60, arg61);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"2/3\";\nvar arg71 = \"5/2\";\nvar x7 = simplify(arg70, arg71);\nvar v7 = false;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"5/2\";\nvar arg81 = \"3/5\";\nvar x8 = simplify(arg80, arg81);\nvar v8 = false;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = \"2/4\";\nvar arg91 = \"8/4\";\nvar x9 = simplify(arg90, arg91);\nvar v9 = true;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = \"2/4\";\nvar arg101 = \"4/2\";\nvar x10 = simplify(arg100, arg101);\nvar v10 = true;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = \"1/5\";\nvar arg111 = \"5/1\";\nvar x11 = simplify(arg110, arg111);\nvar v11 = true;\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = \"1/5\";\nvar arg121 = \"1/5\";\nvar x12 = simplify(arg120, arg121);\nvar v12 = false;\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்கள் பணி வெளிப்பாட்டை எளிதாக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவதாகும் \nx * n. x * n ஒரு முழு எண்ணை மதிப்பீடு செய்தால் சரி மற்றும் தவறு என்று செயல்பாடு காட்டும். \nஇல்லையெனில். x மற்றும் n இரண்டும், ஒரு பின்னத்தின் சரம் பிரதிநிதித்துவம் மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, \nஇங்கு எண் மற்றும் வகுத்தல் இரண்டும் நேர்மறை முழு எண்களாகும். \n\nx, மற்றும் n ஆகியவை செல்லுபடியாகும் பின்னங்கள் என்றும், பூஜ்ஜியத்தை வகுப்பாகக் கொண்டிருக்கவில்லை என்றும் நீங்கள் கருதலாம். \n\nஎளிமைப்படுத்தவும் (\"1/5\", \"5/1\") = உண்மை \nஎளிமைப்படுத்துதல் (\"1/6\", \"2/1\") = தவறு \nஎளிமைப்படுத்தவும் (\"7/10\", \"10/2\") = தவறு", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/67", "entry_point": "orderByPoints", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 11, -1, -11, -12];\nvar x0 = orderByPoints(arg00);\nvar v0 = [-1, -11, 1, -12, 11];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\nvar x1 = orderByPoints(arg10);\nvar v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [];\nvar x2 = orderByPoints(arg20);\nvar v2 = [];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\nvar x3 = orderByPoints(arg30);\nvar v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar x4 = orderByPoints(arg40);\nvar v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [0, 6, 6, -76, -21, 23, 4];\nvar x5 = orderByPoints(arg50);\nvar v5 = [-76, -21, 0, 4, 23, 6, 6];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள் \nஅவற்றின் இலக்கங்களின் கூட்டுத்தொகையின்படி ஏறுவரிசையில். \nகுறிப்புஃ பல உருப்படிகள் அவற்றின் இலக்கங்களின் ஒத்த கூட்டுத்தொகையுடன் இருந்தால், \nஅசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை ஆர்டர் செய்யுங்கள். \n\nஉதாரணத்திற்குஃ \n>> வரிசைப் புள்ளிகள் ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ஆர்டர் _ பை _ பாயிண்ட்ஸ் ([]) = = []", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/68", "entry_point": "specialfilter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, -2, 1, -5];\nvar x0 = specialfilter(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [15, -73, 14, -15];\nvar x1 = specialfilter(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [33, -2, -3, 45, 21, 109];\nvar x2 = specialfilter(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [43, -12, 93, 125, 121, 109];\nvar x3 = specialfilter(arg30);\nvar v3 = 4;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [71, -2, -33, 75, 21, 19];\nvar x4 = specialfilter(arg40);\nvar v4 = 3;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [1];\nvar x5 = specialfilter(arg50);\nvar v5 = 0;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [];\nvar x6 = specialfilter(arg60);\nvar v6 = 0;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "எண்களின் வரிசையை உள்ளீடாகவும் திரும்பவும் எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள் \nவரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 க்கும் அதிகமாக உள்ளது மற்றும் இரண்டும் \nஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1,3,5,7,9). \nஉதாரணத்திற்குஃ \nசிறப்பு வடிகட்டி ([15,-73,14,-15]) => 1 \nசிறப்பு வடிகட்டி ([33,-2,-3,45,21,109]) => 2", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/69", "entry_point": "getMaxTriples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = getMaxTriples(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = getMaxTriples(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = getMaxTriples(arg20);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 100;\nvar x3 = getMaxTriples(arg30);\nvar v3 = 53361;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீங்கள் n நீளமுள்ள ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும். \nஒவ்வொரு i க்கும் (1 ≤ i ≤ n), a [i] = i * i-i + 1 இன் மதிப்பு. \ni <j <k என்ற இடத்தின் மூன்று மடங்குகளின் (a [i], a [j], a [k]) எண்ணிக்கையைத் திருப்பித் தரவும். \nமேலும் a [i] + a [j] + a [k] என்பது 3 இன் பெருக்கமாகும். \n\nஉதாரணம்ஃ \nஉள்ளீடுஃ n = 5 \nவெளியீடுஃ 1 \nவிளக்கம்ஃ \na = [1,3,7,13,21] \nஒரே செல்லுபடியாகும் மூன்று (1,7,13) ஆகும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/70", "entry_point": "bf", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Jupiter\";\nvar arg01 = \"Neptune\";\nvar x0 = bf(arg00, arg01);\nvar v0 = [\"Saturn\", \"Uranus\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Earth\";\nvar arg11 = \"Mercury\";\nvar x1 = bf(arg10, arg11);\nvar v1 = [\"Venus\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Mercury\";\nvar arg21 = \"Uranus\";\nvar x2 = bf(arg20, arg21);\nvar v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"Neptune\";\nvar arg31 = \"Venus\";\nvar x3 = bf(arg30, arg31);\nvar v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"Earth\";\nvar arg41 = \"Earth\";\nvar x4 = bf(arg40, arg41);\nvar v4 = [];\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"Mars\";\nvar arg51 = \"Earth\";\nvar x5 = bf(arg50, arg51);\nvar v5 = [];\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"Jupiter\";\nvar arg61 = \"Makemake\";\nvar x6 = bf(arg60, arg61);\nvar v6 = [];\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளனஃ சூரியனுக்கு மிக நெருக்கமானவை. \nபுதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, \nயுரேனஸ், நெப்டியூன். \nகிரகம் 1 மற்றும் கிரகம் 2 என இரண்டு கிரக பெயர்களை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள். \nசெயல்பாடு அதன் சுற்றுப்பாதைகள் அனைத்து கிரகங்கள் கொண்ட ஒரு tuple திரும்ப வேண்டும் \nகிரகம் 1 இன் சுற்றுப்பாதைக்கும் கிரகம் 2 இன் சுற்றுப்பாதைக்கும் இடையில் அமைந்துள்ளது, வரிசைப்படுத்தப்பட்டுள்ளது \nசூரியனின் அருகாமை. \nகிரகம் 1 அல்லது கிரகம் 2 என்றால் செயல்பாடு ஒரு வெற்று டப்பிளை திருப்ப வேண்டும் \nகிரகங்களின் பெயர்கள் சரியானவை அல்ல. \nஉதாரணங்கள் \nbf (\"வியாழன்\", \"நெப்டியூன்\") = => (\"சனி\", \"யுரேனஸ்\") \nbf (\"பூமி\", \"புதன்\") = => (\"வீனஸ்\") \nbf (\"புதன்\", \"யுரேனஸ்\") = => (\"வீனஸ்\", \"பூமி\", \"செவ்வாய்\", \"வியாழன்\", \"சனி\")", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/71", "entry_point": "xOrY", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 7;\nvar arg01 = 34;\nvar arg02 = 12;\nvar x0 = xOrY(arg00, arg01, arg02);\nvar v0 = 34;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 8;\nvar arg12 = 5;\nvar x1 = xOrY(arg10, arg11, arg12);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 33;\nvar arg22 = 5212;\nvar x2 = xOrY(arg20, arg21, arg22);\nvar v2 = 33;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 1259;\nvar arg31 = 3;\nvar arg32 = 52;\nvar x3 = xOrY(arg30, arg31, arg32);\nvar v3 = 3;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 7919;\nvar arg41 = -1;\nvar arg42 = 12;\nvar x4 = xOrY(arg40, arg41, arg42);\nvar v4 = -1;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 3609;\nvar arg51 = 1245;\nvar arg52 = 583;\nvar x5 = xOrY(arg50, arg51, arg52);\nvar v5 = 583;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 91;\nvar arg61 = 56;\nvar arg62 = 129;\nvar x6 = xOrY(arg60, arg61, arg62);\nvar v6 = 129;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 6;\nvar arg71 = 34;\nvar arg72 = 1234;\nvar x7 = xOrY(arg70, arg71, arg72);\nvar v7 = 1234;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 1;\nvar arg81 = 2;\nvar arg82 = 0;\nvar x8 = xOrY(arg80, arg81, arg82);\nvar v8 = 0;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 2;\nvar arg91 = 2;\nvar arg92 = 0;\nvar x9 = xOrY(arg90, arg91, arg92);\nvar v9 = 2;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு எளிய நிரல், இது n என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும் \nஒரு பகா எண் மற்றும் இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nx _ அல்லது _ y க்கு (7,34,12) = = 34 \nx _ அல்லது _ y க்கு (15,8,5) = = 5", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/72", "entry_point": "doubleTheDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [];\nvar x0 = doubleTheDifference(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 4];\nvar x1 = doubleTheDifference(arg10);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0.1, 0.2, 0.3];\nvar x2 = doubleTheDifference(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = [-10, -20, -30];\nvar x3 = doubleTheDifference(arg30);\nvar v3 = 0;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = [-1, -2, 8];\nvar x4 = doubleTheDifference(arg40);\nvar v4 = 0;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = [0.2, 3, 5];\nvar x5 = doubleTheDifference(arg50);\nvar v5 = 34;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\nvar x6 = doubleTheDifference(arg60);\nvar v6 = 166650;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால், எண்களின் வர்க்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். \nஒற்றைப்படை பட்டியலில். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். \n\nஇரட்டை வேறுபாடு ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nஇரட்டை வேறுபாடு ([-1,0]) = = 0 \nஇரட்டை வேறுபாடு ([9,-2]) = = 81 \nஇரட்டை _ தி _ வேறுபாடு ([0]) = = 0 \n\nஉள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பித் தரவும்.", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/73", "entry_point": "strongestExtension", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Watashi\";\nvar arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\nvar x0 = strongestExtension(arg00, arg01);\nvar v0 = \"Watashi.eIGHt8OKe\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Boku123\";\nvar arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\nvar x1 = strongestExtension(arg10, arg11);\nvar v1 = \"Boku123.YEs.WeCaNe\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"__YESIMHERE\";\nvar arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\nvar x2 = strongestExtension(arg20, arg21);\nvar v2 = \"__YESIMHERE.NuLl__\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"K\";\nvar arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\nvar x3 = strongestExtension(arg30, arg31);\nvar v3 = \"K.TAR\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"__HAHA\";\nvar arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\nvar x4 = strongestExtension(arg40, arg41);\nvar v4 = \"__HAHA.123\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"YameRore\";\nvar arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\nvar x5 = strongestExtension(arg50, arg51);\nvar v5 = \"YameRore.okIWILL123\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"finNNalLLly\";\nvar arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\nvar x6 = strongestExtension(arg60, arg61);\nvar v6 = \"finNNalLLly.WoW\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"_\";\nvar arg71 = [\"Bb\", \"91245\"];\nvar x7 = strongestExtension(arg70, arg71);\nvar v7 = \"_.Bb\";\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = \"Sp\";\nvar arg81 = [\"671235\", \"Bb\"];\nvar x8 = strongestExtension(arg80, arg81);\nvar v8 = \"Sp.671235\";\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் வழங்கப்படும். \nவகுப்புக்கு கூடுதல் வகுப்புகளை ஏற்றுவதற்கு நீட்டிப்புகள் பயன்படுத்தப்பட வேண்டும். \nநீட்டிப்பின் வலிமை பின்வருமாறுஃ CAP என்பது பெரிய எழுத்தின் எண்ணாக இருக்கட்டும். \nநீட்டிப்பின் பெயரில் உள்ள எழுத்துக்கள், மற்றும் எஸ். எம் சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும் \nநீட்டிப்பின் பெயரில், வலிமை CAP-ஏஸஏம என்ற பின்னத்தால் வழங்கப்படுகிறது. \nநீங்கள் வலுவான நீட்டிப்பைக் கண்டுபிடித்து இதில் ஒரு சரத்தைத் திருப்ப வேண்டும். \nவடிவம்ஃ ClassName.StrongestExtensionName. \nஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், நீங்கள் செய்ய வேண்டும் \nபட்டியலில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும். \nஎடுத்துக்காட்டாக, உங்களுக்கு \"ஸ்லைஸ்கள்\" வகுப்பாகவும் ஒரு பட்டியலாகவும் வழங்கப்பட்டால் \nநீட்டிப்புகள்ஃ ['SERVINGSliCes','சீஸ்','ஸ்டுஃபெட்'] பின்னர் நீங்கள் செய்ய வேண்டும் \n'SERVINGSliCes'வலுவான நீட்டிப்பாக இருப்பதால்'Slices.SErviNGSliCes'ஐத் திருப்பவும் \n(அதன் வலிமை-1). \nஉதாரணம்ஃ \nவலுவான _ நீட்டிப்புக்கு ('எனது _ வகுப்பு', ['AA','Be','CC']) = ='my_class.AA'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/74", "entry_point": "cycpatternCheck", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"xyzw\";\nvar arg01 = \"xyw\";\nvar x0 = cycpatternCheck(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"yello\";\nvar arg11 = \"ell\";\nvar x1 = cycpatternCheck(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"whattup\";\nvar arg21 = \"ptut\";\nvar x2 = cycpatternCheck(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"efef\";\nvar arg31 = \"fee\";\nvar x3 = cycpatternCheck(arg30, arg31);\nvar v3 = true;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"abab\";\nvar arg41 = \"aabb\";\nvar x4 = cycpatternCheck(arg40, arg41);\nvar v4 = false;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"winemtt\";\nvar arg51 = \"tinem\";\nvar x5 = cycpatternCheck(arg50, arg51);\nvar v5 = true;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு அடி மூலக்கூறாக இருந்தால் நீங்கள் உண்மை என்று திருப்பித் தர வேண்டும். \nசைக்பாடர்ன் _ செக் (\"abcd\", \"abd\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹலோ\", \"எல்\") => உண்மை \nசைக்பேட்டர்ன் _ செக் (\"வஸ்ஸப்\", \"psus\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"அபாப்\", \"பா\") => உண்மை \nசைக்பாடர்ன் _ செக் (\"ஈஃபெஃப்\", \"ஈஃபெஃப்\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹீமென்ஸ்\", \"சைமென்\") => உண்மை", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/75", "entry_point": "intToMiniRoman", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 19;\nvar x0 = intToMiniRoman(arg00);\nvar v0 = \"xix\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 152;\nvar x1 = intToMiniRoman(arg10);\nvar v1 = \"clii\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 251;\nvar x2 = intToMiniRoman(arg20);\nvar v2 = \"ccli\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 426;\nvar x3 = intToMiniRoman(arg30);\nvar v3 = \"cdxxvi\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 500;\nvar x4 = intToMiniRoman(arg40);\nvar v4 = \"d\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 1;\nvar x5 = intToMiniRoman(arg50);\nvar v5 = \"i\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 4;\nvar x6 = intToMiniRoman(arg60);\nvar v6 = \"iv\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 43;\nvar x7 = intToMiniRoman(arg70);\nvar v7 = \"xliii\";\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 90;\nvar x8 = intToMiniRoman(arg80);\nvar v8 = \"xc\";\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 94;\nvar x9 = intToMiniRoman(arg90);\nvar v9 = \"xciv\";\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = 532;\nvar x10 = intToMiniRoman(arg100);\nvar v10 = \"dxxxii\";\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg110 = 900;\nvar x11 = intToMiniRoman(arg110);\nvar v11 = \"cm\";\nif(!compare(x11, v11)){\n    throw 'Error at 12th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg120 = 994;\nvar x12 = intToMiniRoman(arg120);\nvar v12 = \"cmxciv\";\nif(!compare(x12, v12)){\n    throw 'Error at 13th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg130 = 1000;\nvar x13 = intToMiniRoman(arg130);\nvar v13 = \"m\";\nif(!compare(x13, v13)){\n    throw 'Error at 14th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு நேர்மறை முழு எண்ணைக் கொடுத்தால், அதன் ரோமானிய எண்ணை ஒரு சரமாக சமமாகப் பெறுங்கள், \nஅதை சிறிய எழுத்தில் திருப்பி விடுங்கள். \nகட்டுப்பாடுகள்ஃ 1 <= எண் <= 1000 \n\nஉதாரணங்கள்ஃ \n>> இன்ட் _ டு _ மினி _ ரோமன் (19) = ='xix'\n>> இன்ட் _ டு _ மினி _ ரோமன் (152) = ='க்ளி'\n>> இன்ட் _ டு _ மினி _ ரோமன் (426) = ='cdxxvi'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/76", "entry_point": "rightAngleTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar arg02 = 5;\nvar x0 = rightAngleTriangle(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = rightAngleTriangle(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 6;\nvar arg22 = 8;\nvar x2 = rightAngleTriangle(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 2;\nvar arg31 = 2;\nvar arg32 = 2;\nvar x3 = rightAngleTriangle(arg30, arg31, arg32);\nvar v3 = false;\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = 7;\nvar arg41 = 24;\nvar arg42 = 25;\nvar x4 = rightAngleTriangle(arg40, arg41, arg42);\nvar v4 = true;\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = 10;\nvar arg51 = 5;\nvar arg52 = 7;\nvar x5 = rightAngleTriangle(arg50, arg51, arg52);\nvar v5 = false;\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = 5;\nvar arg61 = 12;\nvar arg62 = 13;\nvar x6 = rightAngleTriangle(arg60, arg61, arg62);\nvar v6 = true;\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = 15;\nvar arg71 = 8;\nvar arg72 = 17;\nvar x7 = rightAngleTriangle(arg70, arg71, arg72);\nvar v7 = true;\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg80 = 48;\nvar arg81 = 55;\nvar arg82 = 73;\nvar x8 = rightAngleTriangle(arg80, arg81, arg82);\nvar v8 = true;\nif(!compare(x8, v8)){\n    throw 'Error at 9th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg90 = 1;\nvar arg91 = 1;\nvar arg92 = 1;\nvar x9 = rightAngleTriangle(arg90, arg91, arg92);\nvar v9 = false;\nif(!compare(x9, v9)){\n    throw 'Error at 10th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg100 = 2;\nvar arg101 = 2;\nvar arg102 = 10;\nvar x10 = rightAngleTriangle(arg100, arg101, arg102);\nvar v10 = false;\nif(!compare(x10, v10)){\n    throw 'Error at 11th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. இவை மூன்றும் இருந்தால் சரி என்று திரும்பவும். \nபக்கங்கள் வலது கோண முக்கோணத்தை உருவாக்குகின்றன, இல்லையெனில் தவறானது. \nஒரு வலது கோண முக்கோணம் என்பது ஒரு கோணம் வலது கோணமாக அல்லது வலது கோணமாக இருக்கும் ஒரு முக்கோணம் ஆகும். \n90 டிகிரி. \nஉதாரணம்ஃ \nவலது கோண முக்கோணம் (3,4,5) = = உண்மை \nவலது கோண முக்கோணம் (1,2,3) = = தவறு", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/77", "entry_point": "solve", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AsDf\";\nvar x0 = solve(arg00);\nvar v0 = \"aSdF\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1234\";\nvar x1 = solve(arg10);\nvar v1 = \"4321\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = solve(arg20);\nvar v2 = \"AB\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"#a@C\";\nvar x3 = solve(arg30);\nvar v3 = \"#A@c\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg40 = \"#AsdfW^45\";\nvar x4 = solve(arg40);\nvar v4 = \"#aSDFw^45\";\nif(!compare(x4, v4)){\n    throw 'Error at 5th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg50 = \"#6@2\";\nvar x5 = solve(arg50);\nvar v5 = \"2@6#\";\nif(!compare(x5, v5)){\n    throw 'Error at 6th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg60 = \"#\\$a^D\";\nvar x6 = solve(arg60);\nvar v6 = \"#\\$A^d\";\nif(!compare(x6, v6)){\n    throw 'Error at 7th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg70 = \"#ccc\";\nvar x7 = solve(arg70);\nvar v7 = \"#CCC\";\nif(!compare(x7, v7)){\n    throw 'Error at 8th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nஎஸ் [ஐ] ஒரு எழுத்தாக இருந்தால், அதன் வழக்கை கீழ் இருந்து மேல் அல்லது நேர்மாறாக மாற்றவும், \nஇல்லையெனில் அதை அப்படியே வைத்திருங்கள். \nசரத்தில் எழுத்துக்கள் இல்லையென்றால், சரத்தை தலைகீழாக மாற்றவும். \nசெயல்பாடு விளைந்த சரத்தை திருப்பித் தர வேண்டும். \nஉதாரணங்கள் \nதீர்வு (\"1234\") = \"4321\" \nதீர்வு (\"ஏபி\") = \"ஏபி\" \nதீர்க்கவும் (\"#a @C\") = \"#A @c\"", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/78", "entry_point": "stringToMd5", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hello world\";\nvar x0 = stringToMd5(arg00);\nvar v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"\";\nvar x1 = stringToMd5(arg10);\nvar v1 = null;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"A B C\";\nvar x2 = stringToMd5(arg20);\nvar v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = \"password\";\nvar x3 = stringToMd5(arg30);\nvar v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "ஒரு சரம்'உரை'கொடுக்கப்பட்டால், அதன் md5 ஹாஷ் சமமான சரத்தைத் திருப்பித் தரவும். \n'உரை'ஒரு வெற்று சரம் என்றால், பூஜ்யத்தைத் திருப்பவும். \n\n>> சரம் _ முதல் _ md5 வரை ('வணக்கம் உலகம்') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "javascript/79", "entry_point": "generateIntegers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 10;\nvar x0 = generateIntegers(arg00, arg01);\nvar v0 = [2, 4, 6, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 2;\nvar x1 = generateIntegers(arg10, arg11);\nvar v1 = [2, 4, 6, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 132;\nvar arg21 = 2;\nvar x2 = generateIntegers(arg20, arg21);\nvar v2 = [2, 4, 6, 8];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg30 = 17;\nvar arg31 = 89;\nvar x3 = generateIntegers(arg30, arg31);\nvar v3 = [];\nif(!compare(x3, v3)){\n    throw 'Error at 4th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "a மற்றும் b ஆகிய இரண்டு நேர்மறை முழு எண்களைக் கொடுத்தால், a க்கு இடையே உள்ள சம இலக்கங்களைத் திருப்பித் தரவும். \nமற்றும் b, ஏறுவரிசையில். \n\nஉதாரணத்திற்குஃ \nமுழு எண்களை உருவாக்குதல் (2,8) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (8,2) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (10,14) => []", "language": "javascript", "canonical_solution": null, "natural_language": "Tamil"}
