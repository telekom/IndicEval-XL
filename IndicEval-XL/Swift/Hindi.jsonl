{"task_id": "swift/0", "entry_point": "belowZero", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : Bool = belowZero(operations : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, -3, 1, 2, -3]\nvar x1 : Bool = belowZero(operations : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, -4, 5, 6]\nvar x2 : Bool = belowZero(operations : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, -1, 2, -2, 5, -5, 4, -4]\nvar x3 : Bool = belowZero(operations : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, -1, 2, -2, 5, -5, 4, -5]\nvar x4 : Bool = belowZero(operations : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1, -2, 2, -2, 5, -5, 4, -4]\nvar x5 : Bool = belowZero(operations : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "आपको बैंक खाते में जमा और निकासी कार्यों की एक सूची दी जाती है जो किस से शुरू होती है \nशून्य शेष राशि। आपका काम यह पता लगाना है कि क्या किसी भी समय खाते की शेष राशि शून्य से नीचे गिरती है, और \nउस बिंदु पर फ़ंक्शन को सही लौटाना चाहिए। अन्यथा इसे गलत लौटाना चाहिए। \n>>> शून्य से नीचे ([1,2,3]) \nझूठ बोलती है। \n>>> शून्य से नीचे ([1,2,-4,5]) \nसच है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/1", "entry_point": "sumProduct", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : [Int] = sumProduct(numbers : arg00)\nvar v0 : [Int] = [0, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 1, 1]\nvar x1 : [Int] = sumProduct(numbers : arg10)\nvar v1 : [Int] = [3, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [100, 0]\nvar x2 : [Int] = sumProduct(numbers : arg20)\nvar v2 : [Int] = [100, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [3, 5, 7]\nvar x3 : [Int] = sumProduct(numbers : arg30)\nvar v3 : [Int] = [15, 105]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [10]\nvar x4 : [Int] = sumProduct(numbers : arg40)\nvar v4 : [Int] = [10, 10]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "पूर्णांकों की दी गई सूची के लिए, एक टुपल वापस करें जिसमें एक सूची में सभी पूर्णांकों का योग और एक गुणनफल हो। \nखाली राशि 0 के बराबर होनी चाहिए और खाली उत्पाद 1 के बराबर होना चाहिए। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/2", "entry_point": "stringXor", "test": "\n\nvar arg00 : String = #\"111000\"#\nvar arg01 : String = #\"101010\"#\nvar x0 : String = stringXor(a : arg00, b : arg01)\nvar v0 : String = #\"010010\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1\"#\nvar arg11 : String = #\"1\"#\nvar x1 : String = stringXor(a : arg10, b : arg11)\nvar v1 : String = #\"0\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"0101\"#\nvar arg21 : String = #\"0000\"#\nvar x2 : String = stringXor(a : arg20, b : arg21)\nvar v2 : String = #\"0101\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "इनपुट दो स्ट्रिंग a और b हैं जिनमें केवल 1s और 0s होते हैं। \nइन निवेशों पर द्विआधारी XOR करें और एक स्ट्रिंग के रूप में परिणाम भी वापस करें। \n>>> स्ट्रिंग _ xor ('010','110') \n'100'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/3", "entry_point": "longest", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : String = longest(strings : arg00)\nvar v0 : String = \"none\"\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"x\"#, #\"y\"#, #\"z\"#]\nvar x1 : String = longest(strings : arg10)\nvar v1 : String = #\"x\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"x\"#, #\"yyy\"#, #\"zzzz\"#, #\"www\"#, #\"kkkk\"#, #\"abc\"#]\nvar x2 : String = longest(strings : arg20)\nvar v2 : String = #\"zzzz\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "स्ट्रिंग्स की सूची में से सबसे लंबा स्ट्रिंग्स वापस करें। कई स्ट्रिंग्स होने पर पहला स्ट्रिंग्स वापस करें। \nसमान लंबाई के स्ट्रिंग। यदि इनपुट सूची खाली है तो शून्य लौटें। \n>>> सबसे लंबा ([]) \n\n>>> सबसे लंबा (['ए','बी','सी']) \n'ए'\n>>> सबसे लंबा (['ए','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/4", "entry_point": "greatestCommonDivisor", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 7\nvar x0 : Int = greatestCommonDivisor(a : arg00, b : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Int = greatestCommonDivisor(a : arg10, b : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 49\nvar arg21 : Int = 14\nvar x2 : Int = greatestCommonDivisor(a : arg20, b : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 144\nvar arg31 : Int = 60\nvar x3 : Int = greatestCommonDivisor(a : arg30, b : arg31)\nvar v3 : Int = 12\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "दो पूर्णांकों a और b का सबसे बड़ा सामान्य भाजक वापस करें \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (3,5) \n1. \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (25,15) \n5.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/5", "entry_point": "sortNumbers", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = sortNumbers(numbers : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"three\"#\nvar x1 : String = sortNumbers(numbers : arg10)\nvar v1 : String = #\"three\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"three five nine\"#\nvar x2 : String = sortNumbers(numbers : arg20)\nvar v2 : String = #\"three five nine\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"five zero four seven nine eight\"#\nvar x3 : String = sortNumbers(numbers : arg30)\nvar v3 : String = #\"zero four five seven eight nine\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"six five four three two one zero\"#\nvar x4 : String = sortNumbers(numbers : arg40)\nvar v4 : String = #\"zero one two three four five six\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "इनपुट'शून्य'से'नौ'तक की संख्याओं की एक स्थान-सीमित स्ट्रिंग है। \nवैध विकल्प'शून्य','एक','दो','तीन','चार','पाँच','छह','सात','आठ'और'नौ'हैं। \nस्ट्रिंग को सबसे छोटी से सबसे बड़ी तक क्रमबद्ध संख्याओं के साथ वापस करें \n>>> छँटाई संख्याएँ ('तीन एक पाँच') \n'एक तीन पाँच'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/6", "entry_point": "rescaleToUnit", "test": "\n\nvar arg00 : [Double] = [2.0, 49.9]\nvar x0 : [Double] = rescaleToUnit(numbers : arg00)\nvar v0 : [Double] = [0.0, 1.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [100.0, 49.9]\nvar x1 : [Double] = rescaleToUnit(numbers : arg10)\nvar v1 : [Double] = [1.0, 0.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [1.0, 2.0, 3.0, 4.0, 5.0]\nvar x2 : [Double] = rescaleToUnit(numbers : arg20)\nvar v2 : [Double] = [0.0, 0.25, 0.5, 0.75, 1.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [2.0, 1.0, 5.0, 3.0, 4.0]\nvar x3 : [Double] = rescaleToUnit(numbers : arg30)\nvar v3 : [Double] = [0.25, 0.0, 1.0, 0.5, 0.75]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [12.0, 11.0, 15.0, 13.0, 14.0]\nvar x4 : [Double] = rescaleToUnit(numbers : arg40)\nvar v4 : [Double] = [0.25, 0.0, 1.0, 0.5, 0.75]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "संख्याओं की सूची (कम से कम दो तत्वों की) को देखते हुए, उस सूची में एक रैखिक परिवर्तन लागू करें, \nकि सबसे छोटी संख्या 0 हो जाएगी और सबसे बड़ी संख्या 1 हो जाएगी। \n>>> इकाई को पुनः प्राप्त करें ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/7", "entry_point": "flipCase", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = flipCase(string : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Hello!\"#\nvar x1 : String = flipCase(string : arg10)\nvar v1 : String = #\"hELLO!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"These violent delights have violent ends\"#\nvar x2 : String = flipCase(string : arg20)\nvar v2 : String = #\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "किसी दिए गए स्ट्रिंग के लिए, छोटे अक्षरों को बड़े अक्षरों में और बड़े अक्षरों को छोटे अक्षरों में बदलें। \n>>> फ़्लिप केस ('हैलो') \n'हैलो'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/8", "entry_point": "getPositive", "test": "\n\nvar arg00 : [AnyHashable] = [-1, -2, 4, 5, 6]\nvar x0 : [AnyHashable] = getPositive(l : arg00)\nvar v0 : [AnyHashable] = [4, 5, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]\nvar x1 : [AnyHashable] = getPositive(l : arg10)\nvar v1 : [AnyHashable] = [5, 3, 2, 3, 3, 9, 123, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [-1, -2]\nvar x2 : [AnyHashable] = getPositive(l : arg20)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = []\nvar x3 : [AnyHashable] = getPositive(l : arg30)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "सूची में केवल सकारात्मक संख्याएँ वापस करें। \n>>> सकारात्मक प्राप्त करें ([-1,2,-4,5,6]) \n[2,5,6] \n>>> सकारात्मक प्राप्त करें ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/9", "entry_point": "isPrime", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Bool = isPrime(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 101\nvar x1 : Bool = isPrime(n : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Bool = isPrime(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 13441\nvar x3 : Bool = isPrime(n : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 61\nvar x4 : Bool = isPrime(n : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 4\nvar x5 : Bool = isPrime(n : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 1\nvar x6 : Bool = isPrime(n : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 5\nvar x7 : Bool = isPrime(n : arg70)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 11\nvar x8 : Bool = isPrime(n : arg80)\nvar v8 : Bool = true\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 17\nvar x9 : Bool = isPrime(n : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 85\nvar x10 : Bool = isPrime(n : arg100)\nvar v10 : Bool = false\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 77\nvar x11 : Bool = isPrime(n : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 255379\nvar x12 : Bool = isPrime(n : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\n", "description": "यदि कोई दी गई संख्या अभाज्य है तो सही वापस करें, और अन्यथा गलत। \n>>> प्राइम है (6) \nझूठ बोलती है। \n>>> इस _ प्राइम (101) है \nसच है। \n>>> प्राइम है (11) \nसच है। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसच है। \n>>> इस _ प्राइम (61) \nसच है। \n>>> प्राइम है (4) \nझूठ बोलती है। \n>>> प्राइम है (1) \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/10", "entry_point": "unique", "test": "\n\nvar arg00 : [Int] = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nvar x0 : [Int] = unique(l : arg00)\nvar v0 : [Int] = [0, 2, 3, 5, 9, 123]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\n", "description": "एक सूची में क्रमबद्ध अद्वितीय तत्वों को वापस करें \n>>> अद्वितीय ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/11", "entry_point": "primeFib", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = primeFib(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = primeFib(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = primeFib(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 4\nvar x3 : Int = primeFib(n : arg30)\nvar v3 : Int = 13\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 5\nvar x4 : Int = primeFib(n : arg40)\nvar v4 : Int = 89\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 6\nvar x5 : Int = primeFib(n : arg50)\nvar v5 : Int = 233\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 7\nvar x6 : Int = primeFib(n : arg60)\nvar v6 : Int = 1597\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 8\nvar x7 : Int = primeFib(n : arg70)\nvar v7 : Int = 28657\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 9\nvar x8 : Int = primeFib(n : arg80)\nvar v8 : Int = 514229\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 10\nvar x9 : Int = primeFib(n : arg90)\nvar v9 : Int = 433494437\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "प्राइम _ फाइब n-th संख्या बताता है जो एक फिबोनाची संख्या है और यह भी अभाज्य है। \n>>> प्राइम _ फाइब (1) \n2. \n>>> प्राइम _ फाइब (2) \n3. \n>>> प्राइम _ फाइब (3) \n5. \n>>> प्राइम _ फाइब (4) \n13. \n>>> प्राइम _ फाइब (5) \n89", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/12", "entry_point": "triplesSumToZero", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 0]\nvar x0 : Bool = triplesSumToZero(l : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, -1]\nvar x1 : Bool = triplesSumToZero(l : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, -2, 1]\nvar x2 : Bool = triplesSumToZero(l : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [1, 2, 3, 7]\nvar x3 : Bool = triplesSumToZero(l : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 2, 5, 7]\nvar x4 : Bool = triplesSumToZero(l : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [2, 4, -5, 3, 9, 7]\nvar x5 : Bool = triplesSumToZero(l : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [1]\nvar x6 : Bool = triplesSumToZero(l : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [1, 3, 5, -100]\nvar x7 : Bool = triplesSumToZero(l : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [100, 3, 5, -100]\nvar x8 : Bool = triplesSumToZero(l : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "ट्रिपल्स _ सम _ से _ जीरो एक इनपुट के रूप में पूर्णांकों की एक सूची लेता है। \nयह सही बताता है यदि सूची में तीन अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n\n>>> ट्रिपल _ सम _ से _ शून्य ([1,35,5,0]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,3,-2,1]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([2,4,-5,3,9,7]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/13", "entry_point": "pairsSumToZero", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 0]\nvar x0 : Bool = pairsSumToZero(l : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, -2, 1]\nvar x1 : Bool = pairsSumToZero(l : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 7]\nvar x2 : Bool = pairsSumToZero(l : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [2, 4, -5, 3, 5, 7]\nvar x3 : Bool = pairsSumToZero(l : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar x4 : Bool = pairsSumToZero(l : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [-3, 9, -1, 3, 2, 30]\nvar x5 : Bool = pairsSumToZero(l : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [-3, 9, -1, 3, 2, 31]\nvar x6 : Bool = pairsSumToZero(l : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [-3, 9, -1, 4, 2, 30]\nvar x7 : Bool = pairsSumToZero(l : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [-3, 9, -1, 4, 2, 31]\nvar x8 : Bool = pairsSumToZero(l : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "pair _ sum _ to _ zero पूर्णांकों की एक सूची को एक इनपुट के रूप में लेता है। \nयह सही बताता है यदि सूची में दो अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,5,0]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,-2,1]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([2,4,-5,3,5,7]) \nसच है। \n>>> जोड़े _ योग _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/14", "entry_point": "fib4", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = fib4(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar x1 : Int = fib4(n : arg10)\nvar v1 : Int = 28\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = fib4(n : arg20)\nvar v2 : Int = 104\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 12\nvar x3 : Int = fib4(n : arg30)\nvar v3 : Int = 386\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "फाइब4 संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nfib4 (0)-> 0 \nफाइब 4 (1)-> 0 \nफाइब 4 (2)-> 2 \nफाइब 4 (3)-> 0 \nफाइब 4 (एन)-> फाइब 4 (एन-1) + फाइब 4 (एन-2) + फाइब 4 (एन-3) + फाइब 4 (एन-4)। \nकृपया तन्तु 4 संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। पुनरावृत्ति का उपयोग न करें। \n>>> फाइब4 (5) \n4. \n>>> fib4 (6) \n8. \n>>> fib4 (7) \n14.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/15", "entry_point": "median", "test": "\n\nvar arg00 : [Int] = [3, 1, 2, 4, 5]\nvar x0 : Double = median(l : arg00)\nvar v0 : Double = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-10, 4, 6, 1000, 10, 20]\nvar x1 : Double = median(l : arg10)\nvar v1 : Double = 8.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5]\nvar x2 : Double = median(l : arg20)\nvar v2 : Double = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [6, 5]\nvar x3 : Double = median(l : arg30)\nvar v3 : Double = 5.5\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [8, 1, 3, 9, 9, 2, 7]\nvar x4 : Double = median(l : arg40)\nvar v4 : Double = 7\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "सूची एल में तत्वों का माध्यिका वापस करें। \n>>> माध्यिका ([3,1,2,4,5]) \n3. \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n15. 0", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/16", "entry_point": "isPalindrome", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : Bool = isPalindrome(text : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aba\"#\nvar x1 : Bool = isPalindrome(text : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aaaaa\"#\nvar x2 : Bool = isPalindrome(text : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"zbcd\"#\nvar x3 : Bool = isPalindrome(text : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"xywyx\"#\nvar x4 : Bool = isPalindrome(text : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"xywyz\"#\nvar x5 : Bool = isPalindrome(text : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"xywzx\"#\nvar x6 : Bool = isPalindrome(text : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "जाँच करता है कि क्या दी गई स्ट्रिंग एक पालिंड्रोम है \n>>> इस _ पालिंड्रोम (\") है \nसच है। \n>>> इस _ पालिंड्रोम ('अबा') है \nसच है। \n>>> इस _ पालिंड्रोम ('एएएएए') है \nसच है। \n>>> is _ palindrom ('zbcd') है \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/17", "entry_point": "removeVowels", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = removeVowels(text : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdef\\nghijklm\"#\nvar x1 : String = removeVowels(text : arg10)\nvar v1 : String = #\"bcdf\\nghjklm\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"fedcba\"#\nvar x2 : String = removeVowels(text : arg20)\nvar v2 : String = #\"fdcb\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"eeeee\"#\nvar x3 : String = removeVowels(text : arg30)\nvar v3 : String = #\"\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"acBAA\"#\nvar x4 : String = removeVowels(text : arg40)\nvar v4 : String = #\"cB\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"EcBOO\"#\nvar x5 : String = removeVowels(text : arg50)\nvar v5 : String = #\"cB\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"ybcd\"#\nvar x6 : String = removeVowels(text : arg60)\nvar v6 : String = #\"ybcd\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "रिमूव _ वॉवेल्स एक ऐसा फंक्शन है जो स्ट्रिंग लेता है और बिना स्वर के स्ट्रिंग लौटाता है। \n>>> स्वर हटाएँ (\") \n\"\n>>> स्वरों को हटाएँ (\"abcdef\\nghijklm\") \n'बी. सी. डी. एफ. \\एनजी. जे. के. एल. एम.'\n>>> स्वरों को हटाएँ ('abcdef') \n'बी. सी. डी. एफ.'\n>>> स्वरों को हटाएँ ('एएएए') \n\"\n>>> स्वरों को हटाएँ ('एएबीएए') \n'बी'\n>>> स्वर हटाएँ ('zbcd') \n'जेड. बी. सी. डी.'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/18", "entry_point": "belowThreshold", "test": "\n\nvar arg00 : [Int] = [1, 2, 4, 10]\nvar arg01 : Int = 100\nvar x0 : Bool = belowThreshold(l : arg00, t : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 20, 4, 10]\nvar arg11 : Int = 5\nvar x1 : Bool = belowThreshold(l : arg10, t : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 20, 4, 10]\nvar arg21 : Int = 21\nvar x2 : Bool = belowThreshold(l : arg20, t : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [1, 20, 4, 10]\nvar arg31 : Int = 22\nvar x3 : Bool = belowThreshold(l : arg30, t : arg31)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 8, 4, 10]\nvar arg41 : Int = 11\nvar x4 : Bool = belowThreshold(l : arg40, t : arg41)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [1, 8, 4, 10]\nvar arg51 : Int = 10\nvar x5 : Bool = belowThreshold(l : arg50, t : arg51)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "सही लौटें यदि सूची में सभी संख्याएँ t की सीमा से नीचे हैं। \n>>> थ्रेसहोल्ड के नीचे ([1,2,4,10], 100) \nसच है। \n>>> थ्रेसहोल्ड के नीचे ([1,20,4,10], 5) \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/19", "entry_point": "add", "test": "\n\nvar arg00 : Int = 0\nvar arg01 : Int = 1\nvar x0 : Int = add(x : arg00, y : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 0\nvar x1 : Int = add(x : arg10, y : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 3\nvar x2 : Int = add(x : arg20, y : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5\nvar arg31 : Int = 7\nvar x3 : Int = add(x : arg30, y : arg31)\nvar v3 : Int = 12\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar arg41 : Int = 5\nvar x4 : Int = add(x : arg40, y : arg41)\nvar v4 : Int = 12\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 572\nvar arg51 : Int = 725\nvar x5 : Int = add(x : arg50, y : arg51)\nvar v5 : Int = 1297\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 51\nvar arg61 : Int = 804\nvar x6 : Int = add(x : arg60, y : arg61)\nvar v6 : Int = 855\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 645\nvar arg71 : Int = 96\nvar x7 : Int = add(x : arg70, y : arg71)\nvar v7 : Int = 741\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 712\nvar arg81 : Int = 853\nvar x8 : Int = add(x : arg80, y : arg81)\nvar v8 : Int = 1565\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 223\nvar arg91 : Int = 101\nvar x9 : Int = add(x : arg90, y : arg91)\nvar v9 : Int = 324\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 76\nvar arg101 : Int = 29\nvar x10 : Int = add(x : arg100, y : arg101)\nvar v10 : Int = 105\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 416\nvar arg111 : Int = 149\nvar x11 : Int = add(x : arg110, y : arg111)\nvar v11 : Int = 565\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 145\nvar arg121 : Int = 409\nvar x12 : Int = add(x : arg120, y : arg121)\nvar v12 : Int = 554\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : Int = 535\nvar arg131 : Int = 430\nvar x13 : Int = add(x : arg130, y : arg131)\nvar v13 : Int = 965\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : Int = 118\nvar arg141 : Int = 303\nvar x14 : Int = add(x : arg140, y : arg141)\nvar v14 : Int = 421\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : Int = 287\nvar arg151 : Int = 94\nvar x15 : Int = add(x : arg150, y : arg151)\nvar v15 : Int = 381\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\nvar arg160 : Int = 768\nvar arg161 : Int = 257\nvar x16 : Int = add(x : arg160, y : arg161)\nvar v16 : Int = 1025\nassert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \")\n\nvar arg170 : Int = 421\nvar arg171 : Int = 677\nvar x17 : Int = add(x : arg170, y : arg171)\nvar v17 : Int = 1098\nassert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \")\n\nvar arg180 : Int = 802\nvar arg181 : Int = 814\nvar x18 : Int = add(x : arg180, y : arg181)\nvar v18 : Int = 1616\nassert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \")\n\nvar arg190 : Int = 510\nvar arg191 : Int = 922\nvar x19 : Int = add(x : arg190, y : arg191)\nvar v19 : Int = 1432\nassert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \")\n\nvar arg200 : Int = 345\nvar arg201 : Int = 819\nvar x20 : Int = add(x : arg200, y : arg201)\nvar v20 : Int = 1164\nassert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \")\n\nvar arg210 : Int = 895\nvar arg211 : Int = 436\nvar x21 : Int = add(x : arg210, y : arg211)\nvar v21 : Int = 1331\nassert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \")\n\nvar arg220 : Int = 123\nvar arg221 : Int = 424\nvar x22 : Int = add(x : arg220, y : arg221)\nvar v22 : Int = 547\nassert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \")\n\nvar arg230 : Int = 923\nvar arg231 : Int = 245\nvar x23 : Int = add(x : arg230, y : arg231)\nvar v23 : Int = 1168\nassert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \")\n\nvar arg240 : Int = 23\nvar arg241 : Int = 438\nvar x24 : Int = add(x : arg240, y : arg241)\nvar v24 : Int = 461\nassert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \")\n\nvar arg250 : Int = 565\nvar arg251 : Int = 133\nvar x25 : Int = add(x : arg250, y : arg251)\nvar v25 : Int = 698\nassert(x25 == v25, \"Exception -- test case 25 did not pass. x25 = \")\n\nvar arg260 : Int = 945\nvar arg261 : Int = 925\nvar x26 : Int = add(x : arg260, y : arg261)\nvar v26 : Int = 1870\nassert(x26 == v26, \"Exception -- test case 26 did not pass. x26 = \")\n\nvar arg270 : Int = 261\nvar arg271 : Int = 983\nvar x27 : Int = add(x : arg270, y : arg271)\nvar v27 : Int = 1244\nassert(x27 == v27, \"Exception -- test case 27 did not pass. x27 = \")\n\nvar arg280 : Int = 139\nvar arg281 : Int = 577\nvar x28 : Int = add(x : arg280, y : arg281)\nvar v28 : Int = 716\nassert(x28 == v28, \"Exception -- test case 28 did not pass. x28 = \")\n\nvar arg290 : Int = 763\nvar arg291 : Int = 178\nvar x29 : Int = add(x : arg290, y : arg291)\nvar v29 : Int = 941\nassert(x29 == v29, \"Exception -- test case 29 did not pass. x29 = \")\n\nvar arg300 : Int = 147\nvar arg301 : Int = 892\nvar x30 : Int = add(x : arg300, y : arg301)\nvar v30 : Int = 1039\nassert(x30 == v30, \"Exception -- test case 30 did not pass. x30 = \")\n\nvar arg310 : Int = 436\nvar arg311 : Int = 402\nvar x31 : Int = add(x : arg310, y : arg311)\nvar v31 : Int = 838\nassert(x31 == v31, \"Exception -- test case 31 did not pass. x31 = \")\n\nvar arg320 : Int = 610\nvar arg321 : Int = 581\nvar x32 : Int = add(x : arg320, y : arg321)\nvar v32 : Int = 1191\nassert(x32 == v32, \"Exception -- test case 32 did not pass. x32 = \")\n\nvar arg330 : Int = 103\nvar arg331 : Int = 416\nvar x33 : Int = add(x : arg330, y : arg331)\nvar v33 : Int = 519\nassert(x33 == v33, \"Exception -- test case 33 did not pass. x33 = \")\n\nvar arg340 : Int = 339\nvar arg341 : Int = 990\nvar x34 : Int = add(x : arg340, y : arg341)\nvar v34 : Int = 1329\nassert(x34 == v34, \"Exception -- test case 34 did not pass. x34 = \")\n\nvar arg350 : Int = 130\nvar arg351 : Int = 504\nvar x35 : Int = add(x : arg350, y : arg351)\nvar v35 : Int = 634\nassert(x35 == v35, \"Exception -- test case 35 did not pass. x35 = \")\n\nvar arg360 : Int = 242\nvar arg361 : Int = 717\nvar x36 : Int = add(x : arg360, y : arg361)\nvar v36 : Int = 959\nassert(x36 == v36, \"Exception -- test case 36 did not pass. x36 = \")\n\nvar arg370 : Int = 562\nvar arg371 : Int = 110\nvar x37 : Int = add(x : arg370, y : arg371)\nvar v37 : Int = 672\nassert(x37 == v37, \"Exception -- test case 37 did not pass. x37 = \")\n\nvar arg380 : Int = 396\nvar arg381 : Int = 909\nvar x38 : Int = add(x : arg380, y : arg381)\nvar v38 : Int = 1305\nassert(x38 == v38, \"Exception -- test case 38 did not pass. x38 = \")\n\nvar arg390 : Int = 887\nvar arg391 : Int = 703\nvar x39 : Int = add(x : arg390, y : arg391)\nvar v39 : Int = 1590\nassert(x39 == v39, \"Exception -- test case 39 did not pass. x39 = \")\n\nvar arg400 : Int = 870\nvar arg401 : Int = 551\nvar x40 : Int = add(x : arg400, y : arg401)\nvar v40 : Int = 1421\nassert(x40 == v40, \"Exception -- test case 40 did not pass. x40 = \")\n\nvar arg410 : Int = 422\nvar arg411 : Int = 391\nvar x41 : Int = add(x : arg410, y : arg411)\nvar v41 : Int = 813\nassert(x41 == v41, \"Exception -- test case 41 did not pass. x41 = \")\n\nvar arg420 : Int = 299\nvar arg421 : Int = 505\nvar x42 : Int = add(x : arg420, y : arg421)\nvar v42 : Int = 804\nassert(x42 == v42, \"Exception -- test case 42 did not pass. x42 = \")\n\nvar arg430 : Int = 346\nvar arg431 : Int = 56\nvar x43 : Int = add(x : arg430, y : arg431)\nvar v43 : Int = 402\nassert(x43 == v43, \"Exception -- test case 43 did not pass. x43 = \")\n\nvar arg440 : Int = 36\nvar arg441 : Int = 706\nvar x44 : Int = add(x : arg440, y : arg441)\nvar v44 : Int = 742\nassert(x44 == v44, \"Exception -- test case 44 did not pass. x44 = \")\n\nvar arg450 : Int = 738\nvar arg451 : Int = 411\nvar x45 : Int = add(x : arg450, y : arg451)\nvar v45 : Int = 1149\nassert(x45 == v45, \"Exception -- test case 45 did not pass. x45 = \")\n\nvar arg460 : Int = 679\nvar arg461 : Int = 87\nvar x46 : Int = add(x : arg460, y : arg461)\nvar v46 : Int = 766\nassert(x46 == v46, \"Exception -- test case 46 did not pass. x46 = \")\n\nvar arg470 : Int = 25\nvar arg471 : Int = 303\nvar x47 : Int = add(x : arg470, y : arg471)\nvar v47 : Int = 328\nassert(x47 == v47, \"Exception -- test case 47 did not pass. x47 = \")\n\nvar arg480 : Int = 161\nvar arg481 : Int = 612\nvar x48 : Int = add(x : arg480, y : arg481)\nvar v48 : Int = 773\nassert(x48 == v48, \"Exception -- test case 48 did not pass. x48 = \")\n\nvar arg490 : Int = 306\nvar arg491 : Int = 841\nvar x49 : Int = add(x : arg490, y : arg491)\nvar v49 : Int = 1147\nassert(x49 == v49, \"Exception -- test case 49 did not pass. x49 = \")\n\nvar arg500 : Int = 973\nvar arg501 : Int = 411\nvar x50 : Int = add(x : arg500, y : arg501)\nvar v50 : Int = 1384\nassert(x50 == v50, \"Exception -- test case 50 did not pass. x50 = \")\n\nvar arg510 : Int = 711\nvar arg511 : Int = 157\nvar x51 : Int = add(x : arg510, y : arg511)\nvar v51 : Int = 868\nassert(x51 == v51, \"Exception -- test case 51 did not pass. x51 = \")\n\nvar arg520 : Int = 471\nvar arg521 : Int = 27\nvar x52 : Int = add(x : arg520, y : arg521)\nvar v52 : Int = 498\nassert(x52 == v52, \"Exception -- test case 52 did not pass. x52 = \")\n\nvar arg530 : Int = 714\nvar arg531 : Int = 792\nvar x53 : Int = add(x : arg530, y : arg531)\nvar v53 : Int = 1506\nassert(x53 == v53, \"Exception -- test case 53 did not pass. x53 = \")\n\nvar arg540 : Int = 38\nvar arg541 : Int = 206\nvar x54 : Int = add(x : arg540, y : arg541)\nvar v54 : Int = 244\nassert(x54 == v54, \"Exception -- test case 54 did not pass. x54 = \")\n\nvar arg550 : Int = 907\nvar arg551 : Int = 343\nvar x55 : Int = add(x : arg550, y : arg551)\nvar v55 : Int = 1250\nassert(x55 == v55, \"Exception -- test case 55 did not pass. x55 = \")\n\nvar arg560 : Int = 23\nvar arg561 : Int = 760\nvar x56 : Int = add(x : arg560, y : arg561)\nvar v56 : Int = 783\nassert(x56 == v56, \"Exception -- test case 56 did not pass. x56 = \")\n\nvar arg570 : Int = 524\nvar arg571 : Int = 859\nvar x57 : Int = add(x : arg570, y : arg571)\nvar v57 : Int = 1383\nassert(x57 == v57, \"Exception -- test case 57 did not pass. x57 = \")\n\nvar arg580 : Int = 30\nvar arg581 : Int = 529\nvar x58 : Int = add(x : arg580, y : arg581)\nvar v58 : Int = 559\nassert(x58 == v58, \"Exception -- test case 58 did not pass. x58 = \")\n\nvar arg590 : Int = 341\nvar arg591 : Int = 691\nvar x59 : Int = add(x : arg590, y : arg591)\nvar v59 : Int = 1032\nassert(x59 == v59, \"Exception -- test case 59 did not pass. x59 = \")\n\nvar arg600 : Int = 167\nvar arg601 : Int = 729\nvar x60 : Int = add(x : arg600, y : arg601)\nvar v60 : Int = 896\nassert(x60 == v60, \"Exception -- test case 60 did not pass. x60 = \")\n\nvar arg610 : Int = 636\nvar arg611 : Int = 289\nvar x61 : Int = add(x : arg610, y : arg611)\nvar v61 : Int = 925\nassert(x61 == v61, \"Exception -- test case 61 did not pass. x61 = \")\n\nvar arg620 : Int = 503\nvar arg621 : Int = 144\nvar x62 : Int = add(x : arg620, y : arg621)\nvar v62 : Int = 647\nassert(x62 == v62, \"Exception -- test case 62 did not pass. x62 = \")\n\nvar arg630 : Int = 51\nvar arg631 : Int = 985\nvar x63 : Int = add(x : arg630, y : arg631)\nvar v63 : Int = 1036\nassert(x63 == v63, \"Exception -- test case 63 did not pass. x63 = \")\n\nvar arg640 : Int = 287\nvar arg641 : Int = 149\nvar x64 : Int = add(x : arg640, y : arg641)\nvar v64 : Int = 436\nassert(x64 == v64, \"Exception -- test case 64 did not pass. x64 = \")\n\nvar arg650 : Int = 659\nvar arg651 : Int = 75\nvar x65 : Int = add(x : arg650, y : arg651)\nvar v65 : Int = 734\nassert(x65 == v65, \"Exception -- test case 65 did not pass. x65 = \")\n\nvar arg660 : Int = 462\nvar arg661 : Int = 797\nvar x66 : Int = add(x : arg660, y : arg661)\nvar v66 : Int = 1259\nassert(x66 == v66, \"Exception -- test case 66 did not pass. x66 = \")\n\nvar arg670 : Int = 406\nvar arg671 : Int = 141\nvar x67 : Int = add(x : arg670, y : arg671)\nvar v67 : Int = 547\nassert(x67 == v67, \"Exception -- test case 67 did not pass. x67 = \")\n\nvar arg680 : Int = 106\nvar arg681 : Int = 44\nvar x68 : Int = add(x : arg680, y : arg681)\nvar v68 : Int = 150\nassert(x68 == v68, \"Exception -- test case 68 did not pass. x68 = \")\n\nvar arg690 : Int = 300\nvar arg691 : Int = 934\nvar x69 : Int = add(x : arg690, y : arg691)\nvar v69 : Int = 1234\nassert(x69 == v69, \"Exception -- test case 69 did not pass. x69 = \")\n\nvar arg700 : Int = 471\nvar arg701 : Int = 524\nvar x70 : Int = add(x : arg700, y : arg701)\nvar v70 : Int = 995\nassert(x70 == v70, \"Exception -- test case 70 did not pass. x70 = \")\n\nvar arg710 : Int = 122\nvar arg711 : Int = 429\nvar x71 : Int = add(x : arg710, y : arg711)\nvar v71 : Int = 551\nassert(x71 == v71, \"Exception -- test case 71 did not pass. x71 = \")\n\nvar arg720 : Int = 735\nvar arg721 : Int = 195\nvar x72 : Int = add(x : arg720, y : arg721)\nvar v72 : Int = 930\nassert(x72 == v72, \"Exception -- test case 72 did not pass. x72 = \")\n\nvar arg730 : Int = 335\nvar arg731 : Int = 484\nvar x73 : Int = add(x : arg730, y : arg731)\nvar v73 : Int = 819\nassert(x73 == v73, \"Exception -- test case 73 did not pass. x73 = \")\n\nvar arg740 : Int = 28\nvar arg741 : Int = 809\nvar x74 : Int = add(x : arg740, y : arg741)\nvar v74 : Int = 837\nassert(x74 == v74, \"Exception -- test case 74 did not pass. x74 = \")\n\nvar arg750 : Int = 430\nvar arg751 : Int = 20\nvar x75 : Int = add(x : arg750, y : arg751)\nvar v75 : Int = 450\nassert(x75 == v75, \"Exception -- test case 75 did not pass. x75 = \")\n\nvar arg760 : Int = 916\nvar arg761 : Int = 635\nvar x76 : Int = add(x : arg760, y : arg761)\nvar v76 : Int = 1551\nassert(x76 == v76, \"Exception -- test case 76 did not pass. x76 = \")\n\nvar arg770 : Int = 301\nvar arg771 : Int = 999\nvar x77 : Int = add(x : arg770, y : arg771)\nvar v77 : Int = 1300\nassert(x77 == v77, \"Exception -- test case 77 did not pass. x77 = \")\n\nvar arg780 : Int = 454\nvar arg781 : Int = 466\nvar x78 : Int = add(x : arg780, y : arg781)\nvar v78 : Int = 920\nassert(x78 == v78, \"Exception -- test case 78 did not pass. x78 = \")\n\nvar arg790 : Int = 905\nvar arg791 : Int = 259\nvar x79 : Int = add(x : arg790, y : arg791)\nvar v79 : Int = 1164\nassert(x79 == v79, \"Exception -- test case 79 did not pass. x79 = \")\n\nvar arg800 : Int = 168\nvar arg801 : Int = 205\nvar x80 : Int = add(x : arg800, y : arg801)\nvar v80 : Int = 373\nassert(x80 == v80, \"Exception -- test case 80 did not pass. x80 = \")\n\nvar arg810 : Int = 570\nvar arg811 : Int = 434\nvar x81 : Int = add(x : arg810, y : arg811)\nvar v81 : Int = 1004\nassert(x81 == v81, \"Exception -- test case 81 did not pass. x81 = \")\n\nvar arg820 : Int = 64\nvar arg821 : Int = 959\nvar x82 : Int = add(x : arg820, y : arg821)\nvar v82 : Int = 1023\nassert(x82 == v82, \"Exception -- test case 82 did not pass. x82 = \")\n\nvar arg830 : Int = 957\nvar arg831 : Int = 510\nvar x83 : Int = add(x : arg830, y : arg831)\nvar v83 : Int = 1467\nassert(x83 == v83, \"Exception -- test case 83 did not pass. x83 = \")\n\nvar arg840 : Int = 722\nvar arg841 : Int = 598\nvar x84 : Int = add(x : arg840, y : arg841)\nvar v84 : Int = 1320\nassert(x84 == v84, \"Exception -- test case 84 did not pass. x84 = \")\n\nvar arg850 : Int = 770\nvar arg851 : Int = 226\nvar x85 : Int = add(x : arg850, y : arg851)\nvar v85 : Int = 996\nassert(x85 == v85, \"Exception -- test case 85 did not pass. x85 = \")\n\nvar arg860 : Int = 579\nvar arg861 : Int = 66\nvar x86 : Int = add(x : arg860, y : arg861)\nvar v86 : Int = 645\nassert(x86 == v86, \"Exception -- test case 86 did not pass. x86 = \")\n\nvar arg870 : Int = 117\nvar arg871 : Int = 674\nvar x87 : Int = add(x : arg870, y : arg871)\nvar v87 : Int = 791\nassert(x87 == v87, \"Exception -- test case 87 did not pass. x87 = \")\n\nvar arg880 : Int = 530\nvar arg881 : Int = 30\nvar x88 : Int = add(x : arg880, y : arg881)\nvar v88 : Int = 560\nassert(x88 == v88, \"Exception -- test case 88 did not pass. x88 = \")\n\nvar arg890 : Int = 776\nvar arg891 : Int = 345\nvar x89 : Int = add(x : arg890, y : arg891)\nvar v89 : Int = 1121\nassert(x89 == v89, \"Exception -- test case 89 did not pass. x89 = \")\n\nvar arg900 : Int = 327\nvar arg901 : Int = 389\nvar x90 : Int = add(x : arg900, y : arg901)\nvar v90 : Int = 716\nassert(x90 == v90, \"Exception -- test case 90 did not pass. x90 = \")\n\nvar arg910 : Int = 596\nvar arg911 : Int = 12\nvar x91 : Int = add(x : arg910, y : arg911)\nvar v91 : Int = 608\nassert(x91 == v91, \"Exception -- test case 91 did not pass. x91 = \")\n\nvar arg920 : Int = 599\nvar arg921 : Int = 511\nvar x92 : Int = add(x : arg920, y : arg921)\nvar v92 : Int = 1110\nassert(x92 == v92, \"Exception -- test case 92 did not pass. x92 = \")\n\nvar arg930 : Int = 936\nvar arg931 : Int = 476\nvar x93 : Int = add(x : arg930, y : arg931)\nvar v93 : Int = 1412\nassert(x93 == v93, \"Exception -- test case 93 did not pass. x93 = \")\n\nvar arg940 : Int = 461\nvar arg941 : Int = 14\nvar x94 : Int = add(x : arg940, y : arg941)\nvar v94 : Int = 475\nassert(x94 == v94, \"Exception -- test case 94 did not pass. x94 = \")\n\nvar arg950 : Int = 966\nvar arg951 : Int = 157\nvar x95 : Int = add(x : arg950, y : arg951)\nvar v95 : Int = 1123\nassert(x95 == v95, \"Exception -- test case 95 did not pass. x95 = \")\n\nvar arg960 : Int = 326\nvar arg961 : Int = 91\nvar x96 : Int = add(x : arg960, y : arg961)\nvar v96 : Int = 417\nassert(x96 == v96, \"Exception -- test case 96 did not pass. x96 = \")\n\nvar arg970 : Int = 392\nvar arg971 : Int = 455\nvar x97 : Int = add(x : arg970, y : arg971)\nvar v97 : Int = 847\nassert(x97 == v97, \"Exception -- test case 97 did not pass. x97 = \")\n\nvar arg980 : Int = 446\nvar arg981 : Int = 477\nvar x98 : Int = add(x : arg980, y : arg981)\nvar v98 : Int = 923\nassert(x98 == v98, \"Exception -- test case 98 did not pass. x98 = \")\n\nvar arg990 : Int = 324\nvar arg991 : Int = 860\nvar x99 : Int = add(x : arg990, y : arg991)\nvar v99 : Int = 1184\nassert(x99 == v99, \"Exception -- test case 99 did not pass. x99 = \")\n\nvar arg1000 : Int = 945\nvar arg1001 : Int = 85\nvar x100 : Int = add(x : arg1000, y : arg1001)\nvar v100 : Int = 1030\nassert(x100 == v100, \"Exception -- test case 100 did not pass. x100 = \")\n\nvar arg1010 : Int = 886\nvar arg1011 : Int = 582\nvar x101 : Int = add(x : arg1010, y : arg1011)\nvar v101 : Int = 1468\nassert(x101 == v101, \"Exception -- test case 101 did not pass. x101 = \")\n\nvar arg1020 : Int = 886\nvar arg1021 : Int = 712\nvar x102 : Int = add(x : arg1020, y : arg1021)\nvar v102 : Int = 1598\nassert(x102 == v102, \"Exception -- test case 102 did not pass. x102 = \")\n\nvar arg1030 : Int = 842\nvar arg1031 : Int = 953\nvar x103 : Int = add(x : arg1030, y : arg1031)\nvar v103 : Int = 1795\nassert(x103 == v103, \"Exception -- test case 103 did not pass. x103 = \")\n\n", "description": "दो संख्याएँ x और y जोड़ें \n>>> जोड़ें (2,3) \n5. \n>>> जोड़ें (5,7) \n12.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/20", "entry_point": "sameChars", "test": "\n\nvar arg00 : String = #\"eabcdzzzz\"#\nvar arg01 : String = #\"dddzzzzzzzddeddabc\"#\nvar x0 : Bool = sameChars(s0 : arg00, s1 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcd\"#\nvar arg11 : String = #\"dddddddabc\"#\nvar x1 : Bool = sameChars(s0 : arg10, s1 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"dddddddabc\"#\nvar arg21 : String = #\"abcd\"#\nvar x2 : Bool = sameChars(s0 : arg20, s1 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"eabcd\"#\nvar arg31 : String = #\"dddddddabc\"#\nvar x3 : Bool = sameChars(s0 : arg30, s1 : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"abcd\"#\nvar arg41 : String = #\"dddddddabcf\"#\nvar x4 : Bool = sameChars(s0 : arg40, s1 : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"eabcdzzzz\"#\nvar arg51 : String = #\"dddzzzzzzzddddabc\"#\nvar x5 : Bool = sameChars(s0 : arg50, s1 : arg51)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"aabb\"#\nvar arg61 : String = #\"aaccc\"#\nvar x6 : Bool = sameChars(s0 : arg60, s1 : arg61)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "जाँच करें कि क्या दो शब्दों में समान अक्षर हैं। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzuddeddabc') \nसच है। \n>>> समान अक्षर ('एबीसीडी','डीडीडीडीडीएबीसी') \nसच है। \n>>> समान अक्षर ('ddddddabc','abcd') \nसच है। \n>>> समान अक्षर ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzddddddabc') \nझूठ बोलती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/21", "entry_point": "fib", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = fib(n : arg00)\nvar v0 : Int = 55\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = fib(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Int = fib(n : arg20)\nvar v2 : Int = 21\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 11\nvar x3 : Int = fib(n : arg30)\nvar v3 : Int = 89\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 12\nvar x4 : Int = fib(n : arg40)\nvar v4 : Int = 144\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "n-th फिबोनाची संख्या वापस करें। \n>>> फाइबर (10) \n55. \n>>> फाइबर (1) \n1. \n>>> फाइबर (8) \n21.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/22", "entry_point": "common", "test": "\n\nvar arg00 : [Int] = [1, 4, 3, 34, 653, 2, 5]\nvar arg01 : [AnyHashable] = [5, 7, 1, 5, 9, 653, 121]\nvar x0 : [AnyHashable] = common(l1 : arg00, l2 : arg01)\nvar v0 : [AnyHashable] = [1, 5, 653]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 3, 2, 8]\nvar arg11 : [AnyHashable] = [3, 2]\nvar x1 : [AnyHashable] = common(l1 : arg10, l2 : arg11)\nvar v1 : [AnyHashable] = [2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 3, 2, 8]\nvar arg21 : [AnyHashable] = [3, 2, 4]\nvar x2 : [AnyHashable] = common(l1 : arg20, l2 : arg21)\nvar v2 : [AnyHashable] = [2, 3, 4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [4, 3, 2, 8]\nvar arg31 : [AnyHashable] = []\nvar x3 : [AnyHashable] = common(l1 : arg30, l2 : arg31)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "दो सूचियों के लिए विशिष्ट सामान्य तत्वों को वापस क्रमबद्ध करें। \n>>> सामान्य ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्य ([5,3,2,8], [3,2]) \n[2,3]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/23", "entry_point": "largestPrimeFactor", "test": "\n\nvar arg00 : Int = 15\nvar x0 : Int = largestPrimeFactor(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 27\nvar x1 : Int = largestPrimeFactor(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 63\nvar x2 : Int = largestPrimeFactor(n : arg20)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 330\nvar x3 : Int = largestPrimeFactor(n : arg30)\nvar v3 : Int = 11\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 13195\nvar x4 : Int = largestPrimeFactor(n : arg40)\nvar v4 : Int = 29\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "n का सबसे बड़ा अभाज्य गुणनखंड वापस करें। मान लीजिए कि n> 1 अभाज्य नहीं है। \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (13195) \n29. \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (2048) \n2.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/24", "entry_point": "sumToN", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = sumToN(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = sumToN(n : arg10)\nvar v1 : Int = 21\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Int = sumToN(n : arg20)\nvar v2 : Int = 66\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 30\nvar x3 : Int = sumToN(n : arg30)\nvar v3 : Int = 465\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 100\nvar x4 : Int = sumToN(n : arg40)\nvar v4 : Int = 5050\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "sum _ to _ n एक फलन है जो 1 से n तक की संख्याओं का योग करता है। \n>>> योग _ से _ एन (30) \n465 \n>>> योग _ से _ एन (100) \n5050 \n>>> योग _ से _ एन (5) \n15. \n>>> योग _ से _ एन (10) \n55. \n>>> योग _ से _ एन (1) \n1.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/25", "entry_point": "derivative", "test": "\n\nvar arg00 : [Int] = [3, 1, 2, 4, 5]\nvar x0 : [AnyHashable] = derivative(xs : arg00)\nvar v0 : [AnyHashable] = [1, 4, 12, 20]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : [AnyHashable] = derivative(xs : arg10)\nvar v1 : [AnyHashable] = [2, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1]\nvar x2 : [AnyHashable] = derivative(xs : arg20)\nvar v2 : [AnyHashable] = [2, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [3, 2, 1, 0, 4]\nvar x3 : [AnyHashable] = derivative(xs : arg30)\nvar v3 : [AnyHashable] = [2, 2, 0, 16]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar x4 : [AnyHashable] = derivative(xs : arg40)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "xs एक बहुपद के गुणांक का प्रतिनिधित्व करता है। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nइस बहुपद का उसी रूप में व्युत्पन्न वापस करें। \n>>> व्युत्पन्न ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्न ([1,2,3]) \n[2,6]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/26", "entry_point": "fibfib", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = fibfib(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = fibfib(n : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = fibfib(n : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 8\nvar x3 : Int = fibfib(n : arg30)\nvar v3 : Int = 24\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 10\nvar x4 : Int = fibfib(n : arg40)\nvar v4 : Int = 81\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 12\nvar x5 : Int = fibfib(n : arg50)\nvar v5 : Int = 274\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 14\nvar x6 : Int = fibfib(n : arg60)\nvar v6 : Int = 927\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "फाइबफाइब संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nफाइबफिब (0) = = 0 \nफाइबफिब (1) = = 0 \nफाइबफिब (2) = = 1 \nफाइबफिब (एन) = = फाइबफिब (एन-1) + फाइबफिब (एन-2) + फाइबफिब (एन-3)। \nकृपया फाइबफिब संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। \n>>> फाइबफिब (1) \n0 \n>>> फाइबफिब (5) \n4. \n>>> फाइबफिब (8) \n24.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/27", "entry_point": "vowelsCount", "test": "\n\nvar arg00 : String = #\"abcde\"#\nvar x0 : Int = vowelsCount(s : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Alone\"#\nvar x1 : Int = vowelsCount(s : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"key\"#\nvar x2 : Int = vowelsCount(s : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"bye\"#\nvar x3 : Int = vowelsCount(s : arg30)\nvar v3 : Int = 1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"keY\"#\nvar x4 : Int = vowelsCount(s : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"bYe\"#\nvar x5 : Int = vowelsCount(s : arg50)\nvar v5 : Int = 1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"ACEDY\"#\nvar x6 : Int = vowelsCount(s : arg60)\nvar v6 : Int = 3\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "एक फलन स्वर गणना लिखें जो एक स्ट्रिंग का प्रतिनिधित्व करता है \nइनपुट के रूप में एक शब्द और स्ट्रिंग में स्वरों की संख्या लौटाता है। \nइस मामले में स्वर'ए','ई','आई','ओ','यू'हैं। यहाँ,'वाई'भी एक है। \nस्वर, लेकिन केवल तभी जब यह दिए गए शब्द के अंत में हो। \n\nउदाहरणः \n>>> स्वरों की गिनती (\"एबीसीडीई\") \n2. \n>>> स्वर गणना (\"ACEDY\") \n3.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/28", "entry_point": "search", "test": "\n\nvar arg00 : [Int] = [5, 5, 5, 5, 1]\nvar x0 : Int = search(lst : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 1, 4, 1, 4, 4]\nvar x1 : Int = search(lst : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 3]\nvar x2 : Int = search(lst : arg20)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [8, 8, 8, 8, 8, 8, 8, 8]\nvar x3 : Int = search(lst : arg30)\nvar v3 : Int = 8\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [2, 3, 3, 2, 2]\nvar x4 : Int = search(lst : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]\nvar x5 : Int = search(lst : arg50)\nvar v5 : Int = 1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [3, 2, 8, 2]\nvar x6 : Int = search(lst : arg60)\nvar v6 : Int = 2\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]\nvar x7 : Int = search(lst : arg70)\nvar v7 : Int = 1\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [8, 8, 3, 6, 5, 6, 4]\nvar x8 : Int = search(lst : arg80)\nvar v8 : Int = -1\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Int] = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]\nvar x9 : Int = search(lst : arg90)\nvar v9 : Int = 1\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Int] = [1, 9, 10, 1, 3]\nvar x10 : Int = search(lst : arg100)\nvar v10 : Int = 1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : [Int] = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]\nvar x11 : Int = search(lst : arg110)\nvar v11 : Int = 5\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : [Int] = [1]\nvar x12 : Int = search(lst : arg120)\nvar v12 : Int = 1\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : [Int] = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]\nvar x13 : Int = search(lst : arg130)\nvar v13 : Int = 4\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : [Int] = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]\nvar x14 : Int = search(lst : arg140)\nvar v14 : Int = 2\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : [Int] = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]\nvar x15 : Int = search(lst : arg150)\nvar v15 : Int = 1\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\nvar arg160 : [Int] = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]\nvar x16 : Int = search(lst : arg160)\nvar v16 : Int = 4\nassert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \")\n\nvar arg170 : [Int] = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]\nvar x17 : Int = search(lst : arg170)\nvar v17 : Int = 4\nassert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \")\n\nvar arg180 : [Int] = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]\nvar x18 : Int = search(lst : arg180)\nvar v18 : Int = 2\nassert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \")\n\nvar arg190 : [Int] = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]\nvar x19 : Int = search(lst : arg190)\nvar v19 : Int = -1\nassert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \")\n\nvar arg200 : [Int] = [10]\nvar x20 : Int = search(lst : arg200)\nvar v20 : Int = -1\nassert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \")\n\nvar arg210 : [Int] = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]\nvar x21 : Int = search(lst : arg210)\nvar v21 : Int = 2\nassert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \")\n\nvar arg220 : [Int] = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]\nvar x22 : Int = search(lst : arg220)\nvar v22 : Int = 1\nassert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \")\n\nvar arg230 : [Int] = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]\nvar x23 : Int = search(lst : arg230)\nvar v23 : Int = 1\nassert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \")\n\nvar arg240 : [Int] = [3, 10, 10, 9, 2]\nvar x24 : Int = search(lst : arg240)\nvar v24 : Int = -1\nassert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \")\n\n", "description": "आपको सकारात्मक पूर्णांकों की एक गैर-खाली सूची दी जाती है। सबसे बड़ा पूर्णांक वापस करें जो उससे बड़ा है \nशून्य, और इसकी आवृत्ति पूर्णांक के मूल्य से अधिक या उसके बराबर होती है। \nएक पूर्णांक की आवृत्ति वह संख्या है जो वह सूची में कितनी बार दिखाई देती है। \nयदि ऐसा कोई मान मौजूद नहीं है, तो-1 वापस करें। \nउदाहरण के लिएः \nखोज ([4,1,2,2,3,1]) = = 2 \nखोज ([1,2,3,3,4,4]) = = 3 \nखोज ([5,5,4,4]) = =-1", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/29", "entry_point": "triangleArea", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar arg02 : Int = 5\nvar x0 : Double = triangleArea(a : arg00, b : arg01, c : arg02)\nvar v0 : Double = 6.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 10\nvar x1 : Double = triangleArea(a : arg10, b : arg11, c : arg12)\nvar v1 : Double = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 8\nvar arg22 : Int = 5\nvar x2 : Double = triangleArea(a : arg20, b : arg21, c : arg22)\nvar v2 : Double = 8.18\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 2\nvar arg31 : Int = 2\nvar arg32 : Int = 2\nvar x3 : Double = triangleArea(a : arg30, b : arg31, c : arg32)\nvar v3 : Double = 1.73\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 1\nvar arg41 : Int = 2\nvar arg42 : Int = 3\nvar x4 : Double = triangleArea(a : arg40, b : arg41, c : arg42)\nvar v4 : Double = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 10\nvar arg51 : Int = 5\nvar arg52 : Int = 7\nvar x5 : Double = triangleArea(a : arg50, b : arg51, c : arg52)\nvar v5 : Double = 16.25\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 2\nvar arg61 : Int = 6\nvar arg62 : Int = 3\nvar x6 : Double = triangleArea(a : arg60, b : arg61, c : arg62)\nvar v6 : Double = -1\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 1\nvar arg71 : Int = 1\nvar arg72 : Int = 1\nvar x7 : Double = triangleArea(a : arg70, b : arg71, c : arg72)\nvar v7 : Double = 0.43\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 2\nvar arg81 : Int = 2\nvar arg82 : Int = 10\nvar x8 : Double = triangleArea(a : arg80, b : arg81, c : arg82)\nvar v8 : Double = -1\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए। \nत्रिभुज को 2 दशमलव बिंदुओं पर गोल किया जाता है यदि तीनों भुजाएं एक वैध त्रिभुज बनाती हैं। \nअन्यथा वापसी-1 \nतीन भुजाएँ एक वैध त्रिभुज बनाती हैं जब किसी भी दो भुजाओं का योग अधिक होता है। \nतीसरे पक्ष की तुलना में। \nउदाहरणः \nत्रिभुज क्षेत्रफल (3,4,5) = = 6.00 \nत्रिभुज क्षेत्र (1,2,10) = =-1", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/30", "entry_point": "willItFly", "test": "\n\nvar arg00 : [Int] = [3, 2, 3]\nvar arg01 : Int = 9\nvar x0 : Bool = willItFly(q : arg00, w : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : Int = 5\nvar x1 : Bool = willItFly(q : arg10, w : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3]\nvar arg21 : Int = 5\nvar x2 : Bool = willItFly(q : arg20, w : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [3, 2, 3]\nvar arg31 : Int = 1\nvar x3 : Bool = willItFly(q : arg30, w : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 2, 3]\nvar arg41 : Int = 6\nvar x4 : Bool = willItFly(q : arg40, w : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [5]\nvar arg51 : Int = 5\nvar x5 : Bool = willItFly(q : arg50, w : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "एक फलन लिखें जो सही बताता है यदि वस्तु q उड़ान भरेगी, और अन्यथा गलत। \nवस्तु q उड़ जाएगी यदि यह संतुलित है (यह एक पैलिन्ड्रोमिक सूची है) और इसके तत्वों का योग अधिकतम संभव वजन डब्ल्यू से कम या उसके बराबर है। \n\nउदाहरणः \nविल इट फ्लाई ([1,2], 5) ′ फाल्स \n#1 + 2 अधिकतम संभव वजन से कम है, लेकिन यह असंतुलित है। \n\nविल इट फ्लाई ([3,2,3], 1) ′ फाल्स \n#यह संतुलित है, लेकिन 3 + 2 + 3 अधिकतम संभव वजन से अधिक है। \n\nविल इट फ्लाई ([3,2,3], 9) सही है \n#3 + 2 + 3 अधिकतम संभव वजन से कम है, और यह संतुलित है। \n\nविल इट फ्लाई ([3], 5) ट्रू \n#3 अधिकतम संभव वजन से कम है, और यह संतुलित है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/31", "entry_point": "isMultiplyPrime", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Bool = isMultiplyPrime(a : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 30\nvar x1 : Bool = isMultiplyPrime(a : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Bool = isMultiplyPrime(a : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 10\nvar x3 : Bool = isMultiplyPrime(a : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 125\nvar x4 : Bool = isMultiplyPrime(a : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 105\nvar x5 : Bool = isMultiplyPrime(a : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 126\nvar x6 : Bool = isMultiplyPrime(a : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 729\nvar x7 : Bool = isMultiplyPrime(a : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 891\nvar x8 : Bool = isMultiplyPrime(a : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1001\nvar x9 : Bool = isMultiplyPrime(a : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "एक फलन लिखें जो सही लौटता है यदि दी गई संख्या 3 अभाज्य संख्याओं का गुणन है। \nऔर अन्यथा गलत। \nयह जानते हुए कि (ए) 100 से कम है। \nउदाहरणः \nक्या _ गुणा _ अभाज्य (30) = = सही है \n30 = 2 * 3 * 5", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/32", "entry_point": "decimalToBinary", "test": "\n\nvar arg00 : Int = 0\nvar x0 : String = decimalToBinary(decimal : arg00)\nvar v0 : String = #\"db0db\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 32\nvar x1 : String = decimalToBinary(decimal : arg10)\nvar v1 : String = #\"db100000db\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 103\nvar x2 : String = decimalToBinary(decimal : arg20)\nvar v2 : String = #\"db1100111db\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 15\nvar x3 : String = decimalToBinary(decimal : arg30)\nvar v3 : String = #\"db1111db\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "आपको दशमलव के रूप में एक संख्या दी जाएगी और आपका काम इसे में बदलना है \nद्विआधारी प्रारूप। फलन को एक स्ट्रिंग वापस करनी चाहिए, जिसमें प्रत्येक वर्ण द्विआधारी का प्रतिनिधित्व करता है। \nसंख्या. स्ट्रिंग में प्रत्येक वर्ण'0'या'1'होगा। \n\nस्ट्रिंग के शुरू में और अंत में कुछ अतिरिक्त वर्ण'db'होंगे। \nप्रारूप में मदद करने के लिए अतिरिक्त वर्ण हैं। \n\nउदाहरण के लिएः \nदशमलव से द्विआधारी (15) #\"db1111db\" बताता है \nदशमलव _ से _ द्विआधारी (32) #बताता है \"db100000db\"", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/33", "entry_point": "isHappy", "test": "\n\nvar arg00 : String = #\"a\"#\nvar x0 : Bool = isHappy(s : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aa\"#\nvar x1 : Bool = isHappy(s : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcd\"#\nvar x2 : Bool = isHappy(s : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"aabb\"#\nvar x3 : Bool = isHappy(s : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"adb\"#\nvar x4 : Bool = isHappy(s : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"xyy\"#\nvar x5 : Bool = isHappy(s : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"iopaxpoi\"#\nvar x6 : Bool = isHappy(s : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"iopaxioi\"#\nvar x7 : Bool = isHappy(s : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nआपका काम यह जांचना है कि स्ट्रिंग खुश है या नहीं। \nएक स्ट्रिंग तब खुश होती है जब इसकी लंबाई कम से कम 3 हो और हर 3 लगातार अक्षर अलग-अलग हों। \nउदाहरण के लिएः \nखुश है (a) => गलत है \nखुश है (एए) => गलत है \nखुश है (ए. बी. सी. डी.) => सही है \nखुश है (आब्ब) => गलत है \nखुश है (ए. डी. बी.) => सच है \nखुश है (xyy) => गलत है", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/34", "entry_point": "numericalLetterGrade", "test": "\n\nvar arg00 : [Double] = [4.0, 3, 1.7, 2, 3.5]\nvar x0 : [String] = numericalLetterGrade(grades : arg00)\nvar v0 : [String] = [#\"A+\"#, #\"B\"#, #\"C-\"#, #\"C\"#, #\"A-\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [1.2]\nvar x1 : [String] = numericalLetterGrade(grades : arg10)\nvar v1 : [String] = [#\"D+\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [0.5]\nvar x2 : [String] = numericalLetterGrade(grades : arg20)\nvar v2 : [String] = [#\"D-\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [0.0]\nvar x3 : [String] = numericalLetterGrade(grades : arg30)\nvar v3 : [String] = [#\"E\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [1, 0.3, 1.5, 2.8, 3.3]\nvar x4 : [String] = numericalLetterGrade(grades : arg40)\nvar v4 : [String] = [#\"D\"#, #\"D-\"#, #\"C-\"#, #\"B\"#, #\"B+\"#]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Double] = [0, 0.7]\nvar x5 : [String] = numericalLetterGrade(grades : arg50)\nvar v5 : [String] = [#\"E\"#, #\"D-\"#]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "यह सेमेस्टर का अंतिम सप्ताह होता है और शिक्षक को अंक देने होते हैं। \nछात्रों के लिए। शिक्षक ग्रेडिंग के लिए अपना खुद का एल्गोरिदम बना रहे हैं। \nएकमात्र समस्या यह है कि उसने ग्रेडिंग के लिए उपयोग किया गया कोड खो दिया है। \nउन्होंने आपको कुछ छात्रों के लिए जी. पी. ए. की सूची दी है और आपको लिखना होगा। \nएक प्रकार्य जो निम्नलिखित तालिका का उपयोग करके अक्षर श्रेणी की सूची तैयार कर सकता हैः \nजी. पी. ए। लेटर ग्रेड \n4. 0 ए + \n> 3.7 ए \n> 3.3 ए-\n> 3 बी + \n> 2.7 बी \n> 2.3 बी-\n> 2 सी + \n> 1.7 डिग्री सेल्सियस \n> 1.3 सी-\n> 1 डी + \n> 0.7 डी \n> 0.0 डी-\n0. 0 ई \n\nउदाहरणः \nश्रेणी समीकरण ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/35", "entry_point": "primeLength", "test": "\n\nvar arg00 : String = #\"Hello\"#\nvar x0 : Bool = primeLength(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdcba\"#\nvar x1 : Bool = primeLength(string : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"kittens\"#\nvar x2 : Bool = primeLength(string : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"orange\"#\nvar x3 : Bool = primeLength(string : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"wow\"#\nvar x4 : Bool = primeLength(string : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"world\"#\nvar x5 : Bool = primeLength(string : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"MadaM\"#\nvar x6 : Bool = primeLength(string : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"Wow\"#\nvar x7 : Bool = primeLength(string : arg70)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"\"#\nvar x8 : Bool = primeLength(string : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"HI\"#\nvar x9 : Bool = primeLength(string : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"go\"#\nvar x10 : Bool = primeLength(string : arg100)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"gogo\"#\nvar x11 : Bool = primeLength(string : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"aaaaaaaaaaaaaaa\"#\nvar x12 : Bool = primeLength(string : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : String = #\"Madam\"#\nvar x13 : Bool = primeLength(string : arg130)\nvar v13 : Bool = true\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : String = #\"M\"#\nvar x14 : Bool = primeLength(string : arg140)\nvar v14 : Bool = false\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : String = #\"0\"#\nvar x15 : Bool = primeLength(string : arg150)\nvar v15 : Bool = false\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\n", "description": "एक फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और सही लौटाता है यदि स्ट्रिंग \nलंबाई एक अभाज्य संख्या है या अन्यथा गलत है \nउदाहरण \nप्राइम लेंथ ('हैलो') = = सही \nप्राइम _ लेंथ ('एबीसीडीसीबीए') = = सही \nअभाज्य लंबाई ('बिल्ली के बच्चे') = = सही \nअभाज्य लंबाई ('नारंगी') = = गलत", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/36", "entry_point": "solve", "test": "\n\nvar arg00 : Int = 1000\nvar x0 : String = solve(n : arg00)\nvar v0 : String = #\"1\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 150\nvar x1 : String = solve(n : arg10)\nvar v1 : String = #\"110\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 147\nvar x2 : String = solve(n : arg20)\nvar v2 : String = #\"1100\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 333\nvar x3 : String = solve(n : arg30)\nvar v3 : String = #\"1001\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 963\nvar x4 : String = solve(n : arg40)\nvar v4 : String = #\"10010\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "एक सकारात्मक पूर्णांक N दिए जाने पर, इसके अंकों का कुल योग द्विआधारी में वापस करें। \n\nउदाहरण \nएन = 1000 के लिए, अंकों का योग 1 होगा और आउटपुट \"1\" होना चाहिए। \nएन = 150 के लिए, अंकों का योग 6 होगा और आउटपुट \"110\" होना चाहिए। \nएन = 147 के लिए, अंकों का योग 12 होगा और आउटपुट \"1100\" होना चाहिए। \n\nचरः \n@N पूर्णांक \nबाधाएँः 0 ≤ एन ≤ 10000। \nआउटपुटः \nद्विआधारी संख्या की एक स्ट्रिंग", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/37", "entry_point": "getRow", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar arg01 : Int = 1\nvar x0 : [AnyHashable] = getRow(lst : arg00, x : arg01)\nvar v0 : [AnyHashable] = []\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[1]]\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = getRow(lst : arg10, x : arg11)\nvar v1 : [AnyHashable] = []\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[], [1], [1, 2, 3]]\nvar arg21 : Int = 3\nvar x2 : [AnyHashable] = getRow(lst : arg20, x : arg21)\nvar v2 : [AnyHashable] = [[2, 2]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "आपको एक 2 आयामी डेटा दिया जाता है, एक नेस्टेड सूची के रूप में, \nजो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, \nप्रत्येक पंक्ति में अलग-अलग संख्या में स्तंभ हो सकते हैं। \nपहले और पूर्णांक x को देखते हुए, सूची में पूर्णांक x खोजें, \nऔर टुपल्स की वापसी सूची, [(x1, y1), (x2, y2)...] जैसे कि \nप्रत्येक टुपल एक निर्देशांक है-(पंक्ति, कॉलम), जो 0 से शुरू होता है। \nनिर्देशांकों को प्रारंभ में पंक्तियों द्वारा आरोही क्रम में क्रमबद्ध करें। \nइसके अलावा, पंक्ति के निर्देशांक को स्तंभों द्वारा अवरोही क्रम में क्रमबद्ध करें। \n\nउदाहरण के लिएः \nपंक्ति प्राप्त करें (_ r) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nपंक्ति प्राप्त करें ([], 1) = = [] \nगेट _ रो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/38", "entry_point": "nextSmallest", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4, 5]\nvar x0 : AnyHashable = nextSmallest(lst : arg00)\nvar v0 : AnyHashable = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 1, 4, 3, 2]\nvar x1 : AnyHashable = nextSmallest(lst : arg10)\nvar v1 : AnyHashable = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = []\nvar x2 : AnyHashable = nextSmallest(lst : arg20)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, 1]\nvar x3 : AnyHashable = nextSmallest(lst : arg30)\nvar v3 : AnyHashable = \"none\"\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, 1, 1, 1, 0]\nvar x4 : AnyHashable = nextSmallest(lst : arg40)\nvar v4 : AnyHashable = 1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1, 1]\nvar x5 : AnyHashable = nextSmallest(lst : arg50)\nvar v5 : AnyHashable = \"none\"\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [-35, 34, 12, -45]\nvar x6 : AnyHashable = nextSmallest(lst : arg60)\nvar v6 : AnyHashable = -35\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nएक फलन अगला _ सबसे छोटा () लिखें जो सूची का दूसरा सबसे छोटा तत्व देता है। \nशून्य लौटें यदि ऐसा कोई तत्व नहीं है। \n\nअगला _ सबसे छोटा ([1,2,3,4,5]) = = 2 \nअगला _ सबसे छोटा ([5,1,4,3,2]) = = 2 \nअगला _ सबसे छोटा ([]) = = कोई नहीं \nअगला _ सबसे छोटा ([1,1]) = = कोई नहीं", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/39", "entry_point": "isBored", "test": "\n\nvar arg00 : String = #\"Hello world\"#\nvar x0 : Int = isBored(s : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Is the sky blue?\"#\nvar x1 : Int = isBored(s : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"I love It !\"#\nvar x2 : Int = isBored(s : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"bIt\"#\nvar x3 : Int = isBored(s : arg30)\nvar v3 : Int = 0\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"I feel good today. I will be productive. will kill It\"#\nvar x4 : Int = isBored(s : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"You and I are going for a walk\"#\nvar x5 : Int = isBored(s : arg50)\nvar v5 : Int = 0\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "आपको शब्दों की एक श्रृंखला दी जाएगी, और आपका काम संख्या को गिनना है। \nऊब का। ऊब एक वाक्य है जो \"मैं\" शब्द से शुरू होता है। \nवाक्यों को '.', '?'या '!'द्वारा सीमांकित किया जाता है। \n\nउदाहरण के लिएः \n>>> बोर हो गया है (\"हैलो वर्ल्ड\") \n0 \n>>> ऊब गया है (\"आकाश नीला है। सूरज चमक रहा है। मुझे यह मौसम पसंद है\") \n1.", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/40", "entry_point": "skjkasdkd", "test": "\n\nvar arg00 : [Int] = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nvar x0 : Int = skjkasdkd(lst : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nvar x1 : Int = skjkasdkd(lst : arg10)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nvar x2 : Int = skjkasdkd(lst : arg20)\nvar v2 : Int = 13\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nvar x3 : Int = skjkasdkd(lst : arg30)\nvar v3 : Int = 11\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [0, 81, 12, 3, 1, 21]\nvar x4 : Int = skjkasdkd(lst : arg40)\nvar v4 : Int = 3\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [0, 8, 1, 2, 1, 7]\nvar x5 : Int = skjkasdkd(lst : arg50)\nvar v5 : Int = 7\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [8191]\nvar x6 : Int = skjkasdkd(lst : arg60)\nvar v6 : Int = 19\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [8191, 123456, 127, 7]\nvar x7 : Int = skjkasdkd(lst : arg70)\nvar v7 : Int = 19\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [127, 97, 8192]\nvar x8 : Int = skjkasdkd(lst : arg80)\nvar v8 : Int = 10\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nआपको सबसे बड़ा अभाज्य मूल्य खोजने और उसके अंकों का योग वापस करने की आवश्यकता है। \n\nउदाहरण के लिएः \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] के लिए आउटपुट 10 होना चाहिए। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] के लिए आउटपुट 25 होना चाहिए। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] के लिए आउटपुट 13 होना चाहिए। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] के लिए आउटपुट 11 होना चाहिए। \nlst = [0,81,12, 3,1,21] के लिए आउटपुट 3 होना चाहिए। \nlst = [0,8,1, 2,1,7] के लिए आउटपुट 7 होना चाहिए।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/41", "entry_point": "checkDictCase", "test": "\n\nvar arg00 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, #\"b\"# : #\"banana\"#]\nvar x0 : Bool = checkDictCase(dict : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, #\"A\"# : #\"banana\"#, #\"B\"# : #\"banana\"#]\nvar x1 : Bool = checkDictCase(dict : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, 5 : #\"banana\"#, #\"a\"# : #\"apple\"#]\nvar x2 : Bool = checkDictCase(dict : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable: AnyHashable] = [#\"Name\"# : #\"John\"#, #\"Age\"# : #\"36\"#, #\"City\"# : #\"Houston\"#]\nvar x3 : Bool = checkDictCase(dict : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable: AnyHashable] = [#\"STATE\"# : #\"NC\"#, #\"ZIP\"# : #\"12345\"#]\nvar x4 : Bool = checkDictCase(dict : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable: AnyHashable] = [#\"fruit\"# : #\"Orange\"#, #\"taste\"# : #\"Sweet\"#]\nvar x5 : Bool = checkDictCase(dict : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable: AnyHashable] = []\nvar x6 : Bool = checkDictCase(dict : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "शब्दकोश दिए जाने पर, सही वापस करें यदि सभी कुंजी निचले हिस्से में स्ट्रिंग हैं \nकेस या सभी कुंजी ऊपरी मामले में स्ट्रिंग हैं, अन्यथा गलत लौटें। \nफ़ंक्शन को वापस करना चाहिए गलत है दिया गया शब्दकोश खाली है। \nउदाहरण के लिएः \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"b\": \"केला\"}) को सही लौटना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"A\": \"केला\", \"B\": \"केला\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", 8: \"केला\", \"a\": \"सेब\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"नाम\": \"जॉन\", \"आयु\": \"36\", \"सिटी\": \"ह्यूस्टन\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) को सही लौटना चाहिए।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/42", "entry_point": "closestInteger", "test": "\n\nvar arg00 : String = #\"10\"#\nvar x0 : Int = closestInteger(value : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"14.5\"#\nvar x1 : Int = closestInteger(value : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"-15.5\"#\nvar x2 : Int = closestInteger(value : arg20)\nvar v2 : Int = -16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"15.3\"#\nvar x3 : Int = closestInteger(value : arg30)\nvar v3 : Int = 15\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"0\"#\nvar x4 : Int = closestInteger(value : arg40)\nvar v4 : Int = 0\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "एक फ़ंक्शन बनाएँ जो एक संख्या का प्रतिनिधित्व करने वाला मान (स्ट्रिंग) लेता है \nऔर निकटतम पूर्णांक देता है। यदि संख्या समान दूरी पर है। \nदो पूर्णांकों से, इसे शून्य से दूर गोल करें। \n\nउदाहरण \n>>> निकटतम पूर्णांक (\"10\") \n10. \n>>> निकटतम पूर्णांक (\"15.3\") \n15. \n\nध्यान देंः \nशून्य से दूर गोल करने का अर्थ है कि यदि दी गई संख्या समान दूरी पर है \nदो पूर्णांकों से, जिसे आपको वापस करना चाहिए वह वह है जो \nशून्य से सबसे दूर। उदाहरण के लिए निकटतम पूर्णांक (\"14.5\") चाहिए \n15 वापस करें और निकटतम पूर्णांक (\"-14.5\") को-15 वापस करना चाहिए।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/43", "entry_point": "makeAPile", "test": "\n\nvar arg00 : Int = 3\nvar x0 : [Int] = makeAPile(n : arg00)\nvar v0 : [Int] = [3, 5, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : [Int] = makeAPile(n : arg10)\nvar v1 : [Int] = [4, 6, 8, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : [Int] = makeAPile(n : arg20)\nvar v2 : [Int] = [5, 7, 9, 11, 13]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 6\nvar x3 : [Int] = makeAPile(n : arg30)\nvar v3 : [Int] = [6, 8, 10, 12, 14, 16]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 8\nvar x4 : [Int] = makeAPile(n : arg40)\nvar v4 : [Int] = [8, 10, 12, 14, 16, 18, 20, 22]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "एक सकारात्मक पूर्णांक n को देखते हुए, आपको पत्थरों के n स्तरों का ढेर बनाना होगा। \nपहले स्तर में एन पत्थर हैं। \nअगले स्तर पर पत्थरों की संख्या हैः \n- अगली विषम संख्या यदि n विषम है। \n- अगली सम संख्या यदि n सम है। \nसूची में प्रत्येक स्तर पर पत्थरों की संख्या वापस करें, जहां सूचकांक पर तत्व है \ni स्तर (i + 1) में पत्थरों की संख्या का प्रतिनिधित्व करता है। \n\nउदाहरण के लिएः \n>>> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3,5,7]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/44", "entry_point": "wordsString", "test": "\n\nvar arg00 : String = #\"Hi, my name is John\"#\nvar x0 : [AnyHashable] = wordsString(s : arg00)\nvar v0 : [AnyHashable] = [#\"Hi\"#, #\"my\"#, #\"name\"#, #\"is\"#, #\"John\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"One, two, three, four, five, six\"#\nvar x1 : [AnyHashable] = wordsString(s : arg10)\nvar v1 : [AnyHashable] = [#\"One\"#, #\"two\"#, #\"three\"#, #\"four\"#, #\"five\"#, #\"six\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Hi, my name\"#\nvar x2 : [AnyHashable] = wordsString(s : arg20)\nvar v2 : [AnyHashable] = [#\"Hi\"#, #\"my\"#, #\"name\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"One,, two, three, four, five, six,\"#\nvar x3 : [AnyHashable] = wordsString(s : arg30)\nvar v3 : [AnyHashable] = [#\"One\"#, #\"two\"#, #\"three\"#, #\"four\"#, #\"five\"#, #\"six\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"\"#\nvar x4 : [AnyHashable] = wordsString(s : arg40)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"ahmed     , gamal\"#\nvar x5 : [AnyHashable] = wordsString(s : arg50)\nvar v5 : [AnyHashable] = [#\"ahmed\"#, #\"gamal\"#]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "आपको अल्पविराम या रिक्त स्थान द्वारा अलग किए गए शब्दों की एक श्रृंखला दी जाएगी। आपका कार्य है \nस्ट्रिंग को शब्दों में विभाजित करने और शब्दों की एक सरणी वापस करने के लिए। \n\nउदाहरण के लिएः \nशब्द _ स्ट्रिंग (\"हाय, मेरा नाम जॉन है\") = = [\"हाय\", \"मेरा\", \"नाम\", \"है\", \"जॉन\"] \nशब्द _ स्ट्रिंग (\"एक, दो, तीन, चार, पांच, छह\") = = [\"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\"]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/45", "entry_point": "chooseNum", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : Int = 15\nvar x0 : Int = chooseNum(x : arg00, y : arg01)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 13\nvar arg11 : Int = 12\nvar x1 : Int = chooseNum(x : arg10, y : arg11)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 33\nvar arg21 : Int = 12354\nvar x2 : Int = chooseNum(x : arg20, y : arg21)\nvar v2 : Int = 12354\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5234\nvar arg31 : Int = 5233\nvar x3 : Int = chooseNum(x : arg30, y : arg31)\nvar v3 : Int = -1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 6\nvar arg41 : Int = 29\nvar x4 : Int = chooseNum(x : arg40, y : arg41)\nvar v4 : Int = 28\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 27\nvar arg51 : Int = 10\nvar x5 : Int = chooseNum(x : arg50, y : arg51)\nvar v5 : Int = -1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 7\nvar arg61 : Int = 7\nvar x6 : Int = chooseNum(x : arg60, y : arg61)\nvar v6 : Int = -1\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 546\nvar arg71 : Int = 546\nvar x7 : Int = chooseNum(x : arg70, y : arg71)\nvar v7 : Int = 546\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "यह फलन दो धनात्मक संख्याएँ x और y लेता है और वापस करता है \nसबसे बड़ी सम पूर्णांक संख्या जो [x, y] समावेशी सीमा में है। यदि \nऐसी कोई संख्या नहीं है, तो फ़ंक्शन-1 लौटना चाहिए। \n\nउदाहरण के लिएः \nचुनें (12,15) = 14 \nचुनें (13,12) =-1", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/46", "entry_point": "roundedAvg", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar x0 : AnyHashable = roundedAvg(n : arg00, m : arg01)\nvar v0 : AnyHashable = #\"0b11\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar arg11 : Int = 13\nvar x1 : AnyHashable = roundedAvg(n : arg10, m : arg11)\nvar v1 : AnyHashable = #\"0b1010\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 964\nvar arg21 : Int = 977\nvar x2 : AnyHashable = roundedAvg(n : arg20, m : arg21)\nvar v2 : AnyHashable = #\"0b1111001010\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 996\nvar arg31 : Int = 997\nvar x3 : AnyHashable = roundedAvg(n : arg30, m : arg31)\nvar v3 : AnyHashable = #\"0b1111100100\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 560\nvar arg41 : Int = 851\nvar x4 : AnyHashable = roundedAvg(n : arg40, m : arg41)\nvar v4 : AnyHashable = #\"0b1011000010\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 185\nvar arg51 : Int = 546\nvar x5 : AnyHashable = roundedAvg(n : arg50, m : arg51)\nvar v5 : AnyHashable = #\"0b101101110\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 362\nvar arg61 : Int = 496\nvar x6 : AnyHashable = roundedAvg(n : arg60, m : arg61)\nvar v6 : AnyHashable = #\"0b110101101\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 350\nvar arg71 : Int = 902\nvar x7 : AnyHashable = roundedAvg(n : arg70, m : arg71)\nvar v7 : AnyHashable = #\"0b1001110010\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 197\nvar arg81 : Int = 233\nvar x8 : AnyHashable = roundedAvg(n : arg80, m : arg81)\nvar v8 : AnyHashable = #\"0b11010111\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 7\nvar arg91 : Int = 5\nvar x9 : AnyHashable = roundedAvg(n : arg90, m : arg91)\nvar v9 : AnyHashable = -1\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 5\nvar arg101 : Int = 1\nvar x10 : AnyHashable = roundedAvg(n : arg100, m : arg101)\nvar v10 : AnyHashable = -1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 5\nvar arg111 : Int = 5\nvar x11 : AnyHashable = roundedAvg(n : arg110, m : arg111)\nvar v11 : AnyHashable = #\"0b101\"#\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\n", "description": "आपको दो सकारात्मक पूर्णांक n और m दिए गए हैं, और आपका कार्य गणना करना है \nn से m तक के पूर्णांकों का औसत (n और m सहित)। \nनिकटतम पूर्णांक के उत्तर को गोल करें और उसे द्विआधारी में परिवर्तित करें। \nयदि n, m से बड़ा है, तो-1 वापस करें। \nउदाहरणः \nगोलाकार _ ए. वी. जी. (1,5) => \"0बी11\" \nगोलाकार _ ए. वी. जी. (7,5) =>-1 \nगोलाकार _ ए. वी. जी. (10,20) => \"0बी1111\" \nगोलाकार _ ए. वी. जी. (20,33) => \"0बी11010\"", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/47", "entry_point": "f", "test": "\n\nvar arg00 : Int = 5\nvar x0 : [Int] = f(n : arg00)\nvar v0 : [Int] = [1, 2, 6, 24, 15]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : [Int] = f(n : arg10)\nvar v1 : [Int] = [1, 2, 6, 24, 15, 720, 28]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : [Int] = f(n : arg20)\nvar v2 : [Int] = [1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 3\nvar x3 : [Int] = f(n : arg30)\nvar v3 : [Int] = [1, 2, 6]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "फलन f को लागू करें जो n को एक पैरामीटर के रूप में लेता है, \nऔर आकार n की एक सूची लौटाता है, जैसे कि सूचकांक i पर तत्व का मान i का भाज्य है यदि i सम है \nया अन्यथा 1 से i तक की संख्याओं का योग। \nमैं 1 से शुरू करता हूँ। \ni का भाज्य 1 से i (1 * 2 *... * i) तक की संख्याओं का गुणन है। \nउदाहरणः \nf (5) = = [1,2,6,24,15]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/48", "entry_point": "evenOddPalindrome", "test": "\n\nvar arg00 : Int = 123\nvar x0 : [Int] = evenOddPalindrome(n : arg00)\nvar v0 : [Int] = [8, 13]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : [Int] = evenOddPalindrome(n : arg10)\nvar v1 : [Int] = [4, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : [Int] = evenOddPalindrome(n : arg20)\nvar v2 : [Int] = [1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 63\nvar x3 : [Int] = evenOddPalindrome(n : arg30)\nvar v3 : [Int] = [6, 8]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 25\nvar x4 : [Int] = evenOddPalindrome(n : arg40)\nvar v4 : [Int] = [5, 6]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 19\nvar x5 : [Int] = evenOddPalindrome(n : arg50)\nvar v5 : [Int] = [4, 6]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 9\nvar x6 : [Int] = evenOddPalindrome(n : arg60)\nvar v6 : [Int] = [4, 5]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 1\nvar x7 : [Int] = evenOddPalindrome(n : arg70)\nvar v7 : [Int] = [0, 1]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, एक टुपल वापस करें जिसमें सम और विषम की संख्या हो। \nपूर्णांक पालिंड्रोम जो सीमा (1, एन) के भीतर आते हैं, समावेशी। \n\nउदाहरण 1: \n\nइनपुटः 3 \nआउटपुटः (1,2) \nव्याख्याः \nपूर्णांक पालिंड्रोम 1,2,3 हैं. उनमें से एक सम है, और उनमें से दो विषम हैं। \n\nउदाहरण 2: \n\nइनपुटः 12 \nआउटपुटः (4,6) \nव्याख्याः \nपूर्णांक पालिंड्रोम हैं 1,2,3,4,5,6,7,8,9,11. उनमें से चार सम हैं, और उनमें से 6 विषम हैं। \n\nध्यान देंः \n1. 1 <= n <= 10 ^ 3 \n2. लौटाए गए टुपल में क्रमशः सम और विषम पूर्णांक पालिंड्रोम्स की संख्या होती है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/49", "entry_point": "moveOneBall", "test": "\n\nvar arg00 : [AnyHashable] = [3, 4, 5, 1, 2]\nvar x0 : Bool = moveOneBall(arr : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [3, 5, 10, 1, 2]\nvar x1 : Bool = moveOneBall(arr : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [4, 3, 1, 2]\nvar x2 : Bool = moveOneBall(arr : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [3, 5, 4, 1, 2]\nvar x3 : Bool = moveOneBall(arr : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = []\nvar x4 : Bool = moveOneBall(arr : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "हमारे पास एन पूर्णांक arr [1], arr [2],..., arr [N] की एक सरणी'arr'है। \nसरणी में संख्याओं को यादृच्छिक रूप से क्रमबद्ध किया जाएगा। आपका कार्य यह निर्धारित करना है कि क्या \nप्रदर्शन करके गैर-घटते क्रम में एक सरणी को क्रमबद्ध करना संभव है। \nदिए गए सरणी पर निम्नलिखित ऑपरेशनः \nआपको किसी भी समय सही शिफ्ट ऑपरेशन करने की अनुमति है। \n\nएक राइट शिफ्ट ऑपरेशन का अर्थ है सरणी के सभी तत्वों को एक से स्थानांतरित करना। \nसही दिशा में स्थिति। सरणी के अंतिम तत्व को स्थानांतरित किया जाएगा \nसरणी में प्रारंभिक स्थिति अर्थात 0 वां सूचकांक। \n\nयदि उपरोक्त ऑपरेशन करके क्रमबद्ध सरणी प्राप्त करना संभव है \nफिर सही लौटें अन्यथा गलत लौटें। \nयदि दी गई सरणी खाली है तो सही वापस करें। \n\nनोटः दी गई सूची में अद्वितीय तत्व होने की गारंटी है। \n\nउदाहरण के लिएः \n\nमूव _ वन _ बॉल ([3,4,5,1,2]) = => सही \nव्याख्याः 2 सही शिफ्ट संचालन में प्रदर्शन करके, गैर-घटता क्रम कर सकता है \nदिए गए सरणी के लिए प्राप्त किया जा सकता है। \nमूव _ वन _ बॉल ([3,5,4,1,2]) = => गलत \nव्याख्याः दिए गए के लिए गैर-घटता आदेश प्राप्त करना संभव नहीं है। \nकिसी भी संख्या में सही शिफ्ट संचालन करके सरणी।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/50", "entry_point": "exchange", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar arg01 : [Int] = [1, 2, 3, 4]\nvar x0 : String = exchange(lst1 : arg00, lst2 : arg01)\nvar v0 : String = #\"YES\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [1, 5, 3, 4]\nvar x1 : String = exchange(lst1 : arg10, lst2 : arg11)\nvar v1 : String = #\"NO\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar arg21 : [Int] = [2, 1, 4, 3]\nvar x2 : String = exchange(lst1 : arg20, lst2 : arg21)\nvar v2 : String = #\"YES\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [5, 7, 3]\nvar arg31 : [Int] = [2, 6, 4]\nvar x3 : String = exchange(lst1 : arg30, lst2 : arg31)\nvar v3 : String = #\"YES\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [5, 7, 3]\nvar arg41 : [Int] = [2, 6, 3]\nvar x4 : String = exchange(lst1 : arg40, lst2 : arg41)\nvar v4 : String = #\"NO\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [3, 2, 6, 1, 8, 9]\nvar arg51 : [Int] = [3, 5, 5, 1, 1, 1]\nvar x5 : String = exchange(lst1 : arg50, lst2 : arg51)\nvar v5 : String = #\"NO\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [100, 200]\nvar arg61 : [Int] = [200, 200]\nvar x6 : String = exchange(lst1 : arg60, lst2 : arg61)\nvar v6 : String = #\"YES\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "इस समस्या में, आप एक फ़ंक्शन लागू करेंगे जो संख्याओं की दो सूचियाँ लेता है, \nऔर यह निर्धारित करता है कि क्या तत्वों का आदान-प्रदान करना संभव है \nउनके बीच lst1 को केवल सम संख्याओं की सूची बनाने के लिए। \nlst1 और lst2 के बीच आदान-प्रदान किए गए तत्वों की संख्या की कोई सीमा नहीं है। \nयदि बनाने के लिए lst1 और lst2 के बीच तत्वों का आदान-प्रदान करना संभव है \nlst1 के सभी तत्वों को सम होने के लिए, \"हाँ\" वापस करें। \nअन्यथा, \"नहीं\" वापस करें। \nउदाहरण के लिएः \nविनिमय ([1,2,3,4], [1,2,3,4]) => \"हाँ\" \nविनिमय ([1,2,3,4], [1,5,3,4]) => \"नहीं\" \nयह माना जाता है कि इनपुट सूचियाँ खाली नहीं होंगी।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/51", "entry_point": "reverseDelete", "test": "\n\nvar arg00 : String = #\"abcde\"#\nvar arg01 : String = #\"ae\"#\nvar x0 : [AnyHashable] = reverseDelete(s : arg00, c : arg01)\nvar v0 : [AnyHashable] = [#\"bcd\"#, false]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdef\"#\nvar arg11 : String = #\"b\"#\nvar x1 : [AnyHashable] = reverseDelete(s : arg10, c : arg11)\nvar v1 : [AnyHashable] = [#\"acdef\"#, false]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcdedcba\"#\nvar arg21 : String = #\"ab\"#\nvar x2 : [AnyHashable] = reverseDelete(s : arg20, c : arg21)\nvar v2 : [AnyHashable] = [#\"cdedc\"#, true]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"dwik\"#\nvar arg31 : String = #\"w\"#\nvar x3 : [AnyHashable] = reverseDelete(s : arg30, c : arg31)\nvar v3 : [AnyHashable] = [#\"dik\"#, false]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"a\"#\nvar arg41 : String = #\"a\"#\nvar x4 : [AnyHashable] = reverseDelete(s : arg40, c : arg41)\nvar v4 : [AnyHashable] = [#\"\"#, true]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"abcdedcba\"#\nvar arg51 : String = #\"\"#\nvar x5 : [AnyHashable] = reverseDelete(s : arg50, c : arg51)\nvar v5 : [AnyHashable] = [#\"abcdedcba\"#, true]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"abcdedcba\"#\nvar arg61 : String = #\"v\"#\nvar x6 : [AnyHashable] = reverseDelete(s : arg60, c : arg61)\nvar v6 : [AnyHashable] = [#\"abcdedcba\"#, true]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"vabba\"#\nvar arg71 : String = #\"v\"#\nvar x7 : [AnyHashable] = reverseDelete(s : arg70, c : arg71)\nvar v7 : [AnyHashable] = [#\"abba\"#, true]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"mamma\"#\nvar arg81 : String = #\"mia\"#\nvar x8 : [AnyHashable] = reverseDelete(s : arg80, c : arg81)\nvar v8 : [AnyHashable] = [#\"\"#, true]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "कार्य \nहमें दो स्ट्रिंग s और c दिए गए हैं, आपको s में सभी वर्णों को हटाना होगा जो c में किसी भी वर्ण के बराबर हैं। \nफिर जाँच करें कि परिणाम स्ट्रिंग पालिंड्रोम है या नहीं। \nएक तार को पालिंड्रोम कहा जाता है यदि यह आगे के समान पीछे की ओर पढ़ता है। \nआपको चेक के लिए परिणाम स्ट्रिंग और सही/गलत वाला एक टुपल वापस करना चाहिए। \nउदाहरण \nएस = \"एबीसीडी\", सी = \"एई\" के लिए, परिणाम होना चाहिए ('बीसीडी', गलत) \nएस = \"एबीसीडीएफ\" के लिए, सी = \"बी\" परिणाम होना चाहिए ('एसीडीएफ', गलत) \ns = \"abcdedcba\", c = \"ab\" के लिए, परिणाम होना चाहिए ('cdedc', सही)", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/52", "entry_point": "maxFill", "test": "\n\nvar arg00 : [[Int]] = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\nvar arg01 : Int = 1\nvar x0 : Int = maxFill(grid : arg00, capacity : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\nvar arg11 : Int = 2\nvar x1 : Int = maxFill(grid : arg10, capacity : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[0, 0, 0], [0, 0, 0]]\nvar arg21 : Int = 5\nvar x2 : Int = maxFill(grid : arg20, capacity : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [[Int]] = [[1, 1, 1, 1], [1, 1, 1, 1]]\nvar arg31 : Int = 2\nvar x3 : Int = maxFill(grid : arg30, capacity : arg31)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [[Int]] = [[1, 1, 1, 1], [1, 1, 1, 1]]\nvar arg41 : Int = 9\nvar x4 : Int = maxFill(grid : arg40, capacity : arg41)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "आपको कुओं का एक आयताकार ग्रिड दिया जाता है। प्रत्येक पंक्ति एक कुएं का प्रतिनिधित्व करती है, \nऔर एक पंक्ति में प्रत्येक 1 पानी की एक इकाई का प्रतिनिधित्व करता है। \nप्रत्येक कुएँ में एक संबंधित बाल्टी होती है जिसका उपयोग उससे पानी निकालने के लिए किया जा सकता है। \nऔर सभी बाल्टियों में समान क्षमता होती है। \nआपका काम कुओं को खाली करने के लिए बाल्टियों का उपयोग करना है। \nजितनी बार आपको बाल्टियों को कम करने की आवश्यकता होगी, उसे आउटपुट करें। \n\nउदाहरण 1: \nइनपुटः \nग्रिडः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nबाल्टी क्षमताः 1 \nआउटपुटः 6 \n\nउदाहरण 2: \nइनपुटः \nग्रिडः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1]] \nबाल्टी क्षमताः 2 \nआउटपुटः 5 \n\nउदाहरण 3: \nइनपुटः \nग्रिडः [0,0,0], [0,0,0] \nबाल्टी क्षमताः 5 \nआउटपुटः 0 \n\nअड़चनेंः \n* सभी कुओं की लंबाई समान होती है। \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ग्रिड [:, 1]. लंबाई <= 10 ^ 2 \nग्रिड [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/53", "entry_point": "selectWords", "test": "\n\nvar arg00 : String = #\"Mary had a little lamb\"#\nvar arg01 : Int = 4\nvar x0 : [AnyHashable] = selectWords(s : arg00, n : arg01)\nvar v0 : [AnyHashable] = [#\"little\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Mary had a little lamb\"#\nvar arg11 : Int = 3\nvar x1 : [AnyHashable] = selectWords(s : arg10, n : arg11)\nvar v1 : [AnyHashable] = [#\"Mary\"#, #\"lamb\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"simple white space\"#\nvar arg21 : Int = 2\nvar x2 : [AnyHashable] = selectWords(s : arg20, n : arg21)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Hello world\"#\nvar arg31 : Int = 4\nvar x3 : [AnyHashable] = selectWords(s : arg30, n : arg31)\nvar v3 : [AnyHashable] = [#\"world\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Uncle sam\"#\nvar arg41 : Int = 3\nvar x4 : [AnyHashable] = selectWords(s : arg40, n : arg41)\nvar v4 : [AnyHashable] = [#\"Uncle\"#]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"\"#\nvar arg51 : Int = 4\nvar x5 : [AnyHashable] = selectWords(s : arg50, n : arg51)\nvar v5 : [AnyHashable] = []\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"a b c d e f\"#\nvar arg61 : Int = 1\nvar x6 : [AnyHashable] = selectWords(s : arg60, n : arg61)\nvar v6 : [AnyHashable] = [#\"b\"#, #\"c\"#, #\"d\"#, #\"f\"#]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "एक स्ट्रिंग s और एक प्राकृतिक संख्या n को देखते हुए, आपको इसे लागू करने का काम सौंपा गया है। \nएक प्रकार्य जो स्ट्रिंग एस से सभी शब्दों की एक सूची देता है जिसमें ठीक-ठीक शब्द होते हैं \nएन व्यंजन, क्रम में ये शब्द स्ट्रिंग एस में दिखाई देते हैं। \nयदि स्ट्रिंग s खाली है तो फ़ंक्शन को एक खाली सूची वापस करनी चाहिए। \nनोटः आप मान सकते हैं कि इनपुट स्ट्रिंग में केवल अक्षर और रिक्त स्थान हैं। \nउदाहरण के लिएः \nशब्द चुनें (\"मैरी के पास एक छोटा भेड़ का बच्चा था\", 4) = => [\"छोटा\"] \nशब्द चुनें (\"मैरी का एक छोटा भेड़ का बच्चा था\", 3) = => [\"मैरी\", \"भेड़ का बच्चा\"] \nशब्द चुनें (\"साधारण सफेद स्थान\", 2) = => [] \nशब्द चुनें (\"हैलो वर्ल्ड\", 4) = => [\"वर्ल्ड\"] \nशब्द चुनें (\"अंकल सैम\", 3) = => [\"अंकल\"]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/54", "entry_point": "maximum", "test": "\n\nvar arg00 : [Int] = [-3, -4, 5]\nvar arg01 : Int = 3\nvar x0 : [AnyHashable] = maximum(arr : arg00, k : arg01)\nvar v0 : [AnyHashable] = [-4, -3, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, -4, 4]\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = maximum(arr : arg10, k : arg11)\nvar v1 : [AnyHashable] = [4, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-3, 2, 1, 2, -1, -2, 1]\nvar arg21 : Int = 1\nvar x2 : [AnyHashable] = maximum(arr : arg20, k : arg21)\nvar v2 : [AnyHashable] = [2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [123, -123, 20, 0, 1, 2, -3]\nvar arg31 : Int = 3\nvar x3 : [AnyHashable] = maximum(arr : arg30, k : arg31)\nvar v3 : [AnyHashable] = [2, 20, 123]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [-123, 20, 0, 1, 2, -3]\nvar arg41 : Int = 4\nvar x4 : [AnyHashable] = maximum(arr : arg40, k : arg41)\nvar v4 : [AnyHashable] = [0, 1, 2, 20]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [5, 15, 0, 3, -13, -8, 0]\nvar arg51 : Int = 7\nvar x5 : [AnyHashable] = maximum(arr : arg50, k : arg51)\nvar v5 : [AnyHashable] = [-13, -8, 0, 0, 3, 5, 15]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [-1, 0, 2, 5, 3, -10]\nvar arg61 : Int = 2\nvar x6 : [AnyHashable] = maximum(arr : arg60, k : arg61)\nvar v6 : [AnyHashable] = [3, 5]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [1, 0, 5, -7]\nvar arg71 : Int = 1\nvar x7 : [AnyHashable] = maximum(arr : arg70, k : arg71)\nvar v7 : [AnyHashable] = [5]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [4, -4]\nvar arg81 : Int = 2\nvar x8 : [AnyHashable] = maximum(arr : arg80, k : arg81)\nvar v8 : [AnyHashable] = [-4, 4]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Int] = [-10, 10]\nvar arg91 : Int = 2\nvar x9 : [AnyHashable] = maximum(arr : arg90, k : arg91)\nvar v9 : [AnyHashable] = [-10, 10]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Int] = [1, 2, 3, -23, 243, -400, 0]\nvar arg101 : Int = 0\nvar x10 : [AnyHashable] = maximum(arr : arg100, k : arg101)\nvar v10 : [AnyHashable] = []\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "पूर्णांकों की एक सरणी arr और एक सकारात्मक पूर्णांक k दिए जाने पर, एक क्रमबद्ध सूची वापस करें \nए. आर. आर. में अधिकतम के संख्याओं के साथ लंबाई के. \n\nउदाहरण 1: \n\nइनपुटः arr = [-3,-4,5], k = 3 \nआउटपुटः [-4,-3,5] \n\nउदाहरण 2: \n\nइनपुटः arr = [4,-4,4], k = 2 \nआउटपुटः [4,4] \n\nउदाहरण 3: \n\nइनपुटः arr = [-3,2,1,2,-1,2,1], k = 1 \nआउटपुटः [2] \n\nध्यान देंः \n1. सरणी की लंबाई [1000] की सीमा में होगी। \n2. सरणी में तत्व [-1000] की सीमा में होंगे। \n3. 0 <= k <= लेन (arr)", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/55", "entry_point": "addElements", "test": "\n\nvar arg00 : [Int] = [1, -2, -3, 41, 57, 76, 87, 88, 99]\nvar arg01 : Int = 3\nvar x0 : Int = addElements(arr : arg00, k : arg01)\nvar v0 : Int = -4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [111, 121, 3, 4000, 5, 6]\nvar arg11 : Int = 2\nvar x1 : Int = addElements(arr : arg10, k : arg11)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 21, 3, 90, 5, 6, 7, 8, 9]\nvar arg21 : Int = 4\nvar x2 : Int = addElements(arr : arg20, k : arg21)\nvar v2 : Int = 125\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nvar arg31 : Int = 4\nvar x3 : Int = addElements(arr : arg30, k : arg31)\nvar v3 : Int = 24\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar arg41 : Int = 1\nvar x4 : Int = addElements(arr : arg40, k : arg41)\nvar v4 : Int = 1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "पूर्णांक एआरआर और एक पूर्णांक के की एक गैर-खाली सरणी को देखते हुए, वापस करें \narr के पहले k तत्वों से अधिकतम दो अंकों वाले तत्वों का योग। \n\nउदाहरणः \n\nइनपुटः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nआउटपुटः 24 #21 + 3 का योग \n\nअड़चनेंः \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/56", "entry_point": "intersection", "test": "\n\nvar arg00 : [Int] = [1, 2]\nvar arg01 : [Int] = [2, 3]\nvar x0 : String = intersection(interval1 : arg00, interval2 : arg01)\nvar v0 : String = #\"NO\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 1]\nvar arg11 : [Int] = [0, 4]\nvar x1 : String = intersection(interval1 : arg10, interval2 : arg11)\nvar v1 : String = #\"NO\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-3, -1]\nvar arg21 : [Int] = [-5, 5]\nvar x2 : String = intersection(interval1 : arg20, interval2 : arg21)\nvar v2 : String = #\"YES\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [-2, 2]\nvar arg31 : [Int] = [-4, 0]\nvar x3 : String = intersection(interval1 : arg30, interval2 : arg31)\nvar v3 : String = #\"YES\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [-11, 2]\nvar arg41 : [Int] = [-1, -1]\nvar x4 : String = intersection(interval1 : arg40, interval2 : arg41)\nvar v4 : String = #\"NO\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [1, 2]\nvar arg51 : [Int] = [3, 5]\nvar x5 : String = intersection(interval1 : arg50, interval2 : arg51)\nvar v5 : String = #\"NO\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [1, 2]\nvar arg61 : [Int] = [1, 2]\nvar x6 : String = intersection(interval1 : arg60, interval2 : arg61)\nvar v6 : String = #\"NO\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [-2, -2]\nvar arg71 : [Int] = [-3, -2]\nvar x7 : String = intersection(interval1 : arg70, interval2 : arg71)\nvar v7 : String = #\"NO\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "आपको दो अंतराल दिए जाते हैं, \nजहाँ प्रत्येक अंतराल पूर्णांकों का एक जोड़ा है। उदाहरण के लिए, अंतराल = (प्रारंभ, अंत) = (1,2)। \nदिए गए अंतराल बंद होते हैं जिसका अर्थ है कि अंतराल (प्रारंभ, अंत) \nइसमें शुरुआत और अंत दोनों शामिल हैं। \nप्रत्येक दिए गए अंतराल के लिए, यह माना जाता है कि इसकी शुरुआत कम या इसके अंत के बराबर है। \nआपका काम यह निर्धारित करना है कि इन दोनों के प्रतिच्छेदन की लंबाई कितनी है। \nअंतराल एक अभाज्य संख्या है। \nउदाहरण के लिए, अंतराल (1,3), (2,4) का प्रतिच्छेदन (2,3) है। \nजिसकी लंबाई 1 है, जो एक अभाज्य संख्या नहीं है। \nयदि प्रतिच्छेदन की लंबाई एक अभाज्य संख्या है, तो \"हाँ\" वापस करें, \nअन्यथा, \"नहीं\" वापस करें। \nयदि दोनों अंतराल एक दूसरे को नहीं काटते हैं, तो \"नहीं\" वापस करें। \n\n[इनपुट/आउटपुट] नमूनेः \nप्रतिच्छेदन ((1,2,3)) = => \"नहीं\" \nप्रतिच्छेदन ((-1,1), (0,4)) = => \"नहीं\" \nप्रतिच्छेदन ((-3,-1), (-5,5)) = => \"हाँ\"", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/57", "entry_point": "tri", "test": "\n\nvar arg00 : Int = 3\nvar x0 : [Double] = tri(n : arg00)\nvar v0 : [Double] = [1, 3, 2.0, 8.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : [Double] = tri(n : arg10)\nvar v1 : [Double] = [1, 3, 2.0, 8.0, 3.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : [Double] = tri(n : arg20)\nvar v2 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 6\nvar x3 : [Double] = tri(n : arg30)\nvar v3 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar x4 : [Double] = tri(n : arg40)\nvar v4 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 8\nvar x5 : [Double] = tri(n : arg50)\nvar v5 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 9\nvar x6 : [Double] = tri(n : arg60)\nvar v6 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 20\nvar x7 : [Double] = tri(n : arg70)\nvar v7 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 0\nvar x8 : [Double] = tri(n : arg80)\nvar v8 : [Double] = [1]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1\nvar x9 : [Double] = tri(n : arg90)\nvar v9 : [Double] = [1, 3]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "हर कोई फिबोनाची अनुक्रम को जानता है, इसका गणितविदों द्वारा गहराई से अध्ययन किया गया था \nपिछली कुछ शताब्दियाँ। हालाँकि, लोग जो नहीं जानते हैं वह है ट्रिबोनाची अनुक्रम। \nट्राइबोनाची अनुक्रम को पुनरावृत्ति द्वारा परिभाषित किया जाता हैः \nत्रि (1) = 3 \nत्रि (एन) = 1 + एन/2, यदि एन सम है। \nयदि n विषम है तो त्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1)। \nउदाहरण के लिएः \nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nआपको एक गैर-नकारात्मक पूर्णांक संख्या n दी गई है, आपको एक सूची वापस करनी होगी \nट्रिबोनाची अनुक्रम की पहली n + 1 संख्याएँ। \nउदाहरण के लिएः \nत्रि (3) = [1,3,2,8]", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/58", "entry_point": "digits", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = digits(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 54\nvar x1 : Int = digits(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Int = digits(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5014\nvar x3 : Int = digits(n : arg30)\nvar v3 : Int = 5\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 98765\nvar x4 : Int = digits(n : arg40)\nvar v4 : Int = 315\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 5576543\nvar x5 : Int = digits(n : arg50)\nvar v5 : Int = 2625\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 2468\nvar x6 : Int = digits(n : arg60)\nvar v6 : Int = 0\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, विषम अंकों के गुणनफल को वापस करें। \nयदि सभी अंक सम हैं तो 0 वापस करें। \nउदाहरण के लिएः \nअंक (1) = = 1 \nअंक (4) = = 0 \nअंक (235) = = 15", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/59", "entry_point": "isNested", "test": "\n\nvar arg00 : String = #\"[[]]\"#\nvar x0 : Bool = isNested(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"[]]]]]]][[[[[]\"#\nvar x1 : Bool = isNested(string : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"[][]\"#\nvar x2 : Bool = isNested(string : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"[]\"#\nvar x3 : Bool = isNested(string : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"[[[[]]]]\"#\nvar x4 : Bool = isNested(string : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"[]]]]]]]]]]\"#\nvar x5 : Bool = isNested(string : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"[][][[]]\"#\nvar x6 : Bool = isNested(string : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"[[]\"#\nvar x7 : Bool = isNested(string : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"[]]\"#\nvar x8 : Bool = isNested(string : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"[[]][[\"#\nvar x9 : Bool = isNested(string : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"[[][]]\"#\nvar x10 : Bool = isNested(string : arg100)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"\"#\nvar x11 : Bool = isNested(string : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"[[[[[[[[\"#\nvar x12 : Bool = isNested(string : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : String = #\"]]]]]]]]\"#\nvar x13 : Bool = isNested(string : arg130)\nvar v13 : Bool = false\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\n", "description": "एक ऐसा फ़ंक्शन बनाएँ जो एक स्ट्रिंग को इनपुट के रूप में लेता है जिसमें केवल वर्ग कोष्ठक होते हैं। \nफ़ंक्शन को सही लौटना चाहिए यदि और केवल तभी जब कोष्ठक का एक वैध अनुक्रम हो \nजेराव उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन। \n\nनेस्टेड ('[[]]') सही है \nis _ nested ('[]]]]] [[[[]') गलत है \nनेस्टेड ('[] []') गलत है \nनेस्टेड ('[]') गलत है \nनेस्टेड ('[[] []]') सही है \nनेस्टेड है ('[[]] [[') सही है", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/60", "entry_point": "sumSquares", "test": "\n\nvar arg00 : [Double] = [1, 2, 3]\nvar x0 : Int = sumSquares(lst : arg00)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [1.0, 2, 3]\nvar x1 : Int = sumSquares(lst : arg10)\nvar v1 : Int = 14\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [1, 3, 5, 7]\nvar x2 : Int = sumSquares(lst : arg20)\nvar v2 : Int = 84\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [1.4, 4.2, 0]\nvar x3 : Int = sumSquares(lst : arg30)\nvar v3 : Int = 29\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [-2.4, 1, 1]\nvar x4 : Int = sumSquares(lst : arg40)\nvar v4 : Int = 6\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Double] = [100, 1, 15, 2]\nvar x5 : Int = sumSquares(lst : arg50)\nvar v5 : Int = 10230\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Double] = [10000, 10000]\nvar x6 : Int = sumSquares(lst : arg60)\nvar v6 : Int = 200000000\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Double] = [-1.4, 4.6, 6.3]\nvar x7 : Int = sumSquares(lst : arg70)\nvar v7 : Int = 75\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Double] = [-1.4, 17.9, 18.9, 19.9]\nvar x8 : Int = sumSquares(lst : arg80)\nvar v8 : Int = 1086\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Double] = [0]\nvar x9 : Int = sumSquares(lst : arg90)\nvar v9 : Int = 0\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Double] = [-1]\nvar x10 : Int = sumSquares(lst : arg100)\nvar v10 : Int = 1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : [Double] = [-1, 1, 0]\nvar x11 : Int = sumSquares(lst : arg110)\nvar v11 : Int = 2\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\n", "description": "आपको संख्याओं की एक सूची दी जाती है। \nआपको दी गई सूची में वर्ग संख्या का योग वापस करना होगा, \nसूची में प्रत्येक तत्व को पहले ऊपरी इंट (सीलिंग) में गोल करें। \nउदाहरण के लिएः \nlst = [1,2,3] के लिए आउटपुट 14 होना चाहिए। \nlst = [1,4,9] के लिए आउटपुट 98 होना चाहिए। \nlst = [1,3,5, 7] के लिए आउटपुट 84 होना चाहिए। \nlst = [1.4,4.2, 0] के लिए आउटपुट 29 होना चाहिए। \nlst = [-2.4,1, 1] के लिए आउटपुट 6 होना चाहिए।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/61", "entry_point": "checkIfLastCharIsALetter", "test": "\n\nvar arg00 : String = #\"apple\"#\nvar x0 : Bool = checkIfLastCharIsALetter(txt : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"apple pi e\"#\nvar x1 : Bool = checkIfLastCharIsALetter(txt : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"eeeee\"#\nvar x2 : Bool = checkIfLastCharIsALetter(txt : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"A\"#\nvar x3 : Bool = checkIfLastCharIsALetter(txt : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Pumpkin pie \"#\nvar x4 : Bool = checkIfLastCharIsALetter(txt : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"Pumpkin pie 1\"#\nvar x5 : Bool = checkIfLastCharIsALetter(txt : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"\"#\nvar x6 : Bool = checkIfLastCharIsALetter(txt : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"eeeee e \"#\nvar x7 : Bool = checkIfLastCharIsALetter(txt : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"apple pie\"#\nvar x8 : Bool = checkIfLastCharIsALetter(txt : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"apple pi e \"#\nvar x9 : Bool = checkIfLastCharIsALetter(txt : arg90)\nvar v9 : Bool = false\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "एक प्रकार्य बनाएँ जो सही लौटाता है यदि अंतिम वर्ण \nकिसी दिए गए स्ट्रिंग का वर्णमाला वर्ण है और यह नहीं है \nएक शब्द का एक हिस्सा, और अन्यथा गलत। \nनोटः \"शब्द\" अक्षरों का एक समूह है जो स्थान द्वारा अलग किया जाता है। \n\nउदाहरण के लिएः \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई\") ′ गलत \nजाँच करें कि अगर _ अंतिम _ चर _ है _ a _ अक्षर (\"एप्पल पाई ई\") सही है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई ई\") गलत है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"\") ′ गलत", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/62", "entry_point": "canArrange", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 4, 3, 5]\nvar x0 : Int = canArrange(arr : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 4, 5]\nvar x1 : Int = canArrange(arr : arg10)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 4, 2, 5, 6, 7, 8, 9, 10]\nvar x2 : Int = canArrange(arr : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [4, 8, 5, 7, 3]\nvar x3 : Int = canArrange(arr : arg30)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = []\nvar x4 : Int = canArrange(arr : arg40)\nvar v4 : Int = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "एक ऐसा फलन बनाएँ जो किसी तत्व का सबसे बड़ा सूचकांक देता है जो \nयह उससे तुरंत पहले के तत्व से बड़ा या बराबर नहीं है। यदि \nऐसा कोई तत्व मौजूद नहीं है तो वापसी-1। दिए गए सरणी में शामिल नहीं होगा \nडुप्लिकेट मान। \n\nउदाहरण के लिएः \nकैन अरेंज ([1,2,4, 3,5]) = 3 \nकैन अरेंज ([1,2,3]) =-1", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/63", "entry_point": "largestSmallestIntegers", "test": "\n\nvar arg00 : [AnyHashable] = [2, 4, 1, 3, 5, 7]\nvar x0 : [AnyHashable] = largestSmallestIntegers(lst : arg00)\nvar v0 : [AnyHashable] = [\"none\", 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [2, 4, 1, 3, 5, 7, 0]\nvar x1 : [AnyHashable] = largestSmallestIntegers(lst : arg10)\nvar v1 : [AnyHashable] = [\"none\", 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 3, 2, 4, 5, 6, -2]\nvar x2 : [AnyHashable] = largestSmallestIntegers(lst : arg20)\nvar v2 : [AnyHashable] = [-2, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [4, 5, 3, 6, 2, 7, -7]\nvar x3 : [AnyHashable] = largestSmallestIntegers(lst : arg30)\nvar v3 : [AnyHashable] = [-7, 2]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [7, 3, 8, 4, 9, 2, 5, -9]\nvar x4 : [AnyHashable] = largestSmallestIntegers(lst : arg40)\nvar v4 : [AnyHashable] = [-9, 2]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = []\nvar x5 : [AnyHashable] = largestSmallestIntegers(lst : arg50)\nvar v5 : [AnyHashable] = [\"none\", \"none\"]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [0]\nvar x6 : [AnyHashable] = largestSmallestIntegers(lst : arg60)\nvar v6 : [AnyHashable] = [\"none\", \"none\"]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [AnyHashable] = [-1, -3, -5, -6]\nvar x7 : [AnyHashable] = largestSmallestIntegers(lst : arg70)\nvar v7 : [AnyHashable] = [-1, \"none\"]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [AnyHashable] = [-1, -3, -5, -6, 0]\nvar x8 : [AnyHashable] = largestSmallestIntegers(lst : arg80)\nvar v8 : [AnyHashable] = [-1, \"none\"]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [AnyHashable] = [-6, -4, -4, -3, 1]\nvar x9 : [AnyHashable] = largestSmallestIntegers(lst : arg90)\nvar v9 : [AnyHashable] = [-3, 1]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [AnyHashable] = [-6, -4, -4, -3, -100, 1]\nvar x10 : [AnyHashable] = largestSmallestIntegers(lst : arg100)\nvar v10 : [AnyHashable] = [-3, 1]\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "एक फलन बनाएँ जो एक टुपल (ए, बी) देता है, जहाँ'ए'है \nऋणात्मक पूर्णांकों में सबसे बड़ा, और'बी'सबसे छोटा है \nएक सूची में सकारात्मक पूर्णांक। \nयदि कोई ऋणात्मक या धनात्मक पूर्णांक नहीं हैं, तो उन्हें शून्य के रूप में वापस करें। \n\nउदाहरण के लिएः \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([2,4,1,3,5,7]) = = (कोई नहीं, 1) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([]) = = (कोई नहीं, कोई नहीं) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([0]) = = (कोई नहीं, कोई नहीं)", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/64", "entry_point": "specialFactorial", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = specialFactorial(n : arg00)\nvar v0 : Int = 288\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = specialFactorial(n : arg10)\nvar v1 : Int = 34560\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = specialFactorial(n : arg20)\nvar v2 : Int = 125411328000\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 1\nvar x3 : Int = specialFactorial(n : arg30)\nvar v3 : Int = 1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "ब्राजीलियाई भाज्य को इस प्रकार परिभाषित किया गया हैः \nब्राज़ीलियाई _ फैक्टोरियल (एन) = एन! * (एन-1)! * (एन-2)! *... * 1! \nजहाँ n> 0 \n\nउदाहरण के लिएः \n>>> स्पेशल _ फैक्टोरियल (4) \n288 \n\nफ़ंक्शन को इनपुट के रूप में एक पूर्णांक प्राप्त होगा और विशेष वापस करना चाहिए \nइस पूर्णांक का भाज्य।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/65", "entry_point": "wordsInSentence", "test": "\n\nvar arg00 : String = #\"This is a test\"#\nvar x0 : String = wordsInSentence(sentence : arg00)\nvar v0 : String = #\"is\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"lets go for swimming\"#\nvar x1 : String = wordsInSentence(sentence : arg10)\nvar v1 : String = #\"go for\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"there is no place available here\"#\nvar x2 : String = wordsInSentence(sentence : arg20)\nvar v2 : String = #\"there is no place\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Hi I am Hussein\"#\nvar x3 : String = wordsInSentence(sentence : arg30)\nvar v3 : String = #\"Hi am Hussein\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"go for it\"#\nvar x4 : String = wordsInSentence(sentence : arg40)\nvar v4 : String = #\"go for it\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"here\"#\nvar x5 : String = wordsInSentence(sentence : arg50)\nvar v5 : String = #\"\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"here is\"#\nvar x6 : String = wordsInSentence(sentence : arg60)\nvar v6 : String = #\"is\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "आपको एक वाक्य का प्रतिनिधित्व करने वाली एक स्ट्रिंग दी जाती है, \nवाक्य में कुछ शब्द हैं जो एक स्थान द्वारा अलग किए गए हैं, \nऔर आपको एक स्ट्रिंग वापस करनी होगी जिसमें मूल वाक्य के शब्द शामिल हैं, \nजिनकी लंबाई अभाज्य संख्याएँ हैं, \nनई स्ट्रिंग में शब्दों का क्रम मूल के समान होना चाहिए। \n\nउदाहरण 1: \nइनपुटः वाक्य = \"यह एक परीक्षण है\" \nआउटपुटः \"है\" \n\nउदाहरण 2: \nइनपुटः वाक्य = \"चलो तैरने के लिए चलते हैं\" \nआउटपुटः \"के लिए जाएँ\" \n\nअड़चनेंः \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्य में केवल अक्षर होते हैं", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/66", "entry_point": "simplify", "test": "\n\nvar arg00 : String = #\"1/5\"#\nvar arg01 : String = #\"5/1\"#\nvar x0 : Bool = simplify(x : arg00, n : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1/6\"#\nvar arg11 : String = #\"2/1\"#\nvar x1 : Bool = simplify(x : arg10, n : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"5/1\"#\nvar arg21 : String = #\"3/1\"#\nvar x2 : Bool = simplify(x : arg20, n : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"7/10\"#\nvar arg31 : String = #\"10/2\"#\nvar x3 : Bool = simplify(x : arg30, n : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"2/10\"#\nvar arg41 : String = #\"50/10\"#\nvar x4 : Bool = simplify(x : arg40, n : arg41)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"7/2\"#\nvar arg51 : String = #\"4/2\"#\nvar x5 : Bool = simplify(x : arg50, n : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"11/6\"#\nvar arg61 : String = #\"6/1\"#\nvar x6 : Bool = simplify(x : arg60, n : arg61)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"2/3\"#\nvar arg71 : String = #\"5/2\"#\nvar x7 : Bool = simplify(x : arg70, n : arg71)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"5/2\"#\nvar arg81 : String = #\"3/5\"#\nvar x8 : Bool = simplify(x : arg80, n : arg81)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"2/4\"#\nvar arg91 : String = #\"8/4\"#\nvar x9 : Bool = simplify(x : arg90, n : arg91)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"2/4\"#\nvar arg101 : String = #\"4/2\"#\nvar x10 : Bool = simplify(x : arg100, n : arg101)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"1/5\"#\nvar arg111 : String = #\"5/1\"#\nvar x11 : Bool = simplify(x : arg110, n : arg111)\nvar v11 : Bool = true\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"1/5\"#\nvar arg121 : String = #\"1/5\"#\nvar x12 : Bool = simplify(x : arg120, n : arg121)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\n", "description": "आपका काम एक ऐसे कार्य को लागू करना है जो अभिव्यक्ति को सरल बनाएगा। \nx * n. फलन सही बताता है यदि x * n एक पूर्ण संख्या का मूल्यांकन करता है और गलत \nअन्यथा। x और n दोनों, एक अंश के स्ट्रिंग प्रतिनिधित्व हैं, और निम्नलिखित प्रारूप हैं, \n<अंश> <भाजक> जहाँ अंश और भाजक दोनों सकारात्मक पूर्ण संख्याएँ हैं। \n\nआप मान सकते हैं कि x, और n वैध अंश हैं, और विभाजक के रूप में शून्य नहीं हैं। \n\nसरलीकरण (\"1/5\", \"5/1\") = सही \nसरलीकरण (\"1/6\", \"2/1\") = गलत \nसरलीकरण (\"7/10\", \"10/2\") = गलत", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/67", "entry_point": "orderByPoints", "test": "\n\nvar arg00 : [AnyHashable] = [1, 11, -1, -11, -12]\nvar x0 : [AnyHashable] = orderByPoints(nums : arg00)\nvar v0 : [AnyHashable] = [-1, -11, 1, -12, 11]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]\nvar x1 : [AnyHashable] = orderByPoints(nums : arg10)\nvar v1 : [AnyHashable] = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = []\nvar x2 : [AnyHashable] = orderByPoints(nums : arg20)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, -11, -32, 43, 54, -98, 2, -3]\nvar x3 : [AnyHashable] = orderByPoints(nums : arg30)\nvar v3 : [AnyHashable] = [-3, -32, -98, -11, 1, 2, 43, 54]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nvar x4 : [AnyHashable] = orderByPoints(nums : arg40)\nvar v4 : [AnyHashable] = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [0, 6, 6, -76, -21, 23, 4]\nvar x5 : [AnyHashable] = orderByPoints(nums : arg50)\nvar v5 : [AnyHashable] = [-76, -21, 0, 4, 23, 6, 6]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "एक प्रकार्य लिखें जो पूर्णांकों की दी गई सूची को क्रमबद्ध करता है। \nउनके अंकों के योग के अनुसार आरोही क्रम में। \nनोटः यदि कई वस्तुएँ हैं जिनके अंकों का योग समान है, \nमूल सूची में उनके सूचकांक के आधार पर उन्हें ऑर्डर करें। \n\nउदाहरण के लिएः \n>>> ऑर्डर _ बाय _ पॉइंट्स ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ऑर्डर _ बाय _ पॉइंट्स ([]) = = []", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/68", "entry_point": "specialfilter", "test": "\n\nvar arg00 : [AnyHashable] = [5, -2, 1, -5]\nvar x0 : Int = specialfilter(nums : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [15, -73, 14, -15]\nvar x1 : Int = specialfilter(nums : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [33, -2, -3, 45, 21, 109]\nvar x2 : Int = specialfilter(nums : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [43, -12, 93, 125, 121, 109]\nvar x3 : Int = specialfilter(nums : arg30)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [71, -2, -33, 75, 21, 19]\nvar x4 : Int = specialfilter(nums : arg40)\nvar v4 : Int = 3\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1]\nvar x5 : Int = specialfilter(nums : arg50)\nvar v5 : Int = 0\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = []\nvar x6 : Int = specialfilter(nums : arg60)\nvar v6 : Int = 0\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "एक प्रकार्य लिखें जो इनपुट और रिटर्न के रूप में संख्याओं की एक सरणी लेता है। \nसरणी में तत्वों की संख्या जो 10 से अधिक है और दोनों \nएक संख्या के पहले और अंतिम अंक विषम (1,3,5,7,9) होते हैं। \nउदाहरण के लिएः \nविशेष फ़िल्टर ([15,-73,14,-15]) => 1 \nविशेष फ़िल्टर ([33,-2,-3,45,21,109]) => 2", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/69", "entry_point": "getMaxTriples", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = getMaxTriples(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = getMaxTriples(n : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = getMaxTriples(n : arg20)\nvar v2 : Int = 36\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 100\nvar x3 : Int = getMaxTriples(n : arg30)\nvar v3 : Int = 53361\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "आपको एक सकारात्मक पूर्णांक n दिया जाता है। आपको n लंबाई का एक पूर्णांक सरणी a बनाना होगा। \nप्रत्येक i (1 ≤ i ≤ n) के लिए, a [i] = i * i-i + 1 का मान। \na के तीन गुना (a [i], a [j], a [k]) की संख्या वापस करें जहाँ i <j <k, \nऔर a [i] + a [j] + a [k] 3 का गुणज है। \n\nउदाहरणः \nइनपुटः एन = 5 \nआउटपुटः 1 \nव्याख्याः \na = [1,3,7,13,21] \nएकमात्र वैध ट्रिपल (1,7,13) है।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/70", "entry_point": "bf", "test": "\n\nvar arg00 : String = #\"Jupiter\"#\nvar arg01 : String = #\"Neptune\"#\nvar x0 : [AnyHashable] = bf(planet1 : arg00, planet2 : arg01)\nvar v0 : [AnyHashable] = [#\"Saturn\"#, #\"Uranus\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Earth\"#\nvar arg11 : String = #\"Mercury\"#\nvar x1 : [AnyHashable] = bf(planet1 : arg10, planet2 : arg11)\nvar v1 : [AnyHashable] = [#\"Venus\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Mercury\"#\nvar arg21 : String = #\"Uranus\"#\nvar x2 : [AnyHashable] = bf(planet1 : arg20, planet2 : arg21)\nvar v2 : [AnyHashable] = [#\"Venus\"#, #\"Earth\"#, #\"Mars\"#, #\"Jupiter\"#, #\"Saturn\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Neptune\"#\nvar arg31 : String = #\"Venus\"#\nvar x3 : [AnyHashable] = bf(planet1 : arg30, planet2 : arg31)\nvar v3 : [AnyHashable] = [#\"Earth\"#, #\"Mars\"#, #\"Jupiter\"#, #\"Saturn\"#, #\"Uranus\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Earth\"#\nvar arg41 : String = #\"Earth\"#\nvar x4 : [AnyHashable] = bf(planet1 : arg40, planet2 : arg41)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"Mars\"#\nvar arg51 : String = #\"Earth\"#\nvar x5 : [AnyHashable] = bf(planet1 : arg50, planet2 : arg51)\nvar v5 : [AnyHashable] = []\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"Jupiter\"#\nvar arg61 : String = #\"Makemake\"#\nvar x6 : [AnyHashable] = bf(planet1 : arg60, planet2 : arg61)\nvar v6 : [AnyHashable] = []\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "हमारे सौर मंडल में आठ ग्रह हैंः सूर्य के सबसे करीब \nबुध है, अगला शुक्र है, फिर पृथ्वी, मंगल, बृहस्पति, शनि, \nयूरेनस, नेपच्यून। \nएक कार्य लिखें जो दो ग्रहों के नाम ग्रह 1 और ग्रह 2 के रूप में लेता है। \nफ़ंक्शन को सभी ग्रहों वाले एक टुपल को वापस करना चाहिए जिनकी कक्षाएँ हैं \nग्रह 1 की कक्षा और ग्रह 2 की कक्षा के बीच स्थित, द्वारा क्रमबद्ध \nसूर्य की निकटता। \nयदि प्लैनेट1 या प्लैनेट2 है तो फ़ंक्शन को एक खाली टुपल वापस करना चाहिए। \nग्रहों के नाम सही नहीं हैं। \nउदाहरण \nbf (\"बृहस्पति\", \"नेपच्यून\") = => (\"शनि\", \"यूरेनस\") \nbf (\"पृथ्वी\", \"बुध\") = => (\"शुक्र\") \nbf (\"बुध\", \"यूरेनस\") = => (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"बृहस्पति\", \"शनि\")", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/71", "entry_point": "xOrY", "test": "\n\nvar arg00 : Int = 7\nvar arg01 : Int = 34\nvar arg02 : Int = 12\nvar x0 : Int = xOrY(n : arg00, x : arg01, y : arg02)\nvar v0 : Int = 34\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 8\nvar arg12 : Int = 5\nvar x1 : Int = xOrY(n : arg10, x : arg11, y : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 33\nvar arg22 : Int = 5212\nvar x2 : Int = xOrY(n : arg20, x : arg21, y : arg22)\nvar v2 : Int = 33\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 1259\nvar arg31 : Int = 3\nvar arg32 : Int = 52\nvar x3 : Int = xOrY(n : arg30, x : arg31, y : arg32)\nvar v3 : Int = 3\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7919\nvar arg41 : Int = -1\nvar arg42 : Int = 12\nvar x4 : Int = xOrY(n : arg40, x : arg41, y : arg42)\nvar v4 : Int = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 3609\nvar arg51 : Int = 1245\nvar arg52 : Int = 583\nvar x5 : Int = xOrY(n : arg50, x : arg51, y : arg52)\nvar v5 : Int = 583\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 91\nvar arg61 : Int = 56\nvar arg62 : Int = 129\nvar x6 : Int = xOrY(n : arg60, x : arg61, y : arg62)\nvar v6 : Int = 129\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 6\nvar arg71 : Int = 34\nvar arg72 : Int = 1234\nvar x7 : Int = xOrY(n : arg70, x : arg71, y : arg72)\nvar v7 : Int = 1234\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 1\nvar arg81 : Int = 2\nvar arg82 : Int = 0\nvar x8 : Int = xOrY(n : arg80, x : arg81, y : arg82)\nvar v8 : Int = 0\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 2\nvar arg91 : Int = 2\nvar arg92 : Int = 0\nvar x9 : Int = xOrY(n : arg90, x : arg91, y : arg92)\nvar v9 : Int = 2\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "एक सरल प्रोग्राम जिसे x का मान वापस करना चाहिए यदि n है \nएक अभाज्य संख्या और अन्यथा y का मान वापस करना चाहिए। \n\nउदाहरण के लिएः \nx _ या _ y (7,34,12) = = 34 के लिए \nx _ या _ y (15,8,5) = = 5 के लिए", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/72", "entry_point": "doubleTheDifference", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : Int = doubleTheDifference(lst : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 4]\nvar x1 : Int = doubleTheDifference(lst : arg10)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [0.1, 0.2, 0.3]\nvar x2 : Int = doubleTheDifference(lst : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [-10, -20, -30]\nvar x3 : Int = doubleTheDifference(lst : arg30)\nvar v3 : Int = 0\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [-1, -2, 8]\nvar x4 : Int = doubleTheDifference(lst : arg40)\nvar v4 : Int = 0\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [0.2, 3, 5]\nvar x5 : Int = doubleTheDifference(lst : arg50)\nvar v5 : Int = 34\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nvar x6 : Int = doubleTheDifference(lst : arg60)\nvar v6 : Int = 166650\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "संख्याओं की सूची दिए जाने पर, संख्याओं के वर्गों का योग वापस करें। \nविषम सूची में. उन संख्याओं को नजरअंदाज करें जो ऋणात्मक हैं या पूर्णांक नहीं हैं। \n\nडबल _ द _ डिफरेंस ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nडबल _ द _ डिफरेंस ([-1,0]) = = 0 \nडबल _ द _ डिफरेंस ([9,-2]) = = 81 \nडबल _ द _ डिफरेंस ([0]) = = 0 \n\nयदि इनपुट सूची खाली है, तो 0 वापस करें।", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/73", "entry_point": "strongestExtension", "test": "\n\nvar arg00 : String = #\"Watashi\"#\nvar arg01 : [String] = [#\"tEN\"#, #\"niNE\"#, #\"eIGHt8OKe\"#]\nvar x0 : String = strongestExtension(className : arg00, extensions : arg01)\nvar v0 : String = #\"Watashi.eIGHt8OKe\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Boku123\"#\nvar arg11 : [String] = [#\"nani\"#, #\"NazeDa\"#, #\"YEs.WeCaNe\"#, #\"32145tggg\"#]\nvar x1 : String = strongestExtension(className : arg10, extensions : arg11)\nvar v1 : String = #\"Boku123.YEs.WeCaNe\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"__YESIMHERE\"#\nvar arg21 : [String] = [#\"t\"#, #\"eMptY\"#, #\"nothing\"#, #\"zeR00\"#, #\"NuLl__\"#, #\"123NoooneB321\"#]\nvar x2 : String = strongestExtension(className : arg20, extensions : arg21)\nvar v2 : String = #\"__YESIMHERE.NuLl__\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"K\"#\nvar arg31 : [String] = [#\"Ta\"#, #\"TAR\"#, #\"t234An\"#, #\"cosSo\"#]\nvar x3 : String = strongestExtension(className : arg30, extensions : arg31)\nvar v3 : String = #\"K.TAR\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"__HAHA\"#\nvar arg41 : [String] = [#\"Tab\"#, #\"123\"#, #\"781345\"#, #\"-_-\"#]\nvar x4 : String = strongestExtension(className : arg40, extensions : arg41)\nvar v4 : String = #\"__HAHA.123\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"YameRore\"#\nvar arg51 : [String] = [#\"HhAas\"#, #\"okIWILL123\"#, #\"WorkOut\"#, #\"Fails\"#, #\"-_-\"#]\nvar x5 : String = strongestExtension(className : arg50, extensions : arg51)\nvar v5 : String = #\"YameRore.okIWILL123\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"finNNalLLly\"#\nvar arg61 : [String] = [#\"Die\"#, #\"NowW\"#, #\"Wow\"#, #\"WoW\"#]\nvar x6 : String = strongestExtension(className : arg60, extensions : arg61)\nvar v6 : String = #\"finNNalLLly.WoW\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"_\"#\nvar arg71 : [String] = [#\"Bb\"#, #\"91245\"#]\nvar x7 : String = strongestExtension(className : arg70, extensions : arg71)\nvar v7 : String = #\"_.Bb\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"Sp\"#\nvar arg81 : [String] = [#\"671235\"#, #\"Bb\"#]\nvar x8 : String = strongestExtension(className : arg80, extensions : arg81)\nvar v8 : String = #\"Sp.671235\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "आपको एक वर्ग का नाम (एक स्ट्रिंग) और एक्सटेंशन की एक सूची दी जाएगी। \nइन विस्तारों का उपयोग कक्षा में अतिरिक्त वर्गों को लोड करने के लिए किया जाना है। \nविस्तार की ताकत इस प्रकार हैः मान लीजिए कि CAP बड़े अक्षर की संख्या है। \nविस्तार के नाम में अक्षर, और एस. एम. को छोटे अक्षरों की संख्या होने दें \nविस्तार के नाम में, ताकत सीएपी-एसएम अंश द्वारा दी जाती है। \nआपको सबसे मजबूत एक्सटेंशन ढूंढना चाहिए और इसमें एक स्ट्रिंग वापस करनी चाहिए। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि एक ही ताकत के साथ दो या दो से अधिक विस्तार हैं, तो आपको करना चाहिए \nसूची में सबसे पहले आने वाले को चुनें। \nउदाहरण के लिए, यदि आपको वर्ग और सूची के रूप में \"स्लाइस\" दिए गए हैं \nविस्तारः ['SERVINGSliCes','चीज़','स्टुफ़ेड'] तो आपको करना चाहिए \nरिटर्न'Slices.SErviNGSliCes'क्योंकि'SERVINGSliCes'सबसे मजबूत एक्सटेंशन है \n(इसकी ताकत-1 है)। \nउदाहरणः \nसबसे मजबूत _ विस्तार के लिए ('माय _ क्लास', ['एए','बी','सीसी']) = ='my_class.AA'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/74", "entry_point": "cycpatternCheck", "test": "\n\nvar arg00 : String = #\"xyzw\"#\nvar arg01 : String = #\"xyw\"#\nvar x0 : Bool = cycpatternCheck(a : arg00, b : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"yello\"#\nvar arg11 : String = #\"ell\"#\nvar x1 : Bool = cycpatternCheck(a : arg10, b : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"whattup\"#\nvar arg21 : String = #\"ptut\"#\nvar x2 : Bool = cycpatternCheck(a : arg20, b : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"efef\"#\nvar arg31 : String = #\"fee\"#\nvar x3 : Bool = cycpatternCheck(a : arg30, b : arg31)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"abab\"#\nvar arg41 : String = #\"aabb\"#\nvar x4 : Bool = cycpatternCheck(a : arg40, b : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"winemtt\"#\nvar arg51 : String = #\"tinem\"#\nvar x5 : Bool = cycpatternCheck(a : arg50, b : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "आपको 2 शब्द दिए गए हैं। आपको सही लौटाने की आवश्यकता है यदि दूसरा शब्द या इसका कोई भी आवर्तन पहले शब्द में एक सबस्ट्रिंग है। \nसाइकपेटर्न _ चेक (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => गलत \nसाइकपेटर्न _ चेक (\"हैलो\", \"ईल\") => सही \nसाइकपेटर्न _ चेक (\"व्हासअप\", \"psus\") => गलत \nसाइकपेटर्न _ चेक (\"अबाब\", \"बा\") => सही \nसाइकपेटर्न _ चेक (\"ई. एफ. ई. एफ\"., \"ई. ई. एफ. एफ\".) => गलत \nसाइकपेटर्न _ चेक (\"हिमेन्स\", \"सिमेन\") => सही", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/75", "entry_point": "intToMiniRoman", "test": "\n\nvar arg00 : Int = 19\nvar x0 : String = intToMiniRoman(number : arg00)\nvar v0 : String = #\"xix\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 152\nvar x1 : String = intToMiniRoman(number : arg10)\nvar v1 : String = #\"clii\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 251\nvar x2 : String = intToMiniRoman(number : arg20)\nvar v2 : String = #\"ccli\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 426\nvar x3 : String = intToMiniRoman(number : arg30)\nvar v3 : String = #\"cdxxvi\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 500\nvar x4 : String = intToMiniRoman(number : arg40)\nvar v4 : String = #\"d\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 1\nvar x5 : String = intToMiniRoman(number : arg50)\nvar v5 : String = #\"i\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 4\nvar x6 : String = intToMiniRoman(number : arg60)\nvar v6 : String = #\"iv\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 43\nvar x7 : String = intToMiniRoman(number : arg70)\nvar v7 : String = #\"xliii\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 90\nvar x8 : String = intToMiniRoman(number : arg80)\nvar v8 : String = #\"xc\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 94\nvar x9 : String = intToMiniRoman(number : arg90)\nvar v9 : String = #\"xciv\"#\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 532\nvar x10 : String = intToMiniRoman(number : arg100)\nvar v10 : String = #\"dxxxii\"#\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 900\nvar x11 : String = intToMiniRoman(number : arg110)\nvar v11 : String = #\"cm\"#\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 994\nvar x12 : String = intToMiniRoman(number : arg120)\nvar v12 : String = #\"cmxciv\"#\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : Int = 1000\nvar x13 : String = intToMiniRoman(number : arg130)\nvar v13 : String = #\"m\"#\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\n", "description": "एक सकारात्मक पूर्णांक दिए जाने पर, एक स्ट्रिंग के रूप में इसके रोमन अंक के समतुल्य प्राप्त करें, \nऔर इसे छोटे अक्षर में वापस कर दें। \nप्रतिबंधः 1 <= संख्या <= 1000 \n\nउदाहरण के लिएः \n>>> इंट _ टू _ मिनी _ रोमन (19) = ='xix'\n>>> इंट _ टू _ मिनी _ रोमन (152) = ='क्लाई'\n>> इंट _ टू _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/76", "entry_point": "rightAngleTriangle", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar arg02 : Int = 5\nvar x0 : Bool = rightAngleTriangle(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 3\nvar x1 : Bool = rightAngleTriangle(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 6\nvar arg22 : Int = 8\nvar x2 : Bool = rightAngleTriangle(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 2\nvar arg31 : Int = 2\nvar arg32 : Int = 2\nvar x3 : Bool = rightAngleTriangle(a : arg30, b : arg31, c : arg32)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar arg41 : Int = 24\nvar arg42 : Int = 25\nvar x4 : Bool = rightAngleTriangle(a : arg40, b : arg41, c : arg42)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 10\nvar arg51 : Int = 5\nvar arg52 : Int = 7\nvar x5 : Bool = rightAngleTriangle(a : arg50, b : arg51, c : arg52)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 5\nvar arg61 : Int = 12\nvar arg62 : Int = 13\nvar x6 : Bool = rightAngleTriangle(a : arg60, b : arg61, c : arg62)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 15\nvar arg71 : Int = 8\nvar arg72 : Int = 17\nvar x7 : Bool = rightAngleTriangle(a : arg70, b : arg71, c : arg72)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 48\nvar arg81 : Int = 55\nvar arg82 : Int = 73\nvar x8 : Bool = rightAngleTriangle(a : arg80, b : arg81, c : arg82)\nvar v8 : Bool = true\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1\nvar arg91 : Int = 1\nvar arg92 : Int = 1\nvar x9 : Bool = rightAngleTriangle(a : arg90, b : arg91, c : arg92)\nvar v9 : Bool = false\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 2\nvar arg101 : Int = 2\nvar arg102 : Int = 10\nvar x10 : Bool = rightAngleTriangle(a : arg100, b : arg101, c : arg102)\nvar v10 : Bool = false\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए. सही लौटें यदि तीनों \nभुजाएँ एक समकोण त्रिभुज बनाती हैं, अन्यथा गलत। \nसमकोण त्रिभुज वह त्रिभुज है जिसमें एक कोण समकोण या समकोण होता है। \n90 डिग्री। \nउदाहरणः \nसमकोण त्रिभुज (3,4,5) = = सही \nसमकोण त्रिभुज (1,2,3) = = गलत", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/77", "entry_point": "solve", "test": "\n\nvar arg00 : String = #\"AsDf\"#\nvar x0 : String = solve(s : arg00)\nvar v0 : String = #\"aSdF\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1234\"#\nvar x1 : String = solve(s : arg10)\nvar v1 : String = #\"4321\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar x2 : String = solve(s : arg20)\nvar v2 : String = #\"AB\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"#a@C\"#\nvar x3 : String = solve(s : arg30)\nvar v3 : String = #\"#A@c\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"#AsdfW^45\"#\nvar x4 : String = solve(s : arg40)\nvar v4 : String = #\"#aSDFw^45\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"#6@2\"#\nvar x5 : String = solve(s : arg50)\nvar v5 : String = #\"2@6#\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"#\\$a^D\"#\nvar x6 : String = solve(s : arg60)\nvar v6 : String = #\"#\\$A^d\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"#ccc\"#\nvar x7 : String = solve(s : arg70)\nvar v7 : String = #\"#CCC\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nयदि एस [आई] एक अक्षर है, तो इसके मामले को निचले से ऊपरी या इसके विपरीत करें, \nअन्यथा इसे वैसे ही रखें जैसे वह है। \nयदि स्ट्रिंग में कोई अक्षर नहीं हैं, तो स्ट्रिंग को उलट दें। \nफ़ंक्शन को परिणामी स्ट्रिंग वापस करनी चाहिए। \nउदाहरण \nहल करें (\"1234\") = \"4321\" \nहल करें (\"एबी\") = \"एबी\" \nहल करें (\"#a @C\") = \"#A @c\"", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/78", "entry_point": "stringToMd5", "test": "\n\nvar arg00 : String = #\"Hello world\"#\nvar x0 : String = stringToMd5(text : arg00)\nvar v0 : String = #\"3e25960a79dbc69b674cd4ec67a72c62\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"\"#\nvar x1 : String = stringToMd5(text : arg10)\nvar v1 : String = \"none\"\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"A B C\"#\nvar x2 : String = stringToMd5(text : arg20)\nvar v2 : String = #\"0ef78513b0cb8cef12743f5aeb35f888\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"password\"#\nvar x3 : String = stringToMd5(text : arg30)\nvar v3 : String = #\"5f4dcc3b5aa765d61d8327deb882cf99\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "स्ट्रिंग'टेक्स्ट'को देखते हुए, इसके md5 हैश समकक्ष स्ट्रिंग को वापस करें। \nयदि'पाठ'एक खाली स्ट्रिंग है, तो शून्य वापस करें। \n\n>> स्ट्रिंग _ से _ md5 ('हैलो वर्ल्ड') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "swift/79", "entry_point": "generateIntegers", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 10\nvar x0 : [AnyHashable] = generateIntegers(a : arg00, b : arg01)\nvar v0 : [AnyHashable] = [2, 4, 6, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = generateIntegers(a : arg10, b : arg11)\nvar v1 : [AnyHashable] = [2, 4, 6, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 132\nvar arg21 : Int = 2\nvar x2 : [AnyHashable] = generateIntegers(a : arg20, b : arg21)\nvar v2 : [AnyHashable] = [2, 4, 6, 8]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 17\nvar arg31 : Int = 89\nvar x3 : [AnyHashable] = generateIntegers(a : arg30, b : arg31)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "दो धनात्मक पूर्णांक a और b दिए जाने पर, a के बीच के सम अंकों को वापस करें। \nऔर बी, आरोही क्रम में। \n\nउदाहरण के लिएः \nपूर्णांक उत्पन्न करें (2,8) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (8,2) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (10,14) => []", "language": "swift", "canonical_solution": null, "natural_language": "Hindi"}
