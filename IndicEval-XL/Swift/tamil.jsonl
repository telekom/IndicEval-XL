{"task_id": "swift/0", "entry_point": "belowZero", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : Bool = belowZero(operations : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, -3, 1, 2, -3]\nvar x1 : Bool = belowZero(operations : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, -4, 5, 6]\nvar x2 : Bool = belowZero(operations : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, -1, 2, -2, 5, -5, 4, -4]\nvar x3 : Bool = belowZero(operations : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, -1, 2, -2, 5, -5, 4, -5]\nvar x4 : Bool = belowZero(operations : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1, -2, 2, -2, 5, -5, 4, -4]\nvar x5 : Bool = belowZero(operations : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "ஒரு வங்கிக் கணக்கில் வைப்பு மற்றும் திரும்பப் பெறும் செயல்பாடுகளின் பட்டியல் உங்களுக்கு வழங்கப்படுகிறது. \nபூஜ்ஜிய இருப்பு. உங்கள் பணி எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்கு கீழே விழுகிறதா என்பதைக் கண்டறிவது, மற்றும் \nஅந்த நேரத்தில் செயல்பாடு சரி என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறு என்று திரும்ப வேண்டும். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,3]) \nபொய். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,-4,5]) \nஉண்மை.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/1", "entry_point": "sumProduct", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : [Int] = sumProduct(numbers : arg00)\nvar v0 : [Int] = [0, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 1, 1]\nvar x1 : [Int] = sumProduct(numbers : arg10)\nvar v1 : [Int] = [3, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [100, 0]\nvar x2 : [Int] = sumProduct(numbers : arg20)\nvar v2 : [Int] = [100, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [3, 5, 7]\nvar x3 : [Int] = sumProduct(numbers : arg30)\nvar v3 : [Int] = [15, 105]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [10]\nvar x4 : [Int] = sumProduct(numbers : arg40)\nvar v4 : [Int] = [10, 10]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் பெருக்கல் ஆகியவற்றைக் கொண்ட ஒரு டப்பிளைத் திருப்பித் தரவும். \nகாலியான தொகை 0 க்கு சமமாகவும், காலியான பெருக்கல் 1 க்கு சமமாகவும் இருக்க வேண்டும். \n>>> கூட்டுத்தொகை ([]) \n(0,1) \n>> தொகை _ தயாரிப்பு ([1,2,3,4]) \n(10,24)", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/2", "entry_point": "stringXor", "test": "\n\nvar arg00 : String = #\"111000\"#\nvar arg01 : String = #\"101010\"#\nvar x0 : String = stringXor(a : arg00, b : arg01)\nvar v0 : String = #\"010010\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1\"#\nvar arg11 : String = #\"1\"#\nvar x1 : String = stringXor(a : arg10, b : arg11)\nvar v1 : String = #\"0\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"0101\"#\nvar arg21 : String = #\"0000\"#\nvar x2 : String = stringXor(a : arg20, b : arg21)\nvar v2 : String = #\"0101\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "உள்ளீடு என்பது 1s மற்றும் 0s ஐ மட்டுமே கொண்ட இரண்டு சரங்கள் a மற்றும் b ஆகும். \nஇந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள், மேலும் ரிட்டர்ன் ரிசல்ட்டையும் ஒரு சரமாக வழங்கவும். \n>> சரம் _ xor ('010','110') \n'100'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/3", "entry_point": "longest", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : String = longest(strings : arg00)\nvar v0 : String = \"none\"\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"x\"#, #\"y\"#, #\"z\"#]\nvar x1 : String = longest(strings : arg10)\nvar v1 : String = #\"x\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"x\"#, #\"yyy\"#, #\"zzzz\"#, #\"www\"#, #\"kkkk\"#, #\"abc\"#]\nvar x2 : String = longest(strings : arg20)\nvar v2 : String = #\"zzzz\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "சரங்களின் பட்டியலிலிருந்து, நீளமான சரத்தை திருப்பி அனுப்புங்கள். பல சரங்கள் இருந்தால் முதல் சரத்தை திருப்பி அனுப்புங்கள். \nஅதே நீளமுள்ள சரங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் பூஜ்யத்தைத் திருப்பவும். \n>>> நீளமானது ([]) \n\n>>> நீளமானது (['a','b','c']) \n\"அ\"... \n>>> நீளமானது (['a','bb','ccc']) \n\"சிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசி", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/4", "entry_point": "greatestCommonDivisor", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 7\nvar x0 : Int = greatestCommonDivisor(a : arg00, b : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Int = greatestCommonDivisor(a : arg10, b : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 49\nvar arg21 : Int = 14\nvar x2 : Int = greatestCommonDivisor(a : arg20, b : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 144\nvar arg31 : Int = 60\nvar x3 : Int = greatestCommonDivisor(a : arg30, b : arg31)\nvar v3 : Int = 12\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "a மற்றும் b ஆகிய இரண்டு முழு எண்களின் மிகப் பெரிய பொதுவான வகுத்தியைத் திருப்பித் தரவும். \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (3,5) \n1. \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (25,15) \n5.......................................................................................................................................................................................................", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/5", "entry_point": "sortNumbers", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = sortNumbers(numbers : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"three\"#\nvar x1 : String = sortNumbers(numbers : arg10)\nvar v1 : String = #\"three\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"three five nine\"#\nvar x2 : String = sortNumbers(numbers : arg20)\nvar v2 : String = #\"three five nine\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"five zero four seven nine eight\"#\nvar x3 : String = sortNumbers(numbers : arg30)\nvar v3 : String = #\"zero four five seven eight nine\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"six five four three two one zero\"#\nvar x4 : String = sortNumbers(numbers : arg40)\nvar v4 : String = #\"zero one two three four five six\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "உள்ளீடு என்பது'பூஜ்ஜியம்'முதல்'ஒன்பது'வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம் ஆகும். \nசெல்லுபடியாகும் தேர்வுகள்'பூஜ்ஜியம்','ஒன்று','இரண்டு','மூன்று','நான்கு','ஐந்து','ஆறு','ஏழு','எட்டு'மற்றும்'ஒன்பது'ஆகும். \nசிறியது முதல் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தைத் திருப்பவும் \n>>> வரிசைப்படுத்தப்பட்ட எண்கள் ('மூன்று ஒன்று ஐந்து') \n'ஒன் த்ரீ ஃபைவ்'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/6", "entry_point": "rescaleToUnit", "test": "\n\nvar arg00 : [Double] = [2.0, 49.9]\nvar x0 : [Double] = rescaleToUnit(numbers : arg00)\nvar v0 : [Double] = [0.0, 1.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [100.0, 49.9]\nvar x1 : [Double] = rescaleToUnit(numbers : arg10)\nvar v1 : [Double] = [1.0, 0.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [1.0, 2.0, 3.0, 4.0, 5.0]\nvar x2 : [Double] = rescaleToUnit(numbers : arg20)\nvar v2 : [Double] = [0.0, 0.25, 0.5, 0.75, 1.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [2.0, 1.0, 5.0, 3.0, 4.0]\nvar x3 : [Double] = rescaleToUnit(numbers : arg30)\nvar v3 : [Double] = [0.25, 0.0, 1.0, 0.5, 0.75]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [12.0, 11.0, 15.0, 13.0, 14.0]\nvar x4 : [Double] = rescaleToUnit(numbers : arg40)\nvar v4 : [Double] = [0.25, 0.0, 1.0, 0.5, 0.75]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு உறுப்புகளின்), அந்த பட்டியலுக்கு ஒரு நேரியல் மாற்றத்தைப் பயன்படுத்துங்கள், \nஅதாவது மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும். \n>> மீட்டமை _ முதல் _ அலகு வரை ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/7", "entry_point": "flipCase", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = flipCase(string : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Hello!\"#\nvar x1 : String = flipCase(string : arg10)\nvar v1 : String = #\"hELLO!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"These violent delights have violent ends\"#\nvar x2 : String = flipCase(string : arg20)\nvar v2 : String = #\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும். \n>>> ஃபிளிப் கேஸ் ('ஹலோ') \n'ஹலோ'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/8", "entry_point": "getPositive", "test": "\n\nvar arg00 : [AnyHashable] = [-1, -2, 4, 5, 6]\nvar x0 : [AnyHashable] = getPositive(l : arg00)\nvar v0 : [AnyHashable] = [4, 5, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]\nvar x1 : [AnyHashable] = getPositive(l : arg10)\nvar v1 : [AnyHashable] = [5, 3, 2, 3, 3, 9, 123, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [-1, -2]\nvar x2 : [AnyHashable] = getPositive(l : arg20)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = []\nvar x3 : [AnyHashable] = getPositive(l : arg30)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திருப்பி அனுப்புங்கள். \n>>> பெட் பாசிட்டிவ் ([-1,2,-4,5,6]) \n[2,5,6] \n>>> நேர்மறையைப் பெறுங்கள் ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/9", "entry_point": "isPrime", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Bool = isPrime(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 101\nvar x1 : Bool = isPrime(n : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Bool = isPrime(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 13441\nvar x3 : Bool = isPrime(n : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 61\nvar x4 : Bool = isPrime(n : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 4\nvar x5 : Bool = isPrime(n : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 1\nvar x6 : Bool = isPrime(n : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 5\nvar x7 : Bool = isPrime(n : arg70)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 11\nvar x8 : Bool = isPrime(n : arg80)\nvar v8 : Bool = true\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 17\nvar x9 : Bool = isPrime(n : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 85\nvar x10 : Bool = isPrime(n : arg100)\nvar v10 : Bool = false\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 77\nvar x11 : Bool = isPrime(n : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 255379\nvar x12 : Bool = isPrime(n : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\n", "description": "கொடுக்கப்பட்ட எண் பகா எண்ணாக இருந்தால் சரி என்றும், இல்லையெனில் தவறு என்றும் காட்டவும். \n>>> என்பது _ பிரைம் (6) \nபொய். \n>>> என்பது _ பிரைம் (101) \nஉண்மை. \n>>> என்பது _ பிரைம் (11) \nஉண்மை. \n>>> is _ Prime (13441) \nஉண்மை. \n>>> என்பது _ பிரைம் (61) \nஉண்மை. \n>>> என்பது _ பிரைம் (4) \nபொய். \n>>> என்பது _ பிரைம் (1) \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/10", "entry_point": "unique", "test": "\n\nvar arg00 : [Int] = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nvar x0 : [Int] = unique(l : arg00)\nvar v0 : [Int] = [0, 2, 3, 5, 9, 123]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\n", "description": "ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளை திருப்பி அனுப்பவும் \n>>> தனித்துவமானது ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/11", "entry_point": "primeFib", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = primeFib(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = primeFib(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = primeFib(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 4\nvar x3 : Int = primeFib(n : arg30)\nvar v3 : Int = 13\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 5\nvar x4 : Int = primeFib(n : arg40)\nvar v4 : Int = 89\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 6\nvar x5 : Int = primeFib(n : arg50)\nvar v5 : Int = 233\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 7\nvar x6 : Int = primeFib(n : arg60)\nvar v6 : Int = 1597\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 8\nvar x7 : Int = primeFib(n : arg70)\nvar v7 : Int = 28657\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 9\nvar x8 : Int = primeFib(n : arg80)\nvar v8 : Int = 514229\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 10\nvar x9 : Int = primeFib(n : arg90)\nvar v9 : Int = 433494437\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "பிரைம் _ ஃபைப் n-வது எண்ணை வழங்குகிறது, இது ஒரு ஃபிபோனாச்சி எண் மற்றும் அது பகா எண்ணாகும். \n>>> பிரைம் ஃபைப் (1) \n2. \n>>> பிரைம் ஃபைப் (2) \n3. \n>>> பிரைம் ஃபைப் (3) \n5....................................................................................................................................................................................................... \n>>> பிரைம் ஃபைப் (4) \n13. \n>>> பிரைம் ஃபைப் (5) \n89", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/12", "entry_point": "triplesSumToZero", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 0]\nvar x0 : Bool = triplesSumToZero(l : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, -1]\nvar x1 : Bool = triplesSumToZero(l : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, -2, 1]\nvar x2 : Bool = triplesSumToZero(l : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [1, 2, 3, 7]\nvar x3 : Bool = triplesSumToZero(l : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 2, 5, 7]\nvar x4 : Bool = triplesSumToZero(l : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [2, 4, -5, 3, 9, 7]\nvar x5 : Bool = triplesSumToZero(l : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [1]\nvar x6 : Bool = triplesSumToZero(l : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [1, 3, 5, -100]\nvar x7 : Bool = triplesSumToZero(l : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [100, 3, 5, -100]\nvar x8 : Bool = triplesSumToZero(l : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n\n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> மூன்று மடங்கு _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,9,7]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/13", "entry_point": "pairsSumToZero", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 0]\nvar x0 : Bool = pairsSumToZero(l : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, -2, 1]\nvar x1 : Bool = pairsSumToZero(l : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 7]\nvar x2 : Bool = pairsSumToZero(l : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [2, 4, -5, 3, 5, 7]\nvar x3 : Bool = pairsSumToZero(l : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar x4 : Bool = pairsSumToZero(l : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [-3, 9, -1, 3, 2, 30]\nvar x5 : Bool = pairsSumToZero(l : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [-3, 9, -1, 3, 2, 31]\nvar x6 : Bool = pairsSumToZero(l : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [-3, 9, -1, 4, 2, 30]\nvar x7 : Bool = pairsSumToZero(l : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [-3, 9, -1, 4, 2, 31]\nvar x8 : Bool = pairsSumToZero(l : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,5,7]) \nஉண்மை. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/14", "entry_point": "fib4", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = fib4(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar x1 : Int = fib4(n : arg10)\nvar v1 : Int = 28\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = fib4(n : arg20)\nvar v2 : Int = 104\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 12\nvar x3 : Int = fib4(n : arg30)\nvar v3 : Int = 386\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "ஃபைப் 4 எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப் 4 (0)-> 0 \nஃபைப் 4 (1)-> 0 \nஃபைப் 4 (2)-> 2 \nஃபைப் 4 (3)-> 0 \nஃபைப் 4 (என்)-> ஃபைப் 4 (என்-1) + ஃபைப் 4 (என்-2) + ஃபைப் 4 (என்-3) + ஃபைப் 4 (என்-4). \nஃபைப் 4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுநிகழ்வைப் பயன்படுத்த வேண்டாம். \n>>> ஃபைப்4 (5) \n4. \n>>> ஃபைப்4 (6) \n8. \n>>> ஃபைப்4 (7) \n14.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/15", "entry_point": "median", "test": "\n\nvar arg00 : [Int] = [3, 1, 2, 4, 5]\nvar x0 : Double = median(l : arg00)\nvar v0 : Double = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-10, 4, 6, 1000, 10, 20]\nvar x1 : Double = median(l : arg10)\nvar v1 : Double = 8.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5]\nvar x2 : Double = median(l : arg20)\nvar v2 : Double = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [6, 5]\nvar x3 : Double = median(l : arg30)\nvar v3 : Double = 5.5\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [8, 1, 3, 9, 9, 2, 7]\nvar x4 : Double = median(l : arg40)\nvar v4 : Double = 7\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "பட்டியலில் உள்ள உறுப்புகளின் சராசரி l ஐத் திருப்பித் தரவும். \n>>> சராசரி ([3,1,2,4,5]) \n3. \n>>> சராசரி ([-10,4,6,1000,10,20]) \n15. 0", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/16", "entry_point": "isPalindrome", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : Bool = isPalindrome(text : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aba\"#\nvar x1 : Bool = isPalindrome(text : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aaaaa\"#\nvar x2 : Bool = isPalindrome(text : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"zbcd\"#\nvar x3 : Bool = isPalindrome(text : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"xywyx\"#\nvar x4 : Bool = isPalindrome(text : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"xywyz\"#\nvar x5 : Bool = isPalindrome(text : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"xywzx\"#\nvar x6 : Bool = isPalindrome(text : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சரிபார்க்கிறது \n>>> என்பது _ பாலிண்ட்ரோம் (\") \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('அபா') \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('zbcd') \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/17", "entry_point": "removeVowels", "test": "\n\nvar arg00 : String = #\"\"#\nvar x0 : String = removeVowels(text : arg00)\nvar v0 : String = #\"\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdef\\nghijklm\"#\nvar x1 : String = removeVowels(text : arg10)\nvar v1 : String = #\"bcdf\\nghjklm\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"fedcba\"#\nvar x2 : String = removeVowels(text : arg20)\nvar v2 : String = #\"fdcb\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"eeeee\"#\nvar x3 : String = removeVowels(text : arg30)\nvar v3 : String = #\"\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"acBAA\"#\nvar x4 : String = removeVowels(text : arg40)\nvar v4 : String = #\"cB\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"EcBOO\"#\nvar x5 : String = removeVowels(text : arg50)\nvar v5 : String = #\"cB\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"ybcd\"#\nvar x6 : String = removeVowels(text : arg60)\nvar v6 : String = #\"ybcd\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "நீக்குதல் உயிரெழுத்துக்கள் என்பது சரத்தை எடுத்து உயிரெழுத்துக்கள் இல்லாமல் சரத்தை திருப்பித் தரும் ஒரு செயல்பாடாகும். \n>>> உயிரெழுத்துக்களை அகற்று (\") \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று (\"abcdef\\ nghijklm\") \n'bcdf\\ nghjklm'\n>>> உயிரெழுத்துக்களை அகற்று ('abcdef') \n'பிசிடிஎஃப்'\n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏபிஏஏ') \n'பி'\n>>> உயிரெழுத்துக்களை அகற்று ('zbcd') \n'zbcd'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/18", "entry_point": "belowThreshold", "test": "\n\nvar arg00 : [Int] = [1, 2, 4, 10]\nvar arg01 : Int = 100\nvar x0 : Bool = belowThreshold(l : arg00, t : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 20, 4, 10]\nvar arg11 : Int = 5\nvar x1 : Bool = belowThreshold(l : arg10, t : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 20, 4, 10]\nvar arg21 : Int = 21\nvar x2 : Bool = belowThreshold(l : arg20, t : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [1, 20, 4, 10]\nvar arg31 : Int = 22\nvar x3 : Bool = belowThreshold(l : arg30, t : arg31)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 8, 4, 10]\nvar arg41 : Int = 11\nvar x4 : Bool = belowThreshold(l : arg40, t : arg41)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [1, 8, 4, 10]\nvar arg51 : Int = 10\nvar x5 : Bool = belowThreshold(l : arg50, t : arg51)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "பட்டியலில் உள்ள அனைத்து எண்களும் t வரம்பிற்குக் கீழே இருந்தால் சரி என்று திரும்பவும். \n>>> கீழ் வரம்பு ([1,2,4,10], 100) \nஉண்மை. \n>>> கீழ் வரம்பு ([1,20,4,10], 5) \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/19", "entry_point": "add", "test": "\n\nvar arg00 : Int = 0\nvar arg01 : Int = 1\nvar x0 : Int = add(x : arg00, y : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 0\nvar x1 : Int = add(x : arg10, y : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 3\nvar x2 : Int = add(x : arg20, y : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5\nvar arg31 : Int = 7\nvar x3 : Int = add(x : arg30, y : arg31)\nvar v3 : Int = 12\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar arg41 : Int = 5\nvar x4 : Int = add(x : arg40, y : arg41)\nvar v4 : Int = 12\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 572\nvar arg51 : Int = 725\nvar x5 : Int = add(x : arg50, y : arg51)\nvar v5 : Int = 1297\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 51\nvar arg61 : Int = 804\nvar x6 : Int = add(x : arg60, y : arg61)\nvar v6 : Int = 855\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 645\nvar arg71 : Int = 96\nvar x7 : Int = add(x : arg70, y : arg71)\nvar v7 : Int = 741\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 712\nvar arg81 : Int = 853\nvar x8 : Int = add(x : arg80, y : arg81)\nvar v8 : Int = 1565\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 223\nvar arg91 : Int = 101\nvar x9 : Int = add(x : arg90, y : arg91)\nvar v9 : Int = 324\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 76\nvar arg101 : Int = 29\nvar x10 : Int = add(x : arg100, y : arg101)\nvar v10 : Int = 105\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 416\nvar arg111 : Int = 149\nvar x11 : Int = add(x : arg110, y : arg111)\nvar v11 : Int = 565\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 145\nvar arg121 : Int = 409\nvar x12 : Int = add(x : arg120, y : arg121)\nvar v12 : Int = 554\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : Int = 535\nvar arg131 : Int = 430\nvar x13 : Int = add(x : arg130, y : arg131)\nvar v13 : Int = 965\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : Int = 118\nvar arg141 : Int = 303\nvar x14 : Int = add(x : arg140, y : arg141)\nvar v14 : Int = 421\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : Int = 287\nvar arg151 : Int = 94\nvar x15 : Int = add(x : arg150, y : arg151)\nvar v15 : Int = 381\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\nvar arg160 : Int = 768\nvar arg161 : Int = 257\nvar x16 : Int = add(x : arg160, y : arg161)\nvar v16 : Int = 1025\nassert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \")\n\nvar arg170 : Int = 421\nvar arg171 : Int = 677\nvar x17 : Int = add(x : arg170, y : arg171)\nvar v17 : Int = 1098\nassert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \")\n\nvar arg180 : Int = 802\nvar arg181 : Int = 814\nvar x18 : Int = add(x : arg180, y : arg181)\nvar v18 : Int = 1616\nassert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \")\n\nvar arg190 : Int = 510\nvar arg191 : Int = 922\nvar x19 : Int = add(x : arg190, y : arg191)\nvar v19 : Int = 1432\nassert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \")\n\nvar arg200 : Int = 345\nvar arg201 : Int = 819\nvar x20 : Int = add(x : arg200, y : arg201)\nvar v20 : Int = 1164\nassert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \")\n\nvar arg210 : Int = 895\nvar arg211 : Int = 436\nvar x21 : Int = add(x : arg210, y : arg211)\nvar v21 : Int = 1331\nassert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \")\n\nvar arg220 : Int = 123\nvar arg221 : Int = 424\nvar x22 : Int = add(x : arg220, y : arg221)\nvar v22 : Int = 547\nassert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \")\n\nvar arg230 : Int = 923\nvar arg231 : Int = 245\nvar x23 : Int = add(x : arg230, y : arg231)\nvar v23 : Int = 1168\nassert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \")\n\nvar arg240 : Int = 23\nvar arg241 : Int = 438\nvar x24 : Int = add(x : arg240, y : arg241)\nvar v24 : Int = 461\nassert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \")\n\nvar arg250 : Int = 565\nvar arg251 : Int = 133\nvar x25 : Int = add(x : arg250, y : arg251)\nvar v25 : Int = 698\nassert(x25 == v25, \"Exception -- test case 25 did not pass. x25 = \")\n\nvar arg260 : Int = 945\nvar arg261 : Int = 925\nvar x26 : Int = add(x : arg260, y : arg261)\nvar v26 : Int = 1870\nassert(x26 == v26, \"Exception -- test case 26 did not pass. x26 = \")\n\nvar arg270 : Int = 261\nvar arg271 : Int = 983\nvar x27 : Int = add(x : arg270, y : arg271)\nvar v27 : Int = 1244\nassert(x27 == v27, \"Exception -- test case 27 did not pass. x27 = \")\n\nvar arg280 : Int = 139\nvar arg281 : Int = 577\nvar x28 : Int = add(x : arg280, y : arg281)\nvar v28 : Int = 716\nassert(x28 == v28, \"Exception -- test case 28 did not pass. x28 = \")\n\nvar arg290 : Int = 763\nvar arg291 : Int = 178\nvar x29 : Int = add(x : arg290, y : arg291)\nvar v29 : Int = 941\nassert(x29 == v29, \"Exception -- test case 29 did not pass. x29 = \")\n\nvar arg300 : Int = 147\nvar arg301 : Int = 892\nvar x30 : Int = add(x : arg300, y : arg301)\nvar v30 : Int = 1039\nassert(x30 == v30, \"Exception -- test case 30 did not pass. x30 = \")\n\nvar arg310 : Int = 436\nvar arg311 : Int = 402\nvar x31 : Int = add(x : arg310, y : arg311)\nvar v31 : Int = 838\nassert(x31 == v31, \"Exception -- test case 31 did not pass. x31 = \")\n\nvar arg320 : Int = 610\nvar arg321 : Int = 581\nvar x32 : Int = add(x : arg320, y : arg321)\nvar v32 : Int = 1191\nassert(x32 == v32, \"Exception -- test case 32 did not pass. x32 = \")\n\nvar arg330 : Int = 103\nvar arg331 : Int = 416\nvar x33 : Int = add(x : arg330, y : arg331)\nvar v33 : Int = 519\nassert(x33 == v33, \"Exception -- test case 33 did not pass. x33 = \")\n\nvar arg340 : Int = 339\nvar arg341 : Int = 990\nvar x34 : Int = add(x : arg340, y : arg341)\nvar v34 : Int = 1329\nassert(x34 == v34, \"Exception -- test case 34 did not pass. x34 = \")\n\nvar arg350 : Int = 130\nvar arg351 : Int = 504\nvar x35 : Int = add(x : arg350, y : arg351)\nvar v35 : Int = 634\nassert(x35 == v35, \"Exception -- test case 35 did not pass. x35 = \")\n\nvar arg360 : Int = 242\nvar arg361 : Int = 717\nvar x36 : Int = add(x : arg360, y : arg361)\nvar v36 : Int = 959\nassert(x36 == v36, \"Exception -- test case 36 did not pass. x36 = \")\n\nvar arg370 : Int = 562\nvar arg371 : Int = 110\nvar x37 : Int = add(x : arg370, y : arg371)\nvar v37 : Int = 672\nassert(x37 == v37, \"Exception -- test case 37 did not pass. x37 = \")\n\nvar arg380 : Int = 396\nvar arg381 : Int = 909\nvar x38 : Int = add(x : arg380, y : arg381)\nvar v38 : Int = 1305\nassert(x38 == v38, \"Exception -- test case 38 did not pass. x38 = \")\n\nvar arg390 : Int = 887\nvar arg391 : Int = 703\nvar x39 : Int = add(x : arg390, y : arg391)\nvar v39 : Int = 1590\nassert(x39 == v39, \"Exception -- test case 39 did not pass. x39 = \")\n\nvar arg400 : Int = 870\nvar arg401 : Int = 551\nvar x40 : Int = add(x : arg400, y : arg401)\nvar v40 : Int = 1421\nassert(x40 == v40, \"Exception -- test case 40 did not pass. x40 = \")\n\nvar arg410 : Int = 422\nvar arg411 : Int = 391\nvar x41 : Int = add(x : arg410, y : arg411)\nvar v41 : Int = 813\nassert(x41 == v41, \"Exception -- test case 41 did not pass. x41 = \")\n\nvar arg420 : Int = 299\nvar arg421 : Int = 505\nvar x42 : Int = add(x : arg420, y : arg421)\nvar v42 : Int = 804\nassert(x42 == v42, \"Exception -- test case 42 did not pass. x42 = \")\n\nvar arg430 : Int = 346\nvar arg431 : Int = 56\nvar x43 : Int = add(x : arg430, y : arg431)\nvar v43 : Int = 402\nassert(x43 == v43, \"Exception -- test case 43 did not pass. x43 = \")\n\nvar arg440 : Int = 36\nvar arg441 : Int = 706\nvar x44 : Int = add(x : arg440, y : arg441)\nvar v44 : Int = 742\nassert(x44 == v44, \"Exception -- test case 44 did not pass. x44 = \")\n\nvar arg450 : Int = 738\nvar arg451 : Int = 411\nvar x45 : Int = add(x : arg450, y : arg451)\nvar v45 : Int = 1149\nassert(x45 == v45, \"Exception -- test case 45 did not pass. x45 = \")\n\nvar arg460 : Int = 679\nvar arg461 : Int = 87\nvar x46 : Int = add(x : arg460, y : arg461)\nvar v46 : Int = 766\nassert(x46 == v46, \"Exception -- test case 46 did not pass. x46 = \")\n\nvar arg470 : Int = 25\nvar arg471 : Int = 303\nvar x47 : Int = add(x : arg470, y : arg471)\nvar v47 : Int = 328\nassert(x47 == v47, \"Exception -- test case 47 did not pass. x47 = \")\n\nvar arg480 : Int = 161\nvar arg481 : Int = 612\nvar x48 : Int = add(x : arg480, y : arg481)\nvar v48 : Int = 773\nassert(x48 == v48, \"Exception -- test case 48 did not pass. x48 = \")\n\nvar arg490 : Int = 306\nvar arg491 : Int = 841\nvar x49 : Int = add(x : arg490, y : arg491)\nvar v49 : Int = 1147\nassert(x49 == v49, \"Exception -- test case 49 did not pass. x49 = \")\n\nvar arg500 : Int = 973\nvar arg501 : Int = 411\nvar x50 : Int = add(x : arg500, y : arg501)\nvar v50 : Int = 1384\nassert(x50 == v50, \"Exception -- test case 50 did not pass. x50 = \")\n\nvar arg510 : Int = 711\nvar arg511 : Int = 157\nvar x51 : Int = add(x : arg510, y : arg511)\nvar v51 : Int = 868\nassert(x51 == v51, \"Exception -- test case 51 did not pass. x51 = \")\n\nvar arg520 : Int = 471\nvar arg521 : Int = 27\nvar x52 : Int = add(x : arg520, y : arg521)\nvar v52 : Int = 498\nassert(x52 == v52, \"Exception -- test case 52 did not pass. x52 = \")\n\nvar arg530 : Int = 714\nvar arg531 : Int = 792\nvar x53 : Int = add(x : arg530, y : arg531)\nvar v53 : Int = 1506\nassert(x53 == v53, \"Exception -- test case 53 did not pass. x53 = \")\n\nvar arg540 : Int = 38\nvar arg541 : Int = 206\nvar x54 : Int = add(x : arg540, y : arg541)\nvar v54 : Int = 244\nassert(x54 == v54, \"Exception -- test case 54 did not pass. x54 = \")\n\nvar arg550 : Int = 907\nvar arg551 : Int = 343\nvar x55 : Int = add(x : arg550, y : arg551)\nvar v55 : Int = 1250\nassert(x55 == v55, \"Exception -- test case 55 did not pass. x55 = \")\n\nvar arg560 : Int = 23\nvar arg561 : Int = 760\nvar x56 : Int = add(x : arg560, y : arg561)\nvar v56 : Int = 783\nassert(x56 == v56, \"Exception -- test case 56 did not pass. x56 = \")\n\nvar arg570 : Int = 524\nvar arg571 : Int = 859\nvar x57 : Int = add(x : arg570, y : arg571)\nvar v57 : Int = 1383\nassert(x57 == v57, \"Exception -- test case 57 did not pass. x57 = \")\n\nvar arg580 : Int = 30\nvar arg581 : Int = 529\nvar x58 : Int = add(x : arg580, y : arg581)\nvar v58 : Int = 559\nassert(x58 == v58, \"Exception -- test case 58 did not pass. x58 = \")\n\nvar arg590 : Int = 341\nvar arg591 : Int = 691\nvar x59 : Int = add(x : arg590, y : arg591)\nvar v59 : Int = 1032\nassert(x59 == v59, \"Exception -- test case 59 did not pass. x59 = \")\n\nvar arg600 : Int = 167\nvar arg601 : Int = 729\nvar x60 : Int = add(x : arg600, y : arg601)\nvar v60 : Int = 896\nassert(x60 == v60, \"Exception -- test case 60 did not pass. x60 = \")\n\nvar arg610 : Int = 636\nvar arg611 : Int = 289\nvar x61 : Int = add(x : arg610, y : arg611)\nvar v61 : Int = 925\nassert(x61 == v61, \"Exception -- test case 61 did not pass. x61 = \")\n\nvar arg620 : Int = 503\nvar arg621 : Int = 144\nvar x62 : Int = add(x : arg620, y : arg621)\nvar v62 : Int = 647\nassert(x62 == v62, \"Exception -- test case 62 did not pass. x62 = \")\n\nvar arg630 : Int = 51\nvar arg631 : Int = 985\nvar x63 : Int = add(x : arg630, y : arg631)\nvar v63 : Int = 1036\nassert(x63 == v63, \"Exception -- test case 63 did not pass. x63 = \")\n\nvar arg640 : Int = 287\nvar arg641 : Int = 149\nvar x64 : Int = add(x : arg640, y : arg641)\nvar v64 : Int = 436\nassert(x64 == v64, \"Exception -- test case 64 did not pass. x64 = \")\n\nvar arg650 : Int = 659\nvar arg651 : Int = 75\nvar x65 : Int = add(x : arg650, y : arg651)\nvar v65 : Int = 734\nassert(x65 == v65, \"Exception -- test case 65 did not pass. x65 = \")\n\nvar arg660 : Int = 462\nvar arg661 : Int = 797\nvar x66 : Int = add(x : arg660, y : arg661)\nvar v66 : Int = 1259\nassert(x66 == v66, \"Exception -- test case 66 did not pass. x66 = \")\n\nvar arg670 : Int = 406\nvar arg671 : Int = 141\nvar x67 : Int = add(x : arg670, y : arg671)\nvar v67 : Int = 547\nassert(x67 == v67, \"Exception -- test case 67 did not pass. x67 = \")\n\nvar arg680 : Int = 106\nvar arg681 : Int = 44\nvar x68 : Int = add(x : arg680, y : arg681)\nvar v68 : Int = 150\nassert(x68 == v68, \"Exception -- test case 68 did not pass. x68 = \")\n\nvar arg690 : Int = 300\nvar arg691 : Int = 934\nvar x69 : Int = add(x : arg690, y : arg691)\nvar v69 : Int = 1234\nassert(x69 == v69, \"Exception -- test case 69 did not pass. x69 = \")\n\nvar arg700 : Int = 471\nvar arg701 : Int = 524\nvar x70 : Int = add(x : arg700, y : arg701)\nvar v70 : Int = 995\nassert(x70 == v70, \"Exception -- test case 70 did not pass. x70 = \")\n\nvar arg710 : Int = 122\nvar arg711 : Int = 429\nvar x71 : Int = add(x : arg710, y : arg711)\nvar v71 : Int = 551\nassert(x71 == v71, \"Exception -- test case 71 did not pass. x71 = \")\n\nvar arg720 : Int = 735\nvar arg721 : Int = 195\nvar x72 : Int = add(x : arg720, y : arg721)\nvar v72 : Int = 930\nassert(x72 == v72, \"Exception -- test case 72 did not pass. x72 = \")\n\nvar arg730 : Int = 335\nvar arg731 : Int = 484\nvar x73 : Int = add(x : arg730, y : arg731)\nvar v73 : Int = 819\nassert(x73 == v73, \"Exception -- test case 73 did not pass. x73 = \")\n\nvar arg740 : Int = 28\nvar arg741 : Int = 809\nvar x74 : Int = add(x : arg740, y : arg741)\nvar v74 : Int = 837\nassert(x74 == v74, \"Exception -- test case 74 did not pass. x74 = \")\n\nvar arg750 : Int = 430\nvar arg751 : Int = 20\nvar x75 : Int = add(x : arg750, y : arg751)\nvar v75 : Int = 450\nassert(x75 == v75, \"Exception -- test case 75 did not pass. x75 = \")\n\nvar arg760 : Int = 916\nvar arg761 : Int = 635\nvar x76 : Int = add(x : arg760, y : arg761)\nvar v76 : Int = 1551\nassert(x76 == v76, \"Exception -- test case 76 did not pass. x76 = \")\n\nvar arg770 : Int = 301\nvar arg771 : Int = 999\nvar x77 : Int = add(x : arg770, y : arg771)\nvar v77 : Int = 1300\nassert(x77 == v77, \"Exception -- test case 77 did not pass. x77 = \")\n\nvar arg780 : Int = 454\nvar arg781 : Int = 466\nvar x78 : Int = add(x : arg780, y : arg781)\nvar v78 : Int = 920\nassert(x78 == v78, \"Exception -- test case 78 did not pass. x78 = \")\n\nvar arg790 : Int = 905\nvar arg791 : Int = 259\nvar x79 : Int = add(x : arg790, y : arg791)\nvar v79 : Int = 1164\nassert(x79 == v79, \"Exception -- test case 79 did not pass. x79 = \")\n\nvar arg800 : Int = 168\nvar arg801 : Int = 205\nvar x80 : Int = add(x : arg800, y : arg801)\nvar v80 : Int = 373\nassert(x80 == v80, \"Exception -- test case 80 did not pass. x80 = \")\n\nvar arg810 : Int = 570\nvar arg811 : Int = 434\nvar x81 : Int = add(x : arg810, y : arg811)\nvar v81 : Int = 1004\nassert(x81 == v81, \"Exception -- test case 81 did not pass. x81 = \")\n\nvar arg820 : Int = 64\nvar arg821 : Int = 959\nvar x82 : Int = add(x : arg820, y : arg821)\nvar v82 : Int = 1023\nassert(x82 == v82, \"Exception -- test case 82 did not pass. x82 = \")\n\nvar arg830 : Int = 957\nvar arg831 : Int = 510\nvar x83 : Int = add(x : arg830, y : arg831)\nvar v83 : Int = 1467\nassert(x83 == v83, \"Exception -- test case 83 did not pass. x83 = \")\n\nvar arg840 : Int = 722\nvar arg841 : Int = 598\nvar x84 : Int = add(x : arg840, y : arg841)\nvar v84 : Int = 1320\nassert(x84 == v84, \"Exception -- test case 84 did not pass. x84 = \")\n\nvar arg850 : Int = 770\nvar arg851 : Int = 226\nvar x85 : Int = add(x : arg850, y : arg851)\nvar v85 : Int = 996\nassert(x85 == v85, \"Exception -- test case 85 did not pass. x85 = \")\n\nvar arg860 : Int = 579\nvar arg861 : Int = 66\nvar x86 : Int = add(x : arg860, y : arg861)\nvar v86 : Int = 645\nassert(x86 == v86, \"Exception -- test case 86 did not pass. x86 = \")\n\nvar arg870 : Int = 117\nvar arg871 : Int = 674\nvar x87 : Int = add(x : arg870, y : arg871)\nvar v87 : Int = 791\nassert(x87 == v87, \"Exception -- test case 87 did not pass. x87 = \")\n\nvar arg880 : Int = 530\nvar arg881 : Int = 30\nvar x88 : Int = add(x : arg880, y : arg881)\nvar v88 : Int = 560\nassert(x88 == v88, \"Exception -- test case 88 did not pass. x88 = \")\n\nvar arg890 : Int = 776\nvar arg891 : Int = 345\nvar x89 : Int = add(x : arg890, y : arg891)\nvar v89 : Int = 1121\nassert(x89 == v89, \"Exception -- test case 89 did not pass. x89 = \")\n\nvar arg900 : Int = 327\nvar arg901 : Int = 389\nvar x90 : Int = add(x : arg900, y : arg901)\nvar v90 : Int = 716\nassert(x90 == v90, \"Exception -- test case 90 did not pass. x90 = \")\n\nvar arg910 : Int = 596\nvar arg911 : Int = 12\nvar x91 : Int = add(x : arg910, y : arg911)\nvar v91 : Int = 608\nassert(x91 == v91, \"Exception -- test case 91 did not pass. x91 = \")\n\nvar arg920 : Int = 599\nvar arg921 : Int = 511\nvar x92 : Int = add(x : arg920, y : arg921)\nvar v92 : Int = 1110\nassert(x92 == v92, \"Exception -- test case 92 did not pass. x92 = \")\n\nvar arg930 : Int = 936\nvar arg931 : Int = 476\nvar x93 : Int = add(x : arg930, y : arg931)\nvar v93 : Int = 1412\nassert(x93 == v93, \"Exception -- test case 93 did not pass. x93 = \")\n\nvar arg940 : Int = 461\nvar arg941 : Int = 14\nvar x94 : Int = add(x : arg940, y : arg941)\nvar v94 : Int = 475\nassert(x94 == v94, \"Exception -- test case 94 did not pass. x94 = \")\n\nvar arg950 : Int = 966\nvar arg951 : Int = 157\nvar x95 : Int = add(x : arg950, y : arg951)\nvar v95 : Int = 1123\nassert(x95 == v95, \"Exception -- test case 95 did not pass. x95 = \")\n\nvar arg960 : Int = 326\nvar arg961 : Int = 91\nvar x96 : Int = add(x : arg960, y : arg961)\nvar v96 : Int = 417\nassert(x96 == v96, \"Exception -- test case 96 did not pass. x96 = \")\n\nvar arg970 : Int = 392\nvar arg971 : Int = 455\nvar x97 : Int = add(x : arg970, y : arg971)\nvar v97 : Int = 847\nassert(x97 == v97, \"Exception -- test case 97 did not pass. x97 = \")\n\nvar arg980 : Int = 446\nvar arg981 : Int = 477\nvar x98 : Int = add(x : arg980, y : arg981)\nvar v98 : Int = 923\nassert(x98 == v98, \"Exception -- test case 98 did not pass. x98 = \")\n\nvar arg990 : Int = 324\nvar arg991 : Int = 860\nvar x99 : Int = add(x : arg990, y : arg991)\nvar v99 : Int = 1184\nassert(x99 == v99, \"Exception -- test case 99 did not pass. x99 = \")\n\nvar arg1000 : Int = 945\nvar arg1001 : Int = 85\nvar x100 : Int = add(x : arg1000, y : arg1001)\nvar v100 : Int = 1030\nassert(x100 == v100, \"Exception -- test case 100 did not pass. x100 = \")\n\nvar arg1010 : Int = 886\nvar arg1011 : Int = 582\nvar x101 : Int = add(x : arg1010, y : arg1011)\nvar v101 : Int = 1468\nassert(x101 == v101, \"Exception -- test case 101 did not pass. x101 = \")\n\nvar arg1020 : Int = 886\nvar arg1021 : Int = 712\nvar x102 : Int = add(x : arg1020, y : arg1021)\nvar v102 : Int = 1598\nassert(x102 == v102, \"Exception -- test case 102 did not pass. x102 = \")\n\nvar arg1030 : Int = 842\nvar arg1031 : Int = 953\nvar x103 : Int = add(x : arg1030, y : arg1031)\nvar v103 : Int = 1795\nassert(x103 == v103, \"Exception -- test case 103 did not pass. x103 = \")\n\n", "description": "x மற்றும் y என்ற இரண்டு எண்களைச் சேர்க்கவும். \n>>> சேர் (2,3) \n5....................................................................................................................................................................................................... \n>>> சேர் (5,7) \n12.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/20", "entry_point": "sameChars", "test": "\n\nvar arg00 : String = #\"eabcdzzzz\"#\nvar arg01 : String = #\"dddzzzzzzzddeddabc\"#\nvar x0 : Bool = sameChars(s0 : arg00, s1 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcd\"#\nvar arg11 : String = #\"dddddddabc\"#\nvar x1 : Bool = sameChars(s0 : arg10, s1 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"dddddddabc\"#\nvar arg21 : String = #\"abcd\"#\nvar x2 : Bool = sameChars(s0 : arg20, s1 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"eabcd\"#\nvar arg31 : String = #\"dddddddabc\"#\nvar x3 : Bool = sameChars(s0 : arg30, s1 : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"abcd\"#\nvar arg41 : String = #\"dddddddabcf\"#\nvar x4 : Bool = sameChars(s0 : arg40, s1 : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"eabcdzzzz\"#\nvar arg51 : String = #\"dddzzzzzzzddddabc\"#\nvar x5 : Bool = sameChars(s0 : arg50, s1 : arg51)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"aabb\"#\nvar arg61 : String = #\"aaccc\"#\nvar x6 : Bool = sameChars(s0 : arg60, s1 : arg61)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "இரண்டு சொற்களும் ஒரே எழுத்துக்களைக் கொண்டுள்ளனவா என்று சரிபார்க்கவும். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzuddeddabc') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடிபிசி') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('dddddddabc','abcd') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஈஏபிசிடி','டிடிடிடிடிபிசி') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடாப்ஸ்') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzdddddadbc') \nபொய்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/21", "entry_point": "fib", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = fib(n : arg00)\nvar v0 : Int = 55\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = fib(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Int = fib(n : arg20)\nvar v2 : Int = 21\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 11\nvar x3 : Int = fib(n : arg30)\nvar v3 : Int = 89\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 12\nvar x4 : Int = fib(n : arg40)\nvar v4 : Int = 144\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "n-th ஃபிபோனாச்சி எண்ணைத் திருப்பித் தரவும். \n>>> ஃபைப் (10) \n55 \n>>> ஃபைப் (1) \n1. \n>>> ஃபைப் (8) \n21", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/22", "entry_point": "common", "test": "\n\nvar arg00 : [Int] = [1, 4, 3, 34, 653, 2, 5]\nvar arg01 : [AnyHashable] = [5, 7, 1, 5, 9, 653, 121]\nvar x0 : [AnyHashable] = common(l1 : arg00, l2 : arg01)\nvar v0 : [AnyHashable] = [1, 5, 653]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 3, 2, 8]\nvar arg11 : [AnyHashable] = [3, 2]\nvar x1 : [AnyHashable] = common(l1 : arg10, l2 : arg11)\nvar v1 : [AnyHashable] = [2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 3, 2, 8]\nvar arg21 : [AnyHashable] = [3, 2, 4]\nvar x2 : [AnyHashable] = common(l1 : arg20, l2 : arg21)\nvar v2 : [AnyHashable] = [2, 3, 4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [4, 3, 2, 8]\nvar arg31 : [AnyHashable] = []\nvar x3 : [AnyHashable] = common(l1 : arg30, l2 : arg31)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "இரண்டு பட்டியல்களுக்கு தனித்துவமான பொதுவான கூறுகளை வரிசைப்படுத்துங்கள். \n>> பொதுவான ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>> பொதுவான ([5,3,2,8], [3,2]) \n[2,3]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/23", "entry_point": "largestPrimeFactor", "test": "\n\nvar arg00 : Int = 15\nvar x0 : Int = largestPrimeFactor(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 27\nvar x1 : Int = largestPrimeFactor(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 63\nvar x2 : Int = largestPrimeFactor(n : arg20)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 330\nvar x3 : Int = largestPrimeFactor(n : arg30)\nvar v3 : Int = 11\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 13195\nvar x4 : Int = largestPrimeFactor(n : arg40)\nvar v4 : Int = 29\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "n இன் மிகப்பெரிய பகாக் காரணியை திருப்பிக் கொடுங்கள். n> 1 என்று வைத்துக்கொள்வோம், அது பகாக் காரணி அல்ல. \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (13195) \n29 \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (2048) \n2.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/24", "entry_point": "sumToN", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = sumToN(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = sumToN(n : arg10)\nvar v1 : Int = 21\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Int = sumToN(n : arg20)\nvar v2 : Int = 66\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 30\nvar x3 : Int = sumToN(n : arg30)\nvar v3 : Int = 465\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 100\nvar x4 : Int = sumToN(n : arg40)\nvar v4 : Int = 5050\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "sum _ to _ n என்பது 1 முதல் n வரையிலான எண்களைச் சேர்க்கும் ஒரு சார்பாகும். \n>>> கூட்டுத்தொகை _ முதல் _ வரை (30) \n465 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (100) \n5050 \n>>> கூட்டுத்தொகை _ முதல் _ வரை (5) \n15. \n>>> கூட்டுத்தொகை _ முதல் _ வரை (10) \n55 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (1) \n1.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/25", "entry_point": "derivative", "test": "\n\nvar arg00 : [Int] = [3, 1, 2, 4, 5]\nvar x0 : [AnyHashable] = derivative(xs : arg00)\nvar v0 : [AnyHashable] = [1, 4, 12, 20]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : [AnyHashable] = derivative(xs : arg10)\nvar v1 : [AnyHashable] = [2, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1]\nvar x2 : [AnyHashable] = derivative(xs : arg20)\nvar v2 : [AnyHashable] = [2, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [3, 2, 1, 0, 4]\nvar x3 : [AnyHashable] = derivative(xs : arg30)\nvar v3 : [AnyHashable] = [2, 2, 0, 16]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar x4 : [AnyHashable] = derivative(xs : arg40)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "xs என்பது ஒரு பல்லுறுப்புக்கோவையின் குணகங்களைக் குறிக்கிறது. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nஅதே வடிவத்தில் இந்த பல்லுறுப்புக்கோவையின் திரும்ப வழித்தோன்றல். \n>>> வழித்தோன்றல் ([3,1,2,4,5]) \n[1,4,12,20] \n>>> வழித்தோன்றல் ([1,2,3]) \n[2,6]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/26", "entry_point": "fibfib", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = fibfib(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = fibfib(n : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = fibfib(n : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 8\nvar x3 : Int = fibfib(n : arg30)\nvar v3 : Int = 24\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 10\nvar x4 : Int = fibfib(n : arg40)\nvar v4 : Int = 81\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 12\nvar x5 : Int = fibfib(n : arg50)\nvar v5 : Int = 274\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 14\nvar x6 : Int = fibfib(n : arg60)\nvar v6 : Int = 927\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஃபைப்ஃபைப் எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப்ஃபைப் (0) = = 0 \nஃபைப்ஃபைப் (1) = = 0 \nஃபைப்ஃபைப் (2) = = 1 \nஃபைப்ஃபைப் (n) = = ஃபைப்ஃபைப் (n-1) + ஃபைப்ஃபைப் (n-2) + ஃபைப்ஃபைப் (n-3). \nஃபைப்ஃபைப் எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். \n>>> ஃபைப்ஃபைப் (1) \n0 \n>>> ஃபைப்ஃபைப் (5) \n4. \n>>> ஃபைப்ஃபைப் (8) \n24.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/27", "entry_point": "vowelsCount", "test": "\n\nvar arg00 : String = #\"abcde\"#\nvar x0 : Int = vowelsCount(s : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Alone\"#\nvar x1 : Int = vowelsCount(s : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"key\"#\nvar x2 : Int = vowelsCount(s : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"bye\"#\nvar x3 : Int = vowelsCount(s : arg30)\nvar v3 : Int = 1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"keY\"#\nvar x4 : Int = vowelsCount(s : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"bYe\"#\nvar x5 : Int = vowelsCount(s : arg50)\nvar v5 : Int = 1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"ACEDY\"#\nvar x6 : Int = vowelsCount(s : arg60)\nvar v6 : Int = 3\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஒரு செயல்பாட்டை எழுதுங்கள் உயிரெழுத்துக்கள் _ எண்ணிக்கை இது ஒரு சரத்தை குறிக்கிறது \nஉள்ளீடாக ஒரு சொல் மற்றும் சரத்தில் உள்ள உயிரெழுத்துக்களின் எண்ணிக்கையைத் தருகிறது. \nஇந்த வழக்கில் அச்சுகள்'a','e','i','o','u'. இங்கே,'y'கூட ஒரு \nஉயிரெழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. \n\nஉதாரணம்ஃ \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"அப்ச்டே\") \n2. \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"ACEDY\") \n3.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/28", "entry_point": "search", "test": "\n\nvar arg00 : [Int] = [5, 5, 5, 5, 1]\nvar x0 : Int = search(lst : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 1, 4, 1, 4, 4]\nvar x1 : Int = search(lst : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 3]\nvar x2 : Int = search(lst : arg20)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [8, 8, 8, 8, 8, 8, 8, 8]\nvar x3 : Int = search(lst : arg30)\nvar v3 : Int = 8\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [2, 3, 3, 2, 2]\nvar x4 : Int = search(lst : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]\nvar x5 : Int = search(lst : arg50)\nvar v5 : Int = 1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [3, 2, 8, 2]\nvar x6 : Int = search(lst : arg60)\nvar v6 : Int = 2\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]\nvar x7 : Int = search(lst : arg70)\nvar v7 : Int = 1\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [8, 8, 3, 6, 5, 6, 4]\nvar x8 : Int = search(lst : arg80)\nvar v8 : Int = -1\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Int] = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]\nvar x9 : Int = search(lst : arg90)\nvar v9 : Int = 1\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Int] = [1, 9, 10, 1, 3]\nvar x10 : Int = search(lst : arg100)\nvar v10 : Int = 1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : [Int] = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]\nvar x11 : Int = search(lst : arg110)\nvar v11 : Int = 5\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : [Int] = [1]\nvar x12 : Int = search(lst : arg120)\nvar v12 : Int = 1\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : [Int] = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]\nvar x13 : Int = search(lst : arg130)\nvar v13 : Int = 4\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : [Int] = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]\nvar x14 : Int = search(lst : arg140)\nvar v14 : Int = 2\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : [Int] = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]\nvar x15 : Int = search(lst : arg150)\nvar v15 : Int = 1\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\nvar arg160 : [Int] = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]\nvar x16 : Int = search(lst : arg160)\nvar v16 : Int = 4\nassert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \")\n\nvar arg170 : [Int] = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]\nvar x17 : Int = search(lst : arg170)\nvar v17 : Int = 4\nassert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \")\n\nvar arg180 : [Int] = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]\nvar x18 : Int = search(lst : arg180)\nvar v18 : Int = 2\nassert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \")\n\nvar arg190 : [Int] = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]\nvar x19 : Int = search(lst : arg190)\nvar v19 : Int = -1\nassert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \")\n\nvar arg200 : [Int] = [10]\nvar x20 : Int = search(lst : arg200)\nvar v20 : Int = -1\nassert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \")\n\nvar arg210 : [Int] = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]\nvar x21 : Int = search(lst : arg210)\nvar v21 : Int = 2\nassert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \")\n\nvar arg220 : [Int] = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]\nvar x22 : Int = search(lst : arg220)\nvar v22 : Int = 1\nassert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \")\n\nvar arg230 : [Int] = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]\nvar x23 : Int = search(lst : arg230)\nvar v23 : Int = 1\nassert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \")\n\nvar arg240 : [Int] = [3, 10, 10, 9, 2]\nvar x24 : Int = search(lst : arg240)\nvar v24 : Int = -1\nassert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \")\n\n", "description": "உங்களுக்கு வெற்றிடமற்ற நேர்மறை முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. அதை விட பெரிய முழு எண்ணை கொடுக்கவும். \nபூஜ்ஜியம், மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ அதிர்வெண் உள்ளது. \nஒரு முழு எண்ணின் அதிர்வெண் என்பது அது பட்டியலில் எத்தனை முறை தோன்றுகிறது என்பதாகும். \nஅத்தகைய மதிப்பு இல்லை என்றால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணங்கள்ஃ \nதேடல் ([4,1,2,2,3,1]) = = 2 \nதேடல் ([1,2,3,3,4,4]) = = 3 \nதேடல் ([5,5,4,4]) = =-1", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/29", "entry_point": "triangleArea", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar arg02 : Int = 5\nvar x0 : Double = triangleArea(a : arg00, b : arg01, c : arg02)\nvar v0 : Double = 6.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 10\nvar x1 : Double = triangleArea(a : arg10, b : arg11, c : arg12)\nvar v1 : Double = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 8\nvar arg22 : Int = 5\nvar x2 : Double = triangleArea(a : arg20, b : arg21, c : arg22)\nvar v2 : Double = 8.18\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 2\nvar arg31 : Int = 2\nvar arg32 : Int = 2\nvar x3 : Double = triangleArea(a : arg30, b : arg31, c : arg32)\nvar v3 : Double = 1.73\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 1\nvar arg41 : Int = 2\nvar arg42 : Int = 3\nvar x4 : Double = triangleArea(a : arg40, b : arg41, c : arg42)\nvar v4 : Double = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 10\nvar arg51 : Int = 5\nvar arg52 : Int = 7\nvar x5 : Double = triangleArea(a : arg50, b : arg51, c : arg52)\nvar v5 : Double = 16.25\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 2\nvar arg61 : Int = 6\nvar arg62 : Int = 3\nvar x6 : Double = triangleArea(a : arg60, b : arg61, c : arg62)\nvar v6 : Double = -1\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 1\nvar arg71 : Int = 1\nvar arg72 : Int = 1\nvar x7 : Double = triangleArea(a : arg70, b : arg71, c : arg72)\nvar v7 : Double = 0.43\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 2\nvar arg81 : Int = 2\nvar arg82 : Int = 10\nvar x8 : Double = triangleArea(a : arg80, b : arg81, c : arg82)\nvar v8 : Double = -1\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. \nமூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்கினால் முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமிடப்படுகிறது. \nஇல்லையெனில் திரும்ப-1 \nஏதேனும் இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருக்கும்போது மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. \nமூன்றாவது பக்கத்தை விட. \nஉதாரணம்ஃ \nமுக்கோணப் பரப்பளவு (3,4,5) = = 6 \nமுக்கோணப் பரப்பளவு (1,2,10) = =-1", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/30", "entry_point": "willItFly", "test": "\n\nvar arg00 : [Int] = [3, 2, 3]\nvar arg01 : Int = 9\nvar x0 : Bool = willItFly(q : arg00, w : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : Int = 5\nvar x1 : Bool = willItFly(q : arg10, w : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3]\nvar arg21 : Int = 5\nvar x2 : Bool = willItFly(q : arg20, w : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [3, 2, 3]\nvar arg31 : Int = 1\nvar x3 : Bool = willItFly(q : arg30, w : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1, 2, 3]\nvar arg41 : Int = 6\nvar x4 : Bool = willItFly(q : arg40, w : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [5]\nvar arg51 : Int = 5\nvar x5 : Bool = willItFly(q : arg50, w : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "பொருள் q பறக்கும் என்றால் சரி, இல்லையெனில் தவறு என்று காட்டும் செயல்பாட்டை எழுதுங்கள். \nபொருள் q சமநிலையாக இருந்தால் பறக்கும் (இது ஒரு பாலிண்ட்ரோமிக் பட்டியல்) மற்றும் அதன் உறுப்புகளின் கூட்டுத்தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால். \n\nஉதாரணம்ஃ \nவில் _ இட் _ ஃப்ளை ([1,2], 5) பொய் \n#1 + 2 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 1) பொய் \n#இது சமநிலையானது, ஆனால் 3 + 2 + 3 என்பது அதிகபட்ச எடையை விட அதிகமாகும். \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 9) ட்ரு \n#3 + 2 + 3 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது. \n\nவில் _ இட் _ ஃப்ளை ([3], 5) ட்ரு \n#3 அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/31", "entry_point": "isMultiplyPrime", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Bool = isMultiplyPrime(a : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 30\nvar x1 : Bool = isMultiplyPrime(a : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Bool = isMultiplyPrime(a : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 10\nvar x3 : Bool = isMultiplyPrime(a : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 125\nvar x4 : Bool = isMultiplyPrime(a : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 105\nvar x5 : Bool = isMultiplyPrime(a : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 126\nvar x6 : Bool = isMultiplyPrime(a : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 729\nvar x7 : Bool = isMultiplyPrime(a : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 891\nvar x8 : Bool = isMultiplyPrime(a : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1001\nvar x9 : Bool = isMultiplyPrime(a : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "கொடுக்கப்பட்ட எண் 3 பகா எண்களின் பெருக்கமாக இருந்தால் உண்மை என்று திரும்பும் செயல்பாட்டை எழுதுங்கள். \nஇல்லையெனில் பொய்யானது. \n(அ) என்பது 100க்கும் குறைவானது என்பதை அறிவது. \nஉதாரணம்ஃ \nபெருக்கல் பகா எண் (30) = = உண்மை \n30 = 2 * 3 * 5", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/32", "entry_point": "decimalToBinary", "test": "\n\nvar arg00 : Int = 0\nvar x0 : String = decimalToBinary(decimal : arg00)\nvar v0 : String = #\"db0db\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 32\nvar x1 : String = decimalToBinary(decimal : arg10)\nvar v1 : String = #\"db100000db\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 103\nvar x2 : String = decimalToBinary(decimal : arg20)\nvar v2 : String = #\"db1100111db\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 15\nvar x3 : String = decimalToBinary(decimal : arg30)\nvar v3 : String = #\"db1111db\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "உங்களுக்கு தசம வடிவத்தில் ஒரு எண் வழங்கப்படும், அதை ஒரு எண்ணாக மாற்றுவதே உங்கள் பணியாகும். \nபைனரி வடிவம். செயல்பாடு ஒரு சரத்தைத் திருப்ப வேண்டும், ஒவ்வொரு எழுத்தும் ஒரு பைனரியைக் குறிக்கும் \nஎண். சரத்தில் உள்ள ஒவ்வொரு எழுத்தும்'0'அல்லது'1'ஆக இருக்கும். \n\nசரத்தின் தொடக்கத்திலும் முடிவிலும் கூடுதலாக இரண்டு எழுத்துக்கள்'db'இருக்கும். \nவடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன. \n\nஉதாரணங்கள்ஃ \nடெசிமல் _ டு _ பைனரி (15) #\"db1111db\" ஐத் தருகிறது \nடெசிமல் _ டு _ பைனரி (32) #\"db100000db\" ஐத் தருகிறது", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/33", "entry_point": "isHappy", "test": "\n\nvar arg00 : String = #\"a\"#\nvar x0 : Bool = isHappy(s : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aa\"#\nvar x1 : Bool = isHappy(s : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcd\"#\nvar x2 : Bool = isHappy(s : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"aabb\"#\nvar x3 : Bool = isHappy(s : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"adb\"#\nvar x4 : Bool = isHappy(s : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"xyy\"#\nvar x5 : Bool = isHappy(s : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"iopaxpoi\"#\nvar x6 : Bool = isHappy(s : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"iopaxioi\"#\nvar x7 : Bool = isHappy(s : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nசரம் மகிழ்ச்சியாக உள்ளதா இல்லையா என்பதைச் சரிபார்ப்பது உங்கள் பணியாகும். \nஒரு சரத்தின் நீளம் குறைந்தது 3 ஆகவும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் தனித்துவமாகவும் இருந்தால் அது மகிழ்ச்சியாக இருக்கும். \nஉதாரணத்திற்குஃ \nமகிழ்ச்சியாக உள்ளது (a) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏஏ) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏபிசிடி) => உண்மை \nமகிழ்ச்சியாக உள்ளது (ஆப்) => பொய் \nமகிழ்ச்சியாக உள்ளது (adb) => உண்மை \nமகிழ்ச்சியாக உள்ளது (xyy) => தவறு", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/34", "entry_point": "numericalLetterGrade", "test": "\n\nvar arg00 : [Double] = [4.0, 3, 1.7, 2, 3.5]\nvar x0 : [String] = numericalLetterGrade(grades : arg00)\nvar v0 : [String] = [#\"A+\"#, #\"B\"#, #\"C-\"#, #\"C\"#, #\"A-\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [1.2]\nvar x1 : [String] = numericalLetterGrade(grades : arg10)\nvar v1 : [String] = [#\"D+\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [0.5]\nvar x2 : [String] = numericalLetterGrade(grades : arg20)\nvar v2 : [String] = [#\"D-\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [0.0]\nvar x3 : [String] = numericalLetterGrade(grades : arg30)\nvar v3 : [String] = [#\"E\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [1, 0.3, 1.5, 2.8, 3.3]\nvar x4 : [String] = numericalLetterGrade(grades : arg40)\nvar v4 : [String] = [#\"D\"#, #\"D-\"#, #\"C-\"#, #\"B\"#, #\"B+\"#]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Double] = [0, 0.7]\nvar x5 : [String] = numericalLetterGrade(grades : arg50)\nvar v5 : [String] = [#\"E\"#, #\"D-\"#]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் தரங்களை வழங்க வேண்டும். \nமாணவர்களுக்கு. ஆசிரியர் தரப்படுத்தலுக்கான தனது சொந்த வழிமுறையை உருவாக்கி வருகிறார். \nஒரே பிரச்சனை என்னவென்றால், தரப்படுத்துவதற்கு அவர் பயன்படுத்திய குறியீட்டை அவர் இழந்துவிட்டார். \nசில மாணவர்களுக்கான ஜி. பி. ஏ. களின் பட்டியலை அவர் உங்களுக்கு வழங்கியுள்ளார், நீங்கள் எழுத வேண்டும். \nபின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் பட்டியலை வெளியிடக்கூடிய ஒரு செயல்பாடுஃ \nஜிபிஏ | எழுத்து தரம் \n4. 0 ஏ + \n> 3.7 ஏ \n> 3.3 ஏ-\n> 3 பி + \n> 2.7 பி \n> 2.3 பி-\n> 2 சி + \n> 1.7 டிகிரி செல். \n> 1.3 சி-\n> 1. 0 டி + \n> 0.7 டி \n> 0.0 டி-\n0. 0 ஈ \n\nஉதாரணம்ஃ \nதரச் சமன்பாடு ([4.0,3,17,2,3,5]) = => ['A +','B','C-','C','A -']", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/35", "entry_point": "primeLength", "test": "\n\nvar arg00 : String = #\"Hello\"#\nvar x0 : Bool = primeLength(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdcba\"#\nvar x1 : Bool = primeLength(string : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"kittens\"#\nvar x2 : Bool = primeLength(string : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"orange\"#\nvar x3 : Bool = primeLength(string : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"wow\"#\nvar x4 : Bool = primeLength(string : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"world\"#\nvar x5 : Bool = primeLength(string : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"MadaM\"#\nvar x6 : Bool = primeLength(string : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"Wow\"#\nvar x7 : Bool = primeLength(string : arg70)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"\"#\nvar x8 : Bool = primeLength(string : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"HI\"#\nvar x9 : Bool = primeLength(string : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"go\"#\nvar x10 : Bool = primeLength(string : arg100)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"gogo\"#\nvar x11 : Bool = primeLength(string : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"aaaaaaaaaaaaaaa\"#\nvar x12 : Bool = primeLength(string : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : String = #\"Madam\"#\nvar x13 : Bool = primeLength(string : arg130)\nvar v13 : Bool = true\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\nvar arg140 : String = #\"M\"#\nvar x14 : Bool = primeLength(string : arg140)\nvar v14 : Bool = false\nassert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \")\n\nvar arg150 : String = #\"0\"#\nvar x15 : Bool = primeLength(string : arg150)\nvar v15 : Bool = false\nassert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \")\n\n", "description": "ஒரு சரத்தை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள், சரம் இருந்தால் சரி என்று திருப்பித் தருகிறது \nநீளம் ஒரு பகா எண் அல்லது இல்லையெனில் தவறு \nஉதாரணங்கள் \nபகா நீளம் ('ஹலோ') = = உண்மை \nபகா நீளம் ('abcdcba') = = உண்மை \nபகா நீளம் ('பூனைகள்') = = உண்மை \nபகா நீளம் ('ஆரஞ்சு') = = தவறு", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/36", "entry_point": "solve", "test": "\n\nvar arg00 : Int = 1000\nvar x0 : String = solve(n : arg00)\nvar v0 : String = #\"1\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 150\nvar x1 : String = solve(n : arg10)\nvar v1 : String = #\"110\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 147\nvar x2 : String = solve(n : arg20)\nvar v2 : String = #\"1100\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 333\nvar x3 : String = solve(n : arg30)\nvar v3 : String = #\"1001\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 963\nvar x4 : String = solve(n : arg40)\nvar v4 : String = #\"10010\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த கூட்டுத்தொகையை பைனரியில் திருப்பித் தரவும். \n\nஉதாரணம் \nN = 1000 க்கு, இலக்கங்களின் கூட்டுத்தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். \nN = 150 க்கு, இலக்கங்களின் கூட்டுத்தொகை 6 ஆகவும், வெளியீடு \"110\" ஆகவும் இருக்க வேண்டும். \nN = 147 க்கு, இலக்கங்களின் கூட்டுத்தொகை 12 ஆகவும், வெளியீடு \"1100\" ஆகவும் இருக்க வேண்டும். \n\nமாறுபாடுகள்ஃ \n@N முழு எண் \nகட்டுப்பாடுகள்ஃ 0 ≤ N ≤ 10000. \nவெளியீடுஃ \nபைனரி எண்ணின் சரம்", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/37", "entry_point": "getRow", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar arg01 : Int = 1\nvar x0 : [AnyHashable] = getRow(lst : arg00, x : arg01)\nvar v0 : [AnyHashable] = []\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[1]]\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = getRow(lst : arg10, x : arg11)\nvar v1 : [AnyHashable] = []\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[], [1], [1, 2, 3]]\nvar arg21 : Int = 3\nvar x2 : [AnyHashable] = getRow(lst : arg20, x : arg21)\nvar v2 : [AnyHashable] = [[2, 2]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "உங்களுக்கு ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியல்களாக வழங்கப்படுகிறது, \nஇது மேட்ரிக்ஸைப் போன்றது, இருப்பினும், மேட்ரிக்ஸ்களைப் போலல்லாமல், \nஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். \nகொடுக்கப்பட்ட lst மற்றும் முழு எண் x, பட்டியலில் உள்ள x முழு எண்களைக் கண்டறியவும், \nமற்றும் டப்பிள்களின் திரும்பும் பட்டியல், [(x1, y1), (x2, y2)...] \nஒவ்வொரு டுபிலும் ஒரு ஒருங்கிணைப்பு-(வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. \nஏறுவரிசையில் வரிசைகளால் ஆரம்பத்தில் ஆயங்களை வரிசைப்படுத்துங்கள். \nமேலும், வரிசையின் ஆயத்தொகுதிகளை நெடுவரிசைகளால் இறங்கு வரிசையில் வரிசைப்படுத்துங்கள். \n\nஉதாரணங்கள்ஃ \nவரிசை பெறு (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nபெற _ வரிசை ([], 1) = = [] \nபெற _ வரிசை ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/38", "entry_point": "nextSmallest", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4, 5]\nvar x0 : AnyHashable = nextSmallest(lst : arg00)\nvar v0 : AnyHashable = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 1, 4, 3, 2]\nvar x1 : AnyHashable = nextSmallest(lst : arg10)\nvar v1 : AnyHashable = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = []\nvar x2 : AnyHashable = nextSmallest(lst : arg20)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, 1]\nvar x3 : AnyHashable = nextSmallest(lst : arg30)\nvar v3 : AnyHashable = \"none\"\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, 1, 1, 1, 0]\nvar x4 : AnyHashable = nextSmallest(lst : arg40)\nvar v4 : AnyHashable = 1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1, 1]\nvar x5 : AnyHashable = nextSmallest(lst : arg50)\nvar v5 : AnyHashable = \"none\"\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [-35, 34, 12, -45]\nvar x6 : AnyHashable = nextSmallest(lst : arg60)\nvar v6 : AnyHashable = -35\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nபட்டியலின் 2 வது மிகச்சிறிய உறுப்பைத் தரும் அடுத்த _ மிகச்சிறிய () செயல்பாட்டை எழுதுங்கள். \nஅத்தகைய உறுப்பு இல்லையென்றால் பூஜ்யத்தைத் திருப்பவும். \n\nஅடுத்தது _ மிகச்சிறியது ([1,2,3,4,5]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([5,1,4,3,2]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([]) = = எதுவும் இல்லை \nஅடுத்தது _ மிகச்சிறியது ([1,1]) = = எதுவும் இல்லை", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/39", "entry_point": "isBored", "test": "\n\nvar arg00 : String = #\"Hello world\"#\nvar x0 : Int = isBored(s : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Is the sky blue?\"#\nvar x1 : Int = isBored(s : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"I love It !\"#\nvar x2 : Int = isBored(s : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"bIt\"#\nvar x3 : Int = isBored(s : arg30)\nvar v3 : Int = 0\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"I feel good today. I will be productive. will kill It\"#\nvar x4 : Int = isBored(s : arg40)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"You and I are going for a walk\"#\nvar x5 : Int = isBored(s : arg50)\nvar v5 : Int = 0\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "உங்களுக்கு வார்த்தைகளின் சரம் வழங்கப்படும், மேலும் உங்கள் பணி எண்ணிக்கையை எண்ணுவதாகும். \nசலிப்பு. சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். \nவாக்கியங்கள் '.', '?'அல்லது '!'ஆகியவற்றால் வரையறுக்கப்படுகின்றன. \n\nஉதாரணத்திற்குஃ \n>>> பரவாயில்லை (\"ஹலோ வேர்ல்ட்\") \n0 \n>>> பரவாயில்லை (\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. எனக்கு இந்த வானிலை பிடிக்கும்\") \n1.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/40", "entry_point": "skjkasdkd", "test": "\n\nvar arg00 : [Int] = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nvar x0 : Int = skjkasdkd(lst : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nvar x1 : Int = skjkasdkd(lst : arg10)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nvar x2 : Int = skjkasdkd(lst : arg20)\nvar v2 : Int = 13\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nvar x3 : Int = skjkasdkd(lst : arg30)\nvar v3 : Int = 11\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [0, 81, 12, 3, 1, 21]\nvar x4 : Int = skjkasdkd(lst : arg40)\nvar v4 : Int = 3\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [0, 8, 1, 2, 1, 7]\nvar x5 : Int = skjkasdkd(lst : arg50)\nvar v5 : Int = 7\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [8191]\nvar x6 : Int = skjkasdkd(lst : arg60)\nvar v6 : Int = 19\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [8191, 123456, 127, 7]\nvar x7 : Int = skjkasdkd(lst : arg70)\nvar v7 : Int = 19\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [127, 97, 8192]\nvar x8 : Int = skjkasdkd(lst : arg80)\nvar v8 : Int = 10\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nநீங்கள் மிகப்பெரிய பகா மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] க்கு வெளியீடு 10 ஆக இருக்க வேண்டும். \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] க்கு வெளியீடு 25 ஆக இருக்க வேண்டும். \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] க்கு வெளியீடு 13 ஆக இருக்க வேண்டும். \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] க்கு வெளியீடு 11 ஆக இருக்க வேண்டும். \nlst = [0,81,12, 3,1,21] க்கு வெளியீடு 3 ஆக இருக்க வேண்டும். \nlst = [0,8,1, 2,1,7] க்கு வெளியீடு 7 ஆக இருக்க வேண்டும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/41", "entry_point": "checkDictCase", "test": "\n\nvar arg00 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, #\"b\"# : #\"banana\"#]\nvar x0 : Bool = checkDictCase(dict : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, #\"A\"# : #\"banana\"#, #\"B\"# : #\"banana\"#]\nvar x1 : Bool = checkDictCase(dict : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable: AnyHashable] = [#\"p\"# : #\"pineapple\"#, 5 : #\"banana\"#, #\"a\"# : #\"apple\"#]\nvar x2 : Bool = checkDictCase(dict : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable: AnyHashable] = [#\"Name\"# : #\"John\"#, #\"Age\"# : #\"36\"#, #\"City\"# : #\"Houston\"#]\nvar x3 : Bool = checkDictCase(dict : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable: AnyHashable] = [#\"STATE\"# : #\"NC\"#, #\"ZIP\"# : #\"12345\"#]\nvar x4 : Bool = checkDictCase(dict : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable: AnyHashable] = [#\"fruit\"# : #\"Orange\"#, #\"taste\"# : #\"Sweet\"#]\nvar x5 : Bool = checkDictCase(dict : arg50)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable: AnyHashable] = []\nvar x6 : Bool = checkDictCase(dict : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஒரு அகராதியைக் கொடுத்தால், அனைத்து விசைகளும் கீழே உள்ள சரங்களாக இருந்தால் சரி என்று திருப்பித் தரவும். \nவழக்கு அல்லது அனைத்து விசைகளும் பெரிய வழக்கில் சரங்கள், இல்லையெனில் தவறானது. \nகொடுக்கப்பட்ட அகராதி காலியாக இருப்பதால் செயல்பாடு தவறாக திரும்ப வேண்டும். \nஉதாரணங்கள்ஃ \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"b\": \"வாழைப்பழம்\"}) சரி என்று திரும்ப வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"A\": \"வாழைப்பழம்\", \"B\": \"வாழைப்பழம்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", 8: \"வாழைப்பழம்\", \"a\": \"ஆப்பிள்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"பெயர்\": \"ஜான்\", \"வயது\": \"36\", \"சிட்டி\": \"ஹூஸ்டன்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) சரி என்று திரும்ப வேண்டும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/42", "entry_point": "closestInteger", "test": "\n\nvar arg00 : String = #\"10\"#\nvar x0 : Int = closestInteger(value : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"14.5\"#\nvar x1 : Int = closestInteger(value : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"-15.5\"#\nvar x2 : Int = closestInteger(value : arg20)\nvar v2 : Int = -16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"15.3\"#\nvar x3 : Int = closestInteger(value : arg30)\nvar v3 : Int = 15\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"0\"#\nvar x4 : Int = closestInteger(value : arg40)\nvar v4 : Int = 0\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "ஒரு எண்ணைக் குறிக்கும் மதிப்பை (சரம்) எடுக்கும் செயல்பாட்டை உருவாக்கவும் \nஅதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தருகிறது. எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். \n\nஉதாரணங்கள் \n>>> நெருங்கிய முழு எண் (\"10\") \n10. \n>>> நெருங்கிய முழு எண் (\"15.3\") \n15. \n\nகுறிப்புஃ \nபூஜ்ஜியத்திலிருந்து வட்டமிடுவது என்பது கொடுக்கப்பட்ட எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, நீங்கள் திருப்பித் தர வேண்டிய ஒன்று \nபூஜ்ஜியத்திலிருந்து மிகத் தொலைவில் உள்ளது. எடுத்துக்காட்டாக, அருகிலுள்ள முழு எண் (\"14.5\") இருக்க வேண்டும். \n15 ஐத் திருப்பி, அருகிலுள்ள முழு எண் (\"-14.5\")-15 ஐத் திருப்பித் தர வேண்டும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/43", "entry_point": "makeAPile", "test": "\n\nvar arg00 : Int = 3\nvar x0 : [Int] = makeAPile(n : arg00)\nvar v0 : [Int] = [3, 5, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : [Int] = makeAPile(n : arg10)\nvar v1 : [Int] = [4, 6, 8, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : [Int] = makeAPile(n : arg20)\nvar v2 : [Int] = [5, 7, 9, 11, 13]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 6\nvar x3 : [Int] = makeAPile(n : arg30)\nvar v3 : [Int] = [6, 8, 10, 12, 14, 16]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 8\nvar x4 : [Int] = makeAPile(n : arg40)\nvar v4 : [Int] = [8, 10, 12, 14, 16, 18, 20, 22]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலைகளின் கற்களின் குவியலை உருவாக்க வேண்டும். \nமுதல் மட்டத்தில் n கற்கள் உள்ளன. \nஅடுத்த கட்டத்தில் உள்ள கற்களின் எண்ணிக்கை பின்வருமாறுஃ \n- n ஒற்றைப்படை என்றால் அடுத்த ஒற்றைப்படை எண். \n- n சமமாக இருந்தால் அடுத்த சம எண். \nஒரு பட்டியலில் உள்ள ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் திருப்பித் தரவும், அங்கு குறியீட்டில் உள்ள உறுப்பு \ni என்பது மட்டத்தில் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது (i + 1). \n\nஉதாரணங்கள்ஃ \n>>> ஒரு குவியலை உருவாக்குங்கள் (3) \n[3,5,7]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/44", "entry_point": "wordsString", "test": "\n\nvar arg00 : String = #\"Hi, my name is John\"#\nvar x0 : [AnyHashable] = wordsString(s : arg00)\nvar v0 : [AnyHashable] = [#\"Hi\"#, #\"my\"#, #\"name\"#, #\"is\"#, #\"John\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"One, two, three, four, five, six\"#\nvar x1 : [AnyHashable] = wordsString(s : arg10)\nvar v1 : [AnyHashable] = [#\"One\"#, #\"two\"#, #\"three\"#, #\"four\"#, #\"five\"#, #\"six\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Hi, my name\"#\nvar x2 : [AnyHashable] = wordsString(s : arg20)\nvar v2 : [AnyHashable] = [#\"Hi\"#, #\"my\"#, #\"name\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"One,, two, three, four, five, six,\"#\nvar x3 : [AnyHashable] = wordsString(s : arg30)\nvar v3 : [AnyHashable] = [#\"One\"#, #\"two\"#, #\"three\"#, #\"four\"#, #\"five\"#, #\"six\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"\"#\nvar x4 : [AnyHashable] = wordsString(s : arg40)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"ahmed     , gamal\"#\nvar x5 : [AnyHashable] = wordsString(s : arg50)\nvar v5 : [AnyHashable] = [#\"ahmed\"#, #\"gamal\"#]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட சொற்களின் சரம் உங்களுக்கு வழங்கப்படும். உங்கள் பணி \nசரத்தை வார்த்தைகளாகப் பிரிக்கவும், சொற்களின் வரிசையைத் திருப்பவும். \n\nஉதாரணத்திற்குஃ \nசொற்கள் _ சரம் (\"ஹாய், என் பெயர் ஜான்\") = = [\"ஹாய்\", \"என்\", \"பெயர்\", \"\", ஜான் \"] \nசொற்கள் _ சரம் (\"ஒன்று, இரண்டு, மூன்று, நான்கு, ஐந்து, ஆறு\") = = [\"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\"]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/45", "entry_point": "chooseNum", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : Int = 15\nvar x0 : Int = chooseNum(x : arg00, y : arg01)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 13\nvar arg11 : Int = 12\nvar x1 : Int = chooseNum(x : arg10, y : arg11)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 33\nvar arg21 : Int = 12354\nvar x2 : Int = chooseNum(x : arg20, y : arg21)\nvar v2 : Int = 12354\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5234\nvar arg31 : Int = 5233\nvar x3 : Int = chooseNum(x : arg30, y : arg31)\nvar v3 : Int = -1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 6\nvar arg41 : Int = 29\nvar x4 : Int = chooseNum(x : arg40, y : arg41)\nvar v4 : Int = 28\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 27\nvar arg51 : Int = 10\nvar x5 : Int = chooseNum(x : arg50, y : arg51)\nvar v5 : Int = -1\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 7\nvar arg61 : Int = 7\nvar x6 : Int = chooseNum(x : arg60, y : arg61)\nvar v6 : Int = -1\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 546\nvar arg71 : Int = 546\nvar x7 : Int = chooseNum(x : arg70, y : arg71)\nvar v7 : Int = 546\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "இந்த சார்பு x மற்றும் y என்ற இரண்டு நேர்மறை எண்களை எடுத்து, \n[x, y] வரம்பில் உள்ள மிகப் பெரிய இரட்டை முழு எண். \nஅத்தகைய எண் இல்லை, பின்னர் செயல்பாடு-1 ஐத் திருப்ப வேண்டும். \n\nஉதாரணத்திற்குஃ \nதேர்வு செய்க (12,15) = 14 \nதேர்வு செய்க (13,12) =-1", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/46", "entry_point": "roundedAvg", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar x0 : AnyHashable = roundedAvg(n : arg00, m : arg01)\nvar v0 : AnyHashable = #\"0b11\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar arg11 : Int = 13\nvar x1 : AnyHashable = roundedAvg(n : arg10, m : arg11)\nvar v1 : AnyHashable = #\"0b1010\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 964\nvar arg21 : Int = 977\nvar x2 : AnyHashable = roundedAvg(n : arg20, m : arg21)\nvar v2 : AnyHashable = #\"0b1111001010\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 996\nvar arg31 : Int = 997\nvar x3 : AnyHashable = roundedAvg(n : arg30, m : arg31)\nvar v3 : AnyHashable = #\"0b1111100100\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 560\nvar arg41 : Int = 851\nvar x4 : AnyHashable = roundedAvg(n : arg40, m : arg41)\nvar v4 : AnyHashable = #\"0b1011000010\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 185\nvar arg51 : Int = 546\nvar x5 : AnyHashable = roundedAvg(n : arg50, m : arg51)\nvar v5 : AnyHashable = #\"0b101101110\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 362\nvar arg61 : Int = 496\nvar x6 : AnyHashable = roundedAvg(n : arg60, m : arg61)\nvar v6 : AnyHashable = #\"0b110101101\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 350\nvar arg71 : Int = 902\nvar x7 : AnyHashable = roundedAvg(n : arg70, m : arg71)\nvar v7 : AnyHashable = #\"0b1001110010\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 197\nvar arg81 : Int = 233\nvar x8 : AnyHashable = roundedAvg(n : arg80, m : arg81)\nvar v8 : AnyHashable = #\"0b11010111\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 7\nvar arg91 : Int = 5\nvar x9 : AnyHashable = roundedAvg(n : arg90, m : arg91)\nvar v9 : AnyHashable = -1\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 5\nvar arg101 : Int = 1\nvar x10 : AnyHashable = roundedAvg(n : arg100, m : arg101)\nvar v10 : AnyHashable = -1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 5\nvar arg111 : Int = 5\nvar x11 : AnyHashable = roundedAvg(n : arg110, m : arg111)\nvar v11 : AnyHashable = #\"0b101\"#\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\n", "description": "உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m வழங்கப்படுகின்றன, மேலும் உங்கள் பணி கணக்கிடுவதாகும் \nn முதல் m வரையிலான முழு எண்களின் சராசரி (n மற்றும் m உட்பட). \nஅருகிலுள்ள முழு எண்ணுக்கு பதிலை வட்டமிட்டு அதை பைனரியாக மாற்றவும். \nn என்பது m ஐ விட அதிகமாக இருந்தால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணம்ஃ \nவட்டமான _ avg (1,5) => \"0b11\" \nவட்டமான (7,5) =>-1 \nவட்டமான _ அவ்ஜி (10,20) => \"0பி1111\" \nவட்டமான _ avg (20,33) => \"0b11010\"", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/47", "entry_point": "f", "test": "\n\nvar arg00 : Int = 5\nvar x0 : [Int] = f(n : arg00)\nvar v0 : [Int] = [1, 2, 6, 24, 15]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : [Int] = f(n : arg10)\nvar v1 : [Int] = [1, 2, 6, 24, 15, 720, 28]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : [Int] = f(n : arg20)\nvar v2 : [Int] = [1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 3\nvar x3 : [Int] = f(n : arg30)\nvar v3 : [Int] = [1, 2, 6]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "n ஐ ஒரு அளவுருவாக எடுக்கும் f செயல்பாட்டை செயல்படுத்தவும், \nமற்றும் அளவு n இன் பட்டியலைத் திருப்பித் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணியாக இருந்தால் i சமமாக இருந்தால் \nஅல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை. \nநான் 1 இல் தொடங்குகிறேன். \ni இன் காரணி என்பது 1 முதல் i (1 * 2 *... * i) வரையிலான எண்களின் பெருக்கமாகும். \nஉதாரணம்ஃ \nf (5) = = [1,2,6,24,15]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/48", "entry_point": "evenOddPalindrome", "test": "\n\nvar arg00 : Int = 123\nvar x0 : [Int] = evenOddPalindrome(n : arg00)\nvar v0 : [Int] = [8, 13]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : [Int] = evenOddPalindrome(n : arg10)\nvar v1 : [Int] = [4, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : [Int] = evenOddPalindrome(n : arg20)\nvar v2 : [Int] = [1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 63\nvar x3 : [Int] = evenOddPalindrome(n : arg30)\nvar v3 : [Int] = [6, 8]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 25\nvar x4 : [Int] = evenOddPalindrome(n : arg40)\nvar v4 : [Int] = [5, 6]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 19\nvar x5 : [Int] = evenOddPalindrome(n : arg50)\nvar v5 : [Int] = [4, 6]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 9\nvar x6 : [Int] = evenOddPalindrome(n : arg60)\nvar v6 : [Int] = [4, 5]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 1\nvar x7 : [Int] = evenOddPalindrome(n : arg70)\nvar v7 : [Int] = [0, 1]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், சம மற்றும் ஒற்றைப்படை எண்ணிக்கையைக் கொண்ட ஒரு டுபிலைத் திருப்பவும் \n(1, n) வரம்பிற்குள் வரும் முழு எண் பாலிண்ட்ரோம்கள் உட்பட. \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ 3 \nவெளியீடுஃ (1,2) \nவிளக்கம்ஃ \nமுழு எண் பாலிண்ட்ரோம் 1,2,3. அவற்றில் ஒன்று சமம், அவற்றில் இரண்டு ஒற்றைப்படை. \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ 12 \nவெளியீடுஃ (4,6) \nவிளக்கம்ஃ \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவற்றில் நான்கு சமமானவை, அவற்றில் 6 ஒற்றைப்படை. \n\nகுறிப்புஃ \n1. 1 <= n <= 10 3 \n2. திரும்பிய டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு எண் பாலிண்ட்ரோம்களின் எண்ணிக்கையைக் கொண்டுள்ளது.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/49", "entry_point": "moveOneBall", "test": "\n\nvar arg00 : [AnyHashable] = [3, 4, 5, 1, 2]\nvar x0 : Bool = moveOneBall(arr : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [3, 5, 10, 1, 2]\nvar x1 : Bool = moveOneBall(arr : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [4, 3, 1, 2]\nvar x2 : Bool = moveOneBall(arr : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [3, 5, 4, 1, 2]\nvar x3 : Bool = moveOneBall(arr : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = []\nvar x4 : Bool = moveOneBall(arr : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "நம்மிடம் n முழு எண்களின் வரிசை'arr'உள்ளது arr [1], arr [2],..., arr [N]. \nவரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். என்பதைத் தீர்மானிப்பதே உங்கள் பணி \nசெயல்பாட்டின் மூலம் ஒரு வரிசையை குறைக்காத வரிசையில் வரிசைப்படுத்த முடியும் \nகொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ \nஎத்தனை முறை வேண்டுமானாலும் சரியான ஷிப்ட் செயல்பாட்டைச் செய்ய நீங்கள் அனுமதிக்கப்படுகிறீர்கள். \n\nஒரு வலது ஷிப்ட் செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் ஒன்றால் மாற்றுவதாகும். \nசரியான திசையில் நிலை. வரிசையின் கடைசி உறுப்பு நகர்த்தப்படும் \nவரிசையில் தொடக்க நிலை அதாவது 0 வது குறியீடு. \n\nமேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் \nபின்னர் ட்ரு இல்லையெனில் ஃபால்ஸ் என்று திருப்பிக் கொடுங்கள். \nகொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், சரி என்று திருப்பி விடுங்கள். \n\nகுறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பது உறுதி செய்யப்படுகிறது. \n\nஉதாரணத்திற்குஃ \n\nமூவ் ஒன் பந்து ([3,4,5,1,2]) = => உண்மை \nவிளக்கம்ஃ 2 வலது ஷிப்ட் செயல்பாடுகளில் செயல்படுவதன் மூலம், குறைக்கப்படாத வரிசை முடியும் \nகொடுக்கப்பட்ட வரிசைக்கு அடைய வேண்டும். \nமூவ் ஒன் பந்து ([3,5,4,1,2]) = => பொய் \nவிளக்கம்ஃ கொடுக்கப்பட்ட ஆர்டருக்கு குறைக்கப்படாத ஆர்டரைப் பெற முடியாது \nஎந்த எண்ணிக்கையிலான சரியான ஷிப்ட் செயல்பாடுகளைச் செய்வதன் மூலம் வரிசை.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/50", "entry_point": "exchange", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar arg01 : [Int] = [1, 2, 3, 4]\nvar x0 : String = exchange(lst1 : arg00, lst2 : arg01)\nvar v0 : String = #\"YES\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [1, 5, 3, 4]\nvar x1 : String = exchange(lst1 : arg10, lst2 : arg11)\nvar v1 : String = #\"NO\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar arg21 : [Int] = [2, 1, 4, 3]\nvar x2 : String = exchange(lst1 : arg20, lst2 : arg21)\nvar v2 : String = #\"YES\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [5, 7, 3]\nvar arg31 : [Int] = [2, 6, 4]\nvar x3 : String = exchange(lst1 : arg30, lst2 : arg31)\nvar v3 : String = #\"YES\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [5, 7, 3]\nvar arg41 : [Int] = [2, 6, 3]\nvar x4 : String = exchange(lst1 : arg40, lst2 : arg41)\nvar v4 : String = #\"NO\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [3, 2, 6, 1, 8, 9]\nvar arg51 : [Int] = [3, 5, 5, 1, 1, 1]\nvar x5 : String = exchange(lst1 : arg50, lst2 : arg51)\nvar v5 : String = #\"NO\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [100, 200]\nvar arg61 : [Int] = [200, 200]\nvar x6 : String = exchange(lst1 : arg60, lst2 : arg61)\nvar v6 : String = #\"YES\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "இந்த சிக்கலில், எண்களின் இரண்டு பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை நீங்கள் செயல்படுத்துவீர்கள், \nமற்றும் கூறுகளின் பரிமாற்றத்தை செய்ய முடியுமா என்பதை தீர்மானிக்கிறது \nஅவர்களிடையே lst1 ஐ இரட்டை எண்களின் பட்டியலை மட்டுமே உருவாக்க வேண்டும். \nlst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. \nசெய்ய lst1 மற்றும் lst2 க்கு இடையில் கூறுகளை பரிமாறிக்கொள்ள முடிந்தால் \nlst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"ஆம்\" என்று திருப்பித் தரவும். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஉதாரணத்திற்குஃ \nபரிமாற்றம் ([1,2,3,4], [1,2,3,4]) => \"ஆம்\" \nபரிமாற்றம் ([1,2,3,4], [1,5,3,4]) => \"இல்லை\" \nஉள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/51", "entry_point": "reverseDelete", "test": "\n\nvar arg00 : String = #\"abcde\"#\nvar arg01 : String = #\"ae\"#\nvar x0 : [AnyHashable] = reverseDelete(s : arg00, c : arg01)\nvar v0 : [AnyHashable] = [#\"bcd\"#, false]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdef\"#\nvar arg11 : String = #\"b\"#\nvar x1 : [AnyHashable] = reverseDelete(s : arg10, c : arg11)\nvar v1 : [AnyHashable] = [#\"acdef\"#, false]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcdedcba\"#\nvar arg21 : String = #\"ab\"#\nvar x2 : [AnyHashable] = reverseDelete(s : arg20, c : arg21)\nvar v2 : [AnyHashable] = [#\"cdedc\"#, true]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"dwik\"#\nvar arg31 : String = #\"w\"#\nvar x3 : [AnyHashable] = reverseDelete(s : arg30, c : arg31)\nvar v3 : [AnyHashable] = [#\"dik\"#, false]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"a\"#\nvar arg41 : String = #\"a\"#\nvar x4 : [AnyHashable] = reverseDelete(s : arg40, c : arg41)\nvar v4 : [AnyHashable] = [#\"\"#, true]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"abcdedcba\"#\nvar arg51 : String = #\"\"#\nvar x5 : [AnyHashable] = reverseDelete(s : arg50, c : arg51)\nvar v5 : [AnyHashable] = [#\"abcdedcba\"#, true]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"abcdedcba\"#\nvar arg61 : String = #\"v\"#\nvar x6 : [AnyHashable] = reverseDelete(s : arg60, c : arg61)\nvar v6 : [AnyHashable] = [#\"abcdedcba\"#, true]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"vabba\"#\nvar arg71 : String = #\"v\"#\nvar x7 : [AnyHashable] = reverseDelete(s : arg70, c : arg71)\nvar v7 : [AnyHashable] = [#\"abba\"#, true]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"mamma\"#\nvar arg81 : String = #\"mia\"#\nvar x8 : [AnyHashable] = reverseDelete(s : arg80, c : arg81)\nvar v8 : [AnyHashable] = [#\"\"#, true]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "பணி \nஎங்களுக்கு இரண்டு சரங்கள் s மற்றும் c வழங்கப்பட்டுள்ளன, c இல் உள்ள எந்த எழுத்துக்கும் சமமான s இல் உள்ள அனைத்து எழுத்துக்களையும் நீங்கள் நீக்க வேண்டும். \nபின்னர் ரிசல்ட் ஸ்ட்ரிங் பாலிண்ட்ரோமா என்பதைச் சரிபார்க்கவும். \nஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. \nகாசோலைக்கு முடிவு சரம் மற்றும் உண்மை/தவறு ஆகியவற்றைக் கொண்ட ஒரு டப்பிளை நீங்கள் திருப்பித் தர வேண்டும். \nஉதாரணம் \nஎஸ் = \"ஏபிசிடிஇ\", சி = \"ஏஇ\" க்கு, முடிவு ('பிசிடி', தவறானது) ஆக இருக்க வேண்டும். \ns = \"abcdef\", c = \"b\" க்கு முடிவு ('acdef', பொய்) ஆக இருக்க வேண்டும். \ns = \"abcdedcba\", c = \"ab\" க்கு, முடிவு ('cdedc', உண்மை) ஆக இருக்க வேண்டும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/52", "entry_point": "maxFill", "test": "\n\nvar arg00 : [[Int]] = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\nvar arg01 : Int = 1\nvar x0 : Int = maxFill(grid : arg00, capacity : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\nvar arg11 : Int = 2\nvar x1 : Int = maxFill(grid : arg10, capacity : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[0, 0, 0], [0, 0, 0]]\nvar arg21 : Int = 5\nvar x2 : Int = maxFill(grid : arg20, capacity : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [[Int]] = [[1, 1, 1, 1], [1, 1, 1, 1]]\nvar arg31 : Int = 2\nvar x3 : Int = maxFill(grid : arg30, capacity : arg31)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [[Int]] = [[1, 1, 1, 1], [1, 1, 1, 1]]\nvar arg41 : Int = 9\nvar x4 : Int = maxFill(grid : arg40, capacity : arg41)\nvar v4 : Int = 2\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "உங்களுக்கு ஒரு செவ்வக கிணறு கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றைக் குறிக்கிறது. \nஒரு வரிசையில் உள்ள ஒவ்வொன்றும் ஒரு ஒற்றை அலகு தண்ணீரைக் குறிக்கிறது. \nஒவ்வொரு கிணற்றிலும் அதனுடன் தொடர்புடைய ஒரு வாளி உள்ளது, அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்க இது பயன்படுத்தப்படலாம். \nமேலும் அனைத்து வாளிகளும் ஒரே மாதிரியான திறனைக் கொண்டுள்ளன. \nகிணறுகளை காலி செய்ய வாளிகளைப் பயன்படுத்துவதே உங்கள் பணி. \nநீங்கள் வாளிகளைக் குறைக்க வேண்டிய எண்ணிக்கையை உள்ளிடவும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nவாளி திறன் (_ c): 1 \nவெளியீடுஃ 6 \n\nஉதாரணம் 2: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1] \nவாளி திறன் (_ c): 2 \nவெளியீடுஃ 5 \n\nஉதாரணம் 3: \nஉள்ளீடுஃ \nகட்டம்ஃ [0,0,0], [0,0,0] \nவாளி திறன்ஃ 5 \nவெளியீடுஃ 0 \n\nகட்டுப்பாடுகள்ஃ \n* அனைத்து கிணறுகளுக்கும் ஒரே நீளம் இருக்கும். \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= கட்டம் [:, 1]. நீளம் <= 10 ^ 2 \nகட்டம் [i] [j]-> 0 | 1 \n* 1 <= திறன் <= 10", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/53", "entry_point": "selectWords", "test": "\n\nvar arg00 : String = #\"Mary had a little lamb\"#\nvar arg01 : Int = 4\nvar x0 : [AnyHashable] = selectWords(s : arg00, n : arg01)\nvar v0 : [AnyHashable] = [#\"little\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Mary had a little lamb\"#\nvar arg11 : Int = 3\nvar x1 : [AnyHashable] = selectWords(s : arg10, n : arg11)\nvar v1 : [AnyHashable] = [#\"Mary\"#, #\"lamb\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"simple white space\"#\nvar arg21 : Int = 2\nvar x2 : [AnyHashable] = selectWords(s : arg20, n : arg21)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Hello world\"#\nvar arg31 : Int = 4\nvar x3 : [AnyHashable] = selectWords(s : arg30, n : arg31)\nvar v3 : [AnyHashable] = [#\"world\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Uncle sam\"#\nvar arg41 : Int = 3\nvar x4 : [AnyHashable] = selectWords(s : arg40, n : arg41)\nvar v4 : [AnyHashable] = [#\"Uncle\"#]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"\"#\nvar arg51 : Int = 4\nvar x5 : [AnyHashable] = selectWords(s : arg50, n : arg51)\nvar v5 : [AnyHashable] = []\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"a b c d e f\"#\nvar arg61 : Int = 1\nvar x6 : [AnyHashable] = selectWords(s : arg60, n : arg61)\nvar v6 : [AnyHashable] = [#\"b\"#, #\"c\"#, #\"d\"#, #\"f\"#]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிக்கப்பட்டுள்ளீர்கள் \nசரம் s இலிருந்து அனைத்து சொற்களின் பட்டியலையும் சரியாக உள்ளடக்கிய ஒரு செயல்பாடு \nn மெய், வரிசையில் இந்த சொற்கள் சரம் s இல் தோன்றும். \nசரம் s காலியாக இருந்தால், செயல்பாடு ஒரு வெற்று பட்டியலைத் திருப்பித் தர வேண்டும். \nகுறிப்புஃ உள்ளீட்டு சரத்தில் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே உள்ளன என்று நீங்கள் கருதலாம். \nஉதாரணங்கள்ஃ \nதேர்ந்தெடுக்கும் சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) = => [\"சிறிய\"] \nதேர்ந்தெடுக்கப்பட்ட சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) = => [\"மேரி\", \"ஆட்டுக்குட்டி\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"எளிய வெள்ளை இடம்\", 2) = => [] \nதேர்ந்தெடுக்கும் சொற்கள் (\"ஹலோ வேர்ல்ட்\", 4) = => [\"வேர்ல்ட்\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"மாமா சாம்\", 3) = => [\"மாமா\"]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/54", "entry_point": "maximum", "test": "\n\nvar arg00 : [Int] = [-3, -4, 5]\nvar arg01 : Int = 3\nvar x0 : [AnyHashable] = maximum(arr : arg00, k : arg01)\nvar v0 : [AnyHashable] = [-4, -3, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, -4, 4]\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = maximum(arr : arg10, k : arg11)\nvar v1 : [AnyHashable] = [4, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-3, 2, 1, 2, -1, -2, 1]\nvar arg21 : Int = 1\nvar x2 : [AnyHashable] = maximum(arr : arg20, k : arg21)\nvar v2 : [AnyHashable] = [2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [123, -123, 20, 0, 1, 2, -3]\nvar arg31 : Int = 3\nvar x3 : [AnyHashable] = maximum(arr : arg30, k : arg31)\nvar v3 : [AnyHashable] = [2, 20, 123]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [-123, 20, 0, 1, 2, -3]\nvar arg41 : Int = 4\nvar x4 : [AnyHashable] = maximum(arr : arg40, k : arg41)\nvar v4 : [AnyHashable] = [0, 1, 2, 20]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [5, 15, 0, 3, -13, -8, 0]\nvar arg51 : Int = 7\nvar x5 : [AnyHashable] = maximum(arr : arg50, k : arg51)\nvar v5 : [AnyHashable] = [-13, -8, 0, 0, 3, 5, 15]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [-1, 0, 2, 5, 3, -10]\nvar arg61 : Int = 2\nvar x6 : [AnyHashable] = maximum(arr : arg60, k : arg61)\nvar v6 : [AnyHashable] = [3, 5]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [1, 0, 5, -7]\nvar arg71 : Int = 1\nvar x7 : [AnyHashable] = maximum(arr : arg70, k : arg71)\nvar v7 : [AnyHashable] = [5]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Int] = [4, -4]\nvar arg81 : Int = 2\nvar x8 : [AnyHashable] = maximum(arr : arg80, k : arg81)\nvar v8 : [AnyHashable] = [-4, 4]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Int] = [-10, 10]\nvar arg91 : Int = 2\nvar x9 : [AnyHashable] = maximum(arr : arg90, k : arg91)\nvar v9 : [AnyHashable] = [-10, 10]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Int] = [1, 2, 3, -23, 243, -400, 0]\nvar arg101 : Int = 0\nvar x10 : [AnyHashable] = maximum(arr : arg100, k : arg101)\nvar v10 : [AnyHashable] = []\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "முழு எண்களின் வரிசை arr மற்றும் நேர்மறை முழு எண் k கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பித் தரவும். \narr இல் அதிகபட்ச k எண்களுடன் k நீளம். \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ arr = [-3,-4,5], k = 3 \nவெளியீடுஃ [-4,-3,5] \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ arr = [4,-4,4], k = 2 \nவெளியீடுஃ [4,4] \n\nஉதாரணம் 3: \n\nஉள்ளீடுஃ arr = [-3,2,1,2,-1,2,1], k = 1 \nவெளியீடுஃ [2] \n\nகுறிப்புஃ \n1. வரிசையின் நீளம் [1000] வரம்பில் இருக்கும். \n2. வரிசையில் உள்ள உறுப்புகள் [-1000] வரம்பில் இருக்கும். \n3. 0 <= k <= லென் (arr)", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/55", "entry_point": "addElements", "test": "\n\nvar arg00 : [Int] = [1, -2, -3, 41, 57, 76, 87, 88, 99]\nvar arg01 : Int = 3\nvar x0 : Int = addElements(arr : arg00, k : arg01)\nvar v0 : Int = -4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [111, 121, 3, 4000, 5, 6]\nvar arg11 : Int = 2\nvar x1 : Int = addElements(arr : arg10, k : arg11)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 21, 3, 90, 5, 6, 7, 8, 9]\nvar arg21 : Int = 4\nvar x2 : Int = addElements(arr : arg20, k : arg21)\nvar v2 : Int = 125\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nvar arg31 : Int = 4\nvar x3 : Int = addElements(arr : arg30, k : arg31)\nvar v3 : Int = 24\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [1]\nvar arg41 : Int = 1\nvar x4 : Int = addElements(arr : arg40, k : arg41)\nvar v4 : Int = 1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்பவும் \narr இன் முதல் k உறுப்புகளிலிருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் கூட்டுத்தொகை. \n\nஉதாரணம்ஃ \n\nஉள்ளீடுஃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nவெளியீடுஃ 24 #21 + 3 இன் கூட்டுத்தொகை \n\nகட்டுப்பாடுகள்ஃ \n1. 1 <= லென் (arr) <= 100 \n2. 1 <= k <= லென் (arr)", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/56", "entry_point": "intersection", "test": "\n\nvar arg00 : [Int] = [1, 2]\nvar arg01 : [Int] = [2, 3]\nvar x0 : String = intersection(interval1 : arg00, interval2 : arg01)\nvar v0 : String = #\"NO\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 1]\nvar arg11 : [Int] = [0, 4]\nvar x1 : String = intersection(interval1 : arg10, interval2 : arg11)\nvar v1 : String = #\"NO\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-3, -1]\nvar arg21 : [Int] = [-5, 5]\nvar x2 : String = intersection(interval1 : arg20, interval2 : arg21)\nvar v2 : String = #\"YES\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Int] = [-2, 2]\nvar arg31 : [Int] = [-4, 0]\nvar x3 : String = intersection(interval1 : arg30, interval2 : arg31)\nvar v3 : String = #\"YES\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Int] = [-11, 2]\nvar arg41 : [Int] = [-1, -1]\nvar x4 : String = intersection(interval1 : arg40, interval2 : arg41)\nvar v4 : String = #\"NO\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Int] = [1, 2]\nvar arg51 : [Int] = [3, 5]\nvar x5 : String = intersection(interval1 : arg50, interval2 : arg51)\nvar v5 : String = #\"NO\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Int] = [1, 2]\nvar arg61 : [Int] = [1, 2]\nvar x6 : String = intersection(interval1 : arg60, interval2 : arg61)\nvar v6 : String = #\"NO\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Int] = [-2, -2]\nvar arg71 : [Int] = [-3, -2]\nvar x7 : String = intersection(interval1 : arg70, interval2 : arg71)\nvar v7 : String = #\"NO\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "உங்களுக்கு இரண்டு இடைவெளிகள் வழங்கப்படுகின்றன, \nஇங்கு ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்களாகும். எடுத்துக்காட்டாக, இடைவெளி = (தொடக்கம், முடிவு) = (1,2). \nகொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டுள்ளன, அதாவது இடைவெளி (தொடக்கம், முடிவு) \nஇதில் தொடக்கமும் முடிவும் அடங்கும். \nகொடுக்கப்பட்ட ஒவ்வொரு இடைவெளியிலும், அதன் தொடக்கம் அதன் முடிவை விட குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது. \nஇந்த இரண்டின் குறுக்குவெட்டின் நீளம் எவ்வளவு என்பதைத் தீர்மானிப்பதே உங்கள் பணி. \nஇடைவெளிகள் ஒரு பகா எண். \nஎடுத்துக்காட்டாக, (1,3), (2,4) இடைவெளிகளின் குறுக்குவெட்டு (2,3) ஆகும். \nஅதன் நீளம் 1, இது ஒரு பகா எண் அல்ல. \nகுறுக்குவெட்டின் நீளம் ஒரு பகா எண்ணாக இருந்தால், \"ஆம்\" என்று திருப்பிக் கொடுங்கள். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஇரண்டு இடைவெளிகளும் வெட்டவில்லை என்றால், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \n\n[உள்ளீடு/வெளியீடு] மாதிரிகள்ஃ \nகுறுக்குவெட்டு ((1,2,3)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-1,1), (0,4)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-3,-1), (-5,5)) = => \"ஆம்\"", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/57", "entry_point": "tri", "test": "\n\nvar arg00 : Int = 3\nvar x0 : [Double] = tri(n : arg00)\nvar v0 : [Double] = [1, 3, 2.0, 8.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : [Double] = tri(n : arg10)\nvar v1 : [Double] = [1, 3, 2.0, 8.0, 3.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : [Double] = tri(n : arg20)\nvar v2 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 6\nvar x3 : [Double] = tri(n : arg30)\nvar v3 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar x4 : [Double] = tri(n : arg40)\nvar v4 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 8\nvar x5 : [Double] = tri(n : arg50)\nvar v5 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 9\nvar x6 : [Double] = tri(n : arg60)\nvar v6 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 20\nvar x7 : [Double] = tri(n : arg70)\nvar v7 : [Double] = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 0\nvar x8 : [Double] = tri(n : arg80)\nvar v8 : [Double] = [1]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1\nvar x9 : [Double] = tri(n : arg90)\nvar v9 : [Double] = [1, 3]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "எல்லோருக்கும் ஃபிபோனாச்சி வரிசை தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது \nகடந்த இரண்டு நூற்றாண்டுகள். இருப்பினும், மக்களுக்குத் தெரியாதது டிரிபோனாச்சி வரிசை. \nடிரிபோனாச்சி வரிசை மீண்டும் மீண்டும் வரையறுக்கப்படுகிறதுஃ \nமுக்கோணம் (1) = 3 \nமுக்கோணம் (n) = 1 + n/2, n சமமாக இருந்தால். \nமுக்கோணம் (n) = முக்கோணம் (n-1) + முக்கோணம் (n-2) + முக்கோணம் (n + 1), n ஒற்றைப்படை என்றால். \nஉதாரணத்திற்குஃ \nமுக்கோணம் (2) = 1 + (2/2) = 2 \nமுக்கோணம் (4) = 3 \nமுக்கோணம் (3) = முக்கோணம் (2) + முக்கோணம் (1) + முக்கோணம் (4) \n= 2 + 3 + 3 = 8 \nஉங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n வழங்கப்படுகிறது, நீங்கள் ஒரு பட்டியலைத் திருப்பித் தர வேண்டும் \nடிரிபோனாச்சி வரிசையின் முதல் n + 1 எண்கள். \nஉதாரணங்கள்ஃ \nமுக்கோணம் (3) = [1,3,2,8]", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/58", "entry_point": "digits", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = digits(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 54\nvar x1 : Int = digits(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Int = digits(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 5014\nvar x3 : Int = digits(n : arg30)\nvar v3 : Int = 5\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 98765\nvar x4 : Int = digits(n : arg40)\nvar v4 : Int = 315\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 5576543\nvar x5 : Int = digits(n : arg50)\nvar v5 : Int = 2625\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 2468\nvar x6 : Int = digits(n : arg60)\nvar v6 : Int = 0\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றைப்படை இலக்கங்களின் பெருக்கல் திரும்பும். \nஅனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பவும். \nஉதாரணத்திற்குஃ \nஇலக்கங்கள் (1) = = 1 \nஇலக்கங்கள் (4) = = 0 \nஇலக்கங்கள் (235) = = 15", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/59", "entry_point": "isNested", "test": "\n\nvar arg00 : String = #\"[[]]\"#\nvar x0 : Bool = isNested(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"[]]]]]]][[[[[]\"#\nvar x1 : Bool = isNested(string : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"[][]\"#\nvar x2 : Bool = isNested(string : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"[]\"#\nvar x3 : Bool = isNested(string : arg30)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"[[[[]]]]\"#\nvar x4 : Bool = isNested(string : arg40)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"[]]]]]]]]]]\"#\nvar x5 : Bool = isNested(string : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"[][][[]]\"#\nvar x6 : Bool = isNested(string : arg60)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"[[]\"#\nvar x7 : Bool = isNested(string : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"[]]\"#\nvar x8 : Bool = isNested(string : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"[[]][[\"#\nvar x9 : Bool = isNested(string : arg90)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"[[][]]\"#\nvar x10 : Bool = isNested(string : arg100)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"\"#\nvar x11 : Bool = isNested(string : arg110)\nvar v11 : Bool = false\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"[[[[[[[[\"#\nvar x12 : Bool = isNested(string : arg120)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : String = #\"]]]]]]]]\"#\nvar x13 : Bool = isNested(string : arg130)\nvar v13 : Bool = false\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\n", "description": "சதுர அடைப்புகளை மட்டுமே கொண்ட ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். \nஅடைப்புக்குறிகளின் செல்லுபடியாகும் பின்தொடர்தல் இருந்தால் மட்டுமே செயல்பாடு உண்மை என்று திரும்ப வேண்டும் \nஅங்கு அடுத்தடுத்த குறைந்தபட்சம் ஒரு அடைப்புக்குறிப்பு கூடு கட்டப்பட்டுள்ளது. \n\nnested ('[[]]') என்பது உண்மை \nis _ nested ('[]]]]] [[[[]') பொய் \nis _ nested ('[] []') பொய் \nis _ nested ('[]') என்பது தவறானது \nnested ('[[] []]') என்பது உண்மை \nnested ('[[]] [[') என்பது உண்மை", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/60", "entry_point": "sumSquares", "test": "\n\nvar arg00 : [Double] = [1, 2, 3]\nvar x0 : Int = sumSquares(lst : arg00)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [1.0, 2, 3]\nvar x1 : Int = sumSquares(lst : arg10)\nvar v1 : Int = 14\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [1, 3, 5, 7]\nvar x2 : Int = sumSquares(lst : arg20)\nvar v2 : Int = 84\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [Double] = [1.4, 4.2, 0]\nvar x3 : Int = sumSquares(lst : arg30)\nvar v3 : Int = 29\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [Double] = [-2.4, 1, 1]\nvar x4 : Int = sumSquares(lst : arg40)\nvar v4 : Int = 6\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [Double] = [100, 1, 15, 2]\nvar x5 : Int = sumSquares(lst : arg50)\nvar v5 : Int = 10230\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [Double] = [10000, 10000]\nvar x6 : Int = sumSquares(lst : arg60)\nvar v6 : Int = 200000000\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [Double] = [-1.4, 4.6, 6.3]\nvar x7 : Int = sumSquares(lst : arg70)\nvar v7 : Int = 75\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [Double] = [-1.4, 17.9, 18.9, 19.9]\nvar x8 : Int = sumSquares(lst : arg80)\nvar v8 : Int = 1086\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [Double] = [0]\nvar x9 : Int = sumSquares(lst : arg90)\nvar v9 : Int = 0\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [Double] = [-1]\nvar x10 : Int = sumSquares(lst : arg100)\nvar v10 : Int = 1\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : [Double] = [-1, 1, 0]\nvar x11 : Int = sumSquares(lst : arg110)\nvar v11 : Int = 2\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\n", "description": "உங்களுக்கு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nகொடுக்கப்பட்ட பட்டியலில் உள்ள வர்க்க எண்களின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும், \nபட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் முதலில் மேல் உள்ளீடு (உச்சவரம்பு) க்கு சுற்றவும். \nஉதாரணங்கள்ஃ \nlst = [1,2,3] க்கு வெளியீடு 14 ஆக இருக்க வேண்டும். \nlst = [1,4,9] க்கு வெளியீடு 98 ஆக இருக்க வேண்டும். \nlst = [1,3,5, 7] க்கு வெளியீடு 84 ஆக இருக்க வேண்டும். \nlst = [1.4,4.2, 0] க்கு வெளியீடு 29 ஆக இருக்க வேண்டும். \nlst = [-2.4,1, 1] க்கு வெளியீடு 6 ஆக இருக்க வேண்டும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/61", "entry_point": "checkIfLastCharIsALetter", "test": "\n\nvar arg00 : String = #\"apple\"#\nvar x0 : Bool = checkIfLastCharIsALetter(txt : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"apple pi e\"#\nvar x1 : Bool = checkIfLastCharIsALetter(txt : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"eeeee\"#\nvar x2 : Bool = checkIfLastCharIsALetter(txt : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"A\"#\nvar x3 : Bool = checkIfLastCharIsALetter(txt : arg30)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Pumpkin pie \"#\nvar x4 : Bool = checkIfLastCharIsALetter(txt : arg40)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"Pumpkin pie 1\"#\nvar x5 : Bool = checkIfLastCharIsALetter(txt : arg50)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"\"#\nvar x6 : Bool = checkIfLastCharIsALetter(txt : arg60)\nvar v6 : Bool = false\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"eeeee e \"#\nvar x7 : Bool = checkIfLastCharIsALetter(txt : arg70)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"apple pie\"#\nvar x8 : Bool = checkIfLastCharIsALetter(txt : arg80)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"apple pi e \"#\nvar x9 : Bool = checkIfLastCharIsALetter(txt : arg90)\nvar v9 : Bool = false\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "கடைசி எழுத்து இருந்தால் சரி என்று திரும்பும் செயல்பாட்டை உருவாக்கவும் \nகொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை \nஒரு வார்த்தையின் ஒரு பகுதி, இல்லையெனில் பொய். \nகுறிப்புஃ \"சொல்\" என்பது இடத்தால் பிரிக்கப்பட்ட எழுத்துக்களின் தொகுப்பாகும். \n\nஉதாரணங்கள்ஃ \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ ஒரு _ எழுத்து (\"ஆப்பிள் பை\") \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") சரி \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") பொய் \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"\") பொய்", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/62", "entry_point": "canArrange", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 4, 3, 5]\nvar x0 : Int = canArrange(arr : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 4, 5]\nvar x1 : Int = canArrange(arr : arg10)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 4, 2, 5, 6, 7, 8, 9, 10]\nvar x2 : Int = canArrange(arr : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [4, 8, 5, 7, 3]\nvar x3 : Int = canArrange(arr : arg30)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = []\nvar x4 : Int = canArrange(arr : arg40)\nvar v4 : Int = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\n", "description": "ஒரு தனிமத்தின் மிகப்பெரிய குறியீட்டைத் தரும் செயல்பாட்டை உருவாக்கவும் \nஅது உடனடியாக அதற்கு முந்தைய உறுப்பை விட பெரியதாகவோ அல்லது சமமாகவோ இல்லை. \nஅத்தகைய உறுப்பு எதுவும் இல்லை, பின்னர் திரும்பும்-1. கொடுக்கப்பட்ட வரிசை கொண்டிருக்காது \nஇரட்டை மதிப்புகள். \n\nஉதாரணங்கள்ஃ \ncan _ அரங்கேற்றலாம் ([1,2,4, 3,5]) = 3 \nசெய்ய முடியும் ([1,2,3]) =-1", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/63", "entry_point": "largestSmallestIntegers", "test": "\n\nvar arg00 : [AnyHashable] = [2, 4, 1, 3, 5, 7]\nvar x0 : [AnyHashable] = largestSmallestIntegers(lst : arg00)\nvar v0 : [AnyHashable] = [\"none\", 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [2, 4, 1, 3, 5, 7, 0]\nvar x1 : [AnyHashable] = largestSmallestIntegers(lst : arg10)\nvar v1 : [AnyHashable] = [\"none\", 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 3, 2, 4, 5, 6, -2]\nvar x2 : [AnyHashable] = largestSmallestIntegers(lst : arg20)\nvar v2 : [AnyHashable] = [-2, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [4, 5, 3, 6, 2, 7, -7]\nvar x3 : [AnyHashable] = largestSmallestIntegers(lst : arg30)\nvar v3 : [AnyHashable] = [-7, 2]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [7, 3, 8, 4, 9, 2, 5, -9]\nvar x4 : [AnyHashable] = largestSmallestIntegers(lst : arg40)\nvar v4 : [AnyHashable] = [-9, 2]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = []\nvar x5 : [AnyHashable] = largestSmallestIntegers(lst : arg50)\nvar v5 : [AnyHashable] = [\"none\", \"none\"]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [0]\nvar x6 : [AnyHashable] = largestSmallestIntegers(lst : arg60)\nvar v6 : [AnyHashable] = [\"none\", \"none\"]\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : [AnyHashable] = [-1, -3, -5, -6]\nvar x7 : [AnyHashable] = largestSmallestIntegers(lst : arg70)\nvar v7 : [AnyHashable] = [-1, \"none\"]\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : [AnyHashable] = [-1, -3, -5, -6, 0]\nvar x8 : [AnyHashable] = largestSmallestIntegers(lst : arg80)\nvar v8 : [AnyHashable] = [-1, \"none\"]\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : [AnyHashable] = [-6, -4, -4, -3, 1]\nvar x9 : [AnyHashable] = largestSmallestIntegers(lst : arg90)\nvar v9 : [AnyHashable] = [-3, 1]\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : [AnyHashable] = [-6, -4, -4, -3, -100, 1]\nvar x10 : [AnyHashable] = largestSmallestIntegers(lst : arg100)\nvar v10 : [AnyHashable] = [-3, 1]\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "ஒரு டுபில் (a, b) ஐத் தரும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு'a'என்பது \nஎதிர்மறை முழு எண்களில் மிகப் பெரியது, மற்றும்'b'மிகச்சிறியது \nஒரு பட்டியலில் நேர்மறை முழு எண்கள். \nஎதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை இல்லை என்று திருப்பித் தரவும். \n\nஉதாரணங்கள்ஃ \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([2,4,1,3,5,7]) = = (எதுவும் இல்லை, 1) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([]) = = (எதுவும் இல்லை, எதுவும் இல்லை) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([0]) = = (எதுவும் இல்லை, எதுவும் இல்லை)", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/64", "entry_point": "specialFactorial", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = specialFactorial(n : arg00)\nvar v0 : Int = 288\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = specialFactorial(n : arg10)\nvar v1 : Int = 34560\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = specialFactorial(n : arg20)\nvar v2 : Int = 125411328000\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 1\nvar x3 : Int = specialFactorial(n : arg30)\nvar v3 : Int = 1\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nபிரேசில் _ காரணி (n) = n! * (n-1)! * (n-2)! *... * 1! \nஇங்கு n> 0 \n\nஉதாரணத்திற்குஃ \n>>> சிறப்பு _ காரணி (4) \n288 \n\nசெயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும், மேலும் சிறப்புத் தொகையைத் திருப்பித் தர வேண்டும். \nஇந்த முழு எண்ணின் காரணி.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/65", "entry_point": "wordsInSentence", "test": "\n\nvar arg00 : String = #\"This is a test\"#\nvar x0 : String = wordsInSentence(sentence : arg00)\nvar v0 : String = #\"is\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"lets go for swimming\"#\nvar x1 : String = wordsInSentence(sentence : arg10)\nvar v1 : String = #\"go for\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"there is no place available here\"#\nvar x2 : String = wordsInSentence(sentence : arg20)\nvar v2 : String = #\"there is no place\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Hi I am Hussein\"#\nvar x3 : String = wordsInSentence(sentence : arg30)\nvar v3 : String = #\"Hi am Hussein\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"go for it\"#\nvar x4 : String = wordsInSentence(sentence : arg40)\nvar v4 : String = #\"go for it\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"here\"#\nvar x5 : String = wordsInSentence(sentence : arg50)\nvar v5 : String = #\"\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"here is\"#\nvar x6 : String = wordsInSentence(sentence : arg60)\nvar v6 : String = #\"is\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "ஒரு வாக்கியத்தைக் குறிக்கும் சரம் உங்களுக்கு வழங்கப்படுகிறது, \nவாக்கியத்தில் ஒரு இடைவெளியால் பிரிக்கப்பட்ட சில சொற்கள் உள்ளன, \nஅசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை நீங்கள் திருப்பித் தர வேண்டும், \nஅதன் நீளம் பகா எண்கள், \nபுதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் வரிசையைப் போலவே இருக்க வேண்டும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" \nவெளியீடுஃ \"உள்ளது\" \n\nஉதாரணம் 2: \nஉள்ளீடுஃ வாக்கியம் = \"நீச்சலுக்கு செல்வோம்\" \nவெளியீடுஃ \"செல்லுங்கள்\" \n\nகட்டுப்பாடுகள்ஃ \n* 1 <= லென் (வாக்கியம்) <= 100 \n* வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/66", "entry_point": "simplify", "test": "\n\nvar arg00 : String = #\"1/5\"#\nvar arg01 : String = #\"5/1\"#\nvar x0 : Bool = simplify(x : arg00, n : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1/6\"#\nvar arg11 : String = #\"2/1\"#\nvar x1 : Bool = simplify(x : arg10, n : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"5/1\"#\nvar arg21 : String = #\"3/1\"#\nvar x2 : Bool = simplify(x : arg20, n : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"7/10\"#\nvar arg31 : String = #\"10/2\"#\nvar x3 : Bool = simplify(x : arg30, n : arg31)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"2/10\"#\nvar arg41 : String = #\"50/10\"#\nvar x4 : Bool = simplify(x : arg40, n : arg41)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"7/2\"#\nvar arg51 : String = #\"4/2\"#\nvar x5 : Bool = simplify(x : arg50, n : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"11/6\"#\nvar arg61 : String = #\"6/1\"#\nvar x6 : Bool = simplify(x : arg60, n : arg61)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"2/3\"#\nvar arg71 : String = #\"5/2\"#\nvar x7 : Bool = simplify(x : arg70, n : arg71)\nvar v7 : Bool = false\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"5/2\"#\nvar arg81 : String = #\"3/5\"#\nvar x8 : Bool = simplify(x : arg80, n : arg81)\nvar v8 : Bool = false\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : String = #\"2/4\"#\nvar arg91 : String = #\"8/4\"#\nvar x9 : Bool = simplify(x : arg90, n : arg91)\nvar v9 : Bool = true\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : String = #\"2/4\"#\nvar arg101 : String = #\"4/2\"#\nvar x10 : Bool = simplify(x : arg100, n : arg101)\nvar v10 : Bool = true\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : String = #\"1/5\"#\nvar arg111 : String = #\"5/1\"#\nvar x11 : Bool = simplify(x : arg110, n : arg111)\nvar v11 : Bool = true\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : String = #\"1/5\"#\nvar arg121 : String = #\"1/5\"#\nvar x12 : Bool = simplify(x : arg120, n : arg121)\nvar v12 : Bool = false\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\n", "description": "உங்கள் பணி வெளிப்பாட்டை எளிதாக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவதாகும் \nx * n. x * n ஒரு முழு எண்ணை மதிப்பீடு செய்தால் சரி மற்றும் தவறு என்று செயல்பாடு காட்டும். \nஇல்லையெனில். x மற்றும் n இரண்டும், ஒரு பின்னத்தின் சரம் பிரதிநிதித்துவம் மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, \nஇங்கு எண் மற்றும் வகுத்தல் இரண்டும் நேர்மறை முழு எண்களாகும். \n\nx, மற்றும் n ஆகியவை செல்லுபடியாகும் பின்னங்கள் என்றும், பூஜ்ஜியத்தை வகுப்பாகக் கொண்டிருக்கவில்லை என்றும் நீங்கள் கருதலாம். \n\nஎளிமைப்படுத்தவும் (\"1/5\", \"5/1\") = உண்மை \nஎளிமைப்படுத்துதல் (\"1/6\", \"2/1\") = தவறு \nஎளிமைப்படுத்தவும் (\"7/10\", \"10/2\") = தவறு", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/67", "entry_point": "orderByPoints", "test": "\n\nvar arg00 : [AnyHashable] = [1, 11, -1, -11, -12]\nvar x0 : [AnyHashable] = orderByPoints(nums : arg00)\nvar v0 : [AnyHashable] = [-1, -11, 1, -12, 11]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]\nvar x1 : [AnyHashable] = orderByPoints(nums : arg10)\nvar v1 : [AnyHashable] = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = []\nvar x2 : [AnyHashable] = orderByPoints(nums : arg20)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [1, -11, -32, 43, 54, -98, 2, -3]\nvar x3 : [AnyHashable] = orderByPoints(nums : arg30)\nvar v3 : [AnyHashable] = [-3, -32, -98, -11, 1, 2, 43, 54]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nvar x4 : [AnyHashable] = orderByPoints(nums : arg40)\nvar v4 : [AnyHashable] = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [0, 6, 6, -76, -21, 23, 4]\nvar x5 : [AnyHashable] = orderByPoints(nums : arg50)\nvar v5 : [AnyHashable] = [-76, -21, 0, 4, 23, 6, 6]\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள் \nஅவற்றின் இலக்கங்களின் கூட்டுத்தொகையின்படி ஏறுவரிசையில். \nகுறிப்புஃ பல உருப்படிகள் அவற்றின் இலக்கங்களின் ஒத்த கூட்டுத்தொகையுடன் இருந்தால், \nஅசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை ஆர்டர் செய்யுங்கள். \n\nஉதாரணத்திற்குஃ \n>> வரிசைப் புள்ளிகள் ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ஆர்டர் _ பை _ பாயிண்ட்ஸ் ([]) = = []", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/68", "entry_point": "specialfilter", "test": "\n\nvar arg00 : [AnyHashable] = [5, -2, 1, -5]\nvar x0 : Int = specialfilter(nums : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [15, -73, 14, -15]\nvar x1 : Int = specialfilter(nums : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [33, -2, -3, 45, 21, 109]\nvar x2 : Int = specialfilter(nums : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [43, -12, 93, 125, 121, 109]\nvar x3 : Int = specialfilter(nums : arg30)\nvar v3 : Int = 4\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [71, -2, -33, 75, 21, 19]\nvar x4 : Int = specialfilter(nums : arg40)\nvar v4 : Int = 3\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [1]\nvar x5 : Int = specialfilter(nums : arg50)\nvar v5 : Int = 0\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = []\nvar x6 : Int = specialfilter(nums : arg60)\nvar v6 : Int = 0\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "எண்களின் வரிசையை உள்ளீடாகவும் திரும்பவும் எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள் \nவரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 க்கும் அதிகமாக உள்ளது மற்றும் இரண்டும் \nஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1,3,5,7,9). \nஉதாரணத்திற்குஃ \nசிறப்பு வடிகட்டி ([15,-73,14,-15]) => 1 \nசிறப்பு வடிகட்டி ([33,-2,-3,45,21,109]) => 2", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/69", "entry_point": "getMaxTriples", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = getMaxTriples(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = getMaxTriples(n : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = getMaxTriples(n : arg20)\nvar v2 : Int = 36\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 100\nvar x3 : Int = getMaxTriples(n : arg30)\nvar v3 : Int = 53361\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீங்கள் n நீளமுள்ள ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும். \nஒவ்வொரு i க்கும் (1 ≤ i ≤ n), a [i] = i * i-i + 1 இன் மதிப்பு. \ni <j <k என்ற இடத்தின் மூன்று மடங்குகளின் (a [i], a [j], a [k]) எண்ணிக்கையைத் திருப்பித் தரவும். \nமேலும் a [i] + a [j] + a [k] என்பது 3 இன் பெருக்கமாகும். \n\nஉதாரணம்ஃ \nஉள்ளீடுஃ n = 5 \nவெளியீடுஃ 1 \nவிளக்கம்ஃ \na = [1,3,7,13,21] \nஒரே செல்லுபடியாகும் மூன்று (1,7,13) ஆகும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/70", "entry_point": "bf", "test": "\n\nvar arg00 : String = #\"Jupiter\"#\nvar arg01 : String = #\"Neptune\"#\nvar x0 : [AnyHashable] = bf(planet1 : arg00, planet2 : arg01)\nvar v0 : [AnyHashable] = [#\"Saturn\"#, #\"Uranus\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Earth\"#\nvar arg11 : String = #\"Mercury\"#\nvar x1 : [AnyHashable] = bf(planet1 : arg10, planet2 : arg11)\nvar v1 : [AnyHashable] = [#\"Venus\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Mercury\"#\nvar arg21 : String = #\"Uranus\"#\nvar x2 : [AnyHashable] = bf(planet1 : arg20, planet2 : arg21)\nvar v2 : [AnyHashable] = [#\"Venus\"#, #\"Earth\"#, #\"Mars\"#, #\"Jupiter\"#, #\"Saturn\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"Neptune\"#\nvar arg31 : String = #\"Venus\"#\nvar x3 : [AnyHashable] = bf(planet1 : arg30, planet2 : arg31)\nvar v3 : [AnyHashable] = [#\"Earth\"#, #\"Mars\"#, #\"Jupiter\"#, #\"Saturn\"#, #\"Uranus\"#]\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"Earth\"#\nvar arg41 : String = #\"Earth\"#\nvar x4 : [AnyHashable] = bf(planet1 : arg40, planet2 : arg41)\nvar v4 : [AnyHashable] = []\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"Mars\"#\nvar arg51 : String = #\"Earth\"#\nvar x5 : [AnyHashable] = bf(planet1 : arg50, planet2 : arg51)\nvar v5 : [AnyHashable] = []\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"Jupiter\"#\nvar arg61 : String = #\"Makemake\"#\nvar x6 : [AnyHashable] = bf(planet1 : arg60, planet2 : arg61)\nvar v6 : [AnyHashable] = []\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளனஃ சூரியனுக்கு மிக நெருக்கமானவை. \nபுதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, \nயுரேனஸ், நெப்டியூன். \nகிரகம் 1 மற்றும் கிரகம் 2 என இரண்டு கிரக பெயர்களை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள். \nசெயல்பாடு அதன் சுற்றுப்பாதைகள் அனைத்து கிரகங்கள் கொண்ட ஒரு tuple திரும்ப வேண்டும் \nகிரகம் 1 இன் சுற்றுப்பாதைக்கும் கிரகம் 2 இன் சுற்றுப்பாதைக்கும் இடையில் அமைந்துள்ளது, வரிசைப்படுத்தப்பட்டுள்ளது \nசூரியனின் அருகாமை. \nகிரகம் 1 அல்லது கிரகம் 2 என்றால் செயல்பாடு ஒரு வெற்று டப்பிளை திருப்ப வேண்டும் \nகிரகங்களின் பெயர்கள் சரியானவை அல்ல. \nஉதாரணங்கள் \nbf (\"வியாழன்\", \"நெப்டியூன்\") = => (\"சனி\", \"யுரேனஸ்\") \nbf (\"பூமி\", \"புதன்\") = => (\"வீனஸ்\") \nbf (\"புதன்\", \"யுரேனஸ்\") = => (\"வீனஸ்\", \"பூமி\", \"செவ்வாய்\", \"வியாழன்\", \"சனி\")", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/71", "entry_point": "xOrY", "test": "\n\nvar arg00 : Int = 7\nvar arg01 : Int = 34\nvar arg02 : Int = 12\nvar x0 : Int = xOrY(n : arg00, x : arg01, y : arg02)\nvar v0 : Int = 34\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 8\nvar arg12 : Int = 5\nvar x1 : Int = xOrY(n : arg10, x : arg11, y : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 33\nvar arg22 : Int = 5212\nvar x2 : Int = xOrY(n : arg20, x : arg21, y : arg22)\nvar v2 : Int = 33\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 1259\nvar arg31 : Int = 3\nvar arg32 : Int = 52\nvar x3 : Int = xOrY(n : arg30, x : arg31, y : arg32)\nvar v3 : Int = 3\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7919\nvar arg41 : Int = -1\nvar arg42 : Int = 12\nvar x4 : Int = xOrY(n : arg40, x : arg41, y : arg42)\nvar v4 : Int = -1\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 3609\nvar arg51 : Int = 1245\nvar arg52 : Int = 583\nvar x5 : Int = xOrY(n : arg50, x : arg51, y : arg52)\nvar v5 : Int = 583\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 91\nvar arg61 : Int = 56\nvar arg62 : Int = 129\nvar x6 : Int = xOrY(n : arg60, x : arg61, y : arg62)\nvar v6 : Int = 129\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 6\nvar arg71 : Int = 34\nvar arg72 : Int = 1234\nvar x7 : Int = xOrY(n : arg70, x : arg71, y : arg72)\nvar v7 : Int = 1234\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 1\nvar arg81 : Int = 2\nvar arg82 : Int = 0\nvar x8 : Int = xOrY(n : arg80, x : arg81, y : arg82)\nvar v8 : Int = 0\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 2\nvar arg91 : Int = 2\nvar arg92 : Int = 0\nvar x9 : Int = xOrY(n : arg90, x : arg91, y : arg92)\nvar v9 : Int = 2\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\n", "description": "ஒரு எளிய நிரல், இது n என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும் \nஒரு பகா எண் மற்றும் இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nx _ அல்லது _ y க்கு (7,34,12) = = 34 \nx _ அல்லது _ y க்கு (15,8,5) = = 5", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/72", "entry_point": "doubleTheDifference", "test": "\n\nvar arg00 : [AnyHashable] = []\nvar x0 : Int = doubleTheDifference(lst : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 4]\nvar x1 : Int = doubleTheDifference(lst : arg10)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [0.1, 0.2, 0.3]\nvar x2 : Int = doubleTheDifference(lst : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : [AnyHashable] = [-10, -20, -30]\nvar x3 : Int = doubleTheDifference(lst : arg30)\nvar v3 : Int = 0\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : [AnyHashable] = [-1, -2, 8]\nvar x4 : Int = doubleTheDifference(lst : arg40)\nvar v4 : Int = 0\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : [AnyHashable] = [0.2, 3, 5]\nvar x5 : Int = doubleTheDifference(lst : arg50)\nvar v5 : Int = 34\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : [AnyHashable] = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nvar x6 : Int = doubleTheDifference(lst : arg60)\nvar v6 : Int = 166650\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால், எண்களின் வர்க்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். \nஒற்றைப்படை பட்டியலில். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். \n\nஇரட்டை வேறுபாடு ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nஇரட்டை வேறுபாடு ([-1,0]) = = 0 \nஇரட்டை வேறுபாடு ([9,-2]) = = 81 \nஇரட்டை _ தி _ வேறுபாடு ([0]) = = 0 \n\nஉள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பித் தரவும்.", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/73", "entry_point": "strongestExtension", "test": "\n\nvar arg00 : String = #\"Watashi\"#\nvar arg01 : [String] = [#\"tEN\"#, #\"niNE\"#, #\"eIGHt8OKe\"#]\nvar x0 : String = strongestExtension(className : arg00, extensions : arg01)\nvar v0 : String = #\"Watashi.eIGHt8OKe\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Boku123\"#\nvar arg11 : [String] = [#\"nani\"#, #\"NazeDa\"#, #\"YEs.WeCaNe\"#, #\"32145tggg\"#]\nvar x1 : String = strongestExtension(className : arg10, extensions : arg11)\nvar v1 : String = #\"Boku123.YEs.WeCaNe\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"__YESIMHERE\"#\nvar arg21 : [String] = [#\"t\"#, #\"eMptY\"#, #\"nothing\"#, #\"zeR00\"#, #\"NuLl__\"#, #\"123NoooneB321\"#]\nvar x2 : String = strongestExtension(className : arg20, extensions : arg21)\nvar v2 : String = #\"__YESIMHERE.NuLl__\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"K\"#\nvar arg31 : [String] = [#\"Ta\"#, #\"TAR\"#, #\"t234An\"#, #\"cosSo\"#]\nvar x3 : String = strongestExtension(className : arg30, extensions : arg31)\nvar v3 : String = #\"K.TAR\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"__HAHA\"#\nvar arg41 : [String] = [#\"Tab\"#, #\"123\"#, #\"781345\"#, #\"-_-\"#]\nvar x4 : String = strongestExtension(className : arg40, extensions : arg41)\nvar v4 : String = #\"__HAHA.123\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"YameRore\"#\nvar arg51 : [String] = [#\"HhAas\"#, #\"okIWILL123\"#, #\"WorkOut\"#, #\"Fails\"#, #\"-_-\"#]\nvar x5 : String = strongestExtension(className : arg50, extensions : arg51)\nvar v5 : String = #\"YameRore.okIWILL123\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"finNNalLLly\"#\nvar arg61 : [String] = [#\"Die\"#, #\"NowW\"#, #\"Wow\"#, #\"WoW\"#]\nvar x6 : String = strongestExtension(className : arg60, extensions : arg61)\nvar v6 : String = #\"finNNalLLly.WoW\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"_\"#\nvar arg71 : [String] = [#\"Bb\"#, #\"91245\"#]\nvar x7 : String = strongestExtension(className : arg70, extensions : arg71)\nvar v7 : String = #\"_.Bb\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : String = #\"Sp\"#\nvar arg81 : [String] = [#\"671235\"#, #\"Bb\"#]\nvar x8 : String = strongestExtension(className : arg80, extensions : arg81)\nvar v8 : String = #\"Sp.671235\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\n", "description": "உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் வழங்கப்படும். \nவகுப்புக்கு கூடுதல் வகுப்புகளை ஏற்றுவதற்கு நீட்டிப்புகள் பயன்படுத்தப்பட வேண்டும். \nநீட்டிப்பின் வலிமை பின்வருமாறுஃ CAP என்பது பெரிய எழுத்தின் எண்ணாக இருக்கட்டும். \nநீட்டிப்பின் பெயரில் உள்ள எழுத்துக்கள், மற்றும் எஸ். எம் சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும் \nநீட்டிப்பின் பெயரில், வலிமை CAP-ஏஸஏம என்ற பின்னத்தால் வழங்கப்படுகிறது. \nநீங்கள் வலுவான நீட்டிப்பைக் கண்டுபிடித்து இதில் ஒரு சரத்தைத் திருப்ப வேண்டும். \nவடிவம்ஃ ClassName.StrongestExtensionName. \nஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், நீங்கள் செய்ய வேண்டும் \nபட்டியலில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும். \nஎடுத்துக்காட்டாக, உங்களுக்கு \"ஸ்லைஸ்கள்\" வகுப்பாகவும் ஒரு பட்டியலாகவும் வழங்கப்பட்டால் \nநீட்டிப்புகள்ஃ ['SERVINGSliCes','சீஸ்','ஸ்டுஃபெட்'] பின்னர் நீங்கள் செய்ய வேண்டும் \n'SERVINGSliCes'வலுவான நீட்டிப்பாக இருப்பதால்'Slices.SErviNGSliCes'ஐத் திருப்பவும் \n(அதன் வலிமை-1). \nஉதாரணம்ஃ \nவலுவான _ நீட்டிப்புக்கு ('எனது _ வகுப்பு', ['AA','Be','CC']) = ='my_class.AA'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/74", "entry_point": "cycpatternCheck", "test": "\n\nvar arg00 : String = #\"xyzw\"#\nvar arg01 : String = #\"xyw\"#\nvar x0 : Bool = cycpatternCheck(a : arg00, b : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"yello\"#\nvar arg11 : String = #\"ell\"#\nvar x1 : Bool = cycpatternCheck(a : arg10, b : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"whattup\"#\nvar arg21 : String = #\"ptut\"#\nvar x2 : Bool = cycpatternCheck(a : arg20, b : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"efef\"#\nvar arg31 : String = #\"fee\"#\nvar x3 : Bool = cycpatternCheck(a : arg30, b : arg31)\nvar v3 : Bool = true\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"abab\"#\nvar arg41 : String = #\"aabb\"#\nvar x4 : Bool = cycpatternCheck(a : arg40, b : arg41)\nvar v4 : Bool = false\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"winemtt\"#\nvar arg51 : String = #\"tinem\"#\nvar x5 : Bool = cycpatternCheck(a : arg50, b : arg51)\nvar v5 : Bool = true\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\n", "description": "உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு அடி மூலக்கூறாக இருந்தால் நீங்கள் உண்மை என்று திருப்பித் தர வேண்டும். \nசைக்பாடர்ன் _ செக் (\"abcd\", \"abd\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹலோ\", \"எல்\") => உண்மை \nசைக்பேட்டர்ன் _ செக் (\"வஸ்ஸப்\", \"psus\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"அபாப்\", \"பா\") => உண்மை \nசைக்பாடர்ன் _ செக் (\"ஈஃபெஃப்\", \"ஈஃபெஃப்\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹீமென்ஸ்\", \"சைமென்\") => உண்மை", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/75", "entry_point": "intToMiniRoman", "test": "\n\nvar arg00 : Int = 19\nvar x0 : String = intToMiniRoman(number : arg00)\nvar v0 : String = #\"xix\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 152\nvar x1 : String = intToMiniRoman(number : arg10)\nvar v1 : String = #\"clii\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 251\nvar x2 : String = intToMiniRoman(number : arg20)\nvar v2 : String = #\"ccli\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 426\nvar x3 : String = intToMiniRoman(number : arg30)\nvar v3 : String = #\"cdxxvi\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 500\nvar x4 : String = intToMiniRoman(number : arg40)\nvar v4 : String = #\"d\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 1\nvar x5 : String = intToMiniRoman(number : arg50)\nvar v5 : String = #\"i\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 4\nvar x6 : String = intToMiniRoman(number : arg60)\nvar v6 : String = #\"iv\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 43\nvar x7 : String = intToMiniRoman(number : arg70)\nvar v7 : String = #\"xliii\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 90\nvar x8 : String = intToMiniRoman(number : arg80)\nvar v8 : String = #\"xc\"#\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 94\nvar x9 : String = intToMiniRoman(number : arg90)\nvar v9 : String = #\"xciv\"#\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 532\nvar x10 : String = intToMiniRoman(number : arg100)\nvar v10 : String = #\"dxxxii\"#\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\nvar arg110 : Int = 900\nvar x11 : String = intToMiniRoman(number : arg110)\nvar v11 : String = #\"cm\"#\nassert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \")\n\nvar arg120 : Int = 994\nvar x12 : String = intToMiniRoman(number : arg120)\nvar v12 : String = #\"cmxciv\"#\nassert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \")\n\nvar arg130 : Int = 1000\nvar x13 : String = intToMiniRoman(number : arg130)\nvar v13 : String = #\"m\"#\nassert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \")\n\n", "description": "ஒரு நேர்மறை முழு எண்ணைக் கொடுத்தால், அதன் ரோமானிய எண்ணை ஒரு சரமாக சமமாகப் பெறுங்கள், \nஅதை சிறிய எழுத்தில் திருப்பி விடுங்கள். \nகட்டுப்பாடுகள்ஃ 1 <= எண் <= 1000 \n\nஉதாரணங்கள்ஃ \n>> இன்ட் _ டு _ மினி _ ரோமன் (19) = ='xix'\n>> இன்ட் _ டு _ மினி _ ரோமன் (152) = ='க்ளி'\n>> இன்ட் _ டு _ மினி _ ரோமன் (426) = ='cdxxvi'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/76", "entry_point": "rightAngleTriangle", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar arg02 : Int = 5\nvar x0 : Bool = rightAngleTriangle(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 3\nvar x1 : Bool = rightAngleTriangle(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 6\nvar arg22 : Int = 8\nvar x2 : Bool = rightAngleTriangle(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 2\nvar arg31 : Int = 2\nvar arg32 : Int = 2\nvar x3 : Bool = rightAngleTriangle(a : arg30, b : arg31, c : arg32)\nvar v3 : Bool = false\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : Int = 7\nvar arg41 : Int = 24\nvar arg42 : Int = 25\nvar x4 : Bool = rightAngleTriangle(a : arg40, b : arg41, c : arg42)\nvar v4 : Bool = true\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : Int = 10\nvar arg51 : Int = 5\nvar arg52 : Int = 7\nvar x5 : Bool = rightAngleTriangle(a : arg50, b : arg51, c : arg52)\nvar v5 : Bool = false\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : Int = 5\nvar arg61 : Int = 12\nvar arg62 : Int = 13\nvar x6 : Bool = rightAngleTriangle(a : arg60, b : arg61, c : arg62)\nvar v6 : Bool = true\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : Int = 15\nvar arg71 : Int = 8\nvar arg72 : Int = 17\nvar x7 : Bool = rightAngleTriangle(a : arg70, b : arg71, c : arg72)\nvar v7 : Bool = true\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\nvar arg80 : Int = 48\nvar arg81 : Int = 55\nvar arg82 : Int = 73\nvar x8 : Bool = rightAngleTriangle(a : arg80, b : arg81, c : arg82)\nvar v8 : Bool = true\nassert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \")\n\nvar arg90 : Int = 1\nvar arg91 : Int = 1\nvar arg92 : Int = 1\nvar x9 : Bool = rightAngleTriangle(a : arg90, b : arg91, c : arg92)\nvar v9 : Bool = false\nassert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \")\n\nvar arg100 : Int = 2\nvar arg101 : Int = 2\nvar arg102 : Int = 10\nvar x10 : Bool = rightAngleTriangle(a : arg100, b : arg101, c : arg102)\nvar v10 : Bool = false\nassert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \")\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. இவை மூன்றும் இருந்தால் சரி என்று திரும்பவும். \nபக்கங்கள் வலது கோண முக்கோணத்தை உருவாக்குகின்றன, இல்லையெனில் தவறானது. \nஒரு வலது கோண முக்கோணம் என்பது ஒரு கோணம் வலது கோணமாக அல்லது வலது கோணமாக இருக்கும் ஒரு முக்கோணம் ஆகும். \n90 டிகிரி. \nஉதாரணம்ஃ \nவலது கோண முக்கோணம் (3,4,5) = = உண்மை \nவலது கோண முக்கோணம் (1,2,3) = = தவறு", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/77", "entry_point": "solve", "test": "\n\nvar arg00 : String = #\"AsDf\"#\nvar x0 : String = solve(s : arg00)\nvar v0 : String = #\"aSdF\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1234\"#\nvar x1 : String = solve(s : arg10)\nvar v1 : String = #\"4321\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar x2 : String = solve(s : arg20)\nvar v2 : String = #\"AB\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"#a@C\"#\nvar x3 : String = solve(s : arg30)\nvar v3 : String = #\"#A@c\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\nvar arg40 : String = #\"#AsdfW^45\"#\nvar x4 : String = solve(s : arg40)\nvar v4 : String = #\"#aSDFw^45\"#\nassert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \")\n\nvar arg50 : String = #\"#6@2\"#\nvar x5 : String = solve(s : arg50)\nvar v5 : String = #\"2@6#\"#\nassert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \")\n\nvar arg60 : String = #\"#\\$a^D\"#\nvar x6 : String = solve(s : arg60)\nvar v6 : String = #\"#\\$A^d\"#\nassert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \")\n\nvar arg70 : String = #\"#ccc\"#\nvar x7 : String = solve(s : arg70)\nvar v7 : String = #\"#CCC\"#\nassert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \")\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nஎஸ் [ஐ] ஒரு எழுத்தாக இருந்தால், அதன் வழக்கை கீழ் இருந்து மேல் அல்லது நேர்மாறாக மாற்றவும், \nஇல்லையெனில் அதை அப்படியே வைத்திருங்கள். \nசரத்தில் எழுத்துக்கள் இல்லையென்றால், சரத்தை தலைகீழாக மாற்றவும். \nசெயல்பாடு விளைந்த சரத்தை திருப்பித் தர வேண்டும். \nஉதாரணங்கள் \nதீர்வு (\"1234\") = \"4321\" \nதீர்வு (\"ஏபி\") = \"ஏபி\" \nதீர்க்கவும் (\"#a @C\") = \"#A @c\"", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/78", "entry_point": "stringToMd5", "test": "\n\nvar arg00 : String = #\"Hello world\"#\nvar x0 : String = stringToMd5(text : arg00)\nvar v0 : String = #\"3e25960a79dbc69b674cd4ec67a72c62\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"\"#\nvar x1 : String = stringToMd5(text : arg10)\nvar v1 : String = \"none\"\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"A B C\"#\nvar x2 : String = stringToMd5(text : arg20)\nvar v2 : String = #\"0ef78513b0cb8cef12743f5aeb35f888\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : String = #\"password\"#\nvar x3 : String = stringToMd5(text : arg30)\nvar v3 : String = #\"5f4dcc3b5aa765d61d8327deb882cf99\"#\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "ஒரு சரம்'உரை'கொடுக்கப்பட்டால், அதன் md5 ஹாஷ் சமமான சரத்தைத் திருப்பித் தரவும். \n'உரை'ஒரு வெற்று சரம் என்றால், பூஜ்யத்தைத் திருப்பவும். \n\n>> சரம் _ முதல் _ md5 வரை ('வணக்கம் உலகம்') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "swift/79", "entry_point": "generateIntegers", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 10\nvar x0 : [AnyHashable] = generateIntegers(a : arg00, b : arg01)\nvar v0 : [AnyHashable] = [2, 4, 6, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = generateIntegers(a : arg10, b : arg11)\nvar v1 : [AnyHashable] = [2, 4, 6, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 132\nvar arg21 : Int = 2\nvar x2 : [AnyHashable] = generateIntegers(a : arg20, b : arg21)\nvar v2 : [AnyHashable] = [2, 4, 6, 8]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\nvar arg30 : Int = 17\nvar arg31 : Int = 89\nvar x3 : [AnyHashable] = generateIntegers(a : arg30, b : arg31)\nvar v3 : [AnyHashable] = []\nassert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \")\n\n", "description": "a மற்றும் b ஆகிய இரண்டு நேர்மறை முழு எண்களைக் கொடுத்தால், a க்கு இடையே உள்ள சம இலக்கங்களைத் திருப்பித் தரவும். \nமற்றும் b, ஏறுவரிசையில். \n\nஉதாரணத்திற்குஃ \nமுழு எண்களை உருவாக்குதல் (2,8) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (8,2) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (10,14) => []", "language": "swift", "canonical_solution": null, "natural_language": "Tamil"}
