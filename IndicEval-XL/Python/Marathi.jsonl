{"task_id": "python/0", "entry_point": "below_zero", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "language": "python", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "description": "तुम्हाला बँक खात्यातील ठेवी आणि पैसे काढण्याच्या कामांची यादी दिली जाते, जी या शब्दाने सुरू होते. \nशून्य शिल्लक. कोणत्याही क्षणी खात्यातील शिल्लक शून्याच्या खाली येते का हे शोधणे हे तुमचे काम आहे, आणि \nत्या वेळी फंक्शनने खरे परत केले पाहिजे. अन्यथा ते खोटे परत केले पाहिजे. \n>>> शून्याच्या खाली ([1,2,3]) \nखोटारडेपणा. \n>>> शून्याच्या खाली ([1,2,-4,5]) \nखरे आहे.", "natural_language": "Marathi"}
{"task_id": "python/1", "entry_point": "sum_product", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "language": "python", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "description": "पूर्णांकांच्या दिलेल्या यादीसाठी, यादीतील सर्व पूर्णांकांची बेरीज आणि गुणाकार असलेले टुपल परत करा. \nरिकामी बेरीज 0 च्या बरोबरीची असावी आणि रिकामे गुणाकार 1 च्या बरोबरीचा असावा. \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "natural_language": "Marathi"}
{"task_id": "python/2", "entry_point": "string_xor", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "language": "python", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "description": "इनपुट हे दोन स्ट्रिंग a आणि b आहेत ज्यात फक्त 1s आणि 0s आहेत. \nया इनपुटवर बायनरी एक्सओआर करा आणि परिणाम देखील स्ट्रिंग म्हणून परत करा. \n>> स्ट्रिंग _ xor ('010','110') \n'100'", "natural_language": "Marathi"}
{"task_id": "python/3", "entry_point": "longest", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "language": "python", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "description": "स्ट्रिंगच्या यादीमधून सर्वात लांब स्ट्रिंग परत करा. एकाधिक असल्यास पहिली परत करा. \nसमान लांबीच्या स्ट्रिंग. इनपुट यादी रिकामी असल्यास शून्य परत करा. \n>>> सर्वात लांब ([]) \n\n>>> सर्वात लांब (['अ','ब','क']) \n'अ'\n>>> सर्वात लांब (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "natural_language": "Marathi"}
{"task_id": "python/4", "entry_point": "greatest_common_divisor", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "language": "python", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "description": "अ आणि ब या दोन पूर्णांकांचा सर्वात मोठा सामान्य विभाजक परत करा. \n>>> ग्रेटेस्ट _ कॉमन _ डिव्हायझर (3,5) \n1. \n>>> ग्रेटेस्ट _ कॉमन _ डिव्हायझर (25,15) \n5.", "natural_language": "Marathi"}
{"task_id": "python/5", "entry_point": "sort_numbers", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "language": "python", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "description": "इनपुट ही'शून्य'ते'नऊ'पर्यंतच्या संख्यांची जागा-सीमांकित स्ट्रिंग आहे. \n'शून्य','एक','दोन','तीन','चार','पाच','सहा','सात','आठ'आणि'नऊ'हे वैध पर्याय आहेत. \nसर्वात लहान ते सर्वात मोठ्या क्रमांकांसह स्ट्रिंग परत करा \n>>> क्रमांकांची क्रमवारी लावा ('तीन एक पाच') \n'एक तीन पाच'", "natural_language": "Marathi"}
{"task_id": "python/6", "entry_point": "rescale_to_unit", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "language": "python", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "description": "संख्यांची (किमान दोन घटकांची) यादी दिल्यास, त्या यादीत एक रेषीय परिवर्तन लागू करा, \nम्हणजे सर्वात लहान संख्या 0 होईल आणि सर्वात मोठी संख्या 1 होईल. \n>> पुनर्चक्रण _ ते _ एकक ([1., 2., 3., 4., 5]) \n[0,0,25,0,0.75,1.0]", "natural_language": "Marathi"}
{"task_id": "python/7", "entry_point": "flip_case", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "language": "python", "canonical_solution": "    return string.swapcase()\n", "description": "दिलेल्या स्ट्रिंगसाठी, लहान अक्षरांना मोठ्या अक्षरात आणि मोठ्या अक्षरांना लहान अक्षरात उलटवा. \n>>> फ्लीप केस ('हॅलो') \n'हॅलो'", "natural_language": "Marathi"}
{"task_id": "python/8", "entry_point": "get_positive", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "language": "python", "canonical_solution": "    return [e for e in l if e > 0]\n", "description": "यादीतील केवळ सकारात्मक संख्या परत करा. \n>>> सकारात्मक मिळवा ([-1,2,-4,5,6]) \n[2,5,6] \n>>> सकारात्मक मिळवा ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "natural_language": "Marathi"}
{"task_id": "python/9", "entry_point": "is_prime", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "language": "python", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "description": "दिलेली संख्या अभाज्य असल्यास खरी परत करा आणि अन्यथा खोटी. \n>>> हे _ प्राइम आहे (6) \nखोटारडेपणा. \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nखरे आहे. \n>>> हे _ प्राइम आहे (11) \nखरे आहे. \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nखरे आहे. \n>>> हे _ प्राइम आहे (61) \nखरे आहे. \n>>> हे _ प्राइम आहे (4) \nखोटारडेपणा. \n>>> हे _ प्राइम आहे (1) \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/10", "entry_point": "unique", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "language": "python", "canonical_solution": "    return sorted(list(set(l)))\n", "description": "यादीतील क्रमवारी लावलेले अद्वितीय घटक परत करा \n>>> अद्वितीय ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "natural_language": "Marathi"}
{"task_id": "python/11", "entry_point": "prime_fib", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "language": "python", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "description": "प्राइम _ फायब n-th संख्या परत करतो जी फिबोनाची संख्या आहे आणि ती देखील अविभाज्य आहे. \n>>> प्राइम _ फायब (1) \n2. \n>>> प्राइम _ फायब (2) \n3. \n>>> प्राइम _ फायब (3) \n5. \n>>> प्राइम _ फायब (4) \n13. \n>>> प्राइम _ फायब (5) \n89", "natural_language": "Marathi"}
{"task_id": "python/12", "entry_point": "triples_sum_to_zero", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "language": "python", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "description": "ट्रिपल्स _ सम _ ते _ शून्य हे इनपुट म्हणून पूर्णांकांची यादी घेतात. \nयादीत तीन वेगळे घटक असल्यास ते खरे परत करते \nबेरीज शून्यावर, आणि अन्यथा खोटे. \n\n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,35,5,0]) \nखोटारडेपणा. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,3,-2,1]) \nखरे आहे. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1,2,3,7]) \nखोटारडेपणा. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([2,4,-5,3,9,7]) \nखरे आहे. \n>>> ट्रिपल्स _ सम _ ते _ शून्य ([1]) \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/13", "entry_point": "pairs_sum_to_zero", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "language": "python", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "description": "pairs _ sum _ to _ zero हे इनपुट म्हणून पूर्णांकांची यादी घेते. \nयादीत दोन वेगळे घटक असल्यास ते खरे परत करते \nबेरीज शून्यावर, आणि अन्यथा खोटे. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,35,5,0]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,3,-2,1]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1,2,3,7]) \nखोटारडेपणा. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([2,4,-5,3,5,7]) \nखरे आहे. \n>>> जोड्या _ बेरीज _ ते _ शून्य ([1]) \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/14", "entry_point": "fib4", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "language": "python", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "description": "फायब 4 क्रमांकाचा क्रम हा फायबोनॅकी सेकुनेससारखाच एक क्रम आहे ज्याची व्याख्या खालीलप्रमाणे केली आहेः \nफायब 4 (0)-> 0 \nफायब 4 (1)-> 0 \nफायब 4 (2)-> 2 \nफायब 4 (3)-> 0 \nफायब 4 (एन)-> फायब 4 (एन-1) + फायब 4 (एन-2) + फायब 4 (एन-3) + फायब 4 (एन-4). \nफायब 4 क्रमांकाच्या क्रमाचा n-th घटक कार्यक्षमतेने मोजण्यासाठी कृपया कार्य लिहा. पुनरावृत्ती वापरू नका. \n>>> फायब 4 (5) \n4. \n>>> फायब 4 (6) \n8. \n>>> फायब 4 (7) \n14.", "natural_language": "Marathi"}
{"task_id": "python/15", "entry_point": "median", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "language": "python", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "description": "यादीतील घटकांची मध्यक परत करा. \n>>> मध्यक ([3,1,2,4,5]) \n3. \n>>> मध्यक ([-10,4,6,1000,10,20]) \n15. 0", "natural_language": "Marathi"}
{"task_id": "python/16", "entry_point": "is_palindrome", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "language": "python", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "description": "दिलेली स्ट्रिंग पॅलिंड्रोम आहे का ते तपासते \n>>> हे पॅलिंड्रोम आहे (\") \nखरे आहे. \n>>> हे पॅलिंड्रोम आहे ('अबा') \nखरे आहे. \n>>> हे पॅलिंड्रोम आहे ('एएएए') \nखरे आहे. \n>>> is _ palindrom ('zbcd') आहे \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/17", "entry_point": "remove_vowels", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "language": "python", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "description": "रिमूव्ह _ व्हॉवेल्स हे एक कार्य आहे जे स्ट्रिंग घेते आणि स्वरांशिवाय स्ट्रिंग परत करते. \n>>> स्वर काढून टाका (\") \n\"\n>>> स्वर काढून टाका (\"abcdef\\nghijklm\") \n'बी. सी. डी. एफ. \\एनजी. जे. के. एल. एम.'\n>>> स्वर काढून टाका ('abcdef') \n'बी. सी. डी. एफ.'\n>>> स्वर काढून टाका ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"\n>>> स्वर काढून टाका ('आ. ए. बी. ए. ए.') \n'ब'\n>>> स्वर काढून टाका ('zbcd') \n'zbcd'", "natural_language": "Marathi"}
{"task_id": "python/18", "entry_point": "below_threshold", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "language": "python", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "description": "'l'यादीमधील सर्व संख्या't'च्या थ्रेशोल्डच्या खाली असल्यास'खरे'परत करा. \n>>> थ्रेशोल्डच्या खाली ([1,2,4,10], 100) \nखरे आहे. \n>>> थ्रेशोल्डच्या खाली ([1,20,4,10], 5) \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/19", "entry_point": "add", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "language": "python", "canonical_solution": "    return x + y\n", "description": "x आणि y या दोन संख्या जोडा. \n>>> जोडा (2,3) \n5. \n>>> जोडा (5,7) \n12.", "natural_language": "Marathi"}
{"task_id": "python/20", "entry_point": "same_chars", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "language": "python", "canonical_solution": "    return set(s0) == set(s1)\n", "description": "दोन शब्दांमध्ये समान अक्षरे आहेत का ते तपासा. \n>>> समान _ अक्षर ('eabcdzzzz','dddzzzzzuddeddabc') \nखरे आहे. \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखरे आहे. \n>>> समान अक्षर ('ddddddabc','abcd') \nखरे आहे. \n>>> समान अक्षर ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखोटारडेपणा. \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nखोटारडेपणा. \n>>> समान _ अक्षर ('eabcdzzzz','dddzzzzzddddddabc') \nखोटारडेपणा.", "natural_language": "Marathi"}
{"task_id": "python/21", "entry_point": "fib", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "language": "python", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "description": "n-th फिबोनाची क्रमांक परत करा. \n>>> फायब (10) \n55. \n>>> फायब (1) \n1. \n>>> फायब (8) \n21.", "natural_language": "Marathi"}
{"task_id": "python/22", "entry_point": "common", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "language": "python", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "description": "दोन याद्यांसाठी विशिष्ट सामान्य घटकांची क्रमवारी लावून परत करा. \n>> सामान्य ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्य ([5,3,2,8], [3,2]) \n[2,3]", "natural_language": "Marathi"}
{"task_id": "python/23", "entry_point": "largest_prime_factor", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "language": "python", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "description": "n चा सर्वात मोठा अभाज्य घटक परत करा. n> 1 समजा आणि तो अभाज्य नाही. \n>>> सर्वांत मोठा _ मुख्य _ घटक (13195) \n29 \n>>> सर्वांत मोठा _ मुख्य _ घटक (2048) \n2.", "natural_language": "Marathi"}
{"task_id": "python/24", "entry_point": "sum_to_n", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "language": "python", "canonical_solution": "    return sum(range(n + 1))\n", "description": "sum _ to _ n हे एक कार्य आहे जे 1 ते n पर्यंतच्या संख्यांची बेरीज करते. \n>>> बेरीज _ ते _ एन (30) \n465 \n>>> बेरीज _ ते _ एन (100) \n5050 \n>>> बेरीज _ ते _ एन (5) \n15. \n>>> बेरीज _ ते _ एन (10) \n55. \n>>> बेरीज _ ते _ एन (1) \n1.", "natural_language": "Marathi"}
{"task_id": "python/25", "entry_point": "derivative", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "language": "python", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "description": "xs हे बहुपदीचे गुणांक दर्शवते. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nया बहुपदीचे व्युत्पन्न त्याच स्वरूपात परत करा. \n>>> व्युत्पन्न ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्न ([1,2,3]) \n[2,6]", "natural_language": "Marathi"}
{"task_id": "python/26", "entry_point": "fibfib", "test": "\n\nMETADATA = {}\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "language": "python", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "description": "फायबफायब क्रमांकाचा क्रम हा फायबॉनॅकी सेकुनेससारखाच एक क्रम आहे ज्याची व्याख्या खालीलप्रमाणे केली आहेः \nफायबफायब (0) = = 0 \nफायबफायब (1) = = 0 \nफायबफायब (2) = = 1 \nफायबफायब (एन) = = फायबफायब (एन-1) + फायबफायब (एन-2) + फायबफायब (एन-3). \nफायबफायब क्रमांकाच्या अनुक्रमाच्या एन-व्या घटकाची कार्यक्षमतेने गणना करण्यासाठी कृपया एक कार्य लिहा. \n>>> फायबफायब (1) \n0. \n>>> फायबफायब (5) \n4. \n>>> फायबफायब (8) \n24.", "natural_language": "Marathi"}
{"task_id": "python/27", "entry_point": "vowels_count", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "description": "एक स्वर गणना कार्य लिहा जे दर्शविणारी स्ट्रिंग घेते \nइनपुट म्हणून एक शब्द आणि स्ट्रिंगमधील स्वरांची संख्या परत करतो. \nया प्रकरणात स्वर'अ','ई','आय','ओ','यू'आहेत. येथे,'वाय'देखील एक आहे. \nस्वर, परंतु जेव्हा तो दिलेल्या शब्दाच्या शेवटी असतो तेव्हाच. \n\nउदाहरणादाखलः \n>>> स्वरांची गणना (\"ए. बी. सी. डी\".) \n2. \n>>> स्वरांची गणना (\"ACEDY\") \n3.", "natural_language": "Marathi"}
{"task_id": "python/28", "entry_point": "search", "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "language": "python", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "description": "तुम्हाला सकारात्मक पूर्णांकांची रिकामी नसलेली यादी दिली जाते. त्यापेक्षा मोठा असलेला सर्वात मोठा पूर्णांक परत करा. \nशून्य, आणि त्याची वारंवारता पूर्णांकाच्या मूल्यापेक्षा जास्त किंवा समान असते. \nपूर्णांकाची वारंवारता म्हणजे ती यादीत किती वेळा दिसते. \nअसे कोणतेही मूल्य अस्तित्वात नसल्यास,-1 परत करा. \nउदाहरणेः \nशोध ([4,1,2,2,3,1]) = = 2 \nशोध ([1,2,3,3,4,4]) = = 3 \nशोध ([5,5,4,4]) = =-1", "natural_language": "Marathi"}
{"task_id": "python/29", "entry_point": "triangle_area", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "language": "python", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "description": "त्रिकोणाच्या तीन बाजूंची लांबी दिलेली. त्याचे क्षेत्रफळ परत करा \nजर तीन बाजूंनी वैध त्रिकोण तयार झाला तर त्रिकोण 2 दशांश बिंदूंवर गोल केला जातो. \nअन्यथा परतावा-1 \nजेव्हा कोणत्याही दोन बाजूंची बेरीज जास्त असते तेव्हा तीन बाजू वैध त्रिकोण बनवतात. \nतिसऱ्या बाजूला. \nउदाहरणादाखलः \nत्रिभुज क्षेत्र (3,4,5) = = 6.00 \nत्रिभुज क्षेत्र (1,2,10) = =-1", "natural_language": "Marathi"}
{"task_id": "python/30", "entry_point": "will_it_fly", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "language": "python", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "description": "एखादे कार्य लिहा जे q वस्तू उडत असेल तर खरे आणि अन्यथा खोटे परत करेल. \nजर वस्तू क्यू संतुलित असेल (ती एक पॅलिन्ड्रोमिक यादी आहे) आणि त्याच्या घटकांची बेरीज जास्तीत जास्त संभाव्य वजन डब्ल्यू पेक्षा कमी किंवा समान असेल तर ती उडेल. \n\nउदाहरणादाखलः \nतो उडणार का ([1,2], 5) \n#1 + 2 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे, परंतु ते असंतुलित आहे. \n\nतो उडणार का ([3,2,3], 1) खोटे \n#हे संतुलित आहे, परंतु 3 + 2 + 3 हे जास्तीत जास्त संभाव्य वजनापेक्षा जास्त आहे. \n\nविल इट फ्लाय ([3,2,3], 9) \n#3 + 2 + 3 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे आणि ते संतुलित आहे. \n\nविल इट फ्लाय ([3], 5) ट्रू \n#3 हे जास्तीत जास्त संभाव्य वजनापेक्षा कमी आहे आणि ते संतुलित आहे.", "natural_language": "Marathi"}
{"task_id": "python/31", "entry_point": "is_multiply_prime", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "language": "python", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "description": "जर दिलेली संख्या 3 अभाज्य संख्यांचा गुणाकार असेल तर असे कार्य लिहा जे खरे ठरेल. \nआणि अन्यथा खोटे. \n(अ) हे 100 पेक्षा कमी आहे हे जाणून घेणे. \nउदाहरणादाखलः \nगुणाकार _ प्राइम (30) = = खरे आहे \n30 = 2 * 3 * 5", "natural_language": "Marathi"}
{"task_id": "python/32", "entry_point": "decimal_to_binary", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "description": "तुम्हाला दशांश स्वरूपात एक संख्या दिली जाईल आणि तुमचे काम त्याचे रूपांतर करणे आहे. \nद्वैती स्वरूप. कार्याने एक स्ट्रिंग परत करावी, ज्यामध्ये प्रत्येक वर्ण द्वैती दर्शवितो \nसंख्या. स्ट्रिंगमधील प्रत्येक अक्षर'0'किंवा'1'असेल. \n\nस्ट्रिंगच्या सुरुवातीला आणि शेवटी'डी. बी.'अशी दोन अतिरिक्त अक्षरे असतील. \nस्वरूपामध्ये मदत करण्यासाठी अतिरिक्त अक्षरे आहेत. \n\nउदाहरणेः \nदशांश _ ते _ द्वैती (15) #\"db1111db\" परत करते \nदशांश _ ते _ द्वैती (32) #\"db100000db\" परत करते", "natural_language": "Marathi"}
{"task_id": "python/33", "entry_point": "is_happy", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "language": "python", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "description": "तुम्हाला एक स्ट्रिंग s दिली जाते. \nस्ट्रिंग आनंदी आहे की नाही हे तपासणे हे तुमचे काम आहे. \nजर स्ट्रिंगची लांबी किमान 3 असेल आणि प्रत्येक 3 सलग अक्षरे वेगळी असतील तर ती आनंदी असते. \nउदाहरणार्थ, \nआनंदी (अ) => खोटे आहे \nआहे _ आनंदी (एए) => खोटे \nआनंदी आहे (ए. बी. सी. डी.) => खरे \nआनंदी आहे (आब्ब) => खोटे \nआनंदी आहे (ADB) => खरे \nआनंदी आहे (xyy) => खोटे", "natural_language": "Marathi"}
{"task_id": "python/34", "entry_point": "numerical_letter_grade", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "description": "हा सत्राचा शेवटचा आठवडा असतो आणि शिक्षकांना गुण द्यावे लागतात. \nविद्यार्थ्यांना. शिक्षक ग्रेडिंगसाठी स्वतःचे अल्गोरिदम तयार करत आहेत. \nफक्त एकच अडचण आहे की, तिने ग्रेडिंगसाठी वापरलेला कोड गमावला आहे. \nतिने तुम्हाला काही विद्यार्थ्यांसाठी जी. पी. ए. ची यादी दिली आहे आणि तुम्हाला लिहावे लागेल. \nएक कार्य जे खालील तक्ता वापरून अक्षर श्रेणीची यादी तयार करू शकतेः \nजी. पी. ए.। अक्षर श्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n> 3 बी + \n> 2.7 बी \n> 2.3 ब-\n> 2 सी + \n> 1.7 से. \n> 1.3 सी-\n> 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणादाखलः \nश्रेणी समीकरण ([4.0,3,1.7,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "natural_language": "Marathi"}
{"task_id": "python/35", "entry_point": "prime_length", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "language": "python", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "description": "एक कार्य लिहा जे स्ट्रिंग घेते आणि स्ट्रिंग असल्यास खरे परत करते \nलांबी ही अभाज्य संख्या आहे किंवा अन्यथा चुकीची आहे \nउदाहरणे \nप्राइम लांबी ('हॅलो') = = खरे \nप्राइम लांबी ('एबीसीडीसीबीए') = = खरे \nप्राइम लांबी ('मांजरीचे पिल्लू') = = खरे \nअविभाज्य लांबी ('नारिंगी') = = चुकीची", "natural_language": "Marathi"}
{"task_id": "python/36", "entry_point": "solve", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "language": "python", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "description": "एक सकारात्मक पूर्णांक N दिल्यास, त्याच्या अंकांची एकूण बेरीज बायनरीमध्ये परत करा. \n\nउदाहरणादाखल \nएन = 1000 साठी, अंकांची बेरीज 1 असेल तर उत्पादन \"1\" असावे. \nएन = 150 साठी, अंकांची बेरीज 6 असेल आणि उत्पादन \"110\" असावे. \nएन = 147 साठी, अंकांची बेरीज 12 असेल तर उत्पादन \"1100\" असावे. \n\nपरिवर्तनशीलः \n@N पूर्णांक \nनिर्बंधः 0 ≤ एन ≤ 10000. \nउत्पादनः \nद्वैती क्रमांकाची एक स्ट्रिंग", "natural_language": "Marathi"}
{"task_id": "python/37", "entry_point": "get_row", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "description": "तुम्हाला नेस्टेड यादी म्हणून द्विमितीय माहिती दिली जाते, \nजे मॅट्रिक्ससारखेच आहे, तथापि, मॅट्रिक्सच्या विपरीत, \nप्रत्येक ओळीत वेगवेगळ्या स्तंभांची संख्या असू शकते. \nदिलेल्या lst आणि पूर्णांक x मध्ये, यादीतील पूर्णांक x शोधा, \nआणि टुपल्सची परत यादी, [(x1, y1), (x2, y2)...] अशी की \nप्रत्येक टुपल हा एक निर्देशांक आहे-(पंक्ती, स्तंभ), जो 0 ने सुरू होतो. \nनिर्देशांक सुरुवातीला चढत्या क्रमाने ओळींनुसार क्रमवारी लावा. \nतसेच, पंक्तीचे निर्देशांक स्तंभांनुसार उतरत्या क्रमाने क्रमवारीत करा. \n\nउदाहरणेः \nपंक्ती मिळवा (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nमिळवा _ पंक्ती ([], 1) = = [] \nमिळवा _ पंक्ती ([[], [1], [1,2,3]], 3) = = [(2,2)]", "natural_language": "Marathi"}
{"task_id": "python/38", "entry_point": "next_smallest", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "description": "तुम्हाला पूर्णांकांची यादी दिली जाते. \nयादीतील दुसरा सर्वात लहान घटक परत करणारे पुढील _ सर्वात लहान () हे कार्य लिहा. \nअसा कोणताही घटक नसल्यास शून्य परत करा. \n\nपुढील _ सर्वात लहान ([1,2,3,4,5]) = = 2 \nपुढील _ सर्वात लहान ([5,1,4,3,2]) = = 2 \nपुढील _ सर्वात लहान ([]) = = काहीही नाही \nपुढील _ सर्वात लहान ([1,1]) = = काहीही नाही", "natural_language": "Marathi"}
{"task_id": "python/39", "entry_point": "is_bored", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "description": "तुम्हाला शब्दांची एक मालिका दिली जाईल आणि तुमचे काम संख्या मोजणे आहे. \nकंटाळवाणेपणा. कंटाळवाणेपणा हे \"मी\" या शब्दाने सुरू होणारे वाक्य आहे. \nवाक्ये '.', '?'किंवा '!'द्वारे सीमांकित केली जातात. \n\nउदाहरणार्थ, \n>>> कंटाळले आहे (\"हॅलो वर्ल्ड\") \n0. \n>>> कंटाळले आहे (\"आकाश निळे आहे. सूर्य चमकतो आहे. मला हे हवामान आवडते\") \n1.", "natural_language": "Marathi"}
{"task_id": "python/40", "entry_point": "skjkasdkd", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "language": "python", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "description": "तुम्हाला पूर्णांकांची यादी दिली जाते. \nतुम्हाला सर्वात मोठे मूळ मूल्य शोधावे लागेल आणि त्याच्या अंकांची बेरीज परत करावी लागेल. \n\nउदाहरणेः \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] साठी आउटपुट 10 असावे. \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] साठी आउटपुट 25 असावे. \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] साठी आउटपुट 13 असावे. \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] साठी आउटपुट 11 असावे. \nlst = [0,81,12, 3,1,21] साठी आउटपुट 3 असावे. \nlst = [0,8,1, 2,1,7] साठी आउटपुट 7 असावे.", "natural_language": "Marathi"}
{"task_id": "python/41", "entry_point": "check_dict_case", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "language": "python", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "description": "शब्दकोश दिल्यास, जर सर्व किल्ली खालच्या भागात स्ट्रिंग असतील तर खरे परत करा \nकेस किंवा सर्व किल्ली मोठ्या केस मध्ये स्ट्रिंग आहेत, अन्यथा खोटे परत करा. \n'फॉल्स'हे फंक्शन रिटर्न करावे म्हणजे दिलेला शब्दकोश रिकामा आहे. \nउदाहरणेः \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", \"b\": \"केळी\"}) ने खरे परतावे. \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", \"A\": \"केळी\", \"B\": \"केळी\"}) ने चुकीचे परतावे. \nचेक _ डिक्ट _ केस ({\"a\": \"सफरचंद\", 8: \"केळी\", \"a\": \"सफरचंद\"}) ने चुकीचे परतावे. \nचेक _ डिक्ट _ केस ({\"नाव\": \"जॉन\", \"वय\": \"36\", \"शहर\": \"ह्यूस्टन\"}) ने फॉल्स परत केले पाहिजे. \nचेक _ डिक्ट _ केस ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) ने खरे परतावे.", "natural_language": "Marathi"}
{"task_id": "python/42", "entry_point": "closest_integer", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "language": "python", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "description": "संख्येचे प्रतिनिधित्व करणारे मूल्य (स्ट्रिंग) घेणारे कार्य तयार करा \nआणि त्याला सर्वात जवळचा पूर्णांक परत करतो. जर संख्या समदूर असेल तर \nदोन पूर्णांकांपासून, शून्यापासून दूर गोल करा. \n\nउदाहरणे \n>>> सर्वात जवळचा पूर्णांक (\"10\") \n10. \n>>> सर्वात जवळचा पूर्णांक (\"15.3\") \n15. \n\nटीपः \nशून्यापासून दूर पूर्णांक करणे म्हणजे जर दिलेली संख्या समदूर असेल तर \nदोन पूर्णांकांमधून, तुम्ही ज्याला परत केले पाहिजे ते आहे \nशून्यापासून सर्वात दूर. उदाहरणार्थ सर्वात जवळचा पूर्णांक (\"14.5\") असायला हवा. \n15 परत करा आणि सर्वात जवळचा पूर्णांक (\"-14.5\")-15 परत करावा.", "natural_language": "Marathi"}
{"task_id": "python/43", "entry_point": "make_a_pile", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "description": "एक सकारात्मक पूर्णांक n दिल्यास, तुम्हाला दगडांच्या n स्तरांचा ढीग तयार करावा लागेल. \nपहिल्या स्तरावर एन दगड आहेत. \nपुढील स्तरावरील दगडांची संख्या अशी आहेः \n- n विषम असल्यास पुढील विषम संख्या. \n- जर n सम असेल तर पुढील सम संख्या. \nसूचीतील प्रत्येक स्तरावरील दगडांची संख्या परत करा, जेथे घटक निर्देशांकात आहे. \ni पातळीवरील दगडांची संख्या दर्शविते (i + 1). \n\nउदाहरणेः \n>>> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3,5,7]", "natural_language": "Marathi"}
{"task_id": "python/44", "entry_point": "words_string", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "language": "python", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "description": "तुम्हाला अल्पविराम किंवा मोकळ्या जागांनी विभक्त केलेल्या शब्दांची एक स्ट्रिंग दिली जाईल. तुमचे कार्य आहे \nस्ट्रिंगचे शब्दांमध्ये विभाजन करणे आणि शब्दांची एक श्रेणी परत करणे. \n\nउदाहरणार्थ, \nशब्द _ स्ट्रिंग (\"हाय, माझे नाव जॉन आहे\") = = [\"हाय\", \"माझे\", \"नाव\", \"आहे\", \"जॉन\"] \nशब्द _ स्ट्रिंग (\"एक, दोन, तीन, चार, पाच, सहा\") = = [\"एक\", \"दोन\", \"तीन\", \"चार\", \"पाच\", \"सहा\"]", "natural_language": "Marathi"}
{"task_id": "python/45", "entry_point": "choose_num", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "language": "python", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "description": "हे कार्य x आणि y या दोन सकारात्मक संख्या घेते आणि परत करते \n[x, y] सर्वसमावेशक श्रेणीतील सर्वात मोठी सम पूर्णांक संख्या. \nअशी कोणतीही संख्या नाही, तर कार्य-1 परत आले पाहिजे. \n\nउदाहरणार्थ, \nसंख्या निवडा (12,15) = 14 \nसंख्या निवडा (13,12) =-1", "natural_language": "Marathi"}
{"task_id": "python/46", "entry_point": "rounded_avg", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "language": "python", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "description": "तुम्हाला दोन सकारात्मक पूर्णांक n आणि m दिले आहेत आणि तुमचे कार्य गणना करणे आहे \nn ते m पर्यंतच्या पूर्णांकांची सरासरी (n आणि m सह). \nसर्वात जवळच्या पूर्णांकाच्या उत्तराला गोल करा आणि त्याचे बायनरीमध्ये रूपांतर करा. \nजर n हा m पेक्षा मोठा असेल तर-1 परत करा. \nउदाहरणादाखलः \nगोलाकार _ ए. व्ही. जी. (1,5) => \"0बी11\" \nगोलाकार _ ए. व्ही. जी. (7,5) =>-1 \nगोलाकार _ ए. व्ही. जी. (10,20) => \"0बी1111\" \nगोलाकार _ ए. व्ही. जी. (20,33) => \"0b11010\"", "natural_language": "Marathi"}
{"task_id": "python/47", "entry_point": "f", "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "language": "python", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "description": "फंक्शन f ची अंमलबजावणी करा जे n ला पॅरामीटर म्हणून घेते, \nआणि आकार n ची यादी अशा प्रकारे परत करते, की जर i सम असेल तर निर्देशांक i वरील घटकाचे मूल्य हे i चे फॅक्टोरियल असेल. \nकिंवा अन्यथा 1 ते i पर्यंतच्या संख्यांची बेरीज. \nमी 1 पासून सुरुवात करतो. \ni चा फॅक्टोरियल म्हणजे 1 ते i (1 * 2 *... * i) पर्यंतच्या संख्यांचा गुणाकार. \nउदाहरणादाखलः \nf (5) = = [1,2,6,24,15]", "natural_language": "Marathi"}
{"task_id": "python/48", "entry_point": "even_odd_palindrome", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "description": "एक सकारात्मक पूर्णांक n दिल्यास, सम आणि विषम संख्या असलेले टुपल परत करा \nपूर्णांक पॅलिंड्रोम्स जे (1, एन) श्रेणीत येतात, सर्वसमावेशक. \n\nउदाहरण 1: \n\nइनपुटः 3 \nउत्पादनः (1,2) \nस्पष्टीकरणः \nपूर्णांक पॅलिंड्रोम 1,2,3 आहेत. त्यापैकी एक सम आहे आणि त्यापैकी दोन विषम आहेत. \n\nउदाहरण 2: \n\nइनपुटः 12 \nउत्पादनः (4,6) \nस्पष्टीकरणः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हे पूर्णांक पॅलिंड्रोम आहेत. त्यापैकी चार सम आहेत आणि त्यापैकी 6 विषम आहेत. \n\nटीपः \n1. 1 <= n <= 10 ^ 3 \n2. परत आलेल्या टुपलमध्ये अनुक्रमे सम आणि विषम पूर्णांक पॅलिंड्रोम्सची संख्या असते.", "natural_language": "Marathi"}
{"task_id": "python/49", "entry_point": "move_one_ball", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "language": "python", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "description": "आमच्याकडे'arr'हा N पूर्णांक arr [1], arr [2],..., arr [N] चा अॅरे आहे. \nरचनेतील संख्या यादृच्छिकपणे क्रमबद्ध केल्या जातील. हे ठरवणे हे तुमचे काम आहे \nसादरीकरण करून कमी न होणाऱ्या क्रमाने अॅरेची क्रमवारी लावणे शक्य आहे. \nदिलेल्या अॅरेवर खालील ऑपरेशनः \nतुम्हाला कितीही वेळा योग्य शिफ्ट ऑपरेशन करण्याची परवानगी आहे. \n\nवन राईट शिफ्ट ऑपरेशन म्हणजे अॅरेच्या सर्व घटकांना एकाने हलवणे. \nयोग्य दिशेने स्थान. आरेचा शेवटचा घटक येथे हलविला जाईल \nअॅरेमधील प्रारंभिक स्थान म्हणजे 0 व्या निर्देशांकात. \n\nवरील ऑपरेशन करून क्रमवारी लावलेली अॅरे मिळवणे शक्य असल्यास \nनंतर'खरे'परत करा अन्यथा'खोटे'परत करा. \nजर दिलेला अॅरे रिकामा असेल तर खरे परत करा. \n\nटीपः दिलेल्या यादीमध्ये अद्वितीय घटक असण्याची हमी आहे. \n\nउदाहरणादाखलः \n\nमूव्ह वन बॉल ([3,4,5,1,2]) = => खरे \nस्पष्टीकरणः 2 योग्य शिफ्ट ऑपरेशन्समध्ये कामगिरी करून, नॉन-डीक्रीझिंग ऑर्डर करू शकते \nदिलेल्या अॅरेसाठी साध्य केले जाईल. \nमूव्ह वन बॉल ([3,5,4,1,2]) = => खोटे \nस्पष्टीकरणः दिलेल्या मागणीसाठी कमी न होणारी ऑर्डर मिळवणे शक्य नाही. \nकोणत्याही संख्येने योग्य शिफ्ट ऑपरेशन्स करून अॅरे.", "natural_language": "Marathi"}
{"task_id": "python/50", "entry_point": "exchange", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "language": "python", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "description": "या समस्येमध्ये, तुम्ही एक कार्य अंमलात आणाल जे संख्यांच्या दोन याद्या घेते, \nआणि घटकांची देवाणघेवाण करणे शक्य आहे की नाही हे ठरवते \nत्यांच्या दरम्यान lst1 ही केवळ समसंख्यांची यादी बनवणे. \nlst1 आणि lst2 दरम्यान अदलाबदल झालेल्या घटकांच्या संख्येवर कोणतीही मर्यादा नाही. \nएल. एस. टी. 1 आणि एल. एस. टी. 2 दरम्यान घटकांची देवाणघेवाण करणे शक्य असल्यास \nlst1 चे सर्व घटक सम होण्यासाठी,'होय'परत करा. \nअन्यथा,'नाही'परत करा. \nउदाहरणार्थ, \nविनिमय ([1,2,3,4], [1,2,3,4]) => \"होय\" \nविनिमय ([1,2,3,4], [1,5,3,4]) => \"नाही\" \nइनपुट याद्या रिकाम्या नसतील असे गृहित धरले जाते.", "natural_language": "Marathi"}
{"task_id": "python/51", "entry_point": "reverse_delete", "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "language": "python", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "description": "कार्य. \nआम्हाला दोन स्ट्रिंग s आणि c दिल्या आहेत, तुम्हाला s मधील सर्व अक्षरे हटवावी लागतील जी c मधील कोणत्याही अक्षराच्या बरोबरीची आहेत. \nत्यानंतर निकाल स्ट्रिंग पॅलिंड्रोम आहे का ते तपासा. \nजर ती पुढे वाचते तशीच मागे वाचली तर त्याला पॅलिंड्रोम म्हणतात. \nतुम्ही चेकसाठी निकालाची स्ट्रिंग आणि खरे/खोटे असलेले टुपल परत केले पाहिजे. \nउदाहरणादाखल \nएस = \"एबीसीडी\", सी = \"एई\" साठी, परिणाम ('बीसीडी', खोटा) असावा. \nएस = \"ए. बी. सी. डी. एफ\". साठी, सी = \"बी\" परिणाम असावा ('ए. सी. डी. एफ.', खोटे) \nएस = \"ए. बी. सी. डी. सी. बी. ए\"., सी = \"ए. बी\". साठी, परिणाम ('सी. डी. डी. सी.', खरे) असावा.", "natural_language": "Marathi"}
{"task_id": "python/52", "entry_point": "max_fill", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "language": "python", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "description": "तुम्हाला विहिरींचे आयताकृती जाळे दिले जाते. प्रत्येक ओळ एकाच विहिरीचे प्रतिनिधित्व करते. \nआणि एका पंक्तीतील प्रत्येक 1 हे पाण्याचे एकच एकक दर्शवते. \nप्रत्येक विहिरीत एक संबंधित बादली असते जी त्यातून पाणी काढण्यासाठी वापरली जाऊ शकते. \nआणि सर्व बादल्या समान क्षमतेच्या असतात. \nविहिरी रिकाम्या करण्यासाठी बादल्या वापरणे हे तुमचे काम आहे. \nतुम्हाला किती वेळा बादल्या कमी करायच्या आहेत ते सांगा. \n\nउदाहरण 1: \nइनपुटः \nग्रीडः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nबकेट क्षमता (_ c): 1 \nउत्पादनः 6 \n\nउदाहरण 2: \nइनपुटः \nग्रीडः [[0,0,1, 1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबकेट क्षमता (_ c): 2 \nउत्पादनः 5 \n\nउदाहरण 3: \nइनपुटः \nग्रीडः [0,0,0], [0,0,0] \nबकेट क्षमता (_ c): 5 \nउत्पादनः 0 \n\nनिर्बंधः \n* सर्व विहिरींची लांबी समान असते. \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ग्रिड [:, 1]. लांबी <= 10 ^ 2 \nग्रिड [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "natural_language": "Marathi"}
{"task_id": "python/53", "entry_point": "select_words", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "language": "python", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "description": "स्ट्रिंग s आणि नैसर्गिक संख्या n दिल्यास, तुम्हाला अंमलबजावणी करण्याचे काम सोपवण्यात आले आहे. \nएक कार्य जे स्ट्रिंग s मधील सर्व शब्दांची यादी परत करते ज्यामध्ये अचूकपणे समाविष्ट आहे \nn व्यंजन, क्रमाने हे शब्द स्ट्रिंग s मध्ये दिसतात. \nजर स्ट्रिंग s रिकामी असेल तर फंक्शनने रिकामी यादी परत करावी. \nटीपः तुम्ही असे गृहीत धरू शकता की इनपुट स्ट्रिंगमध्ये फक्त अक्षरे आणि जागा आहेत. \nउदाहरणेः \nशब्द निवडा (\"मेरीला एक लहान कोकरा होता\", 4) = => [\"लहान\"] \nशब्द निवडा (\"मेरीला एक लहान कोकरा होता\", 3) = => [\"मेरी\", \"कोकरा\"] \nनिवडा शब्द (\"साधी पांढरी जागा\", 2) = => [] \nनिवडा शब्द (\"हॅलो वर्ल्ड\", 4) = => [\"वर्ल्ड\"] \nशब्द निवडा (\"अंकल सॅम\", 3) = => [\"अंकल\"]", "natural_language": "Marathi"}
{"task_id": "python/54", "entry_point": "maximum", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "language": "python", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "description": "पूर्णांकांची एक आर. आर. आणि एक सकारात्मक पूर्णांक के दिल्यास, क्रमवारी लावलेली यादी परत करा. \nए. आर. आर. मध्ये कमाल के संख्येसह लांबी के. \n\nउदाहरण 1: \n\nइनपुटः arr = [-3,-4,5], k = 3 \nउत्पादनः [-4,-3,5] \n\nउदाहरण 2: \n\nइनपुटः arr = [4,-4,4], k = 2 \nउत्पादनः [4,4] \n\nउदाहरण 3: \n\nइनपुटः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटीपः \n1. अॅरेची लांबी [1000] च्या श्रेणीत असेल. \n2. रचनेतील घटक [-1000] च्या श्रेणीत असतील. \n3. 0 <= k <= लेन (arr)", "natural_language": "Marathi"}
{"task_id": "python/55", "entry_point": "add_elements", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "description": "पूर्णांक ए. आर. आर. आणि पूर्णांक के. ची रिकामी नसलेली श्रेणी दिल्यास, परत करा \nए. आर. आर. च्या पहिल्या के घटकांमधून जास्तीत जास्त दोन अंक असलेल्या घटकांची बेरीज. \n\nउदाहरणादाखलः \n\nइनपुटः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nउत्पादनः 24 #21 + 3 ची बेरीज \n\nनिर्बंधः \n1. 1 <= लेन (ए. आर. आर.) <= 100 \n2. 1 <= k <= लेन (arr)", "natural_language": "Marathi"}
{"task_id": "python/56", "entry_point": "intersection", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "language": "python", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "description": "तुम्हाला दोन अंतर दिले जातात, \nजेथे प्रत्येक मध्यांतर हे पूर्णांकांची जोडी असते. उदाहरणार्थ, मध्यांतर = (प्रारंभ, शेवट) = (1,2). \nदिलेले अंतर बंद असतात ज्याचा अर्थ असा आहे की मध्यांतर (प्रारंभ, शेवट) \nत्यात सुरुवात आणि शेवट या दोन्हींचा समावेश आहे. \nदिलेल्या प्रत्येक मध्यांतरासाठी, असे गृहीत धरले जाते की त्याची सुरुवात त्याच्या शेवटापेक्षा कमी किंवा समान आहे. \nया दोघांच्या छेदनबिंदूची लांबी किती आहे हे ठरवणे हे तुमचे काम आहे. \nमध्यांतर ही एक अभाज्य संख्या आहे. \nउदाहरणार्थ, अंतरांचे छेदनबिंदू (1,3), (2,4) हे (2,3) आहे. \nज्याची लांबी 1 आहे, जी अभाज्य संख्या नाही. \nछेदनबिंदूची लांबी जर मूळ संख्या असेल, तर'होय'परत करा. \nअन्यथा,'नाही'परत करा. \nजर दोन मध्यांतर एकमेकांना छेदत नसतील, तर'नाही'परत करा. \n\n[इनपुट/आउटपुट] नमुनेः \nछेदनबिंदू ((1,2,3)) = =>'नाही'\nछेदनबिंदू ((-1,1), (0,4)) = => \"नाही\" \nछेदनबिंदू ((-3,-1), (-5,5)) = => \"होय\"", "natural_language": "Marathi"}
{"task_id": "python/57", "entry_point": "tri", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "language": "python", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "description": "प्रत्येकाला फिबोनाची क्रम माहीत आहे, त्याचा गणितशास्त्रज्ञांनी सखोल अभ्यास केला होता. \nगेल्या दोन शतके. तथापि, लोकांना जे माहित नाही ते म्हणजे ट्रिबोनाची क्रमवारी. \nट्रायबोनाची क्रमवारी पुनरावृत्तीद्वारे परिभाषित केली जातेः \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, जर n सम असेल. \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), जर n विषम असेल. \nउदाहरणार्थ, \nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nतुम्हाला एक नकारात्मक नसलेला पूर्णांक क्रमांक n दिला आहे, तुम्हाला त्याची यादी परत करावी लागेल \nट्रिबोनाची अनुक्रमाच्या पहिल्या n + 1 संख्या. \nउदाहरणेः \nत्रि (3) = [1,3,2,8]", "natural_language": "Marathi"}
{"task_id": "python/58", "entry_point": "digits", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "language": "python", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "description": "सकारात्मक पूर्णांक n दिल्यास, विषम अंकांचे गुणाकार परत करा. \nसर्व अंक सम असल्यास 0 परत करा. \nउदाहरणार्थ, \nअंक (1) = = 1 \nअंक (4) = = 0 \nअंक (235) = = 15", "natural_language": "Marathi"}
{"task_id": "python/59", "entry_point": "is_nested", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "language": "python", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "description": "एक कार्य तयार करा जे स्ट्रिंगला इनपुट म्हणून घेते ज्यामध्ये फक्त चौरस कंस असतात. \nजर आणि केवळ कंसांचा वैध पाठपुरावा असेल तरच कार्य खरे परत आले पाहिजे \nजेथे पुढील भागामध्ये किमान एक कंस नेस्ट केलेला असतो. \n\nनेस्टेड आहे ('[[]]') खरे आहे \nis _ nested ('[]]]]] [[[[]') खोटे आहे \nनेस्टेड आहे ('[] []') खोटे \nनेस्टेड आहे ('[]') खोटे \nनेस्टेड आहे ('[[] []]') खरे आहे \nनेस्टेड आहे ('[[]] [[') खरे आहे", "natural_language": "Marathi"}
{"task_id": "python/60", "entry_point": "sum_squares", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "description": "तुम्हाला संख्यांची यादी दिली जाते. \nतुम्हाला दिलेल्या यादीतील वर्गसंख्यांची बेरीज परत करावी लागेल, \nसूचीतील प्रत्येक घटकाला प्रथम वरच्या पूर्णांक (कमाल मर्यादा) पर्यंत गोल करा. \nउदाहरणेः \nlst = [1,2,3] साठी आउटपुट 14 असावे. \nlst = [1,4,9] साठी आउटपुट 98 असावे. \nlst = [1,3,5, 7] साठी उत्पादन 84 असावे. \nlst = [1.4,4.2, 0] साठी उत्पादन 29 असावे. \nlst = [-2.4,1, 1] साठी आउटपुट 6 असावे.", "natural_language": "Marathi"}
{"task_id": "python/61", "entry_point": "check_if_last_char_is_a_letter", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "description": "शेवटचे अक्षर खरे असेल तर परत करणारे कार्य तयार करा \nदिलेल्या स्ट्रिंगचे वर्णमाला वर्ण आहे आणि ते नाही \nशब्दाचा एक भाग, आणि अन्यथा खोटा. \nटीपः \"शब्द\" हा जागेने विभक्त केलेल्या वर्णांचा समूह आहे. \n\nउदाहरणेः \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई ई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"सफरचंद पाई ई\") \nतपासा _ जर _ शेवटचे _ चार _ हे _ अ _ अक्षर आहे (\"\") खोटे", "natural_language": "Marathi"}
{"task_id": "python/62", "entry_point": "can_arrange", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "language": "python", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "description": "एखाद्या घटकाची सर्वात मोठी अनुक्रमणिका परत करणारे कार्य तयार करा जे \nतो त्याच्या ताबडतोब आधीच्या घटकापेक्षा मोठा किंवा समान नसेल. जर \nअसा कोणताही घटक अस्तित्वात नसेल तर-1 परत करा. दिलेल्या अॅरेमध्ये समाविष्ट होणार नाही \nदुहेरी मूल्ये. \n\nउदाहरणेः \nकॅन अरेंज ([1,2,4, 3,5]) = 3 \nकॅन अरेंज ([1,2,3]) =-1", "natural_language": "Marathi"}
{"task_id": "python/63", "entry_point": "largest_smallest_integers", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "language": "python", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "description": "टुपल (अ, ब) परत करणारे कार्य तयार करा, जेथे'अ'आहे \nनकारात्मक पूर्णांकांपैकी सर्वात मोठा, आणि'ब'सर्वात लहान आहे \nसूचीतील सकारात्मक पूर्णांक. \nजर कोणतेही नकारात्मक किंवा सकारात्मक पूर्णांक नसतील, तर त्यांना शून्य म्हणून परत करा. \n\nउदाहरणेः \nसर्वात मोठे _ सर्वात लहान _ पूर्णांक ([2,4,1,3,5,7]) = = (काहीही नाही, 1) \nसर्वांत मोठे _ सर्वात लहान _ पूर्णांक ([]) = = (काहीही नाही, काहीही नाही) \nसर्वांत मोठे _ सर्वात लहान _ पूर्णांक ([0]) = = (काहीही नाही, काहीही नाही)", "natural_language": "Marathi"}
{"task_id": "python/64", "entry_point": "special_factorial", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "language": "python", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "description": "ब्राझिलियन फॅक्टोरियलची व्याख्या अशी केली जातेः \nब्राझिलियन _ फॅक्टोरियल (एन) = एन! * (एन-1)! * (एन-2)! *... * 1! \nजेथे n> 0 \n\nउदाहरणार्थ, \n>>> स्पेशल _ फॅक्टोरियल (4) \n288 \n\nफंक्शनला इनपुट म्हणून एक पूर्णांक प्राप्त होईल आणि त्याने विशेष परत केले पाहिजे. \nया पूर्णांकाचे फॅक्टोरियल.", "natural_language": "Marathi"}
{"task_id": "python/65", "entry_point": "words_in_sentence", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "language": "python", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "description": "तुम्हाला वाक्याचे प्रतिनिधित्व करणारी एक स्ट्रिंग दिली जाते, \nवाक्यात जागेने वेगळे केलेले काही शब्द आहेत, \nआणि तुम्हाला मूळ वाक्यातील शब्द असलेली एक स्ट्रिंग परत करावी लागेल, \nज्याची लांबी ही अभाज्य संख्या आहे, \nनवीन अक्षरातील शब्दांचा क्रम मूळ अक्षरासारखाच असावा. \n\nउदाहरण 1: \nइनपुटः वाक्य = \"ही एक चाचणी आहे\" \nआउटपुटः \"आहे\" \n\nउदाहरण 2: \nइनपुटः वाक्य = \"चला पोहायला जाऊया\" \nआउटपुटः \"साठी जा\" \n\nनिर्बंधः \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्यात फक्त अक्षरे असतात", "natural_language": "Marathi"}
{"task_id": "python/66", "entry_point": "simplify", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "language": "python", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "description": "अभिव्यक्ती सोपी करणारे कार्य अंमलात आणणे हे तुमचे काम आहे. \nx * n. जर x * n पूर्ण संख्येचे मूल्यांकन करत असेल आणि चुकीचे असेल तर कार्य खरे परत करते. \nअन्यथा. x आणि n दोन्ही, एका अपूर्णांकाचे स्ट्रिंग प्रतिनिधित्व आहेत आणि त्यांचे खालील स्वरूप आहे, \n<न्यूमरेटर> <डिनॉमिनेटर> जेथे न्यूमरेटर आणि डिनॉमिनेटर दोन्ही सकारात्मक पूर्ण संख्या आहेत. \n\nतुम्ही असे गृहीत धरू शकता की x आणि n हे वैध अपूर्णांक आहेत आणि त्यांना विभाजक म्हणून शून्य नाही. \n\nसरलीकरण करा (\"1/5\", \"5/1\") = खरे \nसरलीकरण करा (\"1/6\", \"2/1\") = चुकीचे \nसोपे करा (\"7/10\", \"10/2\") = चुकीचे", "natural_language": "Marathi"}
{"task_id": "python/67", "entry_point": "order_by_points", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "description": "पूर्णांकांची दिलेली यादी क्रमवारी लावणारे कार्य लिहा. \nत्यांच्या अंकांच्या बेरीजनुसार चढत्या क्रमाने. \nटीपः त्यांच्या अंकांची समान बेरीज असलेल्या अनेक वस्तू असल्यास, \nमूळ यादीतील त्यांच्या निर्देशांकाच्या आधारे त्यांना ऑर्डर करा. \n\nउदाहरणार्थ, \n>> ऑर्डर _ बाय _ पॉईंट्स ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ऑर्डर _ बाय _ पॉइंट्स ([]) = = []", "natural_language": "Marathi"}
{"task_id": "python/68", "entry_point": "specialFilter", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "language": "python", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "description": "इनपुट आणि रिटर्न म्हणून संख्यांची एक श्रेणी घेणारे कार्य लिहा. \nअॅरेमधील घटकांची संख्या जी 10 पेक्षा जास्त आहे आणि दोन्ही \nसंख्येचे पहिले आणि शेवटचे अंक विषम (1,3,5,7,9) असतात. \nउदाहरणार्थ, \nविशेष फिल्टर ([15,-73,14,-15]) => 1 \nविशेष फिल्टर ([33,-2,-3,45,21,109]) => 2", "natural_language": "Marathi"}
{"task_id": "python/69", "entry_point": "get_max_triples", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "language": "python", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "description": "तुम्हाला एक सकारात्मक पूर्णांक n दिला जातो. तुम्हाला n लांबीचा एक पूर्णांक अ तयार करावा लागेल. \nप्रत्येक i (1 ≤ i ≤ n) साठी, a [i] = i * i-i + 1 चे मूल्य. \na च्या त्रिकांची संख्या (a [i], a [j], a [k]) परत करा जेथे i <j <k, \nआणि a [i] + a [j] + a [k] हा 3 चा गुणाकार आहे. \n\nउदाहरणादाखलः \nइनपुटः n = 5 \nउत्पादनः 1 \nस्पष्टीकरणः \nअ = [1,3,7,13,21] \nएकमेव वैध तिहेरी (1,7,13) आहे.", "natural_language": "Marathi"}
{"task_id": "python/70", "entry_point": "bf", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "language": "python", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "description": "आपल्या सौरमालेत आठ ग्रह आहेतः सूर्याच्या सर्वात जवळचे \nबुध आहे, पुढचा शुक्र आहे, मग पृथ्वी, मंगळ, गुरु, शनि, \nयुरेनस, नेपच्यून. \nग्रह 1 आणि ग्रह 2 अशी दोन ग्रहांची नावे घेणारे कार्य लिहा. \nया कार्याने ज्या सर्व ग्रहांच्या कक्षा आहेत अशा सर्व ग्रहांचा समावेश असलेला टुपल परत केला पाहिजे. \n1 ग्रहाची कक्षा आणि 2 ग्रहाची कक्षा यांच्या दरम्यान स्थित, क्रमानुसार \nसूर्याची जवळीक. \nजर ग्रह 1 किंवा ग्रह 2 असेल तर कार्याने रिकामे टुपल परत केले पाहिजे \nग्रहांची नावे योग्य नाहीत. \nउदाहरणे \nbf (\"गुरू\", \"नेपच्यून\") = => (\"शनि\", \"युरेनस\") \nbf (\"पृथ्वी\", \"बुध\") = => (\"शुक्र\") \nbf (\"बुध\", \"युरेनस\") = => (\"शुक्र\", \"पृथ्वी\", \"मंगळ\", \"गुरु\", \"शनि\")", "natural_language": "Marathi"}
{"task_id": "python/71", "entry_point": "x_or_y", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "language": "python", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "description": "एक साधा प्रोग्राम ज्याने n असल्यास x चे मूल्य परत केले पाहिजे \nएक अभाज्य संख्या आणि अन्यथा y चे मूल्य परत केले पाहिजे. \n\nउदाहरणेः \nx _ किंवा _ y साठी (7,34,12) = = 34 \nx _ किंवा _ y साठी (15,8,5) = = 5", "natural_language": "Marathi"}
{"task_id": "python/72", "entry_point": "double_the_difference", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "description": "आकड्यांची यादी दिल्यास, आकड्यांच्या वर्गांची बेरीज परत करा. \nविषम असलेल्या यादीमध्ये. पूर्णांक नसलेल्या किंवा नकारात्मक असलेल्या संख्यांकडे दुर्लक्ष करा. \n\nदुहेरी _ फरक ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nदुहेरी _ फरक ([-1,0]) = = 0 \nदुहेरी फरक ([9,-2]) = = 81 \nदुहेरी _ फरक ([0]) = = 0 \n\nइनपुट यादी रिकामी असल्यास, 0 परत करा.", "natural_language": "Marathi"}
{"task_id": "python/73", "entry_point": "Strongest_Extension", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\n", "language": "python", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "description": "तुम्हाला एका वर्गाचे नाव (एक स्ट्रिंग) आणि विस्तारांची यादी दिली जाईल. \nवर्गामध्ये अतिरिक्त वर्ग भरण्यासाठी विस्तारांचा वापर केला जाणार आहे. \nविस्ताराची ताकद खालीलप्रमाणे आहेः CAP ही मोठ्या अक्षराची संख्या असू द्या. \nविस्ताराच्या नावातील अक्षरे, आणि एस. एम. ही लहान अक्षरांची संख्या असू द्या \nएक्स्टेंशनच्या नावात, कॅप-एस. एम. या अपूर्णांकाद्वारे सामर्थ्य दिले जाते. \nतुम्ही सर्वात मजबूत विस्तार शोधला पाहिजे आणि यात एक स्ट्रिंग परत केली पाहिजे. \nस्वरूपः ClassName.StrongestExtensionName. \nजर समान ताकदीचे दोन किंवा अधिक विस्तार असतील, तर तुम्ही \nयादीत प्रथम येणाऱ्या व्यक्तीची निवड करा. \nउदाहरणार्थ, जर तुम्हाला वर्ग आणि यादी म्हणून'स्लाइसेस'दिले गेले असतील तर \nविस्तारः ['SERVINGSliCes','चीज','स्टुफॅड'] मग तुम्ही \n'SERVINGSliCes'हा सर्वात मजबूत विस्तार असल्याने'Slices.SErviNGSliCes'परत करा \n(त्याची ताकद-1 आहे). \nउदाहरणादाखलः \nस्ट्रॉंगेस्ट _ एक्स्टेंशनसाठी ('माय _ क्लास', ['एए','बी','सीसी']) = ='my_class.AA'", "natural_language": "Marathi"}
{"task_id": "python/74", "entry_point": "cycpattern_check", "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "language": "python", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "description": "तुम्हाला 2 शब्द देण्यात आले आहेत. जर दुसरा शब्द किंवा त्यातील कोणतेही परिभ्रमण पहिल्या शब्दातील सबस्ट्रिंग असेल तर तुम्हाला खरे परतावे लागेल. \nसायकपॅटर्न _ चेक (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => खोटे \nसायकपॅटर्न तपासा (\"हॅलो\", \"एल\") => खरे \nसायकपॅटर्न _ चेक (\"व्हासअप\", \"psus\") => खोटे \nसायकपॅटर्न _ चेक (\"अबाब\", \"बा\") => खरे \nसायकपॅटर्न _ चेक (\"ईएफईएफ\", \"ईएफईएफ\") => खोटे \nसायकपॅटर्न _ चेक (\"हिमेन्स\", \"सिमेन\") => खरे", "natural_language": "Marathi"}
{"task_id": "python/75", "entry_point": "int_to_mini_roman", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "description": "एक सकारात्मक पूर्णांक दिल्यास, त्याचा रोमन अंकी समतुल्य स्ट्रिंग म्हणून मिळवा, \nआणि ते लहान अक्षरात परत करा. \nनिर्बंधः 1 <= संख्या <= 1000 \n\nउदाहरणेः \n>> int _ to _ मिनी _ रोमन (19) = ='xix'\n>> इंट _ टू _ मिनी _ रोमन (152) = ='क्लाई'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "natural_language": "Marathi"}
{"task_id": "python/76", "entry_point": "right_angle_triangle", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "language": "python", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "description": "त्रिकोणाच्या तीन बाजूंची लांबी दिली. जर त्या तीनही असतील तर खरे परत करा. \nबाजू उजव्या कोनीय त्रिकोण तयार करतात, अन्यथा खोटे. \nउजव्या कोणाचा त्रिकोण हा एक त्रिकोण आहे ज्यामध्ये एक कोन उजव्या कोनात किंवा उजव्या कोनात असतो. \n90 अंश. \nउदाहरणादाखलः \nसमकोण त्रिकोण (3,4,5) = = खरे \nसमकोण त्रिकोण (1,2,3) = = चुकीचा", "natural_language": "Marathi"}
{"task_id": "python/77", "entry_point": "solve", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "language": "python", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "description": "तुम्हाला एक स्ट्रिंग s दिली जाते. \nजर एस [आय] हे एक अक्षर असेल तर त्याचे प्रकरण खालून वर किंवा उलट करा, \nअन्यथा ते जसे आहे तसे ठेवा. \nजर स्ट्रिंगमध्ये अक्षरे नसतील तर स्ट्रिंग उलट करा. \nफंक्शनने परिणामी स्ट्रिंग परत करावी. \nउदाहरणे \nनिराकरण (\"1234\") = \"4321\" \nसोडवा (\"अब\") = \"एबी\" \nसोडवा (\"#a @C\") = \"#A @c\"", "natural_language": "Marathi"}
{"task_id": "python/78", "entry_point": "string_to_md5", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "language": "python", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "description": "स्ट्रिंग'टेक्स्ट'दिल्यास, त्याची md5 हॅश समतुल्य स्ट्रिंग परत करा. \nजर'टेक्स्ट'ही रिकामी स्ट्रिंग असेल तर शून्य परत करा. \n\n>> स्ट्रिंग _ ते _ md5 ('हॅलो वर्ल्ड') = ='3e25960a79dbc69b674cd4ec67a72c62'", "natural_language": "Marathi"}
{"task_id": "python/79", "entry_point": "generate_integers", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "language": "python", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "description": "a आणि b हे दोन सकारात्मक पूर्णांक दिल्यास, a मधील सम अंक परत करा. \nआणि ब, चढत्या क्रमाने. \n\nउदाहरणार्थ, \nजनरेट _ इंटिजर्स (2,8) => [2,4,6,8] \nजनरेट _ इंटिजर्स (8,2) => [2,4,6,8] \nपूर्णांक निर्माण करा (10,14) => []", "natural_language": "Marathi"}
