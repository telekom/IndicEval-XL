{"task_id": "go/0", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := below_zero([]int{})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := below_zero([]int{1, 2, -3, 1, 2, -3})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := below_zero([]int{1, 2, -4, 5, 6})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := below_zero([]int{1, -1, 2, -2, 5, -5, 4, -4})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := below_zero([]int{1, -1, 2, -2, 5, -5, 4, -5})\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := below_zero([]int{1, -2, 2, -2, 5, -5, 4, -4})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "भवतः कृते ब्याङ्क्-अकौण्ट् मध्ये निक्षेपस्य तथा निष्कासनस्य च कार्याणां सूची दत्ता अस्ति, यस्मात् आरभ्यते। \nशून्यं शेषम्। कस्मिंश्चित् काले अपि लेखायाः शेषराशिः शून्यात् अधः पतति वा इति ज्ञातुं भवतः कार्यम् अस्ति, तथा। \nतस्मिन् समये फंक्षन् ट्रु इति प्रत्यावर्तयेत्। अन्यथा तत् फाल्स् इति प्रत्यावर्तयेत्। \n>>> शून्यात् अधः ([1,2,3]) \nमिथ्याचारः। \n>>> शून्यात् अधः ([1,2,-4,5]) \nसत्यम्।", "entry_point": "below_zero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/1", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_product([]int{})\n\texpected_1 := []int{0, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_product([]int{1, 1, 1})\n\texpected_2 := []int{3, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_product([]int{100, 0})\n\texpected_3 := []int{100, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_product([]int{3, 5, 7})\n\texpected_4 := []int{15, 105}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_product([]int{10})\n\texpected_5 := []int{10, 10}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "पूर्णांशकानां प्रदत्तसूच्यां, सूच्यां सर्वानां पूर्णांशकानां योगस्य गुणनफलस्य च एकं टुपल् प्रत्यर्पयतु। \nरिक्तराशिः 0 समानं भवेत्, रिक्तगुणितं च 1 समानं भवेत्। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "entry_point": "sum_product", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/2", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_xor(\"111000\",\"101010\")\n\texpected_1 := \"010010\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_xor(\"1\",\"1\")\n\texpected_2 := \"0\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_xor(\"0101\",\"0000\")\n\texpected_3 := \"0101\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "इन्पुट् इतीदं a तथा b इति द्वौ सूत्रौ स्तः यत्र केवलं 1s तथा 0s इत्येतौ स्तः। \nएतेषु इन्पुट्-मध्ये द्वैतीयं XOR कुर्वन्तु तथा च रिटर्न्-परिणामम् अपि स्ट्रिङ्ग्-रूपेण कुर्वन्तु। \n>> स्ट्रिङ्ग् _ xor ('010','110') \n\"100\" इति।", "entry_point": "string_xor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/3", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := longest([]string{})\n\texpected_1 := nil\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := longest([]string{\"x\", \"y\", \"z\"})\n\texpected_2 := \"x\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := longest([]string{\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"})\n\texpected_3 := \"zzzz\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "स्ट्रिङ्ग्-सूचीतः दीर्घतमं प्रत्यर्पयतु। बहुविधस्य सन्दर्भे प्रथमं प्रत्यर्पयतु। \nसमानदीर्घतायाः स्ट्रिङ्ग्स्। इन्पुट्-सूची रिक्तं भवति चेत् शून्यं प्रत्यावर्तयतु। \n>>> दीर्घतमः ([]) \n\n>>> दीर्घतमः (['a','b','c']) \n\"अ\" इति। \n>>> दीर्घतमः (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "entry_point": "longest", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/4", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := greatest_common_divisor(3,7)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := greatest_common_divisor(10,15)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := greatest_common_divisor(49,14)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := greatest_common_divisor(144,60)\n\texpected_4 := 12\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "a तथा b इति पूर्णांशकयोः बृहत्तमः सामान्यभागकः प्रत्यावर्तयतु। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (3,5) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (25,15) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5।", "entry_point": "greatest_common_divisor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/5", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_numbers(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_numbers(\"three\")\n\texpected_2 := \"three\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_numbers(\"three five nine\")\n\texpected_3 := \"three five nine\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sort_numbers(\"five zero four seven nine eight\")\n\texpected_4 := \"zero four five seven eight nine\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sort_numbers(\"six five four three two one zero\")\n\texpected_5 := \"zero one two three four five six\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "इन्पुट् इति'शून्य'तः'नव'पर्यन्तं संख्यानां स्पेस्-डिलिमिटेड् स्ट्रिङ्ग् अस्ति। \n'शून्यः','एकः','द्वौ','त्रीणि','चत्वारः','पञ्च','षट्','सप्त','अष्ट'तथा'नव'इति वैधानि विकल्पानि सन्ति। \nलघुतमात् बृहत्तमं यावत् क्रमबद्धां सङ्ख्याभिः सह स्ट्रिङ्ग् प्रत्यावर्तयतु। \n>>> संख्यानां क्रमनिर्धारणं करोतु ('तिस्रः एकः पञ्च') \n\"एकत्रयं पञ्च\" इति।", "entry_point": "sort_numbers", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/6", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rescale_to_unit([]float64{2.0, 49.9})\n\texpected_1 := []float64{0.0, 1.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rescale_to_unit([]float64{100.0, 49.9})\n\texpected_2 := []float64{1.0, 0.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\texpected_3 := []float64{0.0, 0.25, 0.5, 0.75, 1.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := rescale_to_unit([]float64{2.0, 1.0, 5.0, 3.0, 4.0})\n\texpected_4 := []float64{0.25, 0.0, 1.0, 0.5, 0.75}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := rescale_to_unit([]float64{12.0, 11.0, 15.0, 13.0, 14.0})\n\texpected_5 := []float64{0.25, 0.0, 1.0, 0.5, 0.75}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "संख्यासूच्यां (न्यूनातिन्यूनं द्वयोः तत्त्वयोः) दत्तं, तस्मिन् सूच्यां रेखीयपरिवर्तनं प्रयुज्यताम्। \nयथा लघुतमः सङ्ख्या 0 भविष्यति, बृहत्तमा च 1 भविष्यति। \n>> रिकेल्-टु-युनिट् ([1,0,2,0,4,0]) \n[0,0,25,0,0,75,0,0]", "entry_point": "rescale_to_unit", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/7", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := flip_case(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := flip_case(\"Hello!\")\n\texpected_2 := \"hELLO!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := flip_case(\"These violent delights have violent ends\")\n\texpected_3 := \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "निर्दिष्टस्य स्ट्रिङ्ग् इत्यस्य कृते, लोवर्केस्-अक्षरान् अपरकेस्-रूपेण, अपरकेस्-अक्षरान् लोवर्केस्-रूपेण च परिवर्तयतु। \n>>> फ़्लिप्-केस् ('हेलो') \n\"हेलो\" इति।", "entry_point": "flip_case", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/8", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_positive([]int{-1, -2, 4, 5, 6})\n\texpected_1 := []int{4, 5, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_positive([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10})\n\texpected_2 := []int{5, 3, 2, 3, 3, 9, 123, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_positive([]int{-1, -2})\n\texpected_3 := []int{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_positive([]int{})\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "सूच्यां केवलं धनात्मकसङ्ख्याः प्रत्यर्पयतु। \n>>> धनात्मकं प्रापयन्तु ([-1,2,-4,5,6]) \n[2,5,6] \n>>> प्राप्यते ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "entry_point": "get_positive", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/9", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_prime(6)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_prime(101)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_prime(11)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_prime(13441)\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_prime(61)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_prime(4)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_prime(1)\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_prime(5)\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_prime(11)\n\texpected_9 := true\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_prime(17)\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := is_prime(85)\n\texpected_11 := false\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := is_prime(77)\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := is_prime(255379)\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n}", "language": "go", "description": "यदि दत्तसङ्ख्या अभाज्य अस्ति तर्हि सत्यं प्रत्यावर्तयतु, अन्यथा असत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः।", "entry_point": "is_prime", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/10", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n\texpected_1 := []int{0, 2, 3, 5, 9, 123}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n}", "language": "go", "description": "सूच्यां क्रमबद्धानि विशिष्टानि तत्त्वानि प्रत्यावर्तयतु। \n>>> अद्वितीयः ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "entry_point": "unique", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/11", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prime_fib(1)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prime_fib(2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prime_fib(3)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := prime_fib(4)\n\texpected_4 := 13\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := prime_fib(5)\n\texpected_5 := 89\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := prime_fib(6)\n\texpected_6 := 233\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := prime_fib(7)\n\texpected_7 := 1597\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := prime_fib(8)\n\texpected_8 := 28657\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := prime_fib(9)\n\texpected_9 := 514229\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := prime_fib(10)\n\texpected_10 := 433494437\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "प्रैम्-फ़ैब् इतीदं n-तमं संख्यां प्रत्यर्पयति यत् फ़िबोनाची सङ्ख्या अपि च अभाज्यम् अस्ति। \n>>> प्रैम्-फैब् (1) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> प्रैम्-फैब् (2) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> प्रैम्-फैब् (3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> प्रैम्-फैब् (4) \n13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। \n>>> प्रैम्-फैब् (5) \n89।", "entry_point": "prime_fib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/12", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := triples_sum_to_zero([]int{1, 3, 5, 0})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := triples_sum_to_zero([]int{1, 3, 5, -1})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := triples_sum_to_zero([]int{1, 3, -2, 1})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := triples_sum_to_zero([]int{1, 2, 3, 7})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := triples_sum_to_zero([]int{1, 2, 5, 7})\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := triples_sum_to_zero([]int{1})\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := triples_sum_to_zero([]int{1, 3, 5, -100})\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := triples_sum_to_zero([]int{100, 3, 5, -100})\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ट्रिपल्स्-सम्-तः-ज़ीरो-पर्यन्तं इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां त्रीणि विशिष्टानि तत्त्वानि सन्ति तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n\n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,35,5,0]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,3,-2,1]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,2,3,7]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([2,4,-5,3,9,7]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1]) \nमिथ्याचारः।", "entry_point": "triples_sum_to_zero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/13", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pairs_sum_to_zero([]int{1, 3, 5, 0})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pairs_sum_to_zero([]int{1, 3, -2, 1})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pairs_sum_to_zero([]int{1, 2, 3, 7})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := pairs_sum_to_zero([]int{1})\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := pairs_sum_to_zero([]int{-3, 9, -1, 3, 2, 30})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := pairs_sum_to_zero([]int{-3, 9, -1, 3, 2, 31})\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := pairs_sum_to_zero([]int{-3, 9, -1, 4, 2, 30})\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := pairs_sum_to_zero([]int{-3, 9, -1, 4, 2, 31})\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "pairs _ sum _ to _ zero इति इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां द्वे विशिष्टाः तत्त्वौ स्तः तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,3,5,0]) \nमिथ्याचारः। \n>>> युग्मानि _ राशिः _ तः _ शून्यं ([1,3,-2,1]) \nमिथ्याचारः। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,2,3,7]) \nमिथ्याचारः। \n>>> युग्म-राशि-तः-शून्यपर्यन्तं ([2,4,-5,3,5,7]) \nसत्यम्। \n>>> युग्मं _ सं _ तः _ शून्यं ([1]) \nमिथ्याचारः।", "entry_point": "pairs_sum_to_zero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/14", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fib4(5)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fib4(8)\n\texpected_2 := 28\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fib4(10)\n\texpected_3 := 104\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fib4(12)\n\texpected_4 := 386\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "फैब्-4 सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nFib4 (0)-> 0 \nFib4 (1)-> 0 \nफैब4 (2)-> 2 \nFib4 (3)-> 0 \nफैब्4 (एन्)-> फैब्4 (एन्-1) + फैब्4 (एन्-2) + फैब्4 (एन्-3) + फैब्4 (एन्-4)। \nफैब्-4 सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। पुनरावर्तनस्य उपयोगं मा करोतु। \n>>> फैब्4 (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्4 (6) \n8। \n>>> फैब्4 (7) \n14।", "entry_point": "fib4", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/15", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := median([]int{3, 1, 2, 4, 5})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := median([]int{-10, 4, 6, 1000, 10, 20})\n\texpected_2 := 8.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := median([]int{5})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := median([]int{6, 5})\n\texpected_4 := 5.5\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := median([]int{8, 1, 3, 9, 9, 2, 7})\n\texpected_5 := 7\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "सूची l मध्ये तत्त्वानां माध्यं प्रत्यावर्तयतु। \n>>> माध्यिका ([3,1,2,4,5]) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n0. 0।", "entry_point": "median", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/16", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_palindrome(\"\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_palindrome(\"aba\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_palindrome(\"aaaaa\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_palindrome(\"zbcd\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_palindrome(\"xywyx\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_palindrome(\"xywyz\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_palindrome(\"xywzx\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "दत्तं स्ट्रिङ्ग् पालिण्ड्रोम् अस्ति वा इति पश्यतु। \n>>> अस्ति _ पालिण्ड्रोम् (\") \nसत्यम्। \n>>> अस्ति _ पालिण्ड्रोम् ('अबा') \nसत्यम्। \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n>>> is _ palindrome ('zbcd') अस्ति। \nमिथ्याचारः।", "entry_point": "is_palindrome", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/17", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_vowels(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_vowels(\"abcdef\\nghijklm\")\n\texpected_2 := \"bcdf\\nghjklm\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_vowels(\"fedcba\")\n\texpected_3 := \"fdcb\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := remove_vowels(\"eeeee\")\n\texpected_4 := \"\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := remove_vowels(\"acBAA\")\n\texpected_5 := \"cB\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := remove_vowels(\"EcBOO\")\n\texpected_6 := \"cB\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := remove_vowels(\"ybcd\")\n\texpected_7 := \"ybcd\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "रिमूव् _ वोवेल्स् इति एकं फंक्षन् अस्ति यत् स्ट्रिङ्ग् स्वीकृत्य स्वरं विना स्ट्रिङ्ग् प्रत्यावर्तयति। \n>>> स्वरान् निष्कासयतु (\") \n\"इति। \n>>> स्वरान् निष्कासयतु (\"abcdef\\nghijklm\") \n'bcdf\\ nghjklm'\n>>> स्वरान् निष्कासयतु ('ए. बी. सी. डी. एफ़्.') \n'बी. सी. डी. एफ़्.'\n>>> स्वरान् निष्कासयतु ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"इति। \n>>> स्वरान् निष्कासयतु ('आब्बा') \n\"बी\" इति। \n>>> स्वरान् निष्कासयतु ('zbcd') \n'एस्. बी. सी. डी.'", "entry_point": "remove_vowels", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/18", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := below_threshold([]int{1, 2, 4, 10},100)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := below_threshold([]int{1, 20, 4, 10},5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := below_threshold([]int{1, 20, 4, 10},21)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := below_threshold([]int{1, 20, 4, 10},22)\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := below_threshold([]int{1, 8, 4, 10},11)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := below_threshold([]int{1, 8, 4, 10},10)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "यदि सूची l मध्ये सर्वाः सङ्ख्याः t-परिमितेः अधः सन्ति तर्हि सत्यं प्रत्यावर्तयतु। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,2,4,10], 100) \nसत्यम्। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,20,4,10], 5) \nमिथ्याचारः।", "entry_point": "below_threshold", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/19", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add(0,1)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add(1,0)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add(2,3)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := add(5,7)\n\texpected_4 := 12\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := add(7,5)\n\texpected_5 := 12\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := add(572,725)\n\texpected_6 := 1297\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := add(51,804)\n\texpected_7 := 855\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := add(645,96)\n\texpected_8 := 741\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := add(712,853)\n\texpected_9 := 1565\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := add(223,101)\n\texpected_10 := 324\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := add(76,29)\n\texpected_11 := 105\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := add(416,149)\n\texpected_12 := 565\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := add(145,409)\n\texpected_13 := 554\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := add(535,430)\n\texpected_14 := 965\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := add(118,303)\n\texpected_15 := 421\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := add(287,94)\n\texpected_16 := 381\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n\tactual_17 := add(768,257)\n\texpected_17 := 1025\n\tdeepCompare(actual_17, expected_17, \"Exception --- test case 16 failed to pass\")\n\n\tactual_18 := add(421,677)\n\texpected_18 := 1098\n\tdeepCompare(actual_18, expected_18, \"Exception --- test case 17 failed to pass\")\n\n\tactual_19 := add(802,814)\n\texpected_19 := 1616\n\tdeepCompare(actual_19, expected_19, \"Exception --- test case 18 failed to pass\")\n\n\tactual_20 := add(510,922)\n\texpected_20 := 1432\n\tdeepCompare(actual_20, expected_20, \"Exception --- test case 19 failed to pass\")\n\n\tactual_21 := add(345,819)\n\texpected_21 := 1164\n\tdeepCompare(actual_21, expected_21, \"Exception --- test case 20 failed to pass\")\n\n\tactual_22 := add(895,436)\n\texpected_22 := 1331\n\tdeepCompare(actual_22, expected_22, \"Exception --- test case 21 failed to pass\")\n\n\tactual_23 := add(123,424)\n\texpected_23 := 547\n\tdeepCompare(actual_23, expected_23, \"Exception --- test case 22 failed to pass\")\n\n\tactual_24 := add(923,245)\n\texpected_24 := 1168\n\tdeepCompare(actual_24, expected_24, \"Exception --- test case 23 failed to pass\")\n\n\tactual_25 := add(23,438)\n\texpected_25 := 461\n\tdeepCompare(actual_25, expected_25, \"Exception --- test case 24 failed to pass\")\n\n\tactual_26 := add(565,133)\n\texpected_26 := 698\n\tdeepCompare(actual_26, expected_26, \"Exception --- test case 25 failed to pass\")\n\n\tactual_27 := add(945,925)\n\texpected_27 := 1870\n\tdeepCompare(actual_27, expected_27, \"Exception --- test case 26 failed to pass\")\n\n\tactual_28 := add(261,983)\n\texpected_28 := 1244\n\tdeepCompare(actual_28, expected_28, \"Exception --- test case 27 failed to pass\")\n\n\tactual_29 := add(139,577)\n\texpected_29 := 716\n\tdeepCompare(actual_29, expected_29, \"Exception --- test case 28 failed to pass\")\n\n\tactual_30 := add(763,178)\n\texpected_30 := 941\n\tdeepCompare(actual_30, expected_30, \"Exception --- test case 29 failed to pass\")\n\n\tactual_31 := add(147,892)\n\texpected_31 := 1039\n\tdeepCompare(actual_31, expected_31, \"Exception --- test case 30 failed to pass\")\n\n\tactual_32 := add(436,402)\n\texpected_32 := 838\n\tdeepCompare(actual_32, expected_32, \"Exception --- test case 31 failed to pass\")\n\n\tactual_33 := add(610,581)\n\texpected_33 := 1191\n\tdeepCompare(actual_33, expected_33, \"Exception --- test case 32 failed to pass\")\n\n\tactual_34 := add(103,416)\n\texpected_34 := 519\n\tdeepCompare(actual_34, expected_34, \"Exception --- test case 33 failed to pass\")\n\n\tactual_35 := add(339,990)\n\texpected_35 := 1329\n\tdeepCompare(actual_35, expected_35, \"Exception --- test case 34 failed to pass\")\n\n\tactual_36 := add(130,504)\n\texpected_36 := 634\n\tdeepCompare(actual_36, expected_36, \"Exception --- test case 35 failed to pass\")\n\n\tactual_37 := add(242,717)\n\texpected_37 := 959\n\tdeepCompare(actual_37, expected_37, \"Exception --- test case 36 failed to pass\")\n\n\tactual_38 := add(562,110)\n\texpected_38 := 672\n\tdeepCompare(actual_38, expected_38, \"Exception --- test case 37 failed to pass\")\n\n\tactual_39 := add(396,909)\n\texpected_39 := 1305\n\tdeepCompare(actual_39, expected_39, \"Exception --- test case 38 failed to pass\")\n\n\tactual_40 := add(887,703)\n\texpected_40 := 1590\n\tdeepCompare(actual_40, expected_40, \"Exception --- test case 39 failed to pass\")\n\n\tactual_41 := add(870,551)\n\texpected_41 := 1421\n\tdeepCompare(actual_41, expected_41, \"Exception --- test case 40 failed to pass\")\n\n\tactual_42 := add(422,391)\n\texpected_42 := 813\n\tdeepCompare(actual_42, expected_42, \"Exception --- test case 41 failed to pass\")\n\n\tactual_43 := add(299,505)\n\texpected_43 := 804\n\tdeepCompare(actual_43, expected_43, \"Exception --- test case 42 failed to pass\")\n\n\tactual_44 := add(346,56)\n\texpected_44 := 402\n\tdeepCompare(actual_44, expected_44, \"Exception --- test case 43 failed to pass\")\n\n\tactual_45 := add(36,706)\n\texpected_45 := 742\n\tdeepCompare(actual_45, expected_45, \"Exception --- test case 44 failed to pass\")\n\n\tactual_46 := add(738,411)\n\texpected_46 := 1149\n\tdeepCompare(actual_46, expected_46, \"Exception --- test case 45 failed to pass\")\n\n\tactual_47 := add(679,87)\n\texpected_47 := 766\n\tdeepCompare(actual_47, expected_47, \"Exception --- test case 46 failed to pass\")\n\n\tactual_48 := add(25,303)\n\texpected_48 := 328\n\tdeepCompare(actual_48, expected_48, \"Exception --- test case 47 failed to pass\")\n\n\tactual_49 := add(161,612)\n\texpected_49 := 773\n\tdeepCompare(actual_49, expected_49, \"Exception --- test case 48 failed to pass\")\n\n\tactual_50 := add(306,841)\n\texpected_50 := 1147\n\tdeepCompare(actual_50, expected_50, \"Exception --- test case 49 failed to pass\")\n\n\tactual_51 := add(973,411)\n\texpected_51 := 1384\n\tdeepCompare(actual_51, expected_51, \"Exception --- test case 50 failed to pass\")\n\n\tactual_52 := add(711,157)\n\texpected_52 := 868\n\tdeepCompare(actual_52, expected_52, \"Exception --- test case 51 failed to pass\")\n\n\tactual_53 := add(471,27)\n\texpected_53 := 498\n\tdeepCompare(actual_53, expected_53, \"Exception --- test case 52 failed to pass\")\n\n\tactual_54 := add(714,792)\n\texpected_54 := 1506\n\tdeepCompare(actual_54, expected_54, \"Exception --- test case 53 failed to pass\")\n\n\tactual_55 := add(38,206)\n\texpected_55 := 244\n\tdeepCompare(actual_55, expected_55, \"Exception --- test case 54 failed to pass\")\n\n\tactual_56 := add(907,343)\n\texpected_56 := 1250\n\tdeepCompare(actual_56, expected_56, \"Exception --- test case 55 failed to pass\")\n\n\tactual_57 := add(23,760)\n\texpected_57 := 783\n\tdeepCompare(actual_57, expected_57, \"Exception --- test case 56 failed to pass\")\n\n\tactual_58 := add(524,859)\n\texpected_58 := 1383\n\tdeepCompare(actual_58, expected_58, \"Exception --- test case 57 failed to pass\")\n\n\tactual_59 := add(30,529)\n\texpected_59 := 559\n\tdeepCompare(actual_59, expected_59, \"Exception --- test case 58 failed to pass\")\n\n\tactual_60 := add(341,691)\n\texpected_60 := 1032\n\tdeepCompare(actual_60, expected_60, \"Exception --- test case 59 failed to pass\")\n\n\tactual_61 := add(167,729)\n\texpected_61 := 896\n\tdeepCompare(actual_61, expected_61, \"Exception --- test case 60 failed to pass\")\n\n\tactual_62 := add(636,289)\n\texpected_62 := 925\n\tdeepCompare(actual_62, expected_62, \"Exception --- test case 61 failed to pass\")\n\n\tactual_63 := add(503,144)\n\texpected_63 := 647\n\tdeepCompare(actual_63, expected_63, \"Exception --- test case 62 failed to pass\")\n\n\tactual_64 := add(51,985)\n\texpected_64 := 1036\n\tdeepCompare(actual_64, expected_64, \"Exception --- test case 63 failed to pass\")\n\n\tactual_65 := add(287,149)\n\texpected_65 := 436\n\tdeepCompare(actual_65, expected_65, \"Exception --- test case 64 failed to pass\")\n\n\tactual_66 := add(659,75)\n\texpected_66 := 734\n\tdeepCompare(actual_66, expected_66, \"Exception --- test case 65 failed to pass\")\n\n\tactual_67 := add(462,797)\n\texpected_67 := 1259\n\tdeepCompare(actual_67, expected_67, \"Exception --- test case 66 failed to pass\")\n\n\tactual_68 := add(406,141)\n\texpected_68 := 547\n\tdeepCompare(actual_68, expected_68, \"Exception --- test case 67 failed to pass\")\n\n\tactual_69 := add(106,44)\n\texpected_69 := 150\n\tdeepCompare(actual_69, expected_69, \"Exception --- test case 68 failed to pass\")\n\n\tactual_70 := add(300,934)\n\texpected_70 := 1234\n\tdeepCompare(actual_70, expected_70, \"Exception --- test case 69 failed to pass\")\n\n\tactual_71 := add(471,524)\n\texpected_71 := 995\n\tdeepCompare(actual_71, expected_71, \"Exception --- test case 70 failed to pass\")\n\n\tactual_72 := add(122,429)\n\texpected_72 := 551\n\tdeepCompare(actual_72, expected_72, \"Exception --- test case 71 failed to pass\")\n\n\tactual_73 := add(735,195)\n\texpected_73 := 930\n\tdeepCompare(actual_73, expected_73, \"Exception --- test case 72 failed to pass\")\n\n\tactual_74 := add(335,484)\n\texpected_74 := 819\n\tdeepCompare(actual_74, expected_74, \"Exception --- test case 73 failed to pass\")\n\n\tactual_75 := add(28,809)\n\texpected_75 := 837\n\tdeepCompare(actual_75, expected_75, \"Exception --- test case 74 failed to pass\")\n\n\tactual_76 := add(430,20)\n\texpected_76 := 450\n\tdeepCompare(actual_76, expected_76, \"Exception --- test case 75 failed to pass\")\n\n\tactual_77 := add(916,635)\n\texpected_77 := 1551\n\tdeepCompare(actual_77, expected_77, \"Exception --- test case 76 failed to pass\")\n\n\tactual_78 := add(301,999)\n\texpected_78 := 1300\n\tdeepCompare(actual_78, expected_78, \"Exception --- test case 77 failed to pass\")\n\n\tactual_79 := add(454,466)\n\texpected_79 := 920\n\tdeepCompare(actual_79, expected_79, \"Exception --- test case 78 failed to pass\")\n\n\tactual_80 := add(905,259)\n\texpected_80 := 1164\n\tdeepCompare(actual_80, expected_80, \"Exception --- test case 79 failed to pass\")\n\n\tactual_81 := add(168,205)\n\texpected_81 := 373\n\tdeepCompare(actual_81, expected_81, \"Exception --- test case 80 failed to pass\")\n\n\tactual_82 := add(570,434)\n\texpected_82 := 1004\n\tdeepCompare(actual_82, expected_82, \"Exception --- test case 81 failed to pass\")\n\n\tactual_83 := add(64,959)\n\texpected_83 := 1023\n\tdeepCompare(actual_83, expected_83, \"Exception --- test case 82 failed to pass\")\n\n\tactual_84 := add(957,510)\n\texpected_84 := 1467\n\tdeepCompare(actual_84, expected_84, \"Exception --- test case 83 failed to pass\")\n\n\tactual_85 := add(722,598)\n\texpected_85 := 1320\n\tdeepCompare(actual_85, expected_85, \"Exception --- test case 84 failed to pass\")\n\n\tactual_86 := add(770,226)\n\texpected_86 := 996\n\tdeepCompare(actual_86, expected_86, \"Exception --- test case 85 failed to pass\")\n\n\tactual_87 := add(579,66)\n\texpected_87 := 645\n\tdeepCompare(actual_87, expected_87, \"Exception --- test case 86 failed to pass\")\n\n\tactual_88 := add(117,674)\n\texpected_88 := 791\n\tdeepCompare(actual_88, expected_88, \"Exception --- test case 87 failed to pass\")\n\n\tactual_89 := add(530,30)\n\texpected_89 := 560\n\tdeepCompare(actual_89, expected_89, \"Exception --- test case 88 failed to pass\")\n\n\tactual_90 := add(776,345)\n\texpected_90 := 1121\n\tdeepCompare(actual_90, expected_90, \"Exception --- test case 89 failed to pass\")\n\n\tactual_91 := add(327,389)\n\texpected_91 := 716\n\tdeepCompare(actual_91, expected_91, \"Exception --- test case 90 failed to pass\")\n\n\tactual_92 := add(596,12)\n\texpected_92 := 608\n\tdeepCompare(actual_92, expected_92, \"Exception --- test case 91 failed to pass\")\n\n\tactual_93 := add(599,511)\n\texpected_93 := 1110\n\tdeepCompare(actual_93, expected_93, \"Exception --- test case 92 failed to pass\")\n\n\tactual_94 := add(936,476)\n\texpected_94 := 1412\n\tdeepCompare(actual_94, expected_94, \"Exception --- test case 93 failed to pass\")\n\n\tactual_95 := add(461,14)\n\texpected_95 := 475\n\tdeepCompare(actual_95, expected_95, \"Exception --- test case 94 failed to pass\")\n\n\tactual_96 := add(966,157)\n\texpected_96 := 1123\n\tdeepCompare(actual_96, expected_96, \"Exception --- test case 95 failed to pass\")\n\n\tactual_97 := add(326,91)\n\texpected_97 := 417\n\tdeepCompare(actual_97, expected_97, \"Exception --- test case 96 failed to pass\")\n\n\tactual_98 := add(392,455)\n\texpected_98 := 847\n\tdeepCompare(actual_98, expected_98, \"Exception --- test case 97 failed to pass\")\n\n\tactual_99 := add(446,477)\n\texpected_99 := 923\n\tdeepCompare(actual_99, expected_99, \"Exception --- test case 98 failed to pass\")\n\n\tactual_100 := add(324,860)\n\texpected_100 := 1184\n\tdeepCompare(actual_100, expected_100, \"Exception --- test case 99 failed to pass\")\n\n\tactual_101 := add(945,85)\n\texpected_101 := 1030\n\tdeepCompare(actual_101, expected_101, \"Exception --- test case 100 failed to pass\")\n\n\tactual_102 := add(886,582)\n\texpected_102 := 1468\n\tdeepCompare(actual_102, expected_102, \"Exception --- test case 101 failed to pass\")\n\n\tactual_103 := add(886,712)\n\texpected_103 := 1598\n\tdeepCompare(actual_103, expected_103, \"Exception --- test case 102 failed to pass\")\n\n\tactual_104 := add(842,953)\n\texpected_104 := 1795\n\tdeepCompare(actual_104, expected_104, \"Exception --- test case 103 failed to pass\")\n\n}", "language": "go", "description": "x तथा y संख्याद्वयं योजयतु। \n>>> योजयतु (2,3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> योजयतु (5,7) \n12।", "entry_point": "add", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/20", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := same_chars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := same_chars(\"abcd\",\"dddddddabc\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := same_chars(\"dddddddabc\",\"abcd\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := same_chars(\"eabcd\",\"dddddddabc\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := same_chars(\"abcd\",\"dddddddabcf\")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := same_chars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := same_chars(\"aabb\",\"aaccc\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "द्वयोः शब्दयोः अक्षरद्वयम् समानम् अस्ति वा इति पश्यतु। \n>>> समान-अक्षरानि ('eabcdzzzz','dddzzzzzuddeddabc') \nसत्यम्। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nसत्यम्। \n>>> सेमचारस् ('ddddddabc','abcd') \nसत्यम्। \n>>> सेमचारस् ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>>> समान-अक्षरानि ('eabcdzzz','dddzzzzzddddddbc') \nमिथ्याचारः।", "entry_point": "same_chars", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/21", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fib(10)\n\texpected_1 := 55\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fib(1)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fib(8)\n\texpected_3 := 21\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fib(11)\n\texpected_4 := 89\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := fib(12)\n\texpected_5 := 144\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "n-th फिबोनाची सङ्ख्या प्रत्यावर्तयतु। \n>>> फैब् (10) \n55। \n>>> फैब् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> फैब् (8) \n21।", "entry_point": "fib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/22", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := common([]int{1, 4, 3, 34, 653, 2, 5},[]int{5, 7, 1, 5, 9, 653, 121})\n\texpected_1 := []int{1, 5, 653}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := common([]int{5, 3, 2, 8},[]int{3, 2})\n\texpected_2 := []int{2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := common([]int{4, 3, 2, 8},[]int{3, 2, 4})\n\texpected_3 := []int{2, 3, 4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := common([]int{4, 3, 2, 8},[]int{})\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "द्वयोः सूच्याः कृते विशिष्टान् सामान्यान् तत्त्वान् पुनः क्रमबद्धं करोतु। \n>> सामान्यः ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्यः ([5,3,2,8], [3,2]) \n[2,3]", "entry_point": "common", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/23", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_prime_factor(15)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_prime_factor(27)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_prime_factor(63)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := largest_prime_factor(330)\n\texpected_4 := 11\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := largest_prime_factor(13195)\n\texpected_5 := 29\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "n इत्यस्य बृहत्तमं अभाज्यघटकं प्रत्यावर्तयतु। n> 1 इति अमन्यताम्, सः अभाज्यः नास्ति। \n>>> बृहत्तमः _ प्रधानः _ कारकः (13195) \n29। \n>>> बृहत्तमं _ प्रधानम् _ कारकं (2048) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2।", "entry_point": "largest_prime_factor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/24", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_to_n(1)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_to_n(6)\n\texpected_2 := 21\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_to_n(11)\n\texpected_3 := 66\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_to_n(30)\n\texpected_4 := 465\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_to_n(100)\n\texpected_5 := 5050\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "sum _ to _ n इति एकं फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यानां योग्यं करोति। \n>>> सम्-टु-एन् (30) \n465। \n>>> सम्-टु-एन् (100) \n5050 \n>>> सम्-टु-एन् (5) \n15। \n>>> सम्-टु-एन् (10) \n55। \n>>> सम्-टु-एन् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "entry_point": "sum_to_n", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/25", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := derivative([]int{3, 1, 2, 4, 5})\n\texpected_1 := []int{1, 4, 12, 20}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := derivative([]int{1, 2, 3})\n\texpected_2 := []int{2, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := derivative([]int{3, 2, 1})\n\texpected_3 := []int{2, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := derivative([]int{3, 2, 1, 0, 4})\n\texpected_4 := []int{2, 2, 0, 16}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := derivative([]int{1})\n\texpected_5 := []int{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "xs तु बहुपदस्य गुणकं निर्दिशति। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nअस्य बहुपदस्य व्युत्पन्नम् समानरूपेण प्रत्यावर्तयतु। \n>>> व्युत्पन्नम् ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्नम् ([1,2,3]) \n[2,6]", "entry_point": "derivative", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/26", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fibfib(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fibfib(1)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fibfib(5)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fibfib(8)\n\texpected_4 := 24\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := fibfib(10)\n\texpected_5 := 81\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := fibfib(12)\n\texpected_6 := 274\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := fibfib(14)\n\texpected_7 := 927\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "फैब्-फैब् सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nफैबफ़िब (0) = = 0 \nफैबफ़िब (1) = = 0 \nफैबफ़िब (2) = = 1 \nfibfib (n) = = fibfib (n-1) + fibfib (n-2) + fibfib (n-3)। \nफैब्फैब् सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। \n>>> फैब्फैब् (1) \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>>> फैब्फैब् (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्फैब् (8) \n24।", "entry_point": "fibfib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/27", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := vowels_count(\"abcde\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := vowels_count(\"Alone\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := vowels_count(\"key\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := vowels_count(\"bye\")\n\texpected_4 := 1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := vowels_count(\"keY\")\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := vowels_count(\"bYe\")\n\texpected_6 := 1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := vowels_count(\"ACEDY\")\n\texpected_7 := 3\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन्-वोवेल्स्-कौण्ट् इति लिखतु यत् तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं \nएकं पदं इन्पुट्-रूपेण तथा स्ट्रिङ्ग्-मध्ये स्वराणां संख्यां प्रत्यर्पयति। \nअस्मिन् सन्दर्भे स्वराः'a','e','i','o','u'च सन्ति। अत्र'y'अपि a अस्ति। \nस्वरः, परन्तु केवलं यदा सः प्रदत्तस्य शब्दस्य अन्ते भवति। \n\nउदाहरणम्-\n>>> स्वरगणनाः (\"ए. बी. सी. डी\".) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> स्वरगणनाः (\"ACEDY\") \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3।", "entry_point": "vowels_count", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/28", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := search([]int{5, 5, 5, 5, 1})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := search([]int{4, 1, 4, 1, 4, 4})\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := search([]int{3, 3})\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := search([]int{8, 8, 8, 8, 8, 8, 8, 8})\n\texpected_4 := 8\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := search([]int{2, 3, 3, 2, 2})\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := search([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1})\n\texpected_6 := 1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := search([]int{3, 2, 8, 2})\n\texpected_7 := 2\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := search([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10})\n\texpected_8 := 1\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := search([]int{8, 8, 3, 6, 5, 6, 4})\n\texpected_9 := -1\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := search([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})\n\texpected_10 := 1\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := search([]int{1, 9, 10, 1, 3})\n\texpected_11 := 1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := search([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10})\n\texpected_12 := 5\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := search([]int{1})\n\texpected_13 := 1\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := search([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5})\n\texpected_14 := 4\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := search([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10})\n\texpected_15 := 2\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := search([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3})\n\texpected_16 := 1\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n\tactual_17 := search([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4})\n\texpected_17 := 4\n\tdeepCompare(actual_17, expected_17, \"Exception --- test case 16 failed to pass\")\n\n\tactual_18 := search([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7})\n\texpected_18 := 4\n\tdeepCompare(actual_18, expected_18, \"Exception --- test case 17 failed to pass\")\n\n\tactual_19 := search([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1})\n\texpected_19 := 2\n\tdeepCompare(actual_19, expected_19, \"Exception --- test case 18 failed to pass\")\n\n\tactual_20 := search([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8})\n\texpected_20 := -1\n\tdeepCompare(actual_20, expected_20, \"Exception --- test case 19 failed to pass\")\n\n\tactual_21 := search([]int{10})\n\texpected_21 := -1\n\tdeepCompare(actual_21, expected_21, \"Exception --- test case 20 failed to pass\")\n\n\tactual_22 := search([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2})\n\texpected_22 := 2\n\tdeepCompare(actual_22, expected_22, \"Exception --- test case 21 failed to pass\")\n\n\tactual_23 := search([]int{5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8})\n\texpected_23 := 1\n\tdeepCompare(actual_23, expected_23, \"Exception --- test case 22 failed to pass\")\n\n\tactual_24 := search([]int{7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6})\n\texpected_24 := 1\n\tdeepCompare(actual_24, expected_24, \"Exception --- test case 23 failed to pass\")\n\n\tactual_25 := search([]int{3, 10, 10, 9, 2})\n\texpected_25 := -1\n\tdeepCompare(actual_25, expected_25, \"Exception --- test case 24 failed to pass\")\n\n}", "language": "go", "description": "भवते धनात्मक-पूर्णांकानां रिक्त-सूची दत्ता भवति। तस्य अपेक्षया बृहत्तमा पूर्णांकं प्रत्यर्पयतु। \nशून्यं, तथा च तस्य आवृत्तिः पूर्णांकस्य मूल्यात् अधिका वा समानं वा भवति। \nपूर्णांकस्य आवृत्तिः सूच्यां कियत् प्रावश्यं दृश्यते इति निर्दिशति। \nयदि एतादृशं मूल्यं नास्ति तर्हि-1 प्रत्यर्पयतु। \nउदाहरणानि-\nअन्वेषणम् ([4,1,2,2,3,1]) = = 2 \nअन्वेषणम् ([1,2,3,3,4,4]) = = 3 \nअन्वेषणम् ([5,5,4,4]) = =-1", "entry_point": "search", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/29", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := triangle_area(3,4,5)\n\texpected_1 := 6.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := triangle_area(1,2,10)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := triangle_area(4,8,5)\n\texpected_3 := 8.18\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := triangle_area(2,2,2)\n\texpected_4 := 1.73\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := triangle_area(1,2,3)\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := triangle_area(10,5,7)\n\texpected_6 := 16.25\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := triangle_area(2,6,3)\n\texpected_7 := -1\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := triangle_area(1,1,1)\n\texpected_8 := 0.43\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := triangle_area(2,2,10)\n\texpected_9 := -1\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। अस्य क्षेत्रफलं प्रत्यावर्तयतु। \nत्रिकोणमितिः 2 दशमांश-बिन्दुभिः वृत्ताकारः भवति, यदि त्रिभिः पक्षैः वैधत्रिकोणमितिः कल्प्यते। \nअन्यथा पुनरागमनं-1 \nउभयपक्षयोः योगः अधिकः भवति चेत् त्रिभुजपक्षाः त्रिकोणं निर्मीयन्ते। \nतृतीयपक्षस्य अपेक्षया। \nउदाहरणम्-\nत्रिभुज-क्षेत्रफलं (3,4,5) = = 6.00 \nत्रिभुजक्षेत्रम् (1,2,10) = =-1", "entry_point": "triangle_area", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/30", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := will_it_fly([]int{3, 2, 3},9)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := will_it_fly([]int{1, 2},5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := will_it_fly([]int{3},5)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := will_it_fly([]int{3, 2, 3},1)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := will_it_fly([]int{1, 2, 3},6)\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := will_it_fly([]int{5},5)\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "यदि q वस्तु उड्डीयते तर्हि सत्यं प्रत्यावर्तयति, अन्यथा असत्यम् इति फलनम् लिखतु। \nयदि वस्तु q सन्तुलितम् अस्ति (एषा पालिण्ड्रोमिक्-सूची अस्ति) तथा च तस्य तत्त्वानां योगः अधिकतम-संभव-भारस्य डब्ल्यू-तः न्यूनं वा समानं वा भवति तर्हि तत् उड्डीयते। \n\nउदाहरणम्-\nविल् _ इट् _ फ़्लै ([1,2], 5) ′ फाल्स् \n#1 + 2 अधिकतम-संभव-भारात् न्यूनम् अस्ति, परन्तु असंतुलितम् अस्ति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 1) ′ फाल्स् \n#एतत् सन्तुलितम् अस्ति, परन्तु 3 + 2 + 3 अधिकतम-सम्भव-भारात् अधिकं भवति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 9) ट्रु \n#3 + 2 + 3 अधिकतम-संभव-भारात् न्यूनं भवति, सन्तुलितं च भवति। \n\nविल् _ इट् _ फ़्लै ([3], 5) ट्रु \n#3 अधिकतम-संभव-भारात् न्यूनः अस्ति, सन्तुलितः च अस्ति।", "entry_point": "will_it_fly", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/31", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_multiply_prime(5)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_multiply_prime(30)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_multiply_prime(8)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_multiply_prime(10)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_multiply_prime(125)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_multiply_prime(105)\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_multiply_prime(126)\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_multiply_prime(729)\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_multiply_prime(891)\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_multiply_prime(1001)\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "यदि दत्तसङ्ख्या 3 अभाज्यसङ्ख्याणां गुणनम् अस्ति तर्हि सत्यं प्रत्यावर्त्यमानं फलनम् लिखतु। \nअन्यथा असत्यम्। \n(अ) 100 तः न्यूनम् इति ज्ञात्वा। \nउदाहरणम्-\nगुणितं अभाज्यम् (30) = = सत्यम् \n30 = 2 * 3 * 5", "entry_point": "is_multiply_prime", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/32", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decimal_to_binary(0)\n\texpected_1 := \"db0db\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decimal_to_binary(32)\n\texpected_2 := \"db100000db\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decimal_to_binary(103)\n\texpected_3 := \"db1100111db\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := decimal_to_binary(15)\n\texpected_4 := \"db1111db\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "भवते दशमांश-रूपेण संख्या दीयते तथा च भवतः कार्यम् अस्ति तत् दशमांश-रूपेण परिवर्तयेत्। \nद्वैतीयं स्वरूपम्। फलनम् एकं स्ट्रिङ्ग् प्रत्यावर्तयेत्, यत्र प्रत्येकं अक्षरं द्वैतीयं प्रतिनिधित्वं करोति। \nसंख्या। तन्त्रे प्रत्येकं अक्षरं'0'अथवा'1'भविष्यति। \n\nस्ट्रिङ्ग् इत्यस्य आरम्भे अन्ते च'db'इति अक्षरयोः अतिरिक्तयुगलः भविष्यन्ति। \nविन्यासे साहाय्यं कर्तुं अतिरिक्तानि अक्षरानि सन्ति। \n\nउदाहरणानि-\nदशमांशतः द्वैतीयं प्रति (15) #\"db1111db\" प्रत्यावर्तयति। \nदशमांशतः द्वैतीयं प्रति (32) #\"db100000db\" प्रत्यावर्तयति।", "entry_point": "decimal_to_binary", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/33", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_happy(\"a\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_happy(\"aa\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_happy(\"abcd\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_happy(\"aabb\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_happy(\"adb\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_happy(\"xyy\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_happy(\"iopaxpoi\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_happy(\"iopaxioi\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nस्ट्रिङ्ग् प्रसन्नः अस्ति वा न वा इति अन्वेष्टुं भवतः कार्यम् अस्ति। \nएकः सूत्रः प्रसन्नः भवति यदि तस्य दीर्घता न्यूनातिन्यूनं 3 भवति तथा च प्रति 3 क्रमानुगत-अक्षराणि विशिष्टाः भवन्ति। \nयथा-\nअस्ति _ प्रसन्नः (अ) => मिथ्या \nईस् _ हेप्पी (एए) => फाल्स् \nअस्ति _ प्रसन्नः (ए. बी. सी. डी.) => सत्यः \nईस् _ हेप्पी (आब्ब्) => फाल्स् इति। \nअस्ति _ प्रसन्नः (ए. डि. बि.) => सत्यः \nअस्ति _ प्रसन्नः (xyy) => मिथ्या", "entry_point": "is_happy", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/34", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := numerical_letter_grade([]interface{}{4.0, 3, 1.7, 2, 3.5})\n\texpected_1 := []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := numerical_letter_grade([]interface{}{1.2})\n\texpected_2 := []string{\"D+\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := numerical_letter_grade([]interface{}{0.5})\n\texpected_3 := []string{\"D-\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := numerical_letter_grade([]interface{}{0.0})\n\texpected_4 := []string{\"E\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := numerical_letter_grade([]interface{}{1, 0.3, 1.5, 2.8, 3.3})\n\texpected_5 := []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := numerical_letter_grade([]interface{}{0, 0.7})\n\texpected_6 := []string{\"E\", \"D-\"}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "एषः सत्रस्य अन्तिमः सप्ताहः अस्ति, शिक्षकः श्रेण्याः दातव्यम् अस्ति। \nछात्राणां कृते। शिक्षिका ग्रेडिङ्ग् कृते स्वकीयं एल्गोरिथ्म् निर्मायन्ती अस्ति। \nएकमात्रा समस्या एषा अस्ति यत् सा ग्रेडिङ्ग् कृते प्रयुक्तं कोड् नष्टवती। \nसा भवतः कृते केषाञ्चन छात्राणां कृते जी. पी. ए. इत्येतेषां सूचीं दत्तवती, भवन्तं लेखनीयम् अस्ति। \nएकः प्रकारः यः निम्नलिखितं पट्टिकाम् उपयुज्य अक्षरश्रेण्याः सूचीं निर्गन्तुं शक्नोतिः \nजी. पी. ए। अक्षरश्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n3. 0 बी + \n> 2.7 बी \n> 2.3 बी-\n2. 0 सी + \n> 1.7 सी \n> 1.3 सी-\n1. 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणम्-\nश्रेणी-समीकरणं ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "entry_point": "numerical_letter_grade", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/35", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prime_length(\"Hello\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prime_length(\"abcdcba\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prime_length(\"kittens\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := prime_length(\"orange\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := prime_length(\"wow\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := prime_length(\"world\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := prime_length(\"MadaM\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := prime_length(\"Wow\")\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := prime_length(\"\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := prime_length(\"HI\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := prime_length(\"go\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := prime_length(\"gogo\")\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := prime_length(\"aaaaaaaaaaaaaaa\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := prime_length(\"Madam\")\n\texpected_14 := true\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := prime_length(\"M\")\n\texpected_15 := false\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := prime_length(\"0\")\n\texpected_16 := false\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् लिखतु यत् स्ट्रिङ्ग् स्वीकृत्य सत्यं प्रत्यर्पयति यदि स्ट्रिङ्ग् अस्ति। \nदीर्घता अभाज्यसङ्ख्या अस्ति अथवा अन्यथा मिथ्या अस्ति। \nउदाहरणानि \nप्राइम-लेन्थ् ('हेलो') = = ट्रू \nअभाज्य-दीर्घता ('ए. बी. सी. डी. सी. बी. ए') = = सत्यम् \nप्रैम् _ लेन्थ् ('किटन्स्') = = ट्रू \nप्राइम-लेन्थ् ('नारङ्गवर्णः') = = मिथ्या", "entry_point": "prime_length", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/36", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solve(1000)\n\texpected_1 := \"1\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solve(150)\n\texpected_2 := \"110\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solve(147)\n\texpected_3 := \"1100\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := solve(333)\n\texpected_4 := \"1001\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := solve(963)\n\texpected_5 := \"10010\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "धनात्मकं पूर्णांकं N दत्तं चेत्, तस्य अङ्कानां कुलसमं द्वैतीये प्रत्यावर्तयतु। \n\nउदाहरणम्। \nएन = 1000 इत्यस्य कृते अङ्कानां योगः 1 भविष्यति, निर्गमः \"1\" भवेत्। \nएन = 150 इत्यस्य कृते अङ्कानां योगः 6 भविष्यति, निर्गमः \"110\" भवेत्। \nएन = 147 इत्यस्य कृते अङ्कानां योगः 12 भविष्यति, निर्गमः \"1100\" भवेत्। \n\nपरिवर्तनशीलः। \n@N पूर्णांकः \nअवरोधः 0 ≤ एन ≤ 10000। \nनिर्गमः। \nद्वैती-सङ्ख्यायाः पङ्क्तिः।", "entry_point": "solve", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/37", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}},1)\n\texpected_1 := [][]int{[]int{0, 0}, []int{1, 4}, []int{1, 0}, []int{2, 5}, []int{2, 0}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}},2)\n\texpected_2 := [][]int{[]int{0, 1}, []int{1, 1}, []int{2, 1}, []int{3, 1}, []int{4, 1}, []int{5, 1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 1, 3, 4, 5, 6}, []int{1, 2, 1, 4, 5, 6}, []int{1, 2, 3, 1, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}},1)\n\texpected_3 := [][]int{[]int{0, 0}, []int{1, 0}, []int{2, 1}, []int{2, 0}, []int{3, 2}, []int{3, 0}, []int{4, 3}, []int{4, 0}, []int{5, 4}, []int{5, 0}, []int{6, 5}, []int{6, 0}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_row([][]int{},1)\n\texpected_4 := [][]int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := get_row([][]int{[]int{1}},2)\n\texpected_5 := [][]int{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := get_row([][]int{[]int{}, []int{1}, []int{1, 2, 3}},3)\n\texpected_6 := [][]int{[]int{2, 2}}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "भवते द्विमितीय-दत्तांशः दत्तः अस्ति, नेस्टड्-लिस्ट्-रूपेण, \nयत् म्याट्रिक्स्-सदृशम् अस्ति, तथापि, म्याट्रिक्स्-विपरीतम्, \nप्रत्येकं पङ्क्तौ भिन्नसङ्ख्याकाः स्तम्भाः भवेयुः। \nदत्तं lst, तथा च पूर्णांकं x, सूच्यां x इति पूर्णांशाः अन्विष्यतु। \nतथा च टुपल्-सूचीः प्रत्यावर्तयतु, [(x1, y1), (x2, y2)...] यथा \nप्रत्येकं टुपल् एकं कोआर्डिनेट्-(रो, कालम्स्) भवति, यत् 0 तः आरभ्यते। \nप्रारम्भे आरोहणक्रमेण पङ्क्तिद्वारा निर्देशांकान् क्रमबद्धं करोतु। \nअपि च, पङ्क्त्याः निर्देशांकान् स्तम्भैः अवरोहणक्रमेण क्रमबद्धं करोतु। \n\nउदाहरणानि-\nरो (रो) प्रापयन्तु (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nप्राप्नोतु _ रो ([], 1) = = [] \nरो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "entry_point": "get_row", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/38", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := next_smallest([]int{1, 2, 3, 4, 5})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := next_smallest([]int{5, 1, 4, 3, 2})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := next_smallest([]int{})\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := next_smallest([]int{1, 1})\n\texpected_4 := nil\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := next_smallest([]int{1, 1, 1, 1, 0})\n\texpected_5 := 1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := next_smallest([]int{1, 1})\n\texpected_6 := nil\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := next_smallest([]int{-35, 34, 12, -45})\n\texpected_7 := -35\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nनेक्स्ट्-लैटेस्ट् () इति एकं फंक्षन् लिखतु यत् सूच्याः द्वितीयं लघुतमं तत्त्वं प्रत्यर्पयति। \nयदि एतादृशं तत्त्वं नास्ति तर्हि शून्यम् प्रत्यर्पयतु। \n\nअग्रिमे _ लघुतमे ([1,2,3,4,5]) = = 2 \nअग्रिमे _ लघुतमे ([5,1,4,3,2]) = = 2 \nअग्रिमे _ लघुतमे ([]) = = न \nअग्रिमे _ लघुतमे ([1,1]) = = न।", "entry_point": "next_smallest", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/39", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_bored(\"Hello world\")\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_bored(\"Is the sky blue?\")\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_bored(\"I love It !\")\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_bored(\"bIt\")\n\texpected_4 := 0\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_bored(\"I feel good today. I will be productive. will kill It\")\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_bored(\"You and I are going for a walk\")\n\texpected_6 := 0\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "भवते शब्दानां पङ्क्तिः दीयते, संख्यां गणयितुं च भवतः कार्यम् अस्ति। \nविरक्तिः। विरक्तिः एकं वाक्यम् अस्ति यत् \"अहं\" इति शब्देन आरभ्यते। \nवाक्यानि '.', '?'अथवा '!'इत्यनेन परिमिताः भवन्ति। \n\nयथा-\n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "entry_point": "is_bored", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/40", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n\texpected_3 := 13\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n\texpected_4 := 11\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n\texpected_5 := 3\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n\texpected_6 := 7\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := skjkasdkd([]int{8191})\n\texpected_7 := 19\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := skjkasdkd([]int{8191, 123456, 127, 7})\n\texpected_8 := 19\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := skjkasdkd([]int{127, 97, 8192})\n\texpected_9 := 10\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nभवन्तः बृहत्तमं अभाज्यमूल्यं अन्विष्य तस्य अङ्कानां योगम् प्रत्यर्पितुम् अर्हन्ति। \n\nउदाहरणानि-\nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] कृते निर्गमः 10 भवेत्। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] कृते निर्गमः 25 भवेत्। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] कृते निर्गमः 13 भवेत्। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] कृते निर्गमः 11 भवेत्। \nlst = [0,81,12, 3,1,21] कृते निर्गमः 3 भवेत्। \nlst = [0,8,1, 2,1,7] कृते निर्गमः 7 भवेत्।", "entry_point": "skjkasdkd", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/41", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", \"b\": \"banana\",  })\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\",  })\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", 5: \"banana\", \"a\": \"apple\",  })\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := check_dict_case(map[interface{}]string{ \"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\",  })\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := check_dict_case(map[interface{}]string{ \"STATE\": \"NC\", \"ZIP\": \"12345\",  })\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := check_dict_case(map[interface{}]string{ \"fruit\": \"Orange\", \"taste\": \"Sweet\",  })\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := check_dict_case(map[interface{}]string{  })\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "यदि सर्वाः चाबिः अधः स्ट्रिङ्ग्-रूपेण सन्ति तर्हि शब्दकोशस्य दृष्ट्या सत्यं प्रत्यर्पयतु। \nकेस् अथवा सर्वाः चाबिः अपरकेस् इत्यस्मिन् स्ट्रिङ्ग्-रूपेण भवन्ति, अन्यथा फाल्स् इति प्रत्यर्पयन्ति। \nयत् फंक्षन् रिटर्न् कर्तव्यं तत् फाल्स् इति अस्ति यत् दत्तः शब्दकोशः रिक्तः अस्ति। \nउदाहरणानि-\nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"b\": \"बनाना\"}) सत्यं प्रत्यावर्तयेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"A\": \"बनाना\", \"B\": \"बनाना\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", 8: \"बनाना\", \"a\": \"आपल्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"नाम\": \"जान्\", \"आयुः\": \"36\", \"सिटी\": \"ह्यूस्टन्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) सत्यं प्रत्यावर्तयेत्।", "entry_point": "check_dict_case", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/42", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := closest_integer(\"10\")\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := closest_integer(\"14.5\")\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := closest_integer(\"-15.5\")\n\texpected_3 := -16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := closest_integer(\"15.3\")\n\texpected_4 := 15\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := closest_integer(\"0\")\n\texpected_5 := 0\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "संख्यायाः प्रतिनिधित्वं कुर्वतां मूल्यं (स्ट्रिङ्ग्) स्वीकृत्य एकं फंक्षन् निर्मायतु। \nतस्य समीपस्थं पूर्णकं प्रत्यर्पयति। यदि संख्या समदूरे अस्ति। \nपूर्णांकद्वयात्, शून्यात् दूरे तस्य वृत्तं करोतु। \n\nउदाहरणानि \n>>> निकटतम-पूर्णांकः (\"10\") \n10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। \n>>> निकटतम-पूर्णांकः (\"15.3\") \n15। \n\nटिप्पणीः \nशून्यात् दूरे वृत्ताकारस्य अर्थः यदि दत्तसङ्ख्या समदूरम् अस्ति इति। \nपूर्णांकद्वये यः प्रत्यावर्तनीयः, सः एव पूर्णांकः। \nशून्यात् सुदूरतमम्। उदाहरणार्थं निकटतमं पूर्णांकं (\"14.5\") भवेत्। \n15 प्रत्यावर्तयतु तथा च समीपस्थः पूर्णांकः (\"-14.5\")-15 प्रत्यावर्तयेत्।", "entry_point": "closest_integer", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/43", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := make_a_pile(3)\n\texpected_1 := []int{3, 5, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := make_a_pile(4)\n\texpected_2 := []int{4, 6, 8, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := make_a_pile(5)\n\texpected_3 := []int{5, 7, 9, 11, 13}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := make_a_pile(6)\n\texpected_4 := []int{6, 8, 10, 12, 14, 16}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := make_a_pile(8)\n\texpected_5 := []int{8, 10, 12, 14, 16, 18, 20, 22}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "धनात्मक-पूर्णांकस्य n इत्यस्य दृष्ट्या, भवन्तः n-स्तराणां शिलाखण्डं निर्मातुम् अर्हन्ति। \nप्रथमस्तरे एन-शिलाः सन्ति। \nअग्रिमस्तरे शिलानाम् सङ्ख्या अस्ति-\n- अग्रिमः विषमसङ्ख्या यदि n विषम अस्ति। \n- अग्रिमं समसङ्ख्या यदि n समम् अस्ति। \nसूच्यां प्रत्येकस्तरे शिलानां सङ्ख्या प्रत्यावर्तयतु, यत्र सूचकाङ्के तत्त्वम् अस्ति। \ni स्तरस्य शिलानां संख्यां सूचयति (i + 1)। \n\nउदाहरणानि-\n>>> मेक्-अ-पैल् (3) \n[3,5,7]", "entry_point": "make_a_pile", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/44", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := words_string(\"Hi, my name is John\")\n\texpected_1 := []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := words_string(\"One, two, three, four, five, six\")\n\texpected_2 := []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := words_string(\"Hi, my name\")\n\texpected_3 := []string{\"Hi\", \"my\", \"name\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := words_string(\"One,, two, three, four, five, six,\")\n\texpected_4 := []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := words_string(\"\")\n\texpected_5 := []string{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := words_string(\"ahmed     , gamal\")\n\texpected_6 := []string{\"ahmed\", \"gamal\"}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "भवते अल्पविरामाः रिक्तस्थानानि वा विभक्तानि शब्दशृङ्खला दीयन्ते। भवतः कार्यम् अस्ति-\nसूत्रं शब्दैः विभज्य शब्दानां श्रेणीं प्रत्यावर्तयेत्। \n\nयथा-\nशब्दः _ स्ट्रिङ्ग् (\"हाय्, मम नाम जान् अस्ति\") = = [\"हाय्\", \"मै\", \"नेम्\", \"इस्\", \"जान्\"] \n\"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\",", "entry_point": "words_string", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/45", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := choose_num(12,15)\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := choose_num(13,12)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := choose_num(33,12354)\n\texpected_3 := 12354\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := choose_num(5234,5233)\n\texpected_4 := -1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := choose_num(6,29)\n\texpected_5 := 28\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := choose_num(27,10)\n\texpected_6 := -1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := choose_num(7,7)\n\texpected_7 := -1\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := choose_num(546,546)\n\texpected_8 := 546\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "एतत् फलनम् x तथा y इति धनात्मक-संख्याद्वयं स्वीकृत्य तत् प्रत्यावर्तयति। \nबृहत्तमः सम-पूर्णांकसङ्ख्या, या [x, y] समावेशीपरिधिमध्ये अस्ति। \nतत्र एतादृशी सङ्ख्या नास्ति, ततः फंक्षन्-1 पुनः प्राप्नुयात्। \n\nयथा-\nसंख्यां चिनोतु (12,15) = 14 \nसंख्यां चिनोतु (13,12) =-1", "entry_point": "choose_num", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/46", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rounded_avg(1,5)\n\texpected_1 := \"0b11\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rounded_avg(7,13)\n\texpected_2 := \"0b1010\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rounded_avg(964,977)\n\texpected_3 := \"0b1111001010\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := rounded_avg(996,997)\n\texpected_4 := \"0b1111100100\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := rounded_avg(560,851)\n\texpected_5 := \"0b1011000010\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := rounded_avg(185,546)\n\texpected_6 := \"0b101101110\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := rounded_avg(362,496)\n\texpected_7 := \"0b110101101\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := rounded_avg(350,902)\n\texpected_8 := \"0b1001110010\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := rounded_avg(197,233)\n\texpected_9 := \"0b11010111\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := rounded_avg(7,5)\n\texpected_10 := -1\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := rounded_avg(5,1)\n\texpected_11 := -1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := rounded_avg(5,5)\n\texpected_12 := \"0b101\"\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n}", "language": "go", "description": "भवते n तथा m इति धनात्मक-पूर्णांकद्वयम् दत्तं भवति, तथा च भवतः कार्यम् गणना इति अस्ति। \nn तः m पर्यन्तं पूर्णांकानां माध्यं (n तथा m सहितं)। \nसमीपस्थस्य पूर्णांकस्य उत्तरस्य वृत्तं कृत्वा तं द्विमानरूपेण परिवर्तयतु। \nयदि n, m तः अधिकः अस्ति, तर्हि-1 प्रत्यावर्तयतु। \nउदाहरणम्-\nगोलः एव्ग् (1,5) => \"0बि11\" \nआवर्तितः (7,5) =>-1 \nगोलः एव्ग् (10,20) => \"0बि1111\" \nगोलः एव्ग् (20,33) => \"0बि11010\"", "entry_point": "rounded_avg", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/47", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := f(5)\n\texpected_1 := []int{1, 2, 6, 24, 15}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := f(7)\n\texpected_2 := []int{1, 2, 6, 24, 15, 720, 28}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := f(1)\n\texpected_3 := []int{1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := f(3)\n\texpected_4 := []int{1, 2, 6}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "फलनस्य f इत्यस्य कार्यान्वयनं करोतु यत् n इत्येतं परिमापरूपेण स्वीकरोति, \nतथा च n परिमाणस्य सूचीं प्रत्यर्पयति, येन सूचकाङ्कः i इत्यत्र तत्त्वस्य मूल्यं i इत्यस्य भाज्यम् अस्ति, यदि i समः अस्ति। \nअथवा अन्यथा 1 तः i पर्यन्तं संख्यानां योगः। \nअहं 1 तः आरभत। \n1 तः i (1 * 2 *................................................................................................................................................................................................ \nउदाहरणम्-\nf (5) = = [1,2,6,24,15]", "entry_point": "f", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/48", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_odd_palindrome(123)\n\texpected_1 := []int{8, 13}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_odd_palindrome(12)\n\texpected_2 := []int{4, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_odd_palindrome(3)\n\texpected_3 := []int{1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := even_odd_palindrome(63)\n\texpected_4 := []int{6, 8}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := even_odd_palindrome(25)\n\texpected_5 := []int{5, 6}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := even_odd_palindrome(19)\n\texpected_6 := []int{4, 6}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := even_odd_palindrome(9)\n\texpected_7 := []int{4, 5}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := even_odd_palindrome(1)\n\texpected_8 := []int{0, 1}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, सम-विषम-संख्यायुक्तम् एकं टुपल् प्रत्यर्पयतु। \nपूर्णांक-पालिण्ड्रोम् इत्येतानि (1, n) इति परिधौ अन्तर्भवन्ति, सर्वसमावेशकानि। \n\nउदाहरणम्-1: \n\nनिवेशः 3 \nउत्पादनः (1,2) \nव्याख्याः \nइन्टिजर्-पालिण्ड्रोम् इत्येताः 1,2,3 सन्ति। तेषु एकः समः, द्वौ च विषमौ स्तः। \n\nउदाहरणं 2: \n\nनिवेशः 12 \nउत्पादनः (4,6) \nव्याख्याः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 इति पूर्णांकपेलिण्ड्रोम् अस्ति। तेषु चत्वारः समानि, 6 विषमानि च सन्ति। \n\nटिप्पणीः \n1. 1 <= n <= 10 ^ 3 \n2. प्रत्यावर्तित-टुपल्-मध्ये क्रमशः सम-विषम-पूर्णांक-पालिण्ड्रोम्-सङ्ख्या भवति।", "entry_point": "even_odd_palindrome", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/49", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_one_ball([]int{3, 4, 5, 1, 2})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_one_ball([]int{3, 5, 10, 1, 2})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_one_ball([]int{4, 3, 1, 2})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := move_one_ball([]int{3, 5, 4, 1, 2})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := move_one_ball([]int{})\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "अस्माकं समीपे'arr'इति एन-पूर्णांकानां arr [1], arr [2],..., arr [N] इति व्यूहः अस्ति। \nश्रेण्यां संख्याः यादृच्छिकरूपेण क्रमिताः भविष्यन्ति। भवतः कार्यम् निर्धारणीयम् अस्ति यत् किम् इति। \nनिष्पादनेन अर्रे इत्यस्य क्रमनिर्धारणं न न्यूनीकर्तुं शक्यते। \nप्रदत्तश्रेण्यां निम्नलिखितं कार्यम् अस्ति। \nभवान् बहुवारं सम्यक् शिफ्ट्-शल्यक्रिया कर्तुं अनुमतः अस्ति। \n\nएकं रैट्-शिफ्ट्-आपरेशन् इत्यस्य अर्थः आरे इत्यस्य सर्वान् तत्त्वान् एकेन स्थानान्तरं कारयेत् इति। \nसम्यक् दिशायां स्थितिं करोतु। व्यूहस्य अन्तिमं तत्त्वं प्रति स्थानान्तरितं भविष्यति। \nआरे मध्ये आरम्भिक-स्थितिः अर्थात् 0 तम-सूचकाङ्कः। \n\nयदि उपर्युक्तकार्यस्य निष्पादनेन क्रमबद्धं व्यूहं प्राप्तुं शक्यते। \nततः ट्रू इति प्रत्यावर्तयतु अन्यथा फाल्स् इति प्रत्यावर्तयतु। \nयदि प्रदत्तः व्यूहः रिक्तः अस्ति तर्हि सत्यं प्रत्यर्पयतु। \n\nटिप्पणिः दत्तसूच्यां विशिष्टानि तत्त्वानि सन्ति इति सुनिश्चितं भवति। \n\nउदाहरणार्थं-\n\nमूव्-वन्-बाल् ([3,4,5,1,2]) = => ट्रू \nस्पष्टीकरणम्-2 रैट्-शिफ्ट्-आपरेशन्-मध्ये निष्पादनेन, अ-डीक्रीसिङ्ग्-आर्डर् कर्तुं शक्यते। \nप्रदत्तस्य श्रेण्याः कृते प्राप्यते। \nमूव्-वन्-बाल् ([3,5,4,1,2]) = => फाल्स् \nस्पष्टीकरणम्-दत्तस्य कृते अ-ह्रास-आदेशं प्राप्तुं न शक्यते। \nकस्यापि सङ्ख्यायां रैट्-शिफ्ट्-कार्याणि कृत्वा एरे।", "entry_point": "move_one_ball", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/50", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := exchange([]int{1, 2, 3, 4},[]int{1, 2, 3, 4})\n\texpected_1 := \"YES\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := exchange([]int{1, 2, 3, 4},[]int{1, 5, 3, 4})\n\texpected_2 := \"NO\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := exchange([]int{1, 2, 3, 4},[]int{2, 1, 4, 3})\n\texpected_3 := \"YES\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := exchange([]int{5, 7, 3},[]int{2, 6, 4})\n\texpected_4 := \"YES\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := exchange([]int{5, 7, 3},[]int{2, 6, 3})\n\texpected_5 := \"NO\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := exchange([]int{3, 2, 6, 1, 8, 9},[]int{3, 5, 5, 1, 1, 1})\n\texpected_6 := \"NO\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := exchange([]int{100, 200},[]int{200, 200})\n\texpected_7 := \"YES\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "अस्मिन् समस्यायां, भवान् एकं फंक्षन् प्रवर्तयिष्यति यत् संख्यानां सूचीं द्वयं स्वीकरोति, \nतथा च तत्त्वानां विनिमयं कर्तुं शक्यते वा इति निर्धारयति। \nतेषां मध्ये एल्. एस्. टि. 1 इतीदं केवलं समसङ्ख्याणां सूचीं निर्मातुम्। \nएल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये विनिमयितानां तत्त्वानां सङ्ख्यायाः सीमा नास्ति। \nयदि एल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये तत्त्वानां विनिमयं कर्तुं शक्यते। \nएल्. एस्. टि. 1 इत्यस्य सर्वाणि तत्त्वानि समानि भवेयुः चेत् \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयथा-\nविनिमयः ([1,2,3,4], [1,2,3,4]) => \"यस्\" \nविनिमयः ([1,2,3,4], [1,5,3,4]) => \"न\" \nनिवेशसूचीः रिक्तानि न भविष्यन्ति इति कल्प्यते।", "entry_point": "exchange", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/51", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_delete(\"abcde\",\"ae\")\n\texpected_1 := []interface{}{\"bcd\", false}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_delete(\"abcdef\",\"b\")\n\texpected_2 := []interface{}{\"acdef\", false}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_delete(\"abcdedcba\",\"ab\")\n\texpected_3 := []interface{}{\"cdedc\", true}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := reverse_delete(\"dwik\",\"w\")\n\texpected_4 := []interface{}{\"dik\", false}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := reverse_delete(\"a\",\"a\")\n\texpected_5 := []interface{}{\"\", true}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := reverse_delete(\"abcdedcba\",\"\")\n\texpected_6 := []interface{}{\"abcdedcba\", true}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := reverse_delete(\"abcdedcba\",\"v\")\n\texpected_7 := []interface{}{\"abcdedcba\", true}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := reverse_delete(\"vabba\",\"v\")\n\texpected_8 := []interface{}{\"abba\", true}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := reverse_delete(\"mamma\",\"mia\")\n\texpected_9 := []interface{}{\"\", true}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "कार्यम्। \nअस्माभिः एस् तथा सी इति स्ट्रिङ्ग् द्वयं दत्तम् अस्ति, भवन्तः एस् इत्यस्मिन् सर्वाणि अक्षरानि निष्कासयेयुः यानि सी इत्यस्मिन् कस्यापि अक्षरस्य समानानि सन्ति। \nततः परीक्षयतु यत् परिणामसूत्रं पालिण्ड्रोम् अस्ति वा इति। \nस्ट्रिङ्ग् इतीदं पालिण्ड्रोम् इति कथ्यते यदि तत् अग्रे पृष्ठतः एव पठ्यते। \nभवान् चेकस्य कृते ट्रु/फाल्स् इति परिणाम-स्ट्रिङ्ग् युक्तं टुपल् प्रत्यर्पयेत्। \nउदाहरणम्। \ns = \"एबिसिडि\", c = \"एइ\" कृते, परिणामः ('बिसिडि', फाल्स्) भवेत्। \ns = \"abcdef\", c = \"b\" इत्यस्य कृते परिणामः भवेत् ('acdef', असत्यम्)। \ns = \"abcdedcba\", c = \"ab\" कृते, परिणामः भवेत् ('cdedc', सत्यं)।", "entry_point": "reverse_delete", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/52", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}},1)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}},2)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}},5)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := max_fill([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}},2)\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := max_fill([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}},9)\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "भवते कूपानां आयताकार-ग्रिड् दीयते। प्रत्येकं पङ्क्तिः एकस्य कूपस्य प्रतिनिधित्वं करोति। \nतथा च पङ्क्तिमध्ये प्रत्येकं 1 जलस्य एककं प्रतिनिधित्वं करोति। \nप्रत्येकस्य कूपस्य अनुरूपं बाल्टी वर्तते यस्य उपयोगेन तस्य जलं निष्कासयितुं शक्यते। \nअपि च सर्वाणि बाल्टिकाः समानक्षमतायुक्तानि भवन्ति। \nकूपान् रिक्तं कर्तुं बाल्टिकाः उपयोक्तुं भवतः कार्यम् अस्ति। \nबाल्टिकाः न्यूनीकर्तुं कियत् प्रावश्यं आवश्यकं भवति तत् निर्दिशतु। \n\nउदाहरणम्-1: \nनिवेशः। \nग्रिड्ः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1] \nबाल्टी-क्षमताः 1 \nउत्पादनः 6 \n\nउदाहरणं 2: \nनिवेशः। \nग्रिड्ः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबाल्टी-क्षमताः 2 \nउत्पादनः 5 \n\nउदाहरणं 3: \nनिवेशः। \nग्रिड्ः [[0,0,0], [0,0,0] \nबाल्टी-क्षमताः 5 \nउत्पादनः 0 \n\nबाधिताः। \n* सर्वाणि कूपाणि समानदीर्घानि भवन्ति। \n* 1 <= grid.length <= 102 \n* 1 <= ग्रिड् [:, 1]. दीर्घता <= 102 \nग्रिड् [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "entry_point": "max_fill", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/53", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := select_words(\"Mary had a little lamb\",4)\n\texpected_1 := []string{\"little\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := select_words(\"Mary had a little lamb\",3)\n\texpected_2 := []string{\"Mary\", \"lamb\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := select_words(\"simple white space\",2)\n\texpected_3 := []string{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := select_words(\"Hello world\",4)\n\texpected_4 := []string{\"world\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := select_words(\"Uncle sam\",3)\n\texpected_5 := []string{\"Uncle\"}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := select_words(\"\",4)\n\texpected_6 := []string{}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := select_words(\"a b c d e f\",1)\n\texpected_7 := []string{\"b\", \"c\", \"d\", \"f\"}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "स्ट्रिङ्ग् एस् तथा प्राकृतिकसङ्ख्या एन् इत्येतयोः दृष्ट्या, भवन्तं कार्यान्वितुम् कार्यभारः दत्तः अस्ति। \nएकं फंक्षन् यत् स्ट्रिङ्ग्-एस् इत्यतः सर्वाः शब्दानां सूचीं प्रत्यर्पयति यत्र यथार्थरूपेण सन्ति। \nn व्यञ्जनाः, क्रमशः एतानि शब्दानि स्ट्रिङ्ग् s मध्ये दृश्यन्ते। \nयदि स्ट्रिङ्ग् s रिक्तः अस्ति तर्हि फंक्षन् रिक्तसूचीम् प्रत्यर्पयेत्। \nटिप्पणिः भवन्तः अनुमन्यन्ते यत् इन्पुट् स्ट्रिङ्ग् मध्ये केवलं अक्षराणि रिक्तस्थानानि च सन्ति इति। \nउदाहरणानि-\nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 4) = => [\"लघुः\"] \nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 3) = => [\"मरियम\", \"मेषः\"] \nपदानि चिनोतु (\"सादा श्वेतस्थानम्\", 2) = => [] \nपदानि चिनोतु (\"नमस्ते वर्ल्ड्\", 4) = => [\"वर्ल्ड्\"] \nपदानि चिनोतु (\"अंकल् स्याम्\", 3) = => [\"अंकल्\"]", "entry_point": "select_words", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/54", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum([]int{-3, -4, 5},3)\n\texpected_1 := []int{-4, -3, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum([]int{4, -4, 4},2)\n\texpected_2 := []int{4, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum([]int{-3, 2, 1, 2, -1, -2, 1},1)\n\texpected_3 := []int{2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := maximum([]int{123, -123, 20, 0, 1, 2, -3},3)\n\texpected_4 := []int{2, 20, 123}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := maximum([]int{-123, 20, 0, 1, 2, -3},4)\n\texpected_5 := []int{0, 1, 2, 20}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := maximum([]int{5, 15, 0, 3, -13, -8, 0},7)\n\texpected_6 := []int{-13, -8, 0, 0, 3, 5, 15}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := maximum([]int{-1, 0, 2, 5, 3, -10},2)\n\texpected_7 := []int{3, 5}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := maximum([]int{1, 0, 5, -7},1)\n\texpected_8 := []int{5}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := maximum([]int{4, -4},2)\n\texpected_9 := []int{-4, 4}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := maximum([]int{-10, 10},2)\n\texpected_10 := []int{-10, 10}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := maximum([]int{1, 2, 3, -23, 243, -400, 0},0)\n\texpected_11 := []int{}\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "पूर्णांकानां एरे-आर् तथा धनात्मकं पूर्णांकं के च दत्तं चेत्, क्रमबद्धां सूचीं प्रत्यर्पयतु। \nआर्-आर् मध्ये अधिकतम-के-सङ्ख्याभिः सह के-इत्यस्य दीर्घता। \n\nउदाहरणम्-1: \n\nनिवेशः arr = [-3,-4,5], k = 3 \nनिर्गमः [-4,-3,5] \n\nउदाहरणं 2: \n\nनिवेशः arr = [4,-4,4], k = 2 \nनिर्गमः [4,4] \n\nउदाहरणं 3: \n\nनिवेशः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटिप्पणीः \n1. व्यूहस्य दीर्घता [1000] इति परिधौ भविष्यति। \n2. श्रेण्यां तत्त्वानि [-1000] इति परिधौ भविष्यन्ति। \n3. 0 <= k <= लेन (arr)", "entry_point": "maximum", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/55", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_elements([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},3)\n\texpected_1 := -4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_elements([]int{111, 121, 3, 4000, 5, 6},2)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_elements([]int{11, 21, 3, 90, 5, 6, 7, 8, 9},4)\n\texpected_3 := 125\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9},4)\n\texpected_4 := 24\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := add_elements([]int{1},1)\n\texpected_5 := 1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ए. आर्. आर्. इति पूर्णांकस्य, के. इति पूर्णांकस्य च रिक्ततरश्रेण्या प्रदत्तं चेत्, पुनरागमनं करोतु। \nए. आर्. आर्. इत्यस्य प्रथम-के-तत्त्वात् अधिकतम-अङ्कद्वयेन युक्तानां तत्त्वानां योगः। \n\nउदाहरणम्-\n\nनिवेशः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nनिर्गमः 24 #21 + 3 इत्यस्य योगः \n\nबाधिताः। \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "entry_point": "add_elements", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/56", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := intersection([]int{1, 2},[]int{2, 3})\n\texpected_1 := \"NO\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := intersection([]int{-1, 1},[]int{0, 4})\n\texpected_2 := \"NO\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := intersection([]int{-3, -1},[]int{-5, 5})\n\texpected_3 := \"YES\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := intersection([]int{-2, 2},[]int{-4, 0})\n\texpected_4 := \"YES\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := intersection([]int{-11, 2},[]int{-1, -1})\n\texpected_5 := \"NO\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := intersection([]int{1, 2},[]int{3, 5})\n\texpected_6 := \"NO\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := intersection([]int{1, 2},[]int{1, 2})\n\texpected_7 := \"NO\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := intersection([]int{-2, -2},[]int{-3, -2})\n\texpected_8 := \"NO\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "भवते द्वौ अन्तरालौ दीयन्ते। \nयत्र प्रत्येकः अन्तरालः पूर्णांकयुगलः भवति। यथा, अन्तरालः = (आरम्भः, समाप्तिः) = (1,2)। \nप्रदत्तानि अन्तरालानि परिवेष्टितानि भवन्ति यस्य अर्थः अन्तरालः (आरम्भः, समाप्तिः) इति। \nतत्र आरम्भः समाप्तिः च स्तः। \nप्रत्येकस्मिन् निर्दिष्टावधौ, तस्य आरम्भः तस्य अन्तात् न्यूनः अथवा समानः इति कल्प्यते। \nएतयोः द्वयोः प्रतिच्छेदनस्य दीर्घता कियत् इति निर्णेतुं भवतः कार्यम् अस्ति। \nअन्तरालः अभाज्यसङ्ख्या अस्ति। \nउदाहरणार्थं, अन्तरालानां (1,3), (2,4) प्रतिच्छेदनम् (2,3) अस्ति। \nयस्य दीर्घता 1 अस्ति, या अभाज्यसङ्ख्या नास्ति। \nयदि प्रतिच्छेदनस्य दीर्घता अभाज्यसङ्ख्या अस्ति, तर्हि \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयदि द्वयोः अन्तरालयोः प्रतिच्छेदनम् न भवति तर्हि \"न\" इति प्रत्यावर्तयतु। \n\n[इन्पुट्/औट्पुट्] प्रतिमानानिः \nप्रतिच्छेदनम् ((1,2,3)) = => \"न\" \nप्रतिच्छेदनम् ((-1,1), (0,4)) = => \"न\" \nप्रतिच्छेदनम् ((-3,-1), (-5,5)) = => \"यस्\"", "entry_point": "intersection", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/57", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tri(3)\n\texpected_1 := []interface{}{1, 3, 2.0, 8.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tri(4)\n\texpected_2 := []interface{}{1, 3, 2.0, 8.0, 3.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tri(5)\n\texpected_3 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := tri(6)\n\texpected_4 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := tri(7)\n\texpected_5 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := tri(8)\n\texpected_6 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := tri(9)\n\texpected_7 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := tri(20)\n\texpected_8 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := tri(0)\n\texpected_9 := []interface{}{1}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := tri(1)\n\texpected_10 := []interface{}{1, 3}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "फिबोनाची-क्रमं सर्वे जानन्ति, गणितशास्त्रज्ञैः तस्य गहनः अध्ययनम् अभूत्। \nअन्तिमानि युगयुगानि। तथापि, यत् जनाः न जानन्ति तत् ट्रिबोनाचि-क्रमः अस्ति। \nट्रैबोनाचि-क्रमः पुनरावर्तनेन परिभाषितः अस्ति। \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, यदि n समः अस्ति। \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), यदि n अयुग्मः अस्ति। \nयथा-\nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nभवते अ-ऋणात्मक-पूर्णांकसङ्ख्या n दीयते, भवते सूचीं प्रत्यर्पयेत्। \nट्रिबोनाची-क्रमस्य प्रथमा n + 1 सङ्ख्याः। \nउदाहरणानि-\nत्रि (3) = [1,3,2,8]", "entry_point": "tri", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/58", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := digits(5)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := digits(54)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := digits(120)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := digits(5014)\n\texpected_4 := 5\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := digits(98765)\n\texpected_5 := 315\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := digits(5576543)\n\texpected_6 := 2625\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := digits(2468)\n\texpected_7 := 0\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, विषम-अङ्कानां गुणितं प्रत्यावर्तयतु। \nयदि सर्वाणि अङ्कानि समानि सन्ति तर्हि 0 प्रत्यावर्तयतु। \nयथा-\nअङ्कः (1) = 1 \nसंख्या (4) = 0 \nअङ्कानि (235) = = 15", "entry_point": "digits", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/59", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_nested(\"[[]]\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_nested(\"[]]]]]]][[[[[]\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_nested(\"[][]\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_nested(\"[]\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_nested(\"[[[[]]]]\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_nested(\"[]]]]]]]]]]\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_nested(\"[][][[]]\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_nested(\"[[]\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_nested(\"[]]\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_nested(\"[[]][[\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := is_nested(\"[[][]]\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := is_nested(\"\")\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := is_nested(\"[[[[[[[[\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := is_nested(\"]]]]]]]]\")\n\texpected_14 := false\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् रचयतु यत् स्ट्रिङ्ग् इतीदं इन्पुट् रूपेण स्वीकरोतु यस्मिन् केवलं वर्ग-कोष्ठकाः एव भवन्ति। \nयदि केवलम् कोष्ठकानां वैधम् अनुवर्तनं भवति तर्हि एव फंक्षन् ट्रू इति प्रत्यावर्तयेत्। \nयत्र अनुवर्तने न्यूनातिन्यूनं एकः कोष्ठकः निहितः भवति। \n\nइस नेस्टेड ('[[]]') सही है। \nis _ nested ('[]]]]] [[[[]') असत्यम् \nis _ nested ('[] []') असत्यम् अस्ति। \nis _ nested ('[]') असत्यम् अस्ति। \nनेस्टेड ('[[] []]') सत्यम् अस्ति। \nनेस्टेड ('[[]] [[') सत्यम् अस्ति।", "entry_point": "is_nested", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/60", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_squares([]interface{}{1, 2, 3})\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_squares([]interface{}{1.0, 2, 3})\n\texpected_2 := 14\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_squares([]interface{}{1, 3, 5, 7})\n\texpected_3 := 84\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_squares([]interface{}{1.4, 4.2, 0})\n\texpected_4 := 29\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_squares([]interface{}{-2.4, 1, 1})\n\texpected_5 := 6\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := sum_squares([]interface{}{100, 1, 15, 2})\n\texpected_6 := 10230\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := sum_squares([]interface{}{10000, 10000})\n\texpected_7 := 200000000\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := sum_squares([]interface{}{-1.4, 4.6, 6.3})\n\texpected_8 := 75\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := sum_squares([]interface{}{-1.4, 17.9, 18.9, 19.9})\n\texpected_9 := 1086\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := sum_squares([]interface{}{0})\n\texpected_10 := 0\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := sum_squares([]interface{}{-1})\n\texpected_11 := 1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := sum_squares([]interface{}{-1, 1, 0})\n\texpected_12 := 2\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n}", "language": "go", "description": "भवते अङ्कानां सूची दत्ता भवति। \nभवान् दत्तसूच्यां वर्गसंख्यानां योगम् प्रत्यर्पयेत्। \nसूच्याः प्रत्येकं तत्त्वं प्रथमं उपरितनं इन्ट् (सीलिङ्ग्) प्रति परिभ्रमयतु। \nउदाहरणानि-\nlst = [1,2,3] इत्यस्य कृते निर्गमः 14 भवेत्। \nlst = [1,4,9] कृते निर्गमः 98 भवेत्। \nlst = [1,3,5, 7] कृते उत्पादनं 84 भवेत्। \nlst = [1.4,4.2, 0] कृते निर्गमः 29 भवेत्। \nlst = [-2.4,1, 1] कृते निर्गमः 6 भवेत्।", "entry_point": "sum_squares", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/61", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_if_last_char_is_a_letter(\"apple\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_if_last_char_is_a_letter(\"apple pi e\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_if_last_char_is_a_letter(\"eeeee\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := check_if_last_char_is_a_letter(\"A\")\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := check_if_last_char_is_a_letter(\"Pumpkin pie \")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := check_if_last_char_is_a_letter(\"Pumpkin pie 1\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := check_if_last_char_is_a_letter(\"\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := check_if_last_char_is_a_letter(\"eeeee e \")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := check_if_last_char_is_a_letter(\"apple pie\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := check_if_last_char_is_a_letter(\"apple pi e \")\n\texpected_10 := false\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् क्रीयेट् करोतु यत् ट्रु इति प्रत्यावर्तयति यदि अन्तिमः अक्षरः अस्ति। \nदत्तस्य स्ट्रिङ्ग् इत्यस्य वर्णमाला अस्ति, न च अस्ति। \nएकस्य शब्दस्य अंशः, अन्यथा असत्यम्। \nटिप्पणीः \"शब्दः\" इति अक्षराणां समूहः अस्ति यः स्थानैः विभक्तः अस्ति। \n\nउदाहरणानि-\nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\")-सत्यम् इति परीक्षयतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"\") इति पश्यतु।", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/62", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := can_arrange([]int{1, 2, 4, 3, 5})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := can_arrange([]int{1, 2, 4, 5})\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := can_arrange([]int{1, 4, 2, 5, 6, 7, 8, 9, 10})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := can_arrange([]int{4, 8, 5, 7, 3})\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := can_arrange([]int{})\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् रचयतु यत् तत्वस्य बृहत्तमं सूचकाङ्कं प्रत्यर्पयति यत् \nतत्क्षणात् पूर्ववर्तिनः तत्त्वात् बृहत्तरं वा समानं वा नास्ति। यदि \nएतादृशं तत्त्वं नास्ति, ततः रिटर्न्-1 भवति। दत्तश्रेण्यां तत् न भविष्यति। \nद्विगुणितानि मूल्यानि। \n\nउदाहरणानि-\nकेन _ अरेंज् ([1,2,4, 3,5]) = 3 \nकेन-अरेंज् ([1,2,3]) =-1", "entry_point": "can_arrange", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/63", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n\texpected_1 := []interface{}{nil, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_smallest_integers([]int{2, 4, 1, 3, 5, 7, 0})\n\texpected_2 := []interface{}{nil, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_smallest_integers([]int{1, 3, 2, 4, 5, 6, -2})\n\texpected_3 := []interface{}{-2, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := largest_smallest_integers([]int{4, 5, 3, 6, 2, 7, -7})\n\texpected_4 := []interface{}{-7, 2}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := largest_smallest_integers([]int{7, 3, 8, 4, 9, 2, 5, -9})\n\texpected_5 := []interface{}{-9, 2}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := largest_smallest_integers([]int{})\n\texpected_6 := []interface{}{nil, nil}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := largest_smallest_integers([]int{0})\n\texpected_7 := []interface{}{nil, nil}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := largest_smallest_integers([]int{-1, -3, -5, -6})\n\texpected_8 := []interface{}{-1, nil}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := largest_smallest_integers([]int{-1, -3, -5, -6, 0})\n\texpected_9 := []interface{}{-1, nil}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := largest_smallest_integers([]int{-6, -4, -4, -3, 1})\n\texpected_10 := []interface{}{-3, 1}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := largest_smallest_integers([]int{-6, -4, -4, -3, -100, 1})\n\texpected_11 := []interface{}{-3, 1}\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् निर्माय यत् टुपल् (a, b) प्रत्यावर्तयति, यत्र'a'अस्ति। \nऋणात्मक-पूर्णांशेषु बृहत्तमः, तथा च'b'लघुतमः अस्ति। \nसूच्यां धनात्मक-पूर्णांशाः सन्ति। \nयदि ऋणात्मकं वा धनात्मकं वा पूर्णांकं नास्ति तर्हि तान् नन् इति प्रत्यर्पयतु। \n\nउदाहरणानि-\nबृहत्तम-लघुतमः-पूर्णांकः ([2,4,1,3,5,7]) = = (न, 1) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([]) = = (न, न) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([0]) = = (न, न)", "entry_point": "largest_smallest_integers", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/64", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := special_factorial(4)\n\texpected_1 := 288\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := special_factorial(5)\n\texpected_2 := 34560\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := special_factorial(7)\n\texpected_3 := 125411328000\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := special_factorial(1)\n\texpected_4 := 1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ब्राजीलीन्-फ़ैक्टोरियल् इतीदं एवं परिभाषितः अस्ति। \nब्राज़ीलियन्-फ़ैक्टोरियल् (n) = n! * (n-1)! * (n-2)! *... * 1! \nयत्र n> 0 \n\nयथा-\n>>> स्पेशिअल-फ़ैक्टोरियल् (4) \n288। \n\nफलनम् इन्पुट्-रूपेण पूर्णांकं प्राप्स्यति, विशेषम् प्रत्यर्पयेत् च। \nअस्य पूर्णांकस्य भाज्यम्।", "entry_point": "special_factorial", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/65", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := words_in_sentence(\"This is a test\")\n\texpected_1 := \"is\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := words_in_sentence(\"lets go for swimming\")\n\texpected_2 := \"go for\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := words_in_sentence(\"there is no place available here\")\n\texpected_3 := \"there is no place\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := words_in_sentence(\"Hi I am Hussein\")\n\texpected_4 := \"Hi am Hussein\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := words_in_sentence(\"go for it\")\n\texpected_5 := \"go for it\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := words_in_sentence(\"here\")\n\texpected_6 := \"\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := words_in_sentence(\"here is\")\n\texpected_7 := \"is\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "भवते वाक्यस्य प्रतिनिधित्वं कुर्वती स्ट्रिङ्ग् दीयते। \nअस्मिन् वाक्ये केषाञ्चन शब्दानि स्थानात् पृथक्कृतानि सन्ति, \nतथा च भवन्तः मूलवाक्यस्य शब्दयुक्तं स्ट्रिङ्ग् प्रत्यर्पयेयुः, \nयस्य दीर्घता अभाज्यसङ्ख्या अस्ति, \nनूतने तन्त्रे शब्दानां क्रमः मूलस्य समानः भवेत्। \n\nउदाहरणम्-1: \nनिवेशः वाक्य = \"एषा परीक्षा अस्ति\" \nनिर्गमः \"अस्ति\" इति। \n\nउदाहरणं 2: \nनिवेशः वाक्यम् = \"लॆट्स् गो फ़ार् स्विम्मिङ्ग्\" \nनिर्गमः \"गो फ़ार्\" इति। \n\nबाधिताः। \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्ये केवलं अक्षराणि एव सन्ति।", "entry_point": "words_in_sentence", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/66", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := simplify(\"1/5\",\"5/1\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := simplify(\"1/6\",\"2/1\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := simplify(\"5/1\",\"3/1\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := simplify(\"7/10\",\"10/2\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := simplify(\"2/10\",\"50/10\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := simplify(\"7/2\",\"4/2\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := simplify(\"11/6\",\"6/1\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := simplify(\"2/3\",\"5/2\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := simplify(\"5/2\",\"3/5\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := simplify(\"2/4\",\"8/4\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := simplify(\"2/4\",\"4/2\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := simplify(\"1/5\",\"5/1\")\n\texpected_12 := true\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := simplify(\"1/5\",\"1/5\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n}", "language": "go", "description": "भवतः कार्यम् एकं फंक्षन् इत्यस्य कार्यान्वयनम् अस्ति येन अभिव्यक्तिः सरलीभवति। \nx * n. यदि x * n पूर्णसङ्ख्यायाः कृते मूल्याङ्कनं करोति तथा च असत्यम् इति फलनम् सत्यम् इति प्रत्यावर्तयति। \nअन्यथा। x तथा n द्वयोः अपि, भिन्नांशस्य स्ट्रिङ्ग्-प्रतिनिधित्वम् अस्ति, तथा च निम्नलिखितं स्वरूपम् अस्ति, \n<न्यूमरेटर्> <डिनोमिनेटर्> यत्र न्यूमरेटर् तथा डिनोमिनेटर् उभौ अपि धनात्मकं पूर्णसङ्ख्याः भवन्ति। \n\nभवन्तः अनुमातुं शक्नुवन्ति यत् x, n च वैधानि भिन्नांशानि सन्ति, तेषां विभाजकरूपेण शून्यं नास्ति। \n\nसरलीकरणम् (\"1/5\", \"5/1\") = सत्यं \nसरलीकरणम् (\"1/6\", \"2/1\") = असत्यम् \nसरलीकरणम् (\"7/10\", \"10/2\") = असत्यम्", "entry_point": "simplify", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/67", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := order_by_points([]int{1, 11, -1, -11, -12})\n\texpected_1 := []int{-1, -11, 1, -12, 11}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := order_by_points([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46})\n\texpected_2 := []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := order_by_points([]int{})\n\texpected_3 := []int{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := order_by_points([]int{1, -11, -32, 43, 54, -98, 2, -3})\n\texpected_4 := []int{-3, -32, -98, -11, 1, 2, 43, 54}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := order_by_points([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11})\n\texpected_5 := []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := order_by_points([]int{0, 6, 6, -76, -21, 23, 4})\n\texpected_6 := []int{-76, -21, 0, 4, 23, 6, 6}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् लिखतु यत् दत्तानां पूर्णांकानां सूचीं क्रमबद्धं करोति। \nतेषां अङ्कानां योगानुगुणं आरोहणक्रमेण। \nटिप्पणिः यदि समान-अङ्कयुक्ताः अनेकाः वस्तूनि सन्ति, \nमूलसूच्यां तेषां सूचकाङ्कस्य आधारेण तान् आर्डर् कुर्वन्तु। \n\nयथा-\n>>> आर्डर्-बै-पोयिन्ट्स् ([1,11,-1,11,-12]) = = [-1,11,-1,1,-12,11] \n>>> आर्डर्-बै-पोयिन्ट्स् ([]) = = []", "entry_point": "order_by_points", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/68", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := specialFilter([]int{5, -2, 1, -5})\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := specialFilter([]int{15, -73, 14, -15})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := specialFilter([]int{33, -2, -3, 45, 21, 109})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := specialFilter([]int{43, -12, 93, 125, 121, 109})\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := specialFilter([]int{71, -2, -33, 75, 21, 19})\n\texpected_5 := 3\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := specialFilter([]int{1})\n\texpected_6 := 0\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := specialFilter([]int{})\n\texpected_7 := 0\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "एकं फंक्षन् लिखतु यत् इन्पुट्-रिटर्न्स्-रूपेण संख्यानां श्रेणिं स्वीकरोति। \nश्रेण्यां तत्त्वानां सङ्ख्या या 10 तः अधिका अस्ति तथा च उभयोः। \nएकस्य अङ्कस्य प्रथमस्य अन्तिमस्य च अङ्कयोः विषमता भवति (1,3,5,7,9)। \nयथा-\nस्पेशिफ़िल्टर् ([15,-73,14,-15]) => 1 \nस्पेशिफ़िल्टर् ([33,-2,-3,45,21,109]) => 2", "entry_point": "specialFilter", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/69", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_max_triples(5)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_max_triples(6)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_max_triples(10)\n\texpected_3 := 36\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_max_triples(100)\n\texpected_4 := 53361\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "भवते n इति धनात्मकं पूर्णांकं दीयते। भवते n इति दीर्घतायाः a इति पूर्णांकश्रेण्याः निर्माणं करणीयम्। \nप्रत्येकस्य i (1 ≤ i ≤ n) कृते, a [i] = i * i-i + 1 इत्यस्य मूल्यं भवति। \nत्रिकानां सङ्ख्याः प्रत्यावर्तयतु (a [i], a [j], a [k]) यत्र i <j <k, \nतथा च a [i] + a [j] + a [k] इति 3 इत्यस्य गुणितं भवति। \n\nउदाहरणम्-\nनिवेशः n = 5 \nउत्पादनः 1 \nव्याख्याः \nअ = [1,3,7,13,21] \nएकमात्रं वैधं त्रिगुणं (1,7,13) अस्ति।", "entry_point": "get_max_triples", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/70", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := bf(\"Jupiter\",\"Neptune\")\n\texpected_1 := []string{\"Saturn\", \"Uranus\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := bf(\"Earth\",\"Mercury\")\n\texpected_2 := []string{\"Venus\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := bf(\"Mercury\",\"Uranus\")\n\texpected_3 := []string{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := bf(\"Neptune\",\"Venus\")\n\texpected_4 := []string{\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := bf(\"Earth\",\"Earth\")\n\texpected_5 := []string{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := bf(\"Mars\",\"Earth\")\n\texpected_6 := []string{}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := bf(\"Jupiter\",\"Makemake\")\n\texpected_7 := []string{}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "अस्माकं सौरमण्डले अष्टग्रहाः सन्ति-सूर्यस्य समीपस्थाः। \nबुधः अस्ति, अग्रिमः शुक्रः अस्ति, ततः पृथिव्या, मङ्गलः, गुरुः, शनिः, \nयुरेनस्, नेप्च्यून्। \nप्लैनेट्-1 तथा प्लैनेट्-2 इति द्वयोः ग्रहयोः नामौ स्वीकृत्य एकं फंक्षन् लिखतु। \nअयं प्रकार्यक्रमः सर्वान् ग्रहान् समाविशत् एकं टुपल् प्रत्यावर्तयेत् यस्य परिक्रमणं भवति-\nग्रह-1 इत्यस्य कक्षायाः ग्रह-2 इत्यस्य कक्षायाः च मध्ये स्थितः, द्वारा क्रमबद्धः \nसूर्यस्य सामीप्यम्। \nयदि प्लैनेट्1 अथवा प्लैनेट्2 अस्ति तर्हि फंक्षन् रिक्तं टुपल् प्रत्यावर्तयेत्। \nग्रहाणां नामानि सम्यक् न सन्ति। \nउदाहरणानि \nbf (\"जुपिटर्\", \"नेप्च्यून्\") = => (\"स्याटर्न्\", \"युरेनस्\") \nbf (\"पृथिव्या\", \"बुधः\") = => (\"शुक्रः\") \nbf (\"बुधः\", \"युरेनस्\") = => (\"शुक्रः\", \"पृथिव्या\", \"मङ्गलः\", \"गुरुः\", \"शनिः\")", "entry_point": "bf", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/71", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := x_or_y(7,34,12)\n\texpected_1 := 34\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := x_or_y(15,8,5)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := x_or_y(3,33,5212)\n\texpected_3 := 33\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := x_or_y(1259,3,52)\n\texpected_4 := 3\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := x_or_y(7919,-1,12)\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := x_or_y(3609,1245,583)\n\texpected_6 := 583\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := x_or_y(91,56,129)\n\texpected_7 := 129\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := x_or_y(6,34,1234)\n\texpected_8 := 1234\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := x_or_y(1,2,0)\n\texpected_9 := 0\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := x_or_y(2,2,0)\n\texpected_10 := 2\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "एकं सरलं प्रोग्राम् यत् x इत्यस्य मूल्यं प्रत्यर्पयेत् यदि n अस्ति। \nअभाज्यसङ्ख्या तथा च अन्यथा y इत्यस्य मूल्यं प्रत्यर्पयेत्। \n\nउदाहरणानि-\nx _ अथवा _ y कृते (7,34,12) = = 34 \nx _ अथवा _ y कृते (15,8,5) = = 5", "entry_point": "x_or_y", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/72", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := double_the_difference([]interface{}{})\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := double_the_difference([]interface{}{5, 4})\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := double_the_difference([]interface{}{0.1, 0.2, 0.3})\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := double_the_difference([]interface{}{-10, -20, -30})\n\texpected_4 := 0\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := double_the_difference([]interface{}{-1, -2, 8})\n\texpected_5 := 0\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := double_the_difference([]interface{}{0.2, 3, 5})\n\texpected_6 := 34\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := double_the_difference([]interface{}{-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99})\n\texpected_7 := 166650\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "संख्यानां सूच्यां दत्तं चेत्, संख्यानां वर्गाणां योगम् प्रत्यर्पयतु। \nअसङ्गत्याः सूच्यां पश्यन्तु। ये संख्याः ऋणात्मकं वा पूर्णांशाः न वा सन्ति तान् अवगच्छन्तु। \n\nद्विगुणः भेदः ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nद्विगुणः भेदः ([-1,2,0]) = = 0 \nद्विगुणः भेदः ([9,-2]) = = 81 \nद्विगुणित-द-भेदः ([0]) = = 0 \n\nयदि इन्पुट्-सूची रिक्तः अस्ति तर्हि 0 प्रत्यावर्तयतु।", "entry_point": "double_the_difference", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/73", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Strongest_Extension(\"Watashi\",[]string{\"tEN\", \"niNE\", \"eIGHt8OKe\"})\n\texpected_1 := \"Watashi.eIGHt8OKe\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Strongest_Extension(\"Boku123\",[]string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"})\n\texpected_2 := \"Boku123.YEs.WeCaNe\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Strongest_Extension(\"__YESIMHERE\",[]string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"})\n\texpected_3 := \"__YESIMHERE.NuLl__\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := Strongest_Extension(\"K\",[]string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"})\n\texpected_4 := \"K.TAR\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := Strongest_Extension(\"__HAHA\",[]string{\"Tab\", \"123\", \"781345\", \"-_-\"})\n\texpected_5 := \"__HAHA.123\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := Strongest_Extension(\"YameRore\",[]string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"})\n\texpected_6 := \"YameRore.okIWILL123\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := Strongest_Extension(\"finNNalLLly\",[]string{\"Die\", \"NowW\", \"Wow\", \"WoW\"})\n\texpected_7 := \"finNNalLLly.WoW\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := Strongest_Extension(\"_\",[]string{\"Bb\", \"91245\"})\n\texpected_8 := \"_.Bb\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := Strongest_Extension(\"Sp\",[]string{\"671235\", \"Bb\"})\n\texpected_9 := \"Sp.671235\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "भवते वर्गस्य नाम (स्ट्रिङ्ग्) विस्ताराणां सूची च दीयते। \nवर्गस्य कृते अतिरिक्तवर्गान् भारयितुं विस्ताराणाम् उपयोगः करणीयः। \nविस्तारस्य शक्तिः ईदृशः अस्ति-CAP इतीदं अपरकेस् सङ्ख्या स्यात् इति मन्यन्ते। \nविस्तारस्य नाम्नः अक्षराणि, तथा च एस्. एम्. इतीदं लघु-अक्षरानां सङ्ख्या भवेत्। \nविस्तारस्य नाम्ना बलं CAP-एसएम इति भिन्नांशेन दीयते। \nभवन्तः प्रबलतमं विस्तारणं अन्विष्य अस्मिन् स्ट्रिङ्ग् प्रत्यर्पयतु। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि समानशक्तियुक्तौ द्वौ वा अधिकौ विस्तारौ स्तः तर्हि भवन्तः \nसूच्यां प्रथमं यत् आगच्छति तत् चिनोतु। \nयथा, यदि भवते \"स्लैस्\" इति वर्गरूपेण, सूचीरूपेण च दत्तं भवति। \nविस्तारः ['SERVINGSliCes','Cheese','StuFfed'] तदा भवन्तः कर्तुम् अर्हन्ति। \n'Slices.SErviNGSliCes'इति प्रत्यावर्तयतु यतः'SERVINGSliCes'प्रबलतमः विस्तारः अस्ति। \n(तस्य शक्तिः-1 अस्ति)। \nउदाहरणम्-\nस्ट्राङ्गेस्ट्-एक्स्टेन्शन् कृते ('मै _ क्लास्', ['AA','Be','CC']) = ='my_class.AA'", "entry_point": "Strongest_Extension", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/74", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cycpattern_check(\"xyzw\",\"xyw\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cycpattern_check(\"yello\",\"ell\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cycpattern_check(\"whattup\",\"ptut\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := cycpattern_check(\"efef\",\"fee\")\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := cycpattern_check(\"abab\",\"aabb\")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := cycpattern_check(\"winemtt\",\"tinem\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "भवते 2 शब्दानि दीयन्ते। यदि द्वितीयः शब्दः अथवा तस्य कस्यापि परिभ्रमणम् प्रथमशब्दस्य सब्स्ट्रिङ्ग् अस्ति तर्हि भवते ट्रू इति प्रत्यावर्तितव्यम्। \nसैक्पेटर्न् _ चेक् (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हलो\", \"एल्\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"वास्सुप्\", \"प्सुस्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"अबाब\", \"बा\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"ईफ़ेफ़्\", \"ईफ़ेफ़्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हिमेन्स्\", \"सिमेन्\") => सत्यं", "entry_point": "cycpattern_check", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/75", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := int_to_mini_roman(19)\n\texpected_1 := \"xix\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := int_to_mini_roman(152)\n\texpected_2 := \"clii\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := int_to_mini_roman(251)\n\texpected_3 := \"ccli\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := int_to_mini_roman(426)\n\texpected_4 := \"cdxxvi\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := int_to_mini_roman(500)\n\texpected_5 := \"d\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := int_to_mini_roman(1)\n\texpected_6 := \"i\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := int_to_mini_roman(4)\n\texpected_7 := \"iv\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := int_to_mini_roman(43)\n\texpected_8 := \"xliii\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := int_to_mini_roman(90)\n\texpected_9 := \"xc\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := int_to_mini_roman(94)\n\texpected_10 := \"xciv\"\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := int_to_mini_roman(532)\n\texpected_11 := \"dxxxii\"\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := int_to_mini_roman(900)\n\texpected_12 := \"cm\"\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := int_to_mini_roman(994)\n\texpected_13 := \"cmxciv\"\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := int_to_mini_roman(1000)\n\texpected_14 := \"m\"\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n}", "language": "go", "description": "धनात्मक-पूर्णांकं दत्तं चेत्, तस्य रोमन्-अङ्कस्य समतुल्यं स्ट्रिङ्ग्-रूपेण प्राप्नुयात्। \nतथा लघुकरणे प्रत्यर्पयतु। \nप्रतिबन्धः 1 <= संख्या <= 1000 \n\nउदाहरणानि-\n>> इन्ट्-टु-मिनि-रोमन् (19) = ='xix'\n>> इन्ट्-टु-मिनि-रोमन् (152) = ='क्लि'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "entry_point": "int_to_mini_roman", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/76", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := right_angle_triangle(3,4,5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := right_angle_triangle(1,2,3)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := right_angle_triangle(10,6,8)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := right_angle_triangle(2,2,2)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := right_angle_triangle(7,24,25)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := right_angle_triangle(10,5,7)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := right_angle_triangle(5,12,13)\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := right_angle_triangle(15,8,17)\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := right_angle_triangle(48,55,73)\n\texpected_9 := true\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := right_angle_triangle(1,1,1)\n\texpected_10 := false\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := right_angle_triangle(2,2,10)\n\texpected_11 := false\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। सत्यम् प्रत्यावर्तयतु यदि त्रिः। \nपार्श्वभागाः दक्षिणकोणीयं त्रिकोणं निर्मीयन्ते, अन्यथा असत्यं भवति। \nसमकोणी त्रिभुजः एकः त्रिभुजः अस्ति यस्मिन् एकः कोणः समकोणः अथवा समकोणः भवति। \n90 डिग्री। \nउदाहरणम्-\nसमकोण-त्रिभुजम् (3,4,5) = = सत्यम् \nसमकोण-त्रिभुजम् (1,2,3) = = असत्यम्", "entry_point": "right_angle_triangle", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/77", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solve(\"AsDf\")\n\texpected_1 := \"aSdF\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solve(\"1234\")\n\texpected_2 := \"4321\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solve(\"ab\")\n\texpected_3 := \"AB\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := solve(\"#a@C\")\n\texpected_4 := \"#A@c\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := solve(\"#AsdfW^45\")\n\texpected_5 := \"#aSDFw^45\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := solve(\"#6@2\")\n\texpected_6 := \"2@6#\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := solve(\"#$a^D\")\n\texpected_7 := \"#$A^d\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := solve(\"#ccc\")\n\texpected_8 := \"#CCC\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nयदि s [i] एकः अक्षरः अस्ति, तर्हि तस्य प्रकरणं निम्नतः ऊर्ध्वं प्रति अथवा तद्विरुद्धं प्रतिवर्तयतु। \nअन्यथा तत् यथावत् स्थापयतु। \nयदि तन्त्रे अक्षराणि न सन्ति तर्हि तन्त्रे व्युत्क्रमं करोतु। \nफलनम् परिणामितं स्ट्रिङ्ग् प्रत्यावर्तयेत्। \nउदाहरणानि \nसमाधानम् (\"1234\") = \"4321\" \nसमाधानः (\"अब\") = \"एबी\" \nसमाधानम् (\"#a @C\") = \"#A @c\"", "entry_point": "solve", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/78", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_to_md5(\"Hello world\")\n\texpected_1 := \"3e25960a79dbc69b674cd4ec67a72c62\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_to_md5(\"\")\n\texpected_2 := nil\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_to_md5(\"A B C\")\n\texpected_3 := \"0ef78513b0cb8cef12743f5aeb35f888\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := string_to_md5(\"password\")\n\texpected_4 := \"5f4dcc3b5aa765d61d8327deb882cf99\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "'टेक्सट्'इति स्ट्रिङ्ग् दत्तं चेत्, तस्य md5 ह्याश्-समतुल्यं स्ट्रिङ्ग् प्रत्यर्पयतु। \nयदि'टेक्सट्'रिक्तं स्ट्रिङ्ग् अस्ति तर्हि शून्यं प्रत्यर्पयतु। \n\n>> स्ट्रिङ्ग् _ तः _ md5 ('नमस्ते वर्ल्ड्') = ='3e25960a79dbc69b674cd4ec67a72c62'", "entry_point": "string_to_md5", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "go/79", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := generate_integers(2,10)\n\texpected_1 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := generate_integers(10,2)\n\texpected_2 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := generate_integers(132,2)\n\texpected_3 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := generate_integers(17,89)\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "a तथा b इति धनात्मक-पूर्णांकद्वयं दत्तं चेत्, a मध्ये सम-अङ्कान् प्रत्यर्पयतु। \nतथा च b, आरोहणक्रमेण। \n\nयथा-\nजनरेट्-इन्टिजर् (2,8) => [2,4,6,8] \nजनरेट्-इन्टिजर् (8,2) => [2,4,6,8] \nजनरेट्-इन्टिजर् (10,14) => []", "entry_point": "generate_integers", "canonical_solution": null, "natural_language": "Sanskrit"}
