{"task_id": "go/0", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := below_zero([]int{})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := below_zero([]int{1, 2, -3, 1, 2, -3})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := below_zero([]int{1, 2, -4, 5, 6})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := below_zero([]int{1, -1, 2, -2, 5, -5, 4, -4})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := below_zero([]int{1, -1, 2, -2, 5, -5, 4, -5})\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := below_zero([]int{1, -2, 2, -2, 5, -5, 4, -4})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਬੈਂਕ ਖਾਤੇ ਵਿੱਚ ਜਮ੍ਹਾਂ ਅਤੇ ਨਿਕਾਸੀ ਕਾਰਜਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ ਜੋ ਇਸ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦੀ ਹੈ। \nਜ਼ੀਰੋ ਬਕਾਇਆ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਪਤਾ ਲਗਾਉਣਾ ਹੈ ਕਿ ਕੀ ਕਿਸੇ ਵੀ ਸਮੇਂ ਖਾਤੇ ਦਾ ਬਕਾਇਆ ਜ਼ੀਰੋ ਤੋਂ ਹੇਠਾਂ ਆ ਜਾਂਦਾ ਹੈ, ਅਤੇ \nਉਸ ਬਿੰਦੂ ਉੱਤੇ ਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। ਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \n>>> ਹੇਠਾਂ _ ਜ਼ੀਰੋ ([1,2,3]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਹੇਠਾਂ _ ਜ਼ੀਰੋ ([1,2,-4,5]) \nਸੱਚ ਹੈ।", "entry_point": "below_zero", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/1", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_product([]int{})\n\texpected_1 := []int{0, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_product([]int{1, 1, 1})\n\texpected_2 := []int{3, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_product([]int{100, 0})\n\texpected_3 := []int{100, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_product([]int{3, 5, 7})\n\texpected_4 := []int{15, 105}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_product([]int{10})\n\texpected_5 := []int{10, 10}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਲਈ, ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਾਰੇ ਪੂਰਨ ਅੰਕਾਂ ਦਾ ਜੋਡ਼ ਅਤੇ ਇੱਕ ਗੁਣਨਫਲ ਹੁੰਦਾ ਹੈ। \nਖਾਲੀ ਜੋਡ਼ 0 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ ਖਾਲੀ ਗੁਣਨਫਲ 1 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "entry_point": "sum_product", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/2", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_xor(\"111000\",\"101010\")\n\texpected_1 := \"010010\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_xor(\"1\",\"1\")\n\texpected_2 := \"0\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_xor(\"0101\",\"0000\")\n\texpected_3 := \"0101\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "ਇੰਪੁੱਟ ਦੋ ਸਤਰ a ਅਤੇ b ਹੁੰਦੇ ਹਨ ਜਿਸ ਵਿੱਚ ਸਿਰਫ 1s ਅਤੇ 0s ਹੁੰਦੇ ਹਨ। \nਇਹਨਾਂ ਇਨਪੁਟਸ ਉੱਤੇ ਬਾਈਨਰੀ XOR ਕਰੋ ਅਤੇ ਨਤੀਜਾ ਵੀ ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। \n>>> ਸਤਰ _ xor ('010','110') \n'100'", "entry_point": "string_xor", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/3", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := longest([]string{})\n\texpected_1 := nil\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := longest([]string{\"x\", \"y\", \"z\"})\n\texpected_2 := \"x\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := longest([]string{\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"})\n\texpected_3 := \"zzzz\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "ਸਤਰ ਦੀ ਸੂਚੀ ਵਿੱਚੋਂ, ਸਭ ਤੋਂ ਲੰਬਾ ਇੱਕ ਵਾਪਸ ਕਰੋ। ਮਲਟੀਪਲ ਦੇ ਮਾਮਲੇ ਵਿੱਚ ਪਹਿਲਾ ਇੱਕ ਵਾਪਸ ਕਰੋ \nਇੱਕੋ ਲੰਬਾਈ ਦੇ ਸਤਰ। ਜੇਕਰ ਇੰਪੁੱਟ ਸੂਚੀ ਖਾਲੀ ਹੈ ਤਾਂ ਨੱਲ ਵਾਪਸ ਕਰੋ। \n>>> ਸਭ ਤੋਂ ਲੰਬਾ ([]) \n\n>>> ਸਭ ਤੋਂ ਲੰਬਾ (['a','b','c']) \n'ਏ'\n>>> ਸਭ ਤੋਂ ਲੰਬਾ (['ਏ','ਬੀਬੀ','ਸੀਸੀਸੀ']) \n'ਸੀ. ਸੀ. ਸੀ.'", "entry_point": "longest", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/4", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := greatest_common_divisor(3,7)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := greatest_common_divisor(10,15)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := greatest_common_divisor(49,14)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := greatest_common_divisor(144,60)\n\texpected_4 := 12\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਦੋ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਸਾਂਝਾ ਡਿਵੀਜ਼ਰ ਵਾਪਸ ਕਰੋ \n>>> ਸਭ ਤੋਂ ਵੱਡਾ _ ਆਮ _ ਡਿਵੀਜ਼ਰ (3,5) \n1. \n>>> ਸਭ ਤੋਂ ਵੱਡਾ _ ਆਮ _ ਡਿਵੀਜ਼ਰ (25,15) \n5.", "entry_point": "greatest_common_divisor", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/5", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_numbers(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_numbers(\"three\")\n\texpected_2 := \"three\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_numbers(\"three five nine\")\n\texpected_3 := \"three five nine\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sort_numbers(\"five zero four seven nine eight\")\n\texpected_4 := \"zero four five seven eight nine\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sort_numbers(\"six five four three two one zero\")\n\texpected_5 := \"zero one two three four five six\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਇੰਪੁੱਟ'ਜ਼ੀਰੋ'ਤੋਂ'ਨੌ'ਤੱਕ ਸੰਖਿਆਵਾਂ ਦੀ ਇੱਕ ਸਪੇਸ-ਸੀਮਾਬੱਧ ਸਤਰ ਹੈ। \nਵੈਧ ਚੋਣਾਂ'ਜ਼ੀਰੋ','ਇੱਕ','ਦੋ','ਤਿੰਨ','ਚਾਰ','ਪੰਜ','ਛੇ','ਸੱਤ','ਅੱਠ'ਅਤੇ'ਨੌਂ'ਹਨ। \nਸਭ ਤੋਂ ਛੋਟੇ ਤੋਂ ਵੱਡੇ ਤੱਕ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਨੰਬਰਾਂ ਨਾਲ ਸਤਰ ਵਾਪਸ ਕਰੋ \n>>> ਨੰਬਰ ਕ੍ਰਮਬੱਧ ਕਰੋ ('ਤਿੰਨ ਇੱਕ ਪੰਜ') \n'ਇੱਕ ਤਿੰਨ ਪੰਜ'", "entry_point": "sort_numbers", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/6", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rescale_to_unit([]float64{2.0, 49.9})\n\texpected_1 := []float64{0.0, 1.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rescale_to_unit([]float64{100.0, 49.9})\n\texpected_2 := []float64{1.0, 0.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\texpected_3 := []float64{0.0, 0.25, 0.5, 0.75, 1.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := rescale_to_unit([]float64{2.0, 1.0, 5.0, 3.0, 4.0})\n\texpected_4 := []float64{0.25, 0.0, 1.0, 0.5, 0.75}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := rescale_to_unit([]float64{12.0, 11.0, 15.0, 13.0, 14.0})\n\texpected_5 := []float64{0.25, 0.0, 1.0, 0.5, 0.75}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਸੰਖਿਆਵਾਂ ਦੀ ਸੂਚੀ (ਘੱਟੋ ਘੱਟ ਦੋ ਤੱਤਾਂ ਦੀ) ਦਿੱਤੀ ਗਈ ਹੈ, ਉਸ ਸੂਚੀ ਵਿੱਚ ਇੱਕ ਰੇਖਿਕ ਪਰਿਵਰਤਨ ਲਾਗੂ ਕਰੋ, \nਕਿ ਸਭ ਤੋਂ ਛੋਟੀ ਸੰਖਿਆ 0 ਹੋ ਜਾਵੇਗੀ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡੀ ਸੰਖਿਆ 1 ਹੋ ਜਾਵੇਗੀ। \n>>> ਰੀਸਕੇਲ _ ਟੂ _ ਯੂਨਿਟ ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "entry_point": "rescale_to_unit", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/7", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := flip_case(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := flip_case(\"Hello!\")\n\texpected_2 := \"hELLO!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := flip_case(\"These violent delights have violent ends\")\n\texpected_3 := \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "ਦਿੱਤੀ ਗਈ ਸਤਰ ਲਈ, ਛੋਟੇ ਅੱਖਰਾਂ ਨੂੰ ਵੱਡੇ ਅੱਖਰ ਵਿੱਚ ਅਤੇ ਵੱਡੇ ਅੱਖਰਾਂ ਨੂੰ ਛੋਟੇ ਅੱਖਰ ਵਿੱਚ ਬਦਲੋ। \n>>> ਫਲਿੱਪ ਕੇਸ ('ਹੈਲੋ') \n'ਹੈਲੋ'", "entry_point": "flip_case", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/8", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_positive([]int{-1, -2, 4, 5, 6})\n\texpected_1 := []int{4, 5, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_positive([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10})\n\texpected_2 := []int{5, 3, 2, 3, 3, 9, 123, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_positive([]int{-1, -2})\n\texpected_3 := []int{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_positive([]int{})\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਸੂਚੀ ਵਿੱਚ ਸਿਰਫ ਸਕਾਰਾਤਮਕ ਨੰਬਰ ਵਾਪਸ ਕਰੋ। \n>>> ਪ੍ਰਾਪਤ ਕਰੋ _ ਸਕਾਰਾਤਮਕ ([-1,2,-4,5,6]) \n[2,5,6] \n>>> ਪ੍ਰਾਪਤ ਕਰੋ _ ਸਕਾਰਾਤਮਕ ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "entry_point": "get_positive", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/9", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_prime(6)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_prime(101)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_prime(11)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_prime(13441)\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_prime(61)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_prime(4)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_prime(1)\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_prime(5)\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_prime(11)\n\texpected_9 := true\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_prime(17)\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := is_prime(85)\n\texpected_11 := false\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := is_prime(77)\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := is_prime(255379)\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n}", "language": "go", "description": "ਜੇਕਰ ਕੋਈ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ ਪ੍ਰਾਈਮ ਹੈ ਤਾਂ ਸਹੀ ਵਾਪਸ ਕਰੋ, ਅਤੇ ਨਹੀਂ ਤਾਂ ਗਲਤ। \n>>> ਹੈ _ ਪ੍ਰਾਈਮ (6) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nਸੱਚ ਹੈ। \n>>> ਹੈ _ ਪ੍ਰਾਈਮ (11) \nਸੱਚ ਹੈ। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nਸੱਚ ਹੈ। \n>>> ਹੈ _ ਪ੍ਰਾਈਮ (61) \nਸੱਚ ਹੈ। \n>>> ਹੈ _ ਪ੍ਰਾਈਮ (4) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਹੈ _ ਪ੍ਰਾਈਮ (1) \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "is_prime", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/10", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n\texpected_1 := []int{0, 2, 3, 5, 9, 123}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਵਿਲੱਖਣ ਤੱਤ ਵਾਪਸ ਕਰੋ \n>>> ਵਿਲੱਖਣ ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "entry_point": "unique", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/11", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prime_fib(1)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prime_fib(2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prime_fib(3)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := prime_fib(4)\n\texpected_4 := 13\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := prime_fib(5)\n\texpected_5 := 89\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := prime_fib(6)\n\texpected_6 := 233\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := prime_fib(7)\n\texpected_7 := 1597\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := prime_fib(8)\n\texpected_8 := 28657\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := prime_fib(9)\n\texpected_9 := 514229\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := prime_fib(10)\n\texpected_10 := 433494437\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "ਪ੍ਰਾਈਮ _ ਫਾਈਬ n-th ਨੰਬਰ ਦਿੰਦਾ ਹੈ ਜੋ ਕਿ ਇੱਕ ਫਿਬੋਨਾਚੀ ਨੰਬਰ ਹੈ ਅਤੇ ਇਹ ਪ੍ਰਾਈਮ ਵੀ ਹੈ। \n>>> ਪ੍ਰਾਈਮ _ ਫਾਈਬ (1) \n2. \n>>> ਪ੍ਰਾਈਮ _ ਫਾਈਬ (2) \n3. \n>>> ਪ੍ਰਾਈਮ _ ਫਾਈਬ (3) \n5. \n>>> ਪ੍ਰਾਈਮ _ ਫਾਈਬ (4) \n13. \n>>> ਪ੍ਰਾਈਮ _ ਫਾਈਬ (5) \n89.", "entry_point": "prime_fib", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/12", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := triples_sum_to_zero([]int{1, 3, 5, 0})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := triples_sum_to_zero([]int{1, 3, 5, -1})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := triples_sum_to_zero([]int{1, 3, -2, 1})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := triples_sum_to_zero([]int{1, 2, 3, 7})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := triples_sum_to_zero([]int{1, 2, 5, 7})\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := triples_sum_to_zero([]int{1})\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := triples_sum_to_zero([]int{1, 3, 5, -100})\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := triples_sum_to_zero([]int{100, 3, 5, -100})\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਟਰਿਪਲਸ _ ਸਮ _ ਤੋਂ _ ਜ਼ੀਰੋ ਇੱਕ ਇੰਪੁੱਟ ਦੇ ਰੂਪ ਵਿੱਚ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਲੈਂਦਾ ਹੈ। \nਇਹ ਸਹੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਸੂਚੀ ਵਿੱਚ ਤਿੰਨ ਵੱਖਰੇ ਤੱਤ ਹਨ \nਜ਼ੀਰੋ ਤੱਕ ਜੋਡ਼, ਅਤੇ ਗਲਤ ਹੋਰ. \n\n>>> ਤਿੰਨ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,3,5,0]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਤਿੰਨ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,3,-2,1]) \nਸੱਚ ਹੈ। \n>>> ਤਿੰਨ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,2,3,7]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਤਿੰਨ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([2,4,-5,3,9,7]) \nਸੱਚ ਹੈ। \n>>> ਤਿੰਨ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1]) \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "triples_sum_to_zero", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/13", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pairs_sum_to_zero([]int{1, 3, 5, 0})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pairs_sum_to_zero([]int{1, 3, -2, 1})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pairs_sum_to_zero([]int{1, 2, 3, 7})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := pairs_sum_to_zero([]int{1})\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := pairs_sum_to_zero([]int{-3, 9, -1, 3, 2, 30})\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := pairs_sum_to_zero([]int{-3, 9, -1, 3, 2, 31})\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := pairs_sum_to_zero([]int{-3, 9, -1, 4, 2, 30})\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := pairs_sum_to_zero([]int{-3, 9, -1, 4, 2, 31})\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਪੇਅਰਜ਼ _ ਸਮ _ ਤੋਂ _ ਜ਼ੀਰੋ ਇੱਕ ਇੰਪੁੱਟ ਦੇ ਰੂਪ ਵਿੱਚ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਲੈਂਦਾ ਹੈ। \nਇਹ ਸਹੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਸੂਚੀ ਵਿੱਚ ਦੋ ਵੱਖਰੇ ਤੱਤ ਹਨ \nਜ਼ੀਰੋ ਤੱਕ ਜੋਡ਼, ਅਤੇ ਗਲਤ ਹੋਰ. \n>>> ਜੋਡ਼ੇ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,3,5,0]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਜੋਡ਼ੇ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,3,-2,1]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਜੋਡ਼ੇ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1,2,3,7]) \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>>> ਜੋਡ਼ੇ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([2,4,-5,3,5,7]) \nਸੱਚ ਹੈ। \n>>> ਜੋਡ਼ੇ _ ਜੋਡ਼ _ ਤੋਂ _ ਜ਼ੀਰੋ ([1]) \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "pairs_sum_to_zero", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/14", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fib4(5)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fib4(8)\n\texpected_2 := 28\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fib4(10)\n\texpected_3 := 104\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fib4(12)\n\texpected_4 := 386\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਫਾਈਬ 4 ਨੰਬਰ ਕ੍ਰਮ ਫਾਈਬੋਨੈਕੀ ਸੇਕੁਨੇਸ ਦੇ ਸਮਾਨ ਇੱਕ ਕ੍ਰਮ ਹੈ ਜਿਸ ਨੂੰ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਗਿਆ ਹੈਃ \nਫਾਈਬ 4 (0)-> 0 \nਫਾਈਬ 4 (1)-> 0 \nਫਾਈਬ 4 (2)-> 2 \nਫਾਈਬ 4 (3)-> 0 \nਫਾਈਬ 4 (ਐੱਨ)-> ਫਾਈਬ 4 (ਐੱਨ-1) + ਫਾਈਬ 4 (ਐੱਨ-2) + ਫਾਈਬ 4 (ਐੱਨ-3) + ਫਾਈਬ 4 (ਐੱਨ-4)। \nਕ੍ਰਿਪਾ ਕਰਕੇ fib4 ਨੰਬਰ ਤਰਤੀਬ ਦੇ n-th ਤੱਤ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ। ਪੁਨਰਵਰਤਨ ਦੀ ਵਰਤੋਂ ਨਾ ਕਰੋ। \n>>> ਫਾਈਬ 4 (5) \n4. \n>>> ਫਾਈਬ 4 (6) \n8. \n>>> ਫਾਈਬ4 (7) \n14.", "entry_point": "fib4", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/15", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := median([]int{3, 1, 2, 4, 5})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := median([]int{-10, 4, 6, 1000, 10, 20})\n\texpected_2 := 8.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := median([]int{5})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := median([]int{6, 5})\n\texpected_4 := 5.5\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := median([]int{8, 1, 3, 9, 9, 2, 7})\n\texpected_5 := 7\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਸੂਚੀ l ਵਿੱਚ ਤੱਤਾਂ ਦਾ ਮੀਡੀਅਨ ਵਾਪਸ ਕਰੋ। \n>>> ਮੀਡੀਅਨ ([3,1,2,4,5]) \n3. \n>>> ਮੀਡੀਅਨ ([-10,4,6,1000,10,20]) \n15. 0", "entry_point": "median", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/16", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_palindrome(\"\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_palindrome(\"aba\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_palindrome(\"aaaaa\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_palindrome(\"zbcd\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_palindrome(\"xywyx\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_palindrome(\"xywyz\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_palindrome(\"xywzx\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਜਾਂਚ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸਤਰ ਇੱਕ ਪਾਲੀਂਡਰੋਮ ਹੈ \n>>> ਇਸ _ ਪਾਲੀਂਡਰੋਮ (\") ਹੈ \nਸੱਚ ਹੈ। \n>>> ਇਸ _ ਪਾਲੀਂਡਰੋਮ ('ਅਬਾ') ਹੈ \nਸੱਚ ਹੈ। \n>>> is _ palindrom ('aaaaa') ਹੈ \nਸੱਚ ਹੈ। \n>>> is _ palindrom ('zbcd') ਹੈ \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "is_palindrome", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/17", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_vowels(\"\")\n\texpected_1 := \"\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_vowels(\"abcdef\\nghijklm\")\n\texpected_2 := \"bcdf\\nghjklm\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_vowels(\"fedcba\")\n\texpected_3 := \"fdcb\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := remove_vowels(\"eeeee\")\n\texpected_4 := \"\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := remove_vowels(\"acBAA\")\n\texpected_5 := \"cB\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := remove_vowels(\"EcBOO\")\n\texpected_6 := \"cB\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := remove_vowels(\"ybcd\")\n\texpected_7 := \"ybcd\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਹਟਾਉਣ _ ਸਵਰ ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਬਿਨਾਂ ਸਵਰਾਂ ਦੇ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ। \n>>> ਸਵਰ ਹਟਾਓ (\") \n\"\n>>> ਸਵਰ ਹਟਾਓ (\"abcdef\\nghijklm\") \n'ਬੀ. ਸੀ. ਡੀ. ਐੱਫ. \\ਨ. ਜੀ. ਐੱਚ. ਕੇ. ਐੱਲ. ਐੱਮ.'\n>>> ਸਵਰ ਹਟਾਓ ('abcdef') \n'ਬੀ. ਸੀ. ਡੀ. ਐੱਫ.'\n>>> ਸਵਰ ਹਟਾਓ ('ਆਆਆ') \n\"\n>>> ਸਵਰ ਹਟਾਓ ('ਏਏਬੀਏਏ') \n'ਬੀ'\n>>> ਸਵਰ ਹਟਾਓ ('zbcd') \n'zbcd'", "entry_point": "remove_vowels", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/18", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := below_threshold([]int{1, 2, 4, 10},100)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := below_threshold([]int{1, 20, 4, 10},5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := below_threshold([]int{1, 20, 4, 10},21)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := below_threshold([]int{1, 20, 4, 10},22)\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := below_threshold([]int{1, 8, 4, 10},11)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := below_threshold([]int{1, 8, 4, 10},10)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਸਹੀ ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਸੂਚੀ l ਵਿੱਚ ਸਾਰੇ ਨੰਬਰ ਥਰੈਸ਼ਹੋਲਡ t ਤੋਂ ਹੇਠਾਂ ਹਨ। \n>> ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਹੇਠਾਂ ([1,2,4,10], 100) \nਸੱਚ ਹੈ। \n>> ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਹੇਠਾਂ ([1,20,4,10], 5) \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "below_threshold", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/19", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add(0,1)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add(1,0)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add(2,3)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := add(5,7)\n\texpected_4 := 12\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := add(7,5)\n\texpected_5 := 12\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := add(572,725)\n\texpected_6 := 1297\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := add(51,804)\n\texpected_7 := 855\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := add(645,96)\n\texpected_8 := 741\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := add(712,853)\n\texpected_9 := 1565\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := add(223,101)\n\texpected_10 := 324\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := add(76,29)\n\texpected_11 := 105\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := add(416,149)\n\texpected_12 := 565\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := add(145,409)\n\texpected_13 := 554\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := add(535,430)\n\texpected_14 := 965\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := add(118,303)\n\texpected_15 := 421\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := add(287,94)\n\texpected_16 := 381\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n\tactual_17 := add(768,257)\n\texpected_17 := 1025\n\tdeepCompare(actual_17, expected_17, \"Exception --- test case 16 failed to pass\")\n\n\tactual_18 := add(421,677)\n\texpected_18 := 1098\n\tdeepCompare(actual_18, expected_18, \"Exception --- test case 17 failed to pass\")\n\n\tactual_19 := add(802,814)\n\texpected_19 := 1616\n\tdeepCompare(actual_19, expected_19, \"Exception --- test case 18 failed to pass\")\n\n\tactual_20 := add(510,922)\n\texpected_20 := 1432\n\tdeepCompare(actual_20, expected_20, \"Exception --- test case 19 failed to pass\")\n\n\tactual_21 := add(345,819)\n\texpected_21 := 1164\n\tdeepCompare(actual_21, expected_21, \"Exception --- test case 20 failed to pass\")\n\n\tactual_22 := add(895,436)\n\texpected_22 := 1331\n\tdeepCompare(actual_22, expected_22, \"Exception --- test case 21 failed to pass\")\n\n\tactual_23 := add(123,424)\n\texpected_23 := 547\n\tdeepCompare(actual_23, expected_23, \"Exception --- test case 22 failed to pass\")\n\n\tactual_24 := add(923,245)\n\texpected_24 := 1168\n\tdeepCompare(actual_24, expected_24, \"Exception --- test case 23 failed to pass\")\n\n\tactual_25 := add(23,438)\n\texpected_25 := 461\n\tdeepCompare(actual_25, expected_25, \"Exception --- test case 24 failed to pass\")\n\n\tactual_26 := add(565,133)\n\texpected_26 := 698\n\tdeepCompare(actual_26, expected_26, \"Exception --- test case 25 failed to pass\")\n\n\tactual_27 := add(945,925)\n\texpected_27 := 1870\n\tdeepCompare(actual_27, expected_27, \"Exception --- test case 26 failed to pass\")\n\n\tactual_28 := add(261,983)\n\texpected_28 := 1244\n\tdeepCompare(actual_28, expected_28, \"Exception --- test case 27 failed to pass\")\n\n\tactual_29 := add(139,577)\n\texpected_29 := 716\n\tdeepCompare(actual_29, expected_29, \"Exception --- test case 28 failed to pass\")\n\n\tactual_30 := add(763,178)\n\texpected_30 := 941\n\tdeepCompare(actual_30, expected_30, \"Exception --- test case 29 failed to pass\")\n\n\tactual_31 := add(147,892)\n\texpected_31 := 1039\n\tdeepCompare(actual_31, expected_31, \"Exception --- test case 30 failed to pass\")\n\n\tactual_32 := add(436,402)\n\texpected_32 := 838\n\tdeepCompare(actual_32, expected_32, \"Exception --- test case 31 failed to pass\")\n\n\tactual_33 := add(610,581)\n\texpected_33 := 1191\n\tdeepCompare(actual_33, expected_33, \"Exception --- test case 32 failed to pass\")\n\n\tactual_34 := add(103,416)\n\texpected_34 := 519\n\tdeepCompare(actual_34, expected_34, \"Exception --- test case 33 failed to pass\")\n\n\tactual_35 := add(339,990)\n\texpected_35 := 1329\n\tdeepCompare(actual_35, expected_35, \"Exception --- test case 34 failed to pass\")\n\n\tactual_36 := add(130,504)\n\texpected_36 := 634\n\tdeepCompare(actual_36, expected_36, \"Exception --- test case 35 failed to pass\")\n\n\tactual_37 := add(242,717)\n\texpected_37 := 959\n\tdeepCompare(actual_37, expected_37, \"Exception --- test case 36 failed to pass\")\n\n\tactual_38 := add(562,110)\n\texpected_38 := 672\n\tdeepCompare(actual_38, expected_38, \"Exception --- test case 37 failed to pass\")\n\n\tactual_39 := add(396,909)\n\texpected_39 := 1305\n\tdeepCompare(actual_39, expected_39, \"Exception --- test case 38 failed to pass\")\n\n\tactual_40 := add(887,703)\n\texpected_40 := 1590\n\tdeepCompare(actual_40, expected_40, \"Exception --- test case 39 failed to pass\")\n\n\tactual_41 := add(870,551)\n\texpected_41 := 1421\n\tdeepCompare(actual_41, expected_41, \"Exception --- test case 40 failed to pass\")\n\n\tactual_42 := add(422,391)\n\texpected_42 := 813\n\tdeepCompare(actual_42, expected_42, \"Exception --- test case 41 failed to pass\")\n\n\tactual_43 := add(299,505)\n\texpected_43 := 804\n\tdeepCompare(actual_43, expected_43, \"Exception --- test case 42 failed to pass\")\n\n\tactual_44 := add(346,56)\n\texpected_44 := 402\n\tdeepCompare(actual_44, expected_44, \"Exception --- test case 43 failed to pass\")\n\n\tactual_45 := add(36,706)\n\texpected_45 := 742\n\tdeepCompare(actual_45, expected_45, \"Exception --- test case 44 failed to pass\")\n\n\tactual_46 := add(738,411)\n\texpected_46 := 1149\n\tdeepCompare(actual_46, expected_46, \"Exception --- test case 45 failed to pass\")\n\n\tactual_47 := add(679,87)\n\texpected_47 := 766\n\tdeepCompare(actual_47, expected_47, \"Exception --- test case 46 failed to pass\")\n\n\tactual_48 := add(25,303)\n\texpected_48 := 328\n\tdeepCompare(actual_48, expected_48, \"Exception --- test case 47 failed to pass\")\n\n\tactual_49 := add(161,612)\n\texpected_49 := 773\n\tdeepCompare(actual_49, expected_49, \"Exception --- test case 48 failed to pass\")\n\n\tactual_50 := add(306,841)\n\texpected_50 := 1147\n\tdeepCompare(actual_50, expected_50, \"Exception --- test case 49 failed to pass\")\n\n\tactual_51 := add(973,411)\n\texpected_51 := 1384\n\tdeepCompare(actual_51, expected_51, \"Exception --- test case 50 failed to pass\")\n\n\tactual_52 := add(711,157)\n\texpected_52 := 868\n\tdeepCompare(actual_52, expected_52, \"Exception --- test case 51 failed to pass\")\n\n\tactual_53 := add(471,27)\n\texpected_53 := 498\n\tdeepCompare(actual_53, expected_53, \"Exception --- test case 52 failed to pass\")\n\n\tactual_54 := add(714,792)\n\texpected_54 := 1506\n\tdeepCompare(actual_54, expected_54, \"Exception --- test case 53 failed to pass\")\n\n\tactual_55 := add(38,206)\n\texpected_55 := 244\n\tdeepCompare(actual_55, expected_55, \"Exception --- test case 54 failed to pass\")\n\n\tactual_56 := add(907,343)\n\texpected_56 := 1250\n\tdeepCompare(actual_56, expected_56, \"Exception --- test case 55 failed to pass\")\n\n\tactual_57 := add(23,760)\n\texpected_57 := 783\n\tdeepCompare(actual_57, expected_57, \"Exception --- test case 56 failed to pass\")\n\n\tactual_58 := add(524,859)\n\texpected_58 := 1383\n\tdeepCompare(actual_58, expected_58, \"Exception --- test case 57 failed to pass\")\n\n\tactual_59 := add(30,529)\n\texpected_59 := 559\n\tdeepCompare(actual_59, expected_59, \"Exception --- test case 58 failed to pass\")\n\n\tactual_60 := add(341,691)\n\texpected_60 := 1032\n\tdeepCompare(actual_60, expected_60, \"Exception --- test case 59 failed to pass\")\n\n\tactual_61 := add(167,729)\n\texpected_61 := 896\n\tdeepCompare(actual_61, expected_61, \"Exception --- test case 60 failed to pass\")\n\n\tactual_62 := add(636,289)\n\texpected_62 := 925\n\tdeepCompare(actual_62, expected_62, \"Exception --- test case 61 failed to pass\")\n\n\tactual_63 := add(503,144)\n\texpected_63 := 647\n\tdeepCompare(actual_63, expected_63, \"Exception --- test case 62 failed to pass\")\n\n\tactual_64 := add(51,985)\n\texpected_64 := 1036\n\tdeepCompare(actual_64, expected_64, \"Exception --- test case 63 failed to pass\")\n\n\tactual_65 := add(287,149)\n\texpected_65 := 436\n\tdeepCompare(actual_65, expected_65, \"Exception --- test case 64 failed to pass\")\n\n\tactual_66 := add(659,75)\n\texpected_66 := 734\n\tdeepCompare(actual_66, expected_66, \"Exception --- test case 65 failed to pass\")\n\n\tactual_67 := add(462,797)\n\texpected_67 := 1259\n\tdeepCompare(actual_67, expected_67, \"Exception --- test case 66 failed to pass\")\n\n\tactual_68 := add(406,141)\n\texpected_68 := 547\n\tdeepCompare(actual_68, expected_68, \"Exception --- test case 67 failed to pass\")\n\n\tactual_69 := add(106,44)\n\texpected_69 := 150\n\tdeepCompare(actual_69, expected_69, \"Exception --- test case 68 failed to pass\")\n\n\tactual_70 := add(300,934)\n\texpected_70 := 1234\n\tdeepCompare(actual_70, expected_70, \"Exception --- test case 69 failed to pass\")\n\n\tactual_71 := add(471,524)\n\texpected_71 := 995\n\tdeepCompare(actual_71, expected_71, \"Exception --- test case 70 failed to pass\")\n\n\tactual_72 := add(122,429)\n\texpected_72 := 551\n\tdeepCompare(actual_72, expected_72, \"Exception --- test case 71 failed to pass\")\n\n\tactual_73 := add(735,195)\n\texpected_73 := 930\n\tdeepCompare(actual_73, expected_73, \"Exception --- test case 72 failed to pass\")\n\n\tactual_74 := add(335,484)\n\texpected_74 := 819\n\tdeepCompare(actual_74, expected_74, \"Exception --- test case 73 failed to pass\")\n\n\tactual_75 := add(28,809)\n\texpected_75 := 837\n\tdeepCompare(actual_75, expected_75, \"Exception --- test case 74 failed to pass\")\n\n\tactual_76 := add(430,20)\n\texpected_76 := 450\n\tdeepCompare(actual_76, expected_76, \"Exception --- test case 75 failed to pass\")\n\n\tactual_77 := add(916,635)\n\texpected_77 := 1551\n\tdeepCompare(actual_77, expected_77, \"Exception --- test case 76 failed to pass\")\n\n\tactual_78 := add(301,999)\n\texpected_78 := 1300\n\tdeepCompare(actual_78, expected_78, \"Exception --- test case 77 failed to pass\")\n\n\tactual_79 := add(454,466)\n\texpected_79 := 920\n\tdeepCompare(actual_79, expected_79, \"Exception --- test case 78 failed to pass\")\n\n\tactual_80 := add(905,259)\n\texpected_80 := 1164\n\tdeepCompare(actual_80, expected_80, \"Exception --- test case 79 failed to pass\")\n\n\tactual_81 := add(168,205)\n\texpected_81 := 373\n\tdeepCompare(actual_81, expected_81, \"Exception --- test case 80 failed to pass\")\n\n\tactual_82 := add(570,434)\n\texpected_82 := 1004\n\tdeepCompare(actual_82, expected_82, \"Exception --- test case 81 failed to pass\")\n\n\tactual_83 := add(64,959)\n\texpected_83 := 1023\n\tdeepCompare(actual_83, expected_83, \"Exception --- test case 82 failed to pass\")\n\n\tactual_84 := add(957,510)\n\texpected_84 := 1467\n\tdeepCompare(actual_84, expected_84, \"Exception --- test case 83 failed to pass\")\n\n\tactual_85 := add(722,598)\n\texpected_85 := 1320\n\tdeepCompare(actual_85, expected_85, \"Exception --- test case 84 failed to pass\")\n\n\tactual_86 := add(770,226)\n\texpected_86 := 996\n\tdeepCompare(actual_86, expected_86, \"Exception --- test case 85 failed to pass\")\n\n\tactual_87 := add(579,66)\n\texpected_87 := 645\n\tdeepCompare(actual_87, expected_87, \"Exception --- test case 86 failed to pass\")\n\n\tactual_88 := add(117,674)\n\texpected_88 := 791\n\tdeepCompare(actual_88, expected_88, \"Exception --- test case 87 failed to pass\")\n\n\tactual_89 := add(530,30)\n\texpected_89 := 560\n\tdeepCompare(actual_89, expected_89, \"Exception --- test case 88 failed to pass\")\n\n\tactual_90 := add(776,345)\n\texpected_90 := 1121\n\tdeepCompare(actual_90, expected_90, \"Exception --- test case 89 failed to pass\")\n\n\tactual_91 := add(327,389)\n\texpected_91 := 716\n\tdeepCompare(actual_91, expected_91, \"Exception --- test case 90 failed to pass\")\n\n\tactual_92 := add(596,12)\n\texpected_92 := 608\n\tdeepCompare(actual_92, expected_92, \"Exception --- test case 91 failed to pass\")\n\n\tactual_93 := add(599,511)\n\texpected_93 := 1110\n\tdeepCompare(actual_93, expected_93, \"Exception --- test case 92 failed to pass\")\n\n\tactual_94 := add(936,476)\n\texpected_94 := 1412\n\tdeepCompare(actual_94, expected_94, \"Exception --- test case 93 failed to pass\")\n\n\tactual_95 := add(461,14)\n\texpected_95 := 475\n\tdeepCompare(actual_95, expected_95, \"Exception --- test case 94 failed to pass\")\n\n\tactual_96 := add(966,157)\n\texpected_96 := 1123\n\tdeepCompare(actual_96, expected_96, \"Exception --- test case 95 failed to pass\")\n\n\tactual_97 := add(326,91)\n\texpected_97 := 417\n\tdeepCompare(actual_97, expected_97, \"Exception --- test case 96 failed to pass\")\n\n\tactual_98 := add(392,455)\n\texpected_98 := 847\n\tdeepCompare(actual_98, expected_98, \"Exception --- test case 97 failed to pass\")\n\n\tactual_99 := add(446,477)\n\texpected_99 := 923\n\tdeepCompare(actual_99, expected_99, \"Exception --- test case 98 failed to pass\")\n\n\tactual_100 := add(324,860)\n\texpected_100 := 1184\n\tdeepCompare(actual_100, expected_100, \"Exception --- test case 99 failed to pass\")\n\n\tactual_101 := add(945,85)\n\texpected_101 := 1030\n\tdeepCompare(actual_101, expected_101, \"Exception --- test case 100 failed to pass\")\n\n\tactual_102 := add(886,582)\n\texpected_102 := 1468\n\tdeepCompare(actual_102, expected_102, \"Exception --- test case 101 failed to pass\")\n\n\tactual_103 := add(886,712)\n\texpected_103 := 1598\n\tdeepCompare(actual_103, expected_103, \"Exception --- test case 102 failed to pass\")\n\n\tactual_104 := add(842,953)\n\texpected_104 := 1795\n\tdeepCompare(actual_104, expected_104, \"Exception --- test case 103 failed to pass\")\n\n}", "language": "go", "description": "ਦੋ ਨੰਬਰ x ਅਤੇ y ਜੋਡ਼ੋ \n>>> ਜੋਡ਼ (2,3) \n5. \n>>> ਜੋਡ਼ (5,7) \n12.", "entry_point": "add", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/20", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := same_chars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := same_chars(\"abcd\",\"dddddddabc\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := same_chars(\"dddddddabc\",\"abcd\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := same_chars(\"eabcd\",\"dddddddabc\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := same_chars(\"abcd\",\"dddddddabcf\")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := same_chars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := same_chars(\"aabb\",\"aaccc\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਦੋ ਸ਼ਬਦਾਂ ਵਿੱਚ ਇੱਕੋ ਜਿਹੇ ਅੱਖਰ ਹਨ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('eabcdzzzz','dddzzzzzuddeddabc') \nਸੱਚ ਹੈ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('ਏ. ਬੀ. ਸੀ. ਡੀ.','ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਏ. ਬੀ. ਸੀ.') \nਸੱਚ ਹੈ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('ddddddabc','abcd') \nਸੱਚ ਹੈ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('ਈ. ਏ. ਬੀ. ਸੀ. ਡੀ.','ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('ਏ. ਬੀ. ਸੀ. ਡੀ.','ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਡੀ. \nਝੂਠ ਬੋਲਦਾ ਹੈ। \n>> ਸਮਾਨ _ ਅੱਖਰ ('ਈ. ਏ. ਬੀ. ਸੀ. ਡੀ. ਐੱਜ਼. ਐੱਸ.','ਡੀ. ਡੀ. ਡੀ. ਡੀ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱਸ. ਐੱ \nਝੂਠ ਬੋਲਦਾ ਹੈ।", "entry_point": "same_chars", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/21", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fib(10)\n\texpected_1 := 55\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fib(1)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fib(8)\n\texpected_3 := 21\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fib(11)\n\texpected_4 := 89\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := fib(12)\n\texpected_5 := 144\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "n-th ਫਿਬੋਨਾਚੀ ਨੰਬਰ ਵਾਪਸ ਕਰੋ। \n>>> ਫਾਈਬ (10) \n55. \n>>> ਫਾਈਬ (1) \n1. \n>>> ਫਾਈਬ (8) \n21.", "entry_point": "fib", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/22", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := common([]int{1, 4, 3, 34, 653, 2, 5},[]int{5, 7, 1, 5, 9, 653, 121})\n\texpected_1 := []int{1, 5, 653}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := common([]int{5, 3, 2, 8},[]int{3, 2})\n\texpected_2 := []int{2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := common([]int{4, 3, 2, 8},[]int{3, 2, 4})\n\texpected_3 := []int{2, 3, 4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := common([]int{4, 3, 2, 8},[]int{})\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਦੋ ਸੂਚੀਆਂ ਲਈ ਵਿਲੱਖਣ ਆਮ ਤੱਤਾਂ ਨੂੰ ਵਾਪਸ ਕ੍ਰਮਬੱਧ ਕਰੋ। \n>> ਆਮ ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> ਆਮ ([5,3,2,8], [3,2]) \n[2,3]", "entry_point": "common", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/23", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_prime_factor(15)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_prime_factor(27)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_prime_factor(63)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := largest_prime_factor(330)\n\texpected_4 := 11\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := largest_prime_factor(13195)\n\texpected_5 := 29\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "n ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਈਮ ਫੈਕਟਰ ਵਾਪਸ ਕਰੋ। ਮੰਨ ਲਓ ਕਿ n> 1 ਪ੍ਰਾਈਮ ਨਹੀਂ ਹੈ। \n>>> ਸਭ ਤੋਂ ਵੱਡਾ _ ਪ੍ਰਾਈਮ _ ਫੈਕਟਰ (13195) \n29. \n>>> ਸਭ ਤੋਂ ਵੱਡਾ _ ਪ੍ਰਾਈਮ _ ਫੈਕਟਰ (2048) \n2.", "entry_point": "largest_prime_factor", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/24", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_to_n(1)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_to_n(6)\n\texpected_2 := 21\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_to_n(11)\n\texpected_3 := 66\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_to_n(30)\n\texpected_4 := 465\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_to_n(100)\n\texpected_5 := 5050\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "sum _ to _ n ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ 1 ਤੋਂ n ਤੱਕ ਸੰਖਿਆਵਾਂ ਦਾ ਜੋਡ਼ ਕਰਦਾ ਹੈ। \n>>> ਜੋਡ਼ _ ਤੋਂ _ n (30) \n465 \n>>> ਜੋਡ਼ _ ਤੋਂ _ n (100) \n5050 \n>>> ਜੋਡ਼ _ ਤੋਂ _ n (5) \n15. \n>>> ਜੋਡ਼ _ ਤੋਂ _ n (10) \n55. \n>>> ਜੋਡ਼ _ ਤੋਂ _ n (1) \n1.", "entry_point": "sum_to_n", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/25", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := derivative([]int{3, 1, 2, 4, 5})\n\texpected_1 := []int{1, 4, 12, 20}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := derivative([]int{1, 2, 3})\n\texpected_2 := []int{2, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := derivative([]int{3, 2, 1})\n\texpected_3 := []int{2, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := derivative([]int{3, 2, 1, 0, 4})\n\texpected_4 := []int{2, 2, 0, 16}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := derivative([]int{1})\n\texpected_5 := []int{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "xs ਕਿਸੇ ਬਹੁਪੱਖੀ ਦੇ ਗੁਣਾਂਕਾਂ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nਇਸ ਬਹੁਪੱਖੀ ਦਾ ਉਸੇ ਰੂਪ ਵਿੱਚ ਰਿਟਰਨ ਡੈਰੀਵੇਟਿਵ। \n>>> ਡੈਰੀਵੇਟਿਵ ([3,1,2,4,5]) \n[1,4,12,20] \n>>> ਡੈਰੀਵੇਟਿਵ ([1,2,3]) \n[2,6]", "entry_point": "derivative", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/26", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fibfib(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fibfib(1)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fibfib(5)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := fibfib(8)\n\texpected_4 := 24\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := fibfib(10)\n\texpected_5 := 81\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := fibfib(12)\n\texpected_6 := 274\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := fibfib(14)\n\texpected_7 := 927\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਫਾਈਬ ਫਾਈਬ ਨੰਬਰ ਕ੍ਰਮ ਫਾਈਬੋਨੈਕੀ ਸੇਕੁਨੇਸ ਦੇ ਸਮਾਨ ਇੱਕ ਕ੍ਰਮ ਹੈ ਜਿਸ ਨੂੰ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਗਿਆ ਹੈਃ \nਫਾਈਬਫਿਬ (0) = = 0 \nਫਾਈਬਫਿਬ (1) = = 0 \nਫਾਈਬਫਿਬ (2) = = 1 \nਫਾਈਬ ਫਾਈਬ (ਐੱਨ) = = ਫਾਈਬ ਫਾਈਬ (ਐੱਨ-1) + ਫਾਈਬ ਫਾਈਬ (ਐੱਨ-2) + ਫਾਈਬ ਫਾਈਬ (ਐੱਨ-3)। \nਕ੍ਰਿਪਾ ਕਰਕੇ fibfib ਨੰਬਰ ਤਰਤੀਬ ਦੇ n-th ਤੱਤ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ। \n>>> ਫਾਈਬਫਿਬ (1) \n0 \n>>> ਫਾਈਬਫਿਬ (5) \n4. \n>>> ਫਾਈਬਫਿਬ (8) \n24.", "entry_point": "fibfib", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/27", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := vowels_count(\"abcde\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := vowels_count(\"Alone\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := vowels_count(\"key\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := vowels_count(\"bye\")\n\texpected_4 := 1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := vowels_count(\"keY\")\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := vowels_count(\"bYe\")\n\texpected_6 := 1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := vowels_count(\"ACEDY\")\n\texpected_7 := 3\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ vowels _ ਕੌਂਟ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ \nਇੱਕ ਸ਼ਬਦ ਇੰਪੁੱਟ ਦੇ ਰੂਪ ਵਿੱਚ ਅਤੇ ਸਤਰ ਵਿੱਚ ਸਵਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰਦਾ ਹੈ। \nਇਸ ਮਾਮਲੇ ਵਿੱਚ ਸਵਰ'a','e','i','o','u'ਹਨ। ਇੱਥੇ,'y'ਵੀ ਇੱਕ ਹੈ। \nਸਵਰ, ਪਰ ਸਿਰਫ ਉਦੋਂ ਜਦੋਂ ਇਹ ਦਿੱਤੇ ਗਏ ਸ਼ਬਦ ਦੇ ਅੰਤ ਵਿੱਚ ਹੋਵੇ। \n\nਉਦਾਹਰਨਃ \n>>> ਸਵਰਾਂ ਦੀ ਗਿਣਤੀ (\"ਏ. ਬੀ. ਸੀ. ਡੀ\".) \n2. \n>>> ਸਵਰਾਂ ਦੀ ਗਿਣਤੀ (\"ACEDY\") \n3.", "entry_point": "vowels_count", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/28", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := search([]int{5, 5, 5, 5, 1})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := search([]int{4, 1, 4, 1, 4, 4})\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := search([]int{3, 3})\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := search([]int{8, 8, 8, 8, 8, 8, 8, 8})\n\texpected_4 := 8\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := search([]int{2, 3, 3, 2, 2})\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := search([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1})\n\texpected_6 := 1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := search([]int{3, 2, 8, 2})\n\texpected_7 := 2\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := search([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10})\n\texpected_8 := 1\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := search([]int{8, 8, 3, 6, 5, 6, 4})\n\texpected_9 := -1\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := search([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})\n\texpected_10 := 1\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := search([]int{1, 9, 10, 1, 3})\n\texpected_11 := 1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := search([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10})\n\texpected_12 := 5\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := search([]int{1})\n\texpected_13 := 1\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := search([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5})\n\texpected_14 := 4\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := search([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10})\n\texpected_15 := 2\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := search([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3})\n\texpected_16 := 1\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n\tactual_17 := search([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4})\n\texpected_17 := 4\n\tdeepCompare(actual_17, expected_17, \"Exception --- test case 16 failed to pass\")\n\n\tactual_18 := search([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7})\n\texpected_18 := 4\n\tdeepCompare(actual_18, expected_18, \"Exception --- test case 17 failed to pass\")\n\n\tactual_19 := search([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1})\n\texpected_19 := 2\n\tdeepCompare(actual_19, expected_19, \"Exception --- test case 18 failed to pass\")\n\n\tactual_20 := search([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8})\n\texpected_20 := -1\n\tdeepCompare(actual_20, expected_20, \"Exception --- test case 19 failed to pass\")\n\n\tactual_21 := search([]int{10})\n\texpected_21 := -1\n\tdeepCompare(actual_21, expected_21, \"Exception --- test case 20 failed to pass\")\n\n\tactual_22 := search([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2})\n\texpected_22 := 2\n\tdeepCompare(actual_22, expected_22, \"Exception --- test case 21 failed to pass\")\n\n\tactual_23 := search([]int{5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8})\n\texpected_23 := 1\n\tdeepCompare(actual_23, expected_23, \"Exception --- test case 22 failed to pass\")\n\n\tactual_24 := search([]int{7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6})\n\texpected_24 := 1\n\tdeepCompare(actual_24, expected_24, \"Exception --- test case 23 failed to pass\")\n\n\tactual_25 := search([]int{3, 10, 10, 9, 2})\n\texpected_25 := -1\n\tdeepCompare(actual_25, expected_25, \"Exception --- test case 24 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਇੱਕ ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। ਸਭ ਤੋਂ ਵੱਡਾ ਪੂਰਨ ਅੰਕ ਵਾਪਸ ਕਰੋ ਜੋ ਇਸ ਤੋਂ ਵੱਡਾ ਹੈ। \nਜ਼ੀਰੋ, ਅਤੇ ਇਸਦੀ ਬਾਰੰਬਾਰਤਾ ਆਪਣੇ ਆਪ ਵਿੱਚ ਪੂਰਨ ਅੰਕ ਦੇ ਮੁੱਲ ਤੋਂ ਵੱਧ ਜਾਂ ਬਰਾਬਰ ਹੁੰਦੀ ਹੈ। \nਇੱਕ ਪੂਰਨ ਅੰਕ ਦੀ ਬਾਰੰਬਾਰਤਾ ਸੂਚੀ ਵਿੱਚ ਕਿੰਨੀ ਵਾਰ ਦਿਖਾਈ ਦਿੰਦੀ ਹੈ। \nਜੇਕਰ ਅਜਿਹਾ ਕੋਈ ਮੁੱਲ ਮੌਜੂਦ ਨਹੀਂ ਹੈ, ਤਾਂ-1 ਵਾਪਸ ਕਰੋ। \nਉਦਾਹਰਨਾਂਃ \nਖੋਜ ([4,1,2,2,3,1]) = = 2 \nਖੋਜ ([1,2,3,3,4,4]) = = 3 \nਖੋਜ ([5,5,4,4]) = =-1", "entry_point": "search", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/29", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := triangle_area(3,4,5)\n\texpected_1 := 6.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := triangle_area(1,2,10)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := triangle_area(4,8,5)\n\texpected_3 := 8.18\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := triangle_area(2,2,2)\n\texpected_4 := 1.73\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := triangle_area(1,2,3)\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := triangle_area(10,5,7)\n\texpected_6 := 16.25\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := triangle_area(2,6,3)\n\texpected_7 := -1\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := triangle_area(1,1,1)\n\texpected_8 := 0.43\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := triangle_area(2,2,10)\n\texpected_9 := -1\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ। \nਜੇਕਰ ਤਿੰਨੋਂ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ ਤਾਂ ਤਿਕੋਣ ਨੂੰ 2 ਦਸ਼ਿਮਲ ਬਿੰਦੂਆਂ ਤੱਕ ਗੋਲ ਕੀਤਾ ਜਾਂਦਾ ਹੈ। \nਨਹੀਂ ਤਾਂ ਵਾਪਸੀ-1 \nਤਿੰਨ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ ਜਦੋਂ ਕਿਸੇ ਵੀ ਦੋ ਪਾਸਿਆਂ ਦਾ ਜੋਡ਼ ਵੱਡਾ ਹੁੰਦਾ ਹੈ। \nਤੀਜੇ ਪੱਖ ਤੋਂ ਵੱਧ. \nਉਦਾਹਰਨਃ \nਤਿਕੋਣ ਖੇਤਰਫਲ (3,4,5) = = 6.00 \nਤਿਕੋਣ _ ਖੇਤਰਫਲ (1,2,10) = =-1", "entry_point": "triangle_area", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/30", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := will_it_fly([]int{3, 2, 3},9)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := will_it_fly([]int{1, 2},5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := will_it_fly([]int{3},5)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := will_it_fly([]int{3, 2, 3},1)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := will_it_fly([]int{1, 2, 3},6)\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := will_it_fly([]int{5},5)\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਹੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਆਬਜੈਕਟ q ਉੱਡੇਗਾ, ਅਤੇ ਗਲਤ ਨਹੀਂ। \nਵਸਤੂ q ਉੱਡੇਗੀ ਜੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ (ਇਹ ਇੱਕ ਪੈਲਿੰਡ੍ਰੋਮਿਕ ਸੂਚੀ ਹੈ) ਅਤੇ ਇਸਦੇ ਤੱਤਾਂ ਦਾ ਜੋਡ਼ ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਡਬਲਯੂ ਤੋਂ ਘੱਟ ਜਾਂ ਬਰਾਬਰ ਹੈ। \n\nਉਦਾਹਰਨਃ \nਕੀ ਇਹ ਉੱਡਦਾ ਹੈ ([1,2], 5) ਗਲਤ \n#1 + 2 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਪਰ ਇਹ ਅਸੰਤੁਲਿਤ ਹੈ। \n\nਕੀ ਇਹ ਉੱਡਦਾ ਹੈ ([3,2,3], 1) ਗਲਤ \n#ਇਹ ਸੰਤੁਲਿਤ ਹੈ, ਪਰ 3 + 2 + 3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਵੱਧ ਹੈ। \n\nਵਿਲ ਇਟ ਫਲਾਈ ([3,2,3], 9) ਸੱਚ ਹੈ \n#3 + 2 + 3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ। \n\nਵਿਲ _ ਇਟ _ ਫਲਾਈ ([3], 5) ਸੱਚ \n#3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ।", "entry_point": "will_it_fly", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/31", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_multiply_prime(5)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_multiply_prime(30)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_multiply_prime(8)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_multiply_prime(10)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_multiply_prime(125)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_multiply_prime(105)\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_multiply_prime(126)\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_multiply_prime(729)\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_multiply_prime(891)\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_multiply_prime(1001)\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸੱਚ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ 3 ਪ੍ਰਾਈਮ ਨੰਬਰਾਂ ਦਾ ਗੁਣਾ ਹੈ। \nਅਤੇ ਹੋਰ ਗਲਤ. \nਇਹ ਜਾਣਨਾ ਕਿ (ਏ) 100 ਤੋਂ ਘੱਟ ਹੈ। \nਉਦਾਹਰਨਃ \nਕੀ _ ਗੁਣਾ _ ਪ੍ਰਾਈਮ (30) = = ਸੱਚ ਹੈ \n30 = 2 * 3 * 5", "entry_point": "is_multiply_prime", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/32", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decimal_to_binary(0)\n\texpected_1 := \"db0db\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decimal_to_binary(32)\n\texpected_2 := \"db100000db\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decimal_to_binary(103)\n\texpected_3 := \"db1100111db\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := decimal_to_binary(15)\n\texpected_4 := \"db1111db\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਦਸ਼ਮਲਵ ਰੂਪ ਵਿੱਚ ਇੱਕ ਨੰਬਰ ਦਿੱਤਾ ਜਾਵੇਗਾ ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਇਸ ਨੂੰ ਇਸ ਵਿੱਚ ਬਦਲਣਾ ਹੈ \nਬਾਈਨਰੀ ਫਾਰਮੈਟ। ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ, ਜਿਸ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ ਇੱਕ ਬਾਈਨਰੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ। \nਨੰਬਰ। ਸਤਰ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ'0'ਜਾਂ'1'ਹੋਵੇਗਾ। \n\nਸਤਰ ਦੇ ਸ਼ੁਰੂ ਵਿੱਚ ਅਤੇ ਅੰਤ ਵਿੱਚ ਦੋ ਵਾਧੂ ਅੱਖਰ'db'ਹੋਣਗੇ। \nਫਾਰਮੈਟ ਵਿੱਚ ਮਦਦ ਕਰਨ ਲਈ ਵਾਧੂ ਅੱਖਰ ਹਨ। \n\nਉਦਾਹਰਨਾਂਃ \nਡੈਸੀਮਲ _ ਤੋਂ _ ਬਾਈਨਰੀ (15) #\"db1111db\" ਦਿੰਦਾ ਹੈ \nਡੈਸੀਮਲ _ ਤੋਂ _ ਬਾਈਨਰੀ (32) #\"db100000db\" ਦਿੰਦਾ ਹੈ", "entry_point": "decimal_to_binary", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/33", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_happy(\"a\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_happy(\"aa\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_happy(\"abcd\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_happy(\"aabb\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_happy(\"adb\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_happy(\"xyy\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_happy(\"iopaxpoi\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_happy(\"iopaxioi\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਤੁਹਾਡਾ ਕੰਮ ਇਹ ਜਾਂਚ ਕਰਨਾ ਹੈ ਕਿ ਸਤਰ ਖੁਸ਼ ਹੈ ਜਾਂ ਨਹੀਂ। \nਇੱਕ ਸਤਰ ਖੁਸ਼ ਹੁੰਦੀ ਹੈ ਜੇਕਰ ਇਸ ਦੀ ਲੰਬਾਈ ਘੱਟੋ ਘੱਟ 3 ਹੋਵੇ ਅਤੇ ਹਰ 3 ਲਗਾਤਾਰ ਅੱਖਰ ਵੱਖਰੇ ਹੋਣ। \nਉਦਾਹਰਨ ਲਈਃ \nਖੁਸ਼ ਹੈ (a) => ਗਲਤ ਹੈ \nਖੁਸ਼ ਹੈ (ਏਏ) => ਗਲਤ ਹੈ \nਖੁਸ਼ ਹੈ (ਏ. ਬੀ. ਸੀ. ਡੀ.) => ਸੱਚ ਹੈ \nਖੁਸ਼ ਹੈ (aabb) => ਗਲਤ ਹੈ \nਖੁਸ਼ ਹੈ (adb) => ਸੱਚ ਹੈ \nਖੁਸ਼ ਹੈ (xyy) => ਗਲਤ ਹੈ", "entry_point": "is_happy", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/34", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := numerical_letter_grade([]interface{}{4.0, 3, 1.7, 2, 3.5})\n\texpected_1 := []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := numerical_letter_grade([]interface{}{1.2})\n\texpected_2 := []string{\"D+\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := numerical_letter_grade([]interface{}{0.5})\n\texpected_3 := []string{\"D-\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := numerical_letter_grade([]interface{}{0.0})\n\texpected_4 := []string{\"E\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := numerical_letter_grade([]interface{}{1, 0.3, 1.5, 2.8, 3.3})\n\texpected_5 := []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := numerical_letter_grade([]interface{}{0, 0.7})\n\texpected_6 := []string{\"E\", \"D-\"}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਇਹ ਸਮੈਸਟਰ ਦਾ ਆਖਰੀ ਹਫ਼ਤਾ ਹੁੰਦਾ ਹੈ ਅਤੇ ਅਧਿਆਪਕ ਨੂੰ ਗ੍ਰੇਡ ਦੇਣੇ ਹੁੰਦੇ ਹਨ। \nਵਿਦਿਆਰਥੀਆਂ ਨੂੰ। ਅਧਿਆਪਕ ਗ੍ਰੇਡਿੰਗ ਲਈ ਆਪਣਾ ਐਲਗੋਰਿਦਮ ਬਣਾ ਰਿਹਾ ਹੈ। \nਇਕੋ ਸਮੱਸਿਆ ਇਹ ਹੈ ਕਿ ਉਸ ਨੇ ਗ੍ਰੇਡਿੰਗ ਲਈ ਵਰਤਿਆ ਕੋਡ ਗੁਆ ਦਿੱਤਾ ਹੈ। \nਉਸ ਨੇ ਤੁਹਾਨੂੰ ਕੁੱਝ ਵਿਦਿਆਰਥੀਆਂ ਲਈ ਜੀ. ਪੀ. ਏ. ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਹੈ ਅਤੇ ਤੁਹਾਨੂੰ ਲਿਖਣਾ ਪਵੇਗਾ। \nਇੱਕ ਫੰਕਸ਼ਨ ਜੋ ਹੇਠ ਦਿੱਤੀ ਸਾਰਣੀ ਦੀ ਵਰਤੋਂ ਕਰਕੇ ਅੱਖਰ ਗ੍ਰੇਡ ਦੀ ਸੂਚੀ ਨੂੰ ਆਉਟਪੁੱਟ ਕਰ ਸਕਦਾ ਹੈਃ \nਜੀ. ਪੀ. ਏ। ਲੈਟਰ ਗ੍ਰੇਡ \n4. 0 ਏ + \n> 3.7 ਏ \n> 3.3 ਏ-\n> 3 ਬੀ + \n> 2.7 ਬੀ \n> 2.3 ਬੀ-\n> 2C + \n> 1.7 ਡਿਗਰੀ ਸੈਲਸੀਅਸ \n> 1.3 ਸੀ-\n> 1. 0 ਡੀ + \n> 0.7 ਡੀ \n> 0.0 ਡੀ-\n0. 0 ਈ \n\nਉਦਾਹਰਨਃ \ngrade _ ਸਮੀਕਰਨ ([4,0,3,7,2,3,5]) = => ['A +','B','C-','C','A -']", "entry_point": "numerical_letter_grade", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/35", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prime_length(\"Hello\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prime_length(\"abcdcba\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prime_length(\"kittens\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := prime_length(\"orange\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := prime_length(\"wow\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := prime_length(\"world\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := prime_length(\"MadaM\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := prime_length(\"Wow\")\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := prime_length(\"\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := prime_length(\"HI\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := prime_length(\"go\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := prime_length(\"gogo\")\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := prime_length(\"aaaaaaaaaaaaaaa\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := prime_length(\"Madam\")\n\texpected_14 := true\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n\tactual_15 := prime_length(\"M\")\n\texpected_15 := false\n\tdeepCompare(actual_15, expected_15, \"Exception --- test case 14 failed to pass\")\n\n\tactual_16 := prime_length(\"0\")\n\texpected_16 := false\n\tdeepCompare(actual_16, expected_16, \"Exception --- test case 15 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਹੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਸਤਰ \nਲੰਬਾਈ ਇੱਕ ਪ੍ਰਮੁੱਖ ਸੰਖਿਆ ਹੈ ਜਾਂ ਗਲਤ \nਉਦਾਹਰਣਾਂ \nਪ੍ਰਾਈਮ _ ਲੰਬਾਈ ('ਹੈਲੋ') = = ਸੱਚ \nਪ੍ਰਾਈਮ _ ਲੰਬਾਈ ('abcdcba') = = ਸੱਚ \nਪ੍ਰਾਈਮ _ ਲੰਬਾਈ ('ਬਿੱਲੀਆਂ ਦੇ ਬੱਚੇ') = = ਸੱਚ \nਪ੍ਰਾਈਮ _ ਲੰਬਾਈ ('ਸੰਤਰੀ') = = ਗਲਤ", "entry_point": "prime_length", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/36", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solve(1000)\n\texpected_1 := \"1\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solve(150)\n\texpected_2 := \"110\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solve(147)\n\texpected_3 := \"1100\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := solve(333)\n\texpected_4 := \"1001\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := solve(963)\n\texpected_5 := \"10010\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ N ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਦੇ ਅੰਕਾਂ ਦਾ ਕੁੱਲ ਜੋਡ਼ ਬਾਈਨਰੀ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। \n\nਉਦਾਹਰਨ \nN = 1000 ਲਈ, ਅੰਕਾਂ ਦਾ ਜੋਡ਼ 1 ਹੋਵੇਗਾ ਅਤੇ ਆਉਟਪੁੱਟ \"1\" ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nN = 150 ਲਈ, ਅੰਕਾਂ ਦਾ ਜੋਡ਼ 6 ਹੋਵੇਗਾ ਅਤੇ ਆਉਟਪੁੱਟ \"110\" ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nN = 147 ਲਈ, ਅੰਕਾਂ ਦਾ ਜੋਡ਼ 12 ਹੋਵੇਗਾ ਅਤੇ ਆਉਟਪੁੱਟ \"1100\" ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \n\nਪਰਿਵਰਤਨਸ਼ੀਲਃ \n@N ਪੂਰਨ ਅੰਕ \nਪਾਬੰਦੀਆਂਃ 0 ≤ N ≤ 10000. \nਆਉਟਪੁੱਟਃ \nਬਾਈਨਰੀ ਨੰਬਰ ਦੀ ਇੱਕ ਸਤਰ", "entry_point": "solve", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/37", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}},1)\n\texpected_1 := [][]int{[]int{0, 0}, []int{1, 4}, []int{1, 0}, []int{2, 5}, []int{2, 0}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}},2)\n\texpected_2 := [][]int{[]int{0, 1}, []int{1, 1}, []int{2, 1}, []int{3, 1}, []int{4, 1}, []int{5, 1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 1, 3, 4, 5, 6}, []int{1, 2, 1, 4, 5, 6}, []int{1, 2, 3, 1, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}},1)\n\texpected_3 := [][]int{[]int{0, 0}, []int{1, 0}, []int{2, 1}, []int{2, 0}, []int{3, 2}, []int{3, 0}, []int{4, 3}, []int{4, 0}, []int{5, 4}, []int{5, 0}, []int{6, 5}, []int{6, 0}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_row([][]int{},1)\n\texpected_4 := [][]int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := get_row([][]int{[]int{1}},2)\n\texpected_5 := [][]int{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := get_row([][]int{[]int{}, []int{1}, []int{1, 2, 3}},3)\n\texpected_6 := [][]int{[]int{2, 2}}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ 2-ਅਯਾਮੀ ਡੇਟਾ ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ, ਇੱਕ ਨੈਸਟਡ ਸੂਚੀ ਦੇ ਰੂਪ ਵਿੱਚ, \nਜੋ ਮੈਟ੍ਰਿਕਸ ਦੇ ਸਮਾਨ ਹੈ, ਹਾਲਾਂਕਿ, ਮੈਟ੍ਰਿਕਸ ਦੇ ਉਲਟ, \nਹਰੇਕ ਕਤਾਰ ਵਿੱਚ ਵੱਖ-ਵੱਖ ਕਾਲਮ ਹੋ ਸਕਦੇ ਹਨ। \nਦਿੱਤੇ ਗਏ lst, ਅਤੇ ਪੂਰਨ ਅੰਕ x, ਸੂਚੀ ਵਿੱਚ ਪੂਰਨ ਅੰਕ x ਲੱਭੋ, \nਅਤੇ ਟੁਪਲਾਂ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ, [(x1, y1), (x2, y2)...] ਜਿਵੇਂ ਕਿ \nਹਰੇਕ ਟੁਪਲ ਇੱਕ ਨਿਰਦੇਸ਼ਾਂਕ-(ਕਤਾਰ, ਕਾਲਮ) ਹੁੰਦਾ ਹੈ, ਜੋ 0 ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ। \nਕੋਆਰਡੀਨੇਟਸ ਨੂੰ ਸ਼ੁਰੂ ਵਿੱਚ ਕਤਾਰਾਂ ਦੁਆਰਾ ਚਡ਼੍ਹਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ। \nਨਾਲ ਹੀ, ਕਤਾਰ ਦੇ ਨਿਰਦੇਸ਼ਾਂਕ ਨੂੰ ਕਾਲਮਾਂ ਦੁਆਰਾ ਉਤਰਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ। \n\nਉਦਾਹਰਨਾਂਃ \nਕਤਾਰ ਪ੍ਰਾਪਤ ਕਰੋ ([]) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nਪ੍ਰਾਪਤ ਕਰੋ ([], 1) = = [] \nਪ੍ਰਾਪਤ ਕਰੋ ([[], [1], [1,2,3]], 3) = = [(2,2)]", "entry_point": "get_row", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/38", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := next_smallest([]int{1, 2, 3, 4, 5})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := next_smallest([]int{5, 1, 4, 3, 2})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := next_smallest([]int{})\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := next_smallest([]int{1, 1})\n\texpected_4 := nil\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := next_smallest([]int{1, 1, 1, 1, 0})\n\texpected_5 := 1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := next_smallest([]int{1, 1})\n\texpected_6 := nil\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := next_smallest([]int{-35, 34, 12, -45})\n\texpected_7 := -35\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਇੱਕ ਫੰਕਸ਼ਨ ਅਗਲਾ _ ਛੋਟਾ () ਲਿਖੋ ਜੋ ਸੂਚੀ ਦਾ ਦੂਜਾ ਸਭ ਤੋਂ ਛੋਟਾ ਤੱਤ ਵਾਪਸ ਕਰਦਾ ਹੈ। \nਜੇਕਰ ਅਜਿਹਾ ਕੋਈ ਤੱਤ ਨਹੀਂ ਹੈ ਤਾਂ ਨੱਲ ਵਾਪਸ ਕਰੋ। \n\nਅਗਲਾ _ ਸਭ ਤੋਂ ਛੋਟਾ ([1,2,3,4,5]) = = 2 \nਅਗਲਾ _ ਸਭ ਤੋਂ ਛੋਟਾ ([5,1,4,3,2]) = = 2 \nਅਗਲਾ _ ਸਭ ਤੋਂ ਛੋਟਾ ([]) = = ਕੋਈ ਨਹੀਂ \nਅਗਲਾ _ ਸਭ ਤੋਂ ਛੋਟਾ ([1,1]) = = ਕੋਈ ਨਹੀਂ", "entry_point": "next_smallest", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/39", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_bored(\"Hello world\")\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_bored(\"Is the sky blue?\")\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_bored(\"I love It !\")\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_bored(\"bIt\")\n\texpected_4 := 0\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_bored(\"I feel good today. I will be productive. will kill It\")\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_bored(\"You and I are going for a walk\")\n\texpected_6 := 0\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਸੰਖਿਆ ਦੀ ਗਿਣਤੀ ਕਰਨਾ ਹੈ। \nਬੋਰਿੰਗ. ਬੋਰਿੰਗ ਇੱਕ ਵਾਕ ਹੈ ਜੋ \"ਮੈਂ\" ਸ਼ਬਦ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ। \nਵਾਕਾਂ ਦੀ ਹੱਦਬੰਦੀ '.', '?'ਜਾਂ '!'ਦੁਆਰਾ ਕੀਤੀ ਜਾਂਦੀ ਹੈ। \n\nਉਦਾਹਰਨ ਲਈਃ \n>>> ਬੋਰ ਹੈ (\"ਹੈਲੋ ਵਰਲਡ\") \n0 \n>>> ਹੈ _ ਬੋਰ (\"ਅਸਮਾਨ ਨੀਲਾ ਹੈ. ਸੂਰਜ ਚਮਕ ਰਿਹਾ ਹੈ. ਮੈਨੂੰ ਇਹ ਮੌਸਮ ਪਸੰਦ ਹੈ\") \n1.", "entry_point": "is_bored", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/40", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n\texpected_3 := 13\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n\texpected_4 := 11\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n\texpected_5 := 3\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n\texpected_6 := 7\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := skjkasdkd([]int{8191})\n\texpected_7 := 19\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := skjkasdkd([]int{8191, 123456, 127, 7})\n\texpected_8 := 19\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := skjkasdkd([]int{127, 97, 8192})\n\texpected_9 := 10\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਈਮ ਮੁੱਲ ਲੱਭਣ ਅਤੇ ਇਸ ਦੇ ਅੰਕਾਂ ਦਾ ਜੋਡ਼ ਵਾਪਸ ਕਰਨ ਦੀ ਜ਼ਰੂਰਤ ਹੈ। \n\nਉਦਾਹਰਨਾਂਃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] ਲਈ ਆਉਟਪੁੱਟ 10 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] ਲਈ ਆਉਟਪੁੱਟ 25 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] ਲਈ ਆਉਟਪੁੱਟ 13 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] ਲਈ ਆਉਟਪੁੱਟ 11 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [0,81,12, 3,1,21] ਲਈ ਆਉਟਪੁੱਟ 3 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [0,8,1, 2,1,7] ਲਈ ਆਉਟਪੁੱਟ 7 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ।", "entry_point": "skjkasdkd", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/41", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", \"b\": \"banana\",  })\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\",  })\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_dict_case(map[interface{}]string{ \"p\": \"pineapple\", 5: \"banana\", \"a\": \"apple\",  })\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := check_dict_case(map[interface{}]string{ \"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\",  })\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := check_dict_case(map[interface{}]string{ \"STATE\": \"NC\", \"ZIP\": \"12345\",  })\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := check_dict_case(map[interface{}]string{ \"fruit\": \"Orange\", \"taste\": \"Sweet\",  })\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := check_dict_case(map[interface{}]string{  })\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸ਼ਬਦਕੋਸ਼ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤਾਂ ਸਹੀ ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਹੇਠਲੇ ਸਤਰ ਵਿੱਚ ਹਨ \nਕੇਸ ਜਾਂ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਵੱਡੇ ਕੇਸ ਵਿੱਚ ਸਤਰ ਹਨ, ਨਹੀਂ ਤਾਂ ਗਲਤ ਵਾਪਸ ਕਰੋ। \nਫੰਕਸ਼ਨ ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਗਲਤ ਸ਼ਬਦਕੋਸ਼ ਖਾਲੀ ਹੈ। \nਉਦਾਹਰਨਾਂਃ \nਚੈੱਕ _ ਡਿਕ _ ਕੇਸ ({\"a\": \"ਸੇਬ\", \"b\": \"ਕੇਲੇ\"}) ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \nਚੈੱਕ _ ਡਿਕਟੀ _ ਕੇਸ ({\"a\": \"ਸੇਬ\", \"A\": \"ਕੇਲਾ\", \"B\": \"ਕੇਲਾ\"}) ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \nਚੈੱਕ _ ਡਿਕ _ ਕੇਸ ({\"a\": \"ਸੇਬ\", 8: \"ਕੇਲਾ\", \"a\": \"ਸੇਬ\"}) ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \nਚੈੱਕ _ ਡਿਕ _ ਕੇਸ ({\"ਨਾਮ\": \"ਜੌਨ\", \"ਉਮਰ\": \"36\", \"ਸਿਟੀ\": \"ਹਿਊਸਟਨ\"}) ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \nਚੈੱਕ _ ਡਿੱਕਟ _ ਕੇਸ ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ।", "entry_point": "check_dict_case", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/42", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := closest_integer(\"10\")\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := closest_integer(\"14.5\")\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := closest_integer(\"-15.5\")\n\texpected_3 := -16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := closest_integer(\"15.3\")\n\texpected_4 := 15\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := closest_integer(\"0\")\n\texpected_5 := 0\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਨੰਬਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਇੱਕ ਮੁੱਲ (ਸਤਰ) ਲੈਂਦਾ ਹੈ \nਅਤੇ ਇਸ ਨੂੰ ਸਭ ਤੋਂ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਦਿੰਦਾ ਹੈ। ਜੇਕਰ ਸੰਖਿਆ ਬਰਾਬਰ ਹੈ \nਦੋ ਪੂਰਨ ਅੰਕਾਂ ਤੋਂ, ਇਸ ਨੂੰ ਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਗੋਲ ਕਰੋ। \n\nਉਦਾਹਰਣਾਂ \n>>> ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ (\"10\") \n10. \n>>> ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ (\"15.3\") \n15. \n\nਨੋਟਃ \nਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਗੋਲ ਕਰਨ ਦਾ ਅਰਥ ਹੈ ਕਿ ਜੇਕਰ ਦਿੱਤੀ ਗਈ ਸੰਖਿਆ ਬਰਾਬਰ ਹੈ \nਦੋ ਪੂਰਨ ਅੰਕਾਂ ਵਿੱਚੋਂ, ਜੋ ਤੁਹਾਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਉਹ ਹੈ \nਜ਼ੀਰੋ ਤੋਂ ਸਭ ਤੋਂ ਦੂਰ। ਉਦਾਹਰਨ ਲਈ ਨਜ਼ਦੀਕੀ ਅੰਕ (\"14.5\") ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। \n15 ਵਾਪਸ ਕਰੋ ਅਤੇ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ (\"-14.5\") ਨੂੰ-15 ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ।", "entry_point": "closest_integer", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/43", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := make_a_pile(3)\n\texpected_1 := []int{3, 5, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := make_a_pile(4)\n\texpected_2 := []int{4, 6, 8, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := make_a_pile(5)\n\texpected_3 := []int{5, 7, 9, 11, 13}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := make_a_pile(6)\n\texpected_4 := []int{6, 8, 10, 12, 14, 16}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := make_a_pile(8)\n\texpected_5 := []int{8, 10, 12, 14, 16, 18, 20, 22}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤੁਹਾਨੂੰ ਪੱਥਰਾਂ ਦੇ n ਪੱਧਰਾਂ ਦਾ ਢੇਰ ਬਣਾਉਣਾ ਪਵੇਗਾ। \nਪਹਿਲੇ ਪੱਧਰ ਵਿੱਚ n ਪੱਥਰ ਹਨ। \nਅਗਲੇ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਇਹ ਹੈਃ \n- ਅਗਲਾ ਅਜੀਬ ਸੰਖਿਆ ਜੇਕਰ n ਅਜੀਬ ਹੈ। \n- ਅਗਲਾ ਇਵਨ ਨੰਬਰ ਜੇਕਰ n ਇਵਨ ਹੈ। \nਇੱਕ ਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ, ਜਿੱਥੇ ਸੂਚਕਾਂਕ ਉੱਤੇ ਤੱਤ \ni ਪੱਧਰ (i + 1) ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ। \n\nਉਦਾਹਰਨਾਂਃ \n>>> ਮੇਕ _ ਏ _ ਪਾਈਲ (3) \n[3,5,7]", "entry_point": "make_a_pile", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/44", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := words_string(\"Hi, my name is John\")\n\texpected_1 := []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := words_string(\"One, two, three, four, five, six\")\n\texpected_2 := []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := words_string(\"Hi, my name\")\n\texpected_3 := []string{\"Hi\", \"my\", \"name\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := words_string(\"One,, two, three, four, five, six,\")\n\texpected_4 := []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := words_string(\"\")\n\texpected_5 := []string{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := words_string(\"ahmed     , gamal\")\n\texpected_6 := []string{\"ahmed\", \"gamal\"}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਕੋਮਾ ਜਾਂ ਖਾਲੀ ਥਾਂਵਾਂ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ। ਤੁਹਾਡਾ ਕੰਮ ਹੈ \nਸਤਰ ਨੂੰ ਸ਼ਬਦਾਂ ਵਿੱਚ ਵੰਡਣ ਅਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਲਡ਼ੀ ਵਾਪਸ ਕਰਨ ਲਈ। \n\nਉਦਾਹਰਨ ਲਈਃ \nਸ਼ਬਦ _ ਸਤਰ (\"ਹੈਲੋ, ਮੇਰਾ ਨਾਮ ਜੌਨ ਹੈ\") = = [\"ਹੈਲੋ\", \"ਮੇਰਾ\", \"ਨਾਮ\", \"ਹੈ\", \"ਜੌਨ\"] \nਸ਼ਬਦ _ ਸਤਰ (\"ਇੱਕ, ਦੋ, ਤਿੰਨ, ਚਾਰ, ਪੰਜ, ਛੇ\") = = [\"ਇੱਕ\", \"ਦੋ\", \"ਤਿੰਨ\", \"ਚਾਰ\", \"ਪੰਜ\", \"ਛੇ\"]", "entry_point": "words_string", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/45", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := choose_num(12,15)\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := choose_num(13,12)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := choose_num(33,12354)\n\texpected_3 := 12354\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := choose_num(5234,5233)\n\texpected_4 := -1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := choose_num(6,29)\n\texpected_5 := 28\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := choose_num(27,10)\n\texpected_6 := -1\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := choose_num(7,7)\n\texpected_7 := -1\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := choose_num(546,546)\n\texpected_8 := 546\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "ਇਹ ਫੰਕਸ਼ਨ ਦੋ ਸਕਾਰਾਤਮਕ ਸੰਖਿਆਵਾਂ x ਅਤੇ y ਲੈਂਦਾ ਹੈ ਅਤੇ ਵਾਪਸ ਕਰਦਾ ਹੈ \nਸਭ ਤੋਂ ਵੱਡਾ ਇਵਨ ਇੰਟੀਜਰ ਨੰਬਰ ਜੋ ਕਿ [x, y] ਸਮੇਤ ਸੀਮਾ ਵਿੱਚ ਹੈ। \nਅਜਿਹਾ ਕੋਈ ਨੰਬਰ ਨਹੀਂ ਹੈ, ਫਿਰ ਫੰਕਸ਼ਨ-1 ਵਾਪਸ ਆਉਣਾ ਚਾਹੀਦਾ ਹੈ। \n\nਉਦਾਹਰਨ ਲਈਃ \nਚੁਣੋ (12,15) = 14 \nਚੁਣੋ (13,12) =-1", "entry_point": "choose_num", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/46", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rounded_avg(1,5)\n\texpected_1 := \"0b11\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rounded_avg(7,13)\n\texpected_2 := \"0b1010\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rounded_avg(964,977)\n\texpected_3 := \"0b1111001010\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := rounded_avg(996,997)\n\texpected_4 := \"0b1111100100\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := rounded_avg(560,851)\n\texpected_5 := \"0b1011000010\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := rounded_avg(185,546)\n\texpected_6 := \"0b101101110\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := rounded_avg(362,496)\n\texpected_7 := \"0b110101101\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := rounded_avg(350,902)\n\texpected_8 := \"0b1001110010\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := rounded_avg(197,233)\n\texpected_9 := \"0b11010111\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := rounded_avg(7,5)\n\texpected_10 := -1\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := rounded_avg(5,1)\n\texpected_11 := -1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := rounded_avg(5,5)\n\texpected_12 := \"0b101\"\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਅਤੇ m ਦਿੱਤੇ ਗਏ ਹਨ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਗਣਨਾ ਕਰਨਾ ਹੈ \nn ਤੋਂ m ਤੱਕ ਦੇ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਔਸਤ (n ਅਤੇ m ਸਮੇਤ)। \nਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਦੇ ਉੱਤਰ ਨੂੰ ਗੋਲ ਕਰੋ ਅਤੇ ਉਸ ਨੂੰ ਬਾਈਨਰੀ ਵਿੱਚ ਬਦਲੋ। \nਜੇਕਰ n, m ਤੋਂ ਵੱਡਾ ਹੈ, ਤਾਂ-1 ਵਾਪਸ ਕਰੋ। \nਉਦਾਹਰਨਃ \nਗੋਲ _ ਏਵੀਜੀ (1,5) => \"0ਬੀ11\" \nਗੋਲ _ ਏਵੀਜੀ (7,5) =>-1 \nਗੋਲ _ ਏਵੀਜੀ (10,20) => \"0ਬੀ1111\" \nਗੋਲ _ ਏਵੀਜੀ (20,33) => \"0ਬੀ11010\"", "entry_point": "rounded_avg", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/47", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := f(5)\n\texpected_1 := []int{1, 2, 6, 24, 15}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := f(7)\n\texpected_2 := []int{1, 2, 6, 24, 15, 720, 28}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := f(1)\n\texpected_3 := []int{1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := f(3)\n\texpected_4 := []int{1, 2, 6}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਫੰਕਸ਼ਨ f ਨੂੰ ਲਾਗੂ ਕਰੋ ਜੋ n ਨੂੰ ਇੱਕ ਪੈਰਾਮੀਟਰ ਵਜੋਂ ਲੈਂਦਾ ਹੈ, \nਅਤੇ ਅਕਾਰ n ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ ਸੂਚਕਾਂਕ i ਉੱਤੇ ਤੱਤ ਦਾ ਮੁੱਲ i ਦਾ ਫੈਕਟੋਰੀਅਲ ਹੈ ਜੇਕਰ i ਇਵਨ ਹੈ \nਜਾਂ 1 ਤੋਂ i ਤੱਕ ਸੰਖਿਆਵਾਂ ਦਾ ਜੋਡ਼। \nਮੈਂ 1 ਤੋਂ ਸ਼ੁਰੂ ਕਰਦਾ ਹਾਂ। \ni ਦਾ ਫੈਕਟੋਰੀਅਲ 1 ਤੋਂ i (1 * 2 *... * i) ਤੱਕ ਸੰਖਿਆਵਾਂ ਦਾ ਗੁਣਾ ਹੈ। \nਉਦਾਹਰਨਃ \nf (5) = = [1,2,6,24,15]", "entry_point": "f", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/48", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_odd_palindrome(123)\n\texpected_1 := []int{8, 13}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_odd_palindrome(12)\n\texpected_2 := []int{4, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_odd_palindrome(3)\n\texpected_3 := []int{1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := even_odd_palindrome(63)\n\texpected_4 := []int{6, 8}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := even_odd_palindrome(25)\n\texpected_5 := []int{5, 6}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := even_odd_palindrome(19)\n\texpected_6 := []int{4, 6}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := even_odd_palindrome(9)\n\texpected_7 := []int{4, 5}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := even_odd_palindrome(1)\n\texpected_8 := []int{0, 1}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਦੀ ਸੰਖਿਆ ਇਵਨ ਅਤੇ ਔਡ ਹੈ \nਪੂਰਨ ਅੰਕ ਪਾਲੀਨਡਰੋਮ ਜੋ ਸੀਮਾ (1, n) ਦੇ ਅੰਦਰ ਆਉਂਦੇ ਹਨ, ਸਮੇਤ। \n\nਉਦਾਹਰਨ 1: \n\nਇੰਪੁੱਟਃ 3 \nਆਉਟਪੁੱਟਃ (1,2) \nਵਿਆਖਿਆਃ \nਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1,2,3 ਹਨ. ਉਹਨਾਂ ਵਿੱਚੋਂ ਇੱਕ ਇਵਨ ਹੈ, ਅਤੇ ਉਹਨਾਂ ਵਿੱਚੋਂ ਦੋ ਔਡ ਹਨ। \n\nਉਦਾਹਰਨ 2: \n\nਇੰਪੁੱਟਃ 12 \nਆਉਟਪੁੱਟਃ (4,6) \nਵਿਆਖਿਆਃ \nਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1,2,3,4,5,6,7,8,9,11 ਹਨ. ਉਹਨਾਂ ਵਿੱਚੋਂ ਚਾਰ ਇਵਨ ਹਨ, ਅਤੇ ਉਹਨਾਂ ਵਿੱਚੋਂ 6 ਔਡ ਹਨ। \n\nਨੋਟਃ \n1. 1 <= n <= 10 ^ 3 \n2. ਵਾਪਸ ਆਏ ਟੁਪਲ ਵਿੱਚ ਕ੍ਰਮਵਾਰ ਇਵਨ ਅਤੇ ਔਡ ਇੰਟੀਜਰ ਪੈਲਿੰਡਰੋਮ ਦੀ ਗਿਣਤੀ ਹੁੰਦੀ ਹੈ।", "entry_point": "even_odd_palindrome", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/49", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_one_ball([]int{3, 4, 5, 1, 2})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_one_ball([]int{3, 5, 10, 1, 2})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_one_ball([]int{4, 3, 1, 2})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := move_one_ball([]int{3, 5, 4, 1, 2})\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := move_one_ball([]int{})\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਸਾਡੇ ਕੋਲ N ਪੂਰਨ ਅੰਕ arr [1], arr [2],..., arr [N] ਦੀ ਇੱਕ ਐਰੇ'arr'ਹੈ। \nਐਰੇ ਵਿੱਚ ਨੰਬਰ ਬੇਤਰਤੀਬੇ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਜਾਣਗੇ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ \nਪ੍ਰਦਰਸ਼ਨ ਕਰਕੇ ਗੈਰ-ਘਟਦੇ ਕ੍ਰਮ ਵਿੱਚ ਇੱਕ ਐਰੇ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰਨਾ ਸੰਭਵ ਹੈ \nਦਿੱਤੇ ਐਰੇ ਉੱਤੇ ਹੇਠ ਦਿੱਤੀ ਕਾਰਵਾਈਃ \nਤੁਹਾਨੂੰ ਕਿਸੇ ਵੀ ਗਿਣਤੀ ਵਿੱਚ ਸਹੀ ਸ਼ਿਫਟ ਓਪਰੇਸ਼ਨ ਕਰਨ ਦੀ ਆਗਿਆ ਹੈ। \n\nਇੱਕ ਸੱਜੇ ਸ਼ਿਫਟ ਓਪਰੇਸ਼ਨ ਦਾ ਅਰਥ ਹੈ ਐਰੇ ਦੇ ਸਾਰੇ ਤੱਤਾਂ ਨੂੰ ਇੱਕ ਨਾਲ ਤਬਦੀਲ ਕਰਨਾ। \nਸਹੀ ਦਿਸ਼ਾ ਵਿੱਚ ਸਥਿਤੀ। ਐਰੇ ਦੇ ਆਖਰੀ ਤੱਤ ਨੂੰ ਇੱਥੇ ਲਿਜਾਇਆ ਜਾਵੇਗਾ \nਐਰੇ ਵਿੱਚ ਸ਼ੁਰੂਆਤੀ ਸਥਿਤੀ ਭਾਵ 0 ਵਾਂ ਸੂਚਕਾਂਕ। \n\nਜੇ ਉੱਪਰ ਦਿੱਤੀ ਕਾਰਵਾਈ ਕਰਕੇ ਕ੍ਰਮਬੱਧ ਐਰੇ ਪ੍ਰਾਪਤ ਕਰਨਾ ਸੰਭਵ ਹੈ \nਫਿਰ ਸਹੀ ਵਾਪਸ ਕਰੋ ਨਹੀਂ ਤਾਂ ਗਲਤ ਵਾਪਸ ਕਰੋ। \nਜੇਕਰ ਦਿੱਤਾ ਗਿਆ ਐਰੇ ਖਾਲੀ ਹੈ ਤਾਂ ਸਹੀ ਵਾਪਸ ਕਰੋ। \n\nਨੋਟਃ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਿਲੱਖਣ ਤੱਤ ਹੋਣ ਦੀ ਗਾਰੰਟੀ ਹੈ। \n\nਉਦਾਹਰਨ ਲਈਃ \n\nਮੂਵ _ ਵਨ _ ਬਾਲ ([3,4,5,1,2]) = => ਸੱਚ \nਵਿਆਖਿਆਃ 2 ਸੱਜੇ ਸ਼ਿਫਟ ਓਪਰੇਸ਼ਨਾਂ ਵਿੱਚ ਪ੍ਰਦਰਸ਼ਨ ਕਰਕੇ, ਗੈਰ-ਘਟਦਾ ਕ੍ਰਮ ਕਰ ਸਕਦਾ ਹੈ \nਦਿੱਤੇ ਐਰੇ ਲਈ ਪ੍ਰਾਪਤ ਕੀਤਾ ਜਾ ਸਕਦਾ ਹੈ। \nਮੂਵ _ ਵਨ _ ਬਾਲ ([3,5,4,1,2]) = => ਗਲਤ \nਵਿਆਖਿਆਃ ਦਿੱਤੇ ਗਏ ਲਈ ਗੈਰ-ਘਟਦੇ ਕ੍ਰਮ ਨੂੰ ਪ੍ਰਾਪਤ ਕਰਨਾ ਸੰਭਵ ਨਹੀਂ ਹੈ \nਕਿਸੇ ਵੀ ਗਿਣਤੀ ਵਿੱਚ ਸਹੀ ਸ਼ਿਫਟ ਓਪਰੇਸ਼ਨ ਕਰਕੇ ਐਰੇ.", "entry_point": "move_one_ball", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/50", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := exchange([]int{1, 2, 3, 4},[]int{1, 2, 3, 4})\n\texpected_1 := \"YES\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := exchange([]int{1, 2, 3, 4},[]int{1, 5, 3, 4})\n\texpected_2 := \"NO\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := exchange([]int{1, 2, 3, 4},[]int{2, 1, 4, 3})\n\texpected_3 := \"YES\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := exchange([]int{5, 7, 3},[]int{2, 6, 4})\n\texpected_4 := \"YES\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := exchange([]int{5, 7, 3},[]int{2, 6, 3})\n\texpected_5 := \"NO\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := exchange([]int{3, 2, 6, 1, 8, 9},[]int{3, 5, 5, 1, 1, 1})\n\texpected_6 := \"NO\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := exchange([]int{100, 200},[]int{200, 200})\n\texpected_7 := \"YES\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇਸ ਸਮੱਸਿਆ ਵਿੱਚ, ਤੁਸੀਂ ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰੋਗੇ ਜੋ ਸੰਖਿਆਵਾਂ ਦੀਆਂ ਦੋ ਸੂਚੀਆਂ ਲੈਂਦਾ ਹੈ, \nਅਤੇ ਇਹ ਨਿਰਧਾਰਤ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ \nਉਹਨਾਂ ਦੇ ਵਿਚਕਾਰ lst1 ਨੂੰ ਸਿਰਫ ਇਵਨ ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਬਣਾਉਣ ਲਈ। \nlst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਅਦਾਨ-ਪ੍ਰਦਾਨ ਕੀਤੇ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਦੀ ਕੋਈ ਸੀਮਾ ਨਹੀਂ ਹੈ। \nਜੇ lst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ \nlst1 ਦੇ ਸਾਰੇ ਤੱਤ ਬਰਾਬਰ ਹੋਣ ਲਈ, \"ਹਾਂ\" ਵਾਪਸ ਕਰੋ। \nਨਹੀਂ ਤਾਂ, \"ਨਹੀਂ\" ਵਾਪਸ ਕਰੋ। \nਉਦਾਹਰਨ ਲਈਃ \nਐਕਸਚੇਂਜ ([1,2,3,4], [1,2,3,4]) => \"ਹਾਂ\" \nਐਕਸਚੇਂਜ ([1,2,3,4], [1,5,3,4]) => \"ਨਹੀਂ\" \nਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇਨਪੁਟ ਸੂਚੀਆਂ ਖਾਲੀ ਨਹੀਂ ਹੋਣਗੀਆਂ।", "entry_point": "exchange", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/51", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_delete(\"abcde\",\"ae\")\n\texpected_1 := []interface{}{\"bcd\", false}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_delete(\"abcdef\",\"b\")\n\texpected_2 := []interface{}{\"acdef\", false}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_delete(\"abcdedcba\",\"ab\")\n\texpected_3 := []interface{}{\"cdedc\", true}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := reverse_delete(\"dwik\",\"w\")\n\texpected_4 := []interface{}{\"dik\", false}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := reverse_delete(\"a\",\"a\")\n\texpected_5 := []interface{}{\"\", true}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := reverse_delete(\"abcdedcba\",\"\")\n\texpected_6 := []interface{}{\"abcdedcba\", true}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := reverse_delete(\"abcdedcba\",\"v\")\n\texpected_7 := []interface{}{\"abcdedcba\", true}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := reverse_delete(\"vabba\",\"v\")\n\texpected_8 := []interface{}{\"abba\", true}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := reverse_delete(\"mamma\",\"mia\")\n\texpected_9 := []interface{}{\"\", true}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਕੰਮ \nਸਾਨੂੰ ਦੋ ਸਤਰ s ਅਤੇ c ਦਿੱਤੇ ਗਏ ਹਨ, ਤੁਹਾਨੂੰ s ਵਿੱਚ ਸਾਰੇ ਅੱਖਰ ਮਿਟਾਉਣੇ ਪੈਣਗੇ ਜੋ c ਵਿੱਚ ਕਿਸੇ ਵੀ ਅੱਖਰ ਦੇ ਬਰਾਬਰ ਹਨ। \nਫਿਰ ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਨਤੀਜਾ ਸਤਰ ਪਾਲੀਂਡਰੋਮ ਹੈ। \nਇੱਕ ਸਤਰ ਨੂੰ ਪਾਲੀਂਡਰੋਮ ਕਿਹਾ ਜਾਂਦਾ ਹੈ ਜੇਕਰ ਇਹ ਅੱਗੇ ਵਾਂਗ ਹੀ ਪਿੱਛੇ ਵੱਲ ਪਡ਼੍ਹਦੀ ਹੈ। \nਤੁਹਾਨੂੰ ਚੈੱਕ ਲਈ ਨਤੀਜਾ ਸਤਰ ਅਤੇ ਸਹੀ/ਗਲਤ ਵਾਲਾ ਇੱਕ ਟਿਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \nਉਦਾਹਰਨ \ns = \"abcd\", c = \"ae\" ਲਈ, ਨਤੀਜਾ ('bcd', ਗਲਤ) ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। \ns = \"abcdef\" ਲਈ, c = \"b\" ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('acdef', ਗਲਤ) \ns = \"abcdedcba\", c = \"ab\" ਲਈ, ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('cdedc', ਸੱਚ)।", "entry_point": "reverse_delete", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/52", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}},1)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}},2)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}},5)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := max_fill([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}},2)\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := max_fill([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}},9)\n\texpected_5 := 2\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਖੂਹਾਂ ਦਾ ਇੱਕ ਆਇਤਾਕਾਰ ਗਰਿੱਡ ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ। ਹਰੇਕ ਕਤਾਰ ਇੱਕ ਖੂਹ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, \nਅਤੇ ਇੱਕ ਕਤਾਰ ਵਿੱਚ ਹਰੇਕ 1 ਪਾਣੀ ਦੀ ਇੱਕ ਇਕਾਈ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ। \nਹਰੇਕ ਖੂਹ ਵਿੱਚ ਇੱਕ ਅਨੁਸਾਰੀ ਬਾਲਟੀ ਹੁੰਦੀ ਹੈ ਜਿਸ ਦੀ ਵਰਤੋਂ ਇਸ ਵਿੱਚੋਂ ਪਾਣੀ ਕੱਢਣ ਲਈ ਕੀਤੀ ਜਾ ਸਕਦੀ ਹੈ। \nਅਤੇ ਸਾਰੀਆਂ ਬਾਲਟੀਆਂ ਦੀ ਸਮਰੱਥਾ ਇੱਕੋ ਜਿਹੀ ਹੈ। \nਤੁਹਾਡਾ ਕੰਮ ਖੂਹਾਂ ਨੂੰ ਖਾਲੀ ਕਰਨ ਲਈ ਬਾਲਟੀਆਂ ਦੀ ਵਰਤੋਂ ਕਰਨਾ ਹੈ। \nਕਿੰਨੀ ਵਾਰ ਤੁਹਾਨੂੰ ਬਾਲਟੀਆਂ ਨੂੰ ਘੱਟ ਕਰਨ ਦੀ ਜ਼ਰੂਰਤ ਹੈ। \n\nਉਦਾਹਰਨ 1: \nਇੰਪੁੱਟਃ \nਗਰਿੱਡਃ [[0,0,1, 0], [0,1,0, 0], [1,1,1, 1] \nਬਾਲਟੀ ਸਮਰੱਥਾਃ 1 \nਆਉਟਪੁੱਟਃ 6 \n\nਉਦਾਹਰਨ 2: \nਇੰਪੁੱਟਃ \nਗਰਿੱਡਃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1] \nਬਾਲਟੀ ਸਮਰੱਥਾਃ 2 \nਆਉਟਪੁੱਟਃ 5 \n\nਉਦਾਹਰਨ 3: \nਇੰਪੁੱਟਃ \nਗਰਿੱਡਃ [0,0,0], [0,0,0] \nਬਾਲਟੀ ਸਮਰੱਥਾਃ 5 \nਆਉਟਪੁੱਟਃ 0 \n\nਪਾਬੰਦੀਆਂਃ \nਸਾਰੇ ਖੂਹਾਂ ਦੀ ਲੰਬਾਈ ਇੱਕੋ ਜਿਹੀ ਹੁੰਦੀ ਹੈ। \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ਗਰਿੱਡ [:, 1]. ਲੰਬਾਈ <= 10 ^ 2 \nਗਰਿੱਡ [i] [j]-> 0। 1 \n* 1 <= ਸਮਰੱਥਾ <= 10", "entry_point": "max_fill", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/53", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := select_words(\"Mary had a little lamb\",4)\n\texpected_1 := []string{\"little\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := select_words(\"Mary had a little lamb\",3)\n\texpected_2 := []string{\"Mary\", \"lamb\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := select_words(\"simple white space\",2)\n\texpected_3 := []string{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := select_words(\"Hello world\",4)\n\texpected_4 := []string{\"world\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := select_words(\"Uncle sam\",3)\n\texpected_5 := []string{\"Uncle\"}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := select_words(\"\",4)\n\texpected_6 := []string{}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := select_words(\"a b c d e f\",1)\n\texpected_7 := []string{\"b\", \"c\", \"d\", \"f\"}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਤਰ s ਅਤੇ ਇੱਕ ਕੁਦਰਤੀ ਨੰਬਰ n ਦੇ ਮੱਦੇਨਜ਼ਰ, ਤੁਹਾਨੂੰ ਲਾਗੂ ਕਰਨ ਦਾ ਕੰਮ ਸੌਂਪਿਆ ਗਿਆ ਹੈ। \nਇੱਕ ਫੰਕਸ਼ਨ ਜੋ ਸਤਰ s ਤੋਂ ਸਾਰੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਬਿਲਕੁਲ \nn ਵਿਅੰਜਨ, ਕ੍ਰਮ ਵਿੱਚ ਇਹ ਸ਼ਬਦ ਸਤਰ s ਵਿੱਚ ਦਿਖਾਈ ਦਿੰਦੇ ਹਨ। \nਜੇਕਰ ਸਤਰ s ਖਾਲੀ ਹੈ ਤਾਂ ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। \nਨੋਟਃ ਤੁਸੀਂ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇੰਪੁੱਟ ਸਤਰ ਵਿੱਚ ਸਿਰਫ ਅੱਖਰ ਅਤੇ ਖਾਲੀ ਥਾਂਵਾਂ ਹਨ। \nਉਦਾਹਰਨਾਂਃ \nਚੁਣੋ _ ਸ਼ਬਦ (\"ਮੈਰੀ ਕੋਲ ਇੱਕ ਛੋਟਾ ਜਿਹਾ ਭੇਡੂ ਸੀ\", 4) = => [\"ਛੋਟਾ\"] \nਚੁਣੋ _ ਸ਼ਬਦ (\"ਮੈਰੀ ਦਾ ਇੱਕ ਛੋਟਾ ਜਿਹਾ ਭੇਡੂ ਸੀ\", 3) = => [\"ਮੈਰੀ\", \"ਭੇਡੂ\"] \nਸ਼ਬਦ ਚੁਣੋ (\"ਸਧਾਰਨ ਚਿੱਟੀ ਥਾਂ\", 2) = => [] \nਸ਼ਬਦ ਚੁਣੋ (\"ਹੈਲੋ ਵਰਲਡ\", 4) = => [\"ਵਰਲਡ\"] \nਸ਼ਬਦ ਚੁਣੋ (\"ਅੰਕਲ ਸੈਮ\", 3) = => [\"ਅੰਕਲ\"]", "entry_point": "select_words", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/54", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum([]int{-3, -4, 5},3)\n\texpected_1 := []int{-4, -3, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum([]int{4, -4, 4},2)\n\texpected_2 := []int{4, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum([]int{-3, 2, 1, 2, -1, -2, 1},1)\n\texpected_3 := []int{2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := maximum([]int{123, -123, 20, 0, 1, 2, -3},3)\n\texpected_4 := []int{2, 20, 123}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := maximum([]int{-123, 20, 0, 1, 2, -3},4)\n\texpected_5 := []int{0, 1, 2, 20}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := maximum([]int{5, 15, 0, 3, -13, -8, 0},7)\n\texpected_6 := []int{-13, -8, 0, 0, 3, 5, 15}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := maximum([]int{-1, 0, 2, 5, 3, -10},2)\n\texpected_7 := []int{3, 5}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := maximum([]int{1, 0, 5, -7},1)\n\texpected_8 := []int{5}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := maximum([]int{4, -4},2)\n\texpected_9 := []int{-4, 4}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := maximum([]int{-10, 10},2)\n\texpected_10 := []int{-10, 10}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := maximum([]int{1, 2, 3, -23, 243, -400, 0},0)\n\texpected_11 := []int{}\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ arr ਅਤੇ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ k ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ \nਅਰਰ ਵਿੱਚ ਵੱਧ ਤੋਂ ਵੱਧ k ਸੰਖਿਆਵਾਂ ਦੇ ਨਾਲ k ਦੀ ਲੰਬਾਈ। \n\nਉਦਾਹਰਨ 1: \n\nਇਨਪੁਟਃ arr = [-3,-4,5], k = 3 \nਆਉਟਪੁੱਟਃ [-4,-3,5] \n\nਉਦਾਹਰਨ 2: \n\nਇਨਪੁਟਃ arr = [4,-4,4], k = 2 \nਆਉਟਪੁੱਟਃ [4,4] \n\nਉਦਾਹਰਨ 3: \n\nਇੰਪੁੱਟਃ arr = [-3,2,1,2,-1,-2,1], k = 1 \nਆਉਟਪੁੱਟਃ [2] \n\nਨੋਟਃ \n1. ਐਰੇ ਦੀ ਲੰਬਾਈ [1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਵੇਗੀ। \n2. ਐਰੇ ਵਿੱਚ ਤੱਤ [-1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਣਗੇ। \n3. 0 <= k <= ਲੇਨ (arr)", "entry_point": "maximum", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/55", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_elements([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},3)\n\texpected_1 := -4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_elements([]int{111, 121, 3, 4000, 5, 6},2)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_elements([]int{11, 21, 3, 90, 5, 6, 7, 8, 9},4)\n\texpected_3 := 125\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9},4)\n\texpected_4 := 24\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := add_elements([]int{1},1)\n\texpected_5 := 1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਪੂਰਨ ਅੰਕ arr ਅਤੇ ਇੱਕ ਪੂਰਨ ਅੰਕ k ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਵਾਪਸ ਕਰੋ \narr ਦੇ ਪਹਿਲੇ k ਤੱਤਾਂ ਤੋਂ ਵੱਧ ਤੋਂ ਵੱਧ ਦੋ ਅੰਕਾਂ ਵਾਲੇ ਤੱਤਾਂ ਦਾ ਜੋਡ਼। \n\nਉਦਾਹਰਨਃ \n\nਇਨਪੁਟਃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nਆਉਟਪੁੱਟਃ 24 #21 + 3 ਦਾ ਜੋਡ਼ \n\nਪਾਬੰਦੀਆਂਃ \n1. 1 <= ਲੇਨ (arr) <= 100 \n2. 1 <= k <= ਲੇਨ (arr)", "entry_point": "add_elements", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/56", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := intersection([]int{1, 2},[]int{2, 3})\n\texpected_1 := \"NO\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := intersection([]int{-1, 1},[]int{0, 4})\n\texpected_2 := \"NO\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := intersection([]int{-3, -1},[]int{-5, 5})\n\texpected_3 := \"YES\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := intersection([]int{-2, 2},[]int{-4, 0})\n\texpected_4 := \"YES\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := intersection([]int{-11, 2},[]int{-1, -1})\n\texpected_5 := \"NO\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := intersection([]int{1, 2},[]int{3, 5})\n\texpected_6 := \"NO\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := intersection([]int{1, 2},[]int{1, 2})\n\texpected_7 := \"NO\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := intersection([]int{-2, -2},[]int{-3, -2})\n\texpected_8 := \"NO\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਦੋ ਅੰਤਰਾਲ ਦਿੱਤੇ ਗਏ ਹਨ, \nਜਿੱਥੇ ਹਰੇਕ ਅੰਤਰਾਲ ਪੂਰਨ ਅੰਕਾਂ ਦਾ ਇੱਕ ਜੋਡ਼ਾ ਹੁੰਦਾ ਹੈ। ਉਦਾਹਰਨ ਲਈ, ਅੰਤਰਾਲ = (ਸ਼ੁਰੂ, ਅੰਤ) = (1,2)। \nਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਬੰਦ ਹੁੰਦੇ ਹਨ ਜਿਸਦਾ ਅਰਥ ਹੈ ਕਿ ਅੰਤਰਾਲ (ਅਰੰਭ, ਅੰਤ) \nਇਸ ਵਿੱਚ ਸ਼ੁਰੂਆਤ ਅਤੇ ਅੰਤ ਦੋਵੇਂ ਸ਼ਾਮਲ ਹਨ। \nਹਰੇਕ ਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਲਈ, ਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇਸ ਦੀ ਸ਼ੁਰੂਆਤ ਇਸ ਦੇ ਅੰਤ ਤੋਂ ਘੱਟ ਜਾਂ ਬਰਾਬਰ ਹੈ। \nਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਇਨ੍ਹਾਂ ਦੋਵਾਂ ਦੇ ਇੰਟਰਸੈਕਸ਼ਨ ਦੀ ਲੰਬਾਈ \nਅੰਤਰਾਲ ਇੱਕ ਪ੍ਰਮੁੱਖ ਸੰਖਿਆ ਹੈ। \nਉਦਾਹਰਨ ਲਈ, ਅੰਤਰਾਲਾਂ (1,3), (2,4) ਦਾ ਇੰਟਰਸੈਕਸ਼ਨ (2,3) ਹੈ। \nਜਿਸ ਦੀ ਲੰਬਾਈ 1 ਹੈ, ਜੋ ਕਿ ਇੱਕ ਪ੍ਰਮੁੱਖ ਸੰਖਿਆ ਨਹੀਂ ਹੈ। \nਜੇਕਰ ਇੰਟਰਸੈਕਸ਼ਨ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਈਮ ਨੰਬਰ ਹੈ, ਤਾਂ \"ਹਾਂ\" ਵਾਪਸ ਕਰੋ, \nਨਹੀਂ ਤਾਂ, \"ਨਹੀਂ\" ਵਾਪਸ ਕਰੋ। \nਜੇ ਦੋਵੇਂ ਅੰਤਰਾਲ ਇੱਕ ਦੂਜੇ ਨੂੰ ਨਹੀਂ ਕੱਟਦੇ, ਤਾਂ \"ਨਹੀਂ\" ਵਾਪਸ ਕਰੋ। \n\n[ਇਨਪੁਟ/ਆਉਟਪੁੱਟ] ਨਮੂਨੇਃ \nਇੰਟਰਸੈਕਸ਼ਨ ((1,2,3)) = => \"NO\" \nਇੰਟਰਸੈਕਸ਼ਨ ((-1,1), (0,4)) = => \"NO\" \nਇੰਟਰਸੈਕਸ਼ਨ ((-3,-1), (-5,5)) = => \"ਹਾਂ\"", "entry_point": "intersection", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/57", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tri(3)\n\texpected_1 := []interface{}{1, 3, 2.0, 8.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tri(4)\n\texpected_2 := []interface{}{1, 3, 2.0, 8.0, 3.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tri(5)\n\texpected_3 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := tri(6)\n\texpected_4 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := tri(7)\n\texpected_5 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := tri(8)\n\texpected_6 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := tri(9)\n\texpected_7 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := tri(20)\n\texpected_8 := []interface{}{1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := tri(0)\n\texpected_9 := []interface{}{1}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := tri(1)\n\texpected_10 := []interface{}{1, 3}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "ਹਰ ਕੋਈ ਫਿਬੋਨਾਚੀ ਤਰਤੀਬ ਨੂੰ ਜਾਣਦਾ ਹੈ, ਇਸ ਦਾ ਗਣਿਤ ਸ਼ਾਸਤਰੀਆਂ ਦੁਆਰਾ ਡੂੰਘਾਈ ਨਾਲ ਅਧਿਐਨ ਕੀਤਾ ਗਿਆ ਸੀ \nਪਿਛਲੀਆਂ ਦੋ ਸਦੀਆਂ ਤੋਂ ਲੋਕ ਜੋ ਨਹੀਂ ਜਾਣਦੇ ਉਹ ਹੈ ਟ੍ਰਿਬੋਨਾਚੀ ਕ੍ਰਮ। \nਟ੍ਰਿਬੋਨਾਚੀ ਤਰਤੀਬ ਨੂੰ ਪੁਨਰਵਰਤਨ ਦੁਆਰਾ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਜਾਂਦਾ ਹੈਃ \nਟ੍ਰਾਈ (1) = 3 \nਟ੍ਰਾਈ (n) = 1 + n/2, ਜੇਕਰ n ਇਵਨ ਹੋਵੇ। \nਟ੍ਰਾਈ (ਐੱਨ) = ਟ੍ਰਾਈ (ਐੱਨ-1) + ਟ੍ਰਾਈ (ਐੱਨ-2) + ਟ੍ਰਾਈ (ਐੱਨ + 1), ਜੇਕਰ ਐੱਨ ਔਡ ਹੈ। \nਉਦਾਹਰਨ ਲਈਃ \nਟ੍ਰਾਈ (2) = 1 + (2/2) = 2 \nਟ੍ਰਾਈ (4) = 3 \nਟ੍ਰਾਈ (3) = ਟ੍ਰਾਈ (2) + ਟ੍ਰਾਈ (1) + ਟ੍ਰਾਈ (4) \n= 2 + 3 + 3 = 8 \nਤੁਹਾਨੂੰ ਇੱਕ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨੰਬਰ n ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ, ਤੁਹਾਨੂੰ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ \nਟ੍ਰਿਬੋਨਾਚੀ ਤਰਤੀਬ ਦੇ ਪਹਿਲੇ n + 1 ਨੰਬਰ। \nਉਦਾਹਰਨਾਂਃ \nਟ੍ਰਾਈ (3) = [1,3,2,8]", "entry_point": "tri", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/58", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := digits(5)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := digits(54)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := digits(120)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := digits(5014)\n\texpected_4 := 5\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := digits(98765)\n\texpected_5 := 315\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := digits(5576543)\n\texpected_6 := 2625\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := digits(2468)\n\texpected_7 := 0\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤਾਂ ਔਡ ਅੰਕਾਂ ਦਾ ਗੁਣਨਫਲ ਵਾਪਸ ਕਰੋ। \n0 ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਸਾਰੇ ਅੰਕ ਬਰਾਬਰ ਹਨ। \nਉਦਾਹਰਨ ਲਈਃ \nਅੰਕ (1) = = 1 \nਅੰਕ (4) = = 0 \nਅੰਕ (235) = = 15", "entry_point": "digits", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/59", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_nested(\"[[]]\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_nested(\"[]]]]]]][[[[[]\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_nested(\"[][]\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := is_nested(\"[]\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := is_nested(\"[[[[]]]]\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := is_nested(\"[]]]]]]]]]]\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := is_nested(\"[][][[]]\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := is_nested(\"[[]\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := is_nested(\"[]]\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := is_nested(\"[[]][[\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := is_nested(\"[[][]]\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := is_nested(\"\")\n\texpected_12 := false\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := is_nested(\"[[[[[[[[\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := is_nested(\"]]]]]]]]\")\n\texpected_14 := false\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇੰਪੁੱਟ ਵਜੋਂ ਲੈਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸਿਰਫ ਵਰਗ ਬਰੈਕਟ ਹੁੰਦੇ ਹਨ। \nਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਤਾਂ ਹੀ ਜੇ ਬਰੈਕਟ ਦੀ ਇੱਕ ਜਾਇਜ਼ ਲਡ਼ੀ ਹੋਵੇ \nਜਿੱਥੇ ਬਾਅਦ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਇੱਕ ਬਰੈਕਟ ਨੂੰ ਨੈਸਟ ਕੀਤਾ ਜਾਂਦਾ ਹੈ। \n\nis _ nested ('[[]]') ਸੱਚ ਹੈ \nis _ nested ('[]]]]] [[[[]') ਗਲਤ ਹੈ \nis _ nested ('[] []') ਗਲਤ ਹੈ \nis _ nested ('[]') ਗਲਤ ਹੈ \nis _ nested ('[[] []]') ਸੱਚ ਹੈ \nis _ nested ('[[]] [[') ਸੱਚ ਹੈ", "entry_point": "is_nested", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/60", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_squares([]interface{}{1, 2, 3})\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_squares([]interface{}{1.0, 2, 3})\n\texpected_2 := 14\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_squares([]interface{}{1, 3, 5, 7})\n\texpected_3 := 84\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := sum_squares([]interface{}{1.4, 4.2, 0})\n\texpected_4 := 29\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := sum_squares([]interface{}{-2.4, 1, 1})\n\texpected_5 := 6\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := sum_squares([]interface{}{100, 1, 15, 2})\n\texpected_6 := 10230\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := sum_squares([]interface{}{10000, 10000})\n\texpected_7 := 200000000\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := sum_squares([]interface{}{-1.4, 4.6, 6.3})\n\texpected_8 := 75\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := sum_squares([]interface{}{-1.4, 17.9, 18.9, 19.9})\n\texpected_9 := 1086\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := sum_squares([]interface{}{0})\n\texpected_10 := 0\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := sum_squares([]interface{}{-1})\n\texpected_11 := 1\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := sum_squares([]interface{}{-1, 1, 0})\n\texpected_12 := 2\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਸੰਖਿਆਵਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਤੁਹਾਨੂੰ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਰਗ ਸੰਖਿਆਵਾਂ ਦਾ ਜੋਡ਼ ਵਾਪਸ ਕਰਨ ਦੀ ਜ਼ਰੂਰਤ ਹੈ, \nਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਤੱਤ ਨੂੰ ਪਹਿਲਾਂ ਉੱਪਰਲੇ ਇੰਟ (ਛੱਤ) ਵਿੱਚ ਗੋਲ ਕਰੋ। \nਉਦਾਹਰਨਾਂਃ \nlst = [1,2,3] ਲਈ ਆਉਟਪੁੱਟ 14 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [1,4,9] ਲਈ ਆਉਟਪੁੱਟ 98 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [1,3,5, 7] ਲਈ ਆਉਟਪੁੱਟ 84 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [1.4,4.2, 0] ਲਈ ਆਉਟਪੁੱਟ 29 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ। \nlst = [-2.4,1, 1] ਲਈ ਆਉਟਪੁੱਟ 6 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ।", "entry_point": "sum_squares", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/61", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_if_last_char_is_a_letter(\"apple\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_if_last_char_is_a_letter(\"apple pi e\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_if_last_char_is_a_letter(\"eeeee\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := check_if_last_char_is_a_letter(\"A\")\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := check_if_last_char_is_a_letter(\"Pumpkin pie \")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := check_if_last_char_is_a_letter(\"Pumpkin pie 1\")\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := check_if_last_char_is_a_letter(\"\")\n\texpected_7 := false\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := check_if_last_char_is_a_letter(\"eeeee e \")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := check_if_last_char_is_a_letter(\"apple pie\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := check_if_last_char_is_a_letter(\"apple pi e \")\n\texpected_10 := false\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਸਹੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਆਖਰੀ ਅੱਖਰ ਹੋਵੇ \nਇੱਕ ਦਿੱਤੀ ਸਤਰ ਦਾ ਇੱਕ ਵਰਣਮਾਲਾ ਅੱਖਰ ਹੈ ਅਤੇ ਨਹੀਂ ਹੈ \nਇੱਕ ਸ਼ਬਦ ਦਾ ਇੱਕ ਹਿੱਸਾ, ਅਤੇ ਗਲਤ ਹੋਰ. \nਨੋਟਃ \"ਸ਼ਬਦ\" ਅੱਖਰਾਂ ਦਾ ਇੱਕ ਸਮੂਹ ਹੈ ਜੋ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤਾ ਜਾਂਦਾ ਹੈ। \n\nਉਦਾਹਰਨਾਂਃ \nਚੈੱਕ ਕਰੋ _ ਜੇਕਰ _ ਆਖਰੀ _ ਚਾਰ _ ਇੱਕ _ ਅੱਖਰ ਹੈ (\"ਐਪਲ ਪਾਈ\") ਗਲਤ ਹੈ \nਚੈੱਕ ਕਰੋ _ ਜੇਕਰ _ ਆਖਰੀ _ ਚਾਰ _ ਹੈ _ a _ ਅੱਖਰ (\"ਐਪਲ ਪਾਈ ਈ\") ਸੱਚ ਹੈ \nਚੈੱਕ ਕਰੋ _ ਜੇਕਰ _ ਆਖਰੀ _ ਚਾਰ _ ਇੱਕ _ ਅੱਖਰ ਹੈ (\"ਐਪਲ ਪਾਈ ਈ\") ਗਲਤ ਹੈ \nਚੈੱਕ ਕਰੋ _ ਜੇਕਰ _ ਆਖਰੀ _ ਚਾਰ _ ਹੈ _ a _ ਅੱਖਰ (\"\") ਗਲਤ ਹੈ", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/62", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := can_arrange([]int{1, 2, 4, 3, 5})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := can_arrange([]int{1, 2, 4, 5})\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := can_arrange([]int{1, 4, 2, 5, 6, 7, 8, 9, 10})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := can_arrange([]int{4, 8, 5, 7, 3})\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := can_arrange([]int{})\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਤੱਤ ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਸੂਚਕਾਂਕ ਦਿੰਦਾ ਹੈ ਜੋ \nਇਸ ਤੋਂ ਤੁਰੰਤ ਪਹਿਲਾਂ ਵਾਲੇ ਤੱਤ ਤੋਂ ਵੱਡਾ ਜਾਂ ਬਰਾਬਰ ਨਹੀਂ ਹੈ। \nਅਜਿਹਾ ਕੋਈ ਤੱਤ ਮੌਜੂਦ ਨਹੀਂ ਹੈ ਤਾਂ-1 ਵਾਪਸ ਕਰੋ। ਦਿੱਤੀ ਗਈ ਐਰੇ ਵਿੱਚ ਸ਼ਾਮਲ ਨਹੀਂ ਹੋਵੇਗਾ \nਡੁਪਲੀਕੇਟ ਮੁੱਲ. \n\nਉਦਾਹਰਨਾਂਃ \nਕਰ ਸਕਦੇ ਹਨ ([1,2,4, 3,5]) = 3 \nਕਰ ਸਕਦੇ ਹੋ ([1,2,3]) =-1", "entry_point": "can_arrange", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/63", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n\texpected_1 := []interface{}{nil, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_smallest_integers([]int{2, 4, 1, 3, 5, 7, 0})\n\texpected_2 := []interface{}{nil, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_smallest_integers([]int{1, 3, 2, 4, 5, 6, -2})\n\texpected_3 := []interface{}{-2, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := largest_smallest_integers([]int{4, 5, 3, 6, 2, 7, -7})\n\texpected_4 := []interface{}{-7, 2}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := largest_smallest_integers([]int{7, 3, 8, 4, 9, 2, 5, -9})\n\texpected_5 := []interface{}{-9, 2}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := largest_smallest_integers([]int{})\n\texpected_6 := []interface{}{nil, nil}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := largest_smallest_integers([]int{0})\n\texpected_7 := []interface{}{nil, nil}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := largest_smallest_integers([]int{-1, -3, -5, -6})\n\texpected_8 := []interface{}{-1, nil}\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := largest_smallest_integers([]int{-1, -3, -5, -6, 0})\n\texpected_9 := []interface{}{-1, nil}\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := largest_smallest_integers([]int{-6, -4, -4, -3, 1})\n\texpected_10 := []interface{}{-3, 1}\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := largest_smallest_integers([]int{-6, -4, -4, -3, -100, 1})\n\texpected_11 := []interface{}{-3, 1}\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਟੁਪਲ (a, b) ਦਿੰਦਾ ਹੈ, ਜਿੱਥੇ'a'ਹੈ। \nਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕਾਂ ਵਿੱਚੋਂ ਸਭ ਤੋਂ ਵੱਡਾ, ਅਤੇ'b'ਸਭ ਤੋਂ ਛੋਟਾ ਹੈ \nਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ। \nਜੇਕਰ ਕੋਈ ਨਕਾਰਾਤਮਕ ਜਾਂ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ, ਤਾਂ ਉਹਨਾਂ ਨੂੰ None ਦੇ ਰੂਪ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। \n\nਉਦਾਹਰਨਾਂਃ \nਸਭ ਤੋਂ ਵੱਡੇ _ ਸਭ ਤੋਂ ਛੋਟੇ _ ਪੂਰਨ ਅੰਕ ([2,4,1,3,5,7]) = = (ਕੋਈ ਨਹੀਂ, 1) \nਸਭ ਤੋਂ ਵੱਡੇ _ ਸਭ ਤੋਂ ਛੋਟੇ _ ਪੂਰਨ ਅੰਕ ([]) = = (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ) \nਸਭ ਤੋਂ ਵੱਡੇ _ ਸਭ ਤੋਂ ਛੋਟੇ _ ਪੂਰਨ ਅੰਕ ([0]) = = (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ)", "entry_point": "largest_smallest_integers", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/64", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := special_factorial(4)\n\texpected_1 := 288\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := special_factorial(5)\n\texpected_2 := 34560\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := special_factorial(7)\n\texpected_3 := 125411328000\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := special_factorial(1)\n\texpected_4 := 1\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਬ੍ਰਾਜ਼ੀਲ ਦੇ ਫੈਕਟੋਰੀਅਲ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਗਿਆ ਹੈਃ \nਬ੍ਰਾਜ਼ਿਲੀਅਨ _ ਫੈਕਟੋਰੀਅਲ (n) = n! * (n-1)! * (n-2)! *... * 1! \nਜਿੱਥੇ n> 0 \n\nਉਦਾਹਰਨ ਲਈਃ \n>>> ਸਪੈਸ਼ਲ _ ਫੈਕਟੋਰੀਅਲ (4) \n288 \n\nਫੰਕਸ਼ਨ ਇੱਕ ਪੂਰਨ ਅੰਕ ਨੂੰ ਇੰਪੁੱਟ ਦੇ ਰੂਪ ਵਿੱਚ ਪ੍ਰਾਪਤ ਕਰੇਗਾ ਅਤੇ ਵਿਸ਼ੇਸ਼ ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ \nਇਸ ਪੂਰਨ ਅੰਕ ਦਾ ਫੈਕਟੋਰੀਅਲ।", "entry_point": "special_factorial", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/65", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := words_in_sentence(\"This is a test\")\n\texpected_1 := \"is\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := words_in_sentence(\"lets go for swimming\")\n\texpected_2 := \"go for\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := words_in_sentence(\"there is no place available here\")\n\texpected_3 := \"there is no place\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := words_in_sentence(\"Hi I am Hussein\")\n\texpected_4 := \"Hi am Hussein\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := words_in_sentence(\"go for it\")\n\texpected_5 := \"go for it\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := words_in_sentence(\"here\")\n\texpected_6 := \"\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := words_in_sentence(\"here is\")\n\texpected_7 := \"is\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ ਜੋ ਇੱਕ ਵਾਕ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, \nਵਾਕ ਵਿੱਚ ਕੁਝ ਸ਼ਬਦ ਹੁੰਦੇ ਹਨ ਜੋ ਇੱਕ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਜਾਂਦੇ ਹਨ, \nਅਤੇ ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ ਜਿਸ ਵਿੱਚ ਮੂਲ ਵਾਕ ਦੇ ਸ਼ਬਦ ਸ਼ਾਮਲ ਹਨ, \nਜਿਸ ਦੀ ਲੰਬਾਈ ਮੁੱਖ ਸੰਖਿਆਵਾਂ ਹਨ, \nਨਵੀਂ ਸਤਰ ਵਿੱਚ ਸ਼ਬਦਾਂ ਦਾ ਕ੍ਰਮ ਮੂਲ ਦੇ ਸਮਾਨ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। \n\nਉਦਾਹਰਨ 1: \nਇਨਪੁਟਃ ਵਾਕ = \"ਇਹ ਇੱਕ ਟੈਸਟ ਹੈ\" \nਆਉਟਪੁੱਟਃ \"is\" \n\nਉਦਾਹਰਨ 2: \nਇਨਪੁਟਃ ਵਾਕ = \"ਚਲੋ ਤੈਰਾਕੀ ਲਈ ਚੱਲੀਏ\" \nਆਉਟਪੁੱਟਃ \"ਲਈ ਜਾਓ\" \n\nਪਾਬੰਦੀਆਂਃ \n* 1 <= ਲੇਨ (ਵਾਕ) <= 100 \n* ਵਾਕ ਵਿੱਚ ਸਿਰਫ਼ ਅੱਖਰ ਹੁੰਦੇ ਹਨ", "entry_point": "words_in_sentence", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/66", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := simplify(\"1/5\",\"5/1\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := simplify(\"1/6\",\"2/1\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := simplify(\"5/1\",\"3/1\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := simplify(\"7/10\",\"10/2\")\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := simplify(\"2/10\",\"50/10\")\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := simplify(\"7/2\",\"4/2\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := simplify(\"11/6\",\"6/1\")\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := simplify(\"2/3\",\"5/2\")\n\texpected_8 := false\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := simplify(\"5/2\",\"3/5\")\n\texpected_9 := false\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := simplify(\"2/4\",\"8/4\")\n\texpected_10 := true\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := simplify(\"2/4\",\"4/2\")\n\texpected_11 := true\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := simplify(\"1/5\",\"5/1\")\n\texpected_12 := true\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := simplify(\"1/5\",\"1/5\")\n\texpected_13 := false\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਡਾ ਕੰਮ ਇੱਕ ਫੰਕਸ਼ਨ ਨੂੰ ਲਾਗੂ ਕਰਨਾ ਹੈ ਜੋ ਸਮੀਕਰਨ ਨੂੰ ਸਰਲ ਬਣਾਵੇਗਾ। \nx * n. ਫੰਕਸ਼ਨ ਸਹੀ ਦਿੰਦਾ ਹੈ ਜੇਕਰ x * n ਇੱਕ ਸੰਪੂਰਨ ਸੰਖਿਆ ਦਾ ਮੁੱਲਾਂਕਣ ਕਰਦਾ ਹੈ ਅਤੇ ਗਲਤ \nਨਹੀਂ ਤਾਂ. x ਅਤੇ n ਦੋਵੇਂ, ਇੱਕ ਅੰਸ਼ ਦੀ ਸਤਰ ਨੁਮਾਇੰਦਗੀ ਹਨ, ਅਤੇ ਹੇਠ ਦਿੱਤਾ ਫਾਰਮੈਟ ਹੈ, \nਜਿੱਥੇ ਅੰਕ ਅਤੇ ਅੰਕ ਦੋਵੇਂ ਸਕਾਰਾਤਮਕ ਸੰਪੂਰਨ ਸੰਖਿਆਵਾਂ ਹੁੰਦੀਆਂ ਹਨ। \n\nਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ x, ਅਤੇ n ਜਾਇਜ਼ ਅੰਸ਼ ਹਨ, ਅਤੇ ਅੰਕ ਦੇ ਰੂਪ ਵਿੱਚ ਜ਼ੀਰੋ ਨਹੀਂ ਹਨ। \n\nਸਰਲ ਬਣਾਓ (\"1/5\", \"5/1\") = ਸੱਚ \nਸਰਲ ਬਣਾਓ (\"1/6\", \"2/1\") = ਗਲਤ \nਸਰਲ ਬਣਾਓ (\"7/10\", \"10/2\") = ਗਲਤ", "entry_point": "simplify", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/67", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := order_by_points([]int{1, 11, -1, -11, -12})\n\texpected_1 := []int{-1, -11, 1, -12, 11}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := order_by_points([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46})\n\texpected_2 := []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := order_by_points([]int{})\n\texpected_3 := []int{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := order_by_points([]int{1, -11, -32, 43, 54, -98, 2, -3})\n\texpected_4 := []int{-3, -32, -98, -11, 1, 2, 43, 54}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := order_by_points([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11})\n\texpected_5 := []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := order_by_points([]int{0, 6, 6, -76, -21, 23, 4})\n\texpected_6 := []int{-76, -21, 0, 4, 23, 6, 6}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਪੂਰਨ ਅੰਕਾਂ ਦੀ ਦਿੱਤੀ ਸੂਚੀ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰਦਾ ਹੈ \nਉਹਨਾਂ ਦੇ ਅੰਕਾਂ ਦੇ ਜੋਡ਼ ਅਨੁਸਾਰ ਚਡ਼੍ਹਦੇ ਕ੍ਰਮ ਵਿੱਚ। \nਨੋਟਃ ਜੇ ਇੱਥੇ ਕਈ ਆਈਟਮਾਂ ਹਨ ਜੋ ਉਹਨਾਂ ਦੇ ਅੰਕਾਂ ਦੇ ਇੱਕੋ ਜਿਹੇ ਜੋਡ਼ ਨਾਲ ਹਨ, \nਉਹਨਾਂ ਨੂੰ ਮੂਲ ਸੂਚੀ ਵਿੱਚ ਉਹਨਾਂ ਦੇ ਸੂਚਕਾਂਕ ਦੇ ਅਧਾਰ ਤੇ ਆਰਡਰ ਕਰੋ। \n\nਉਦਾਹਰਨ ਲਈਃ \n>>> ਆਰਡਰ _ ਬਾਈ _ ਪੁਆਇੰਟ ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ਆਰਡਰ _ ਬਾਈ _ ਪੁਆਇੰਟਸ ([]) = = []", "entry_point": "order_by_points", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/68", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := specialFilter([]int{5, -2, 1, -5})\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := specialFilter([]int{15, -73, 14, -15})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := specialFilter([]int{33, -2, -3, 45, 21, 109})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := specialFilter([]int{43, -12, 93, 125, 121, 109})\n\texpected_4 := 4\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := specialFilter([]int{71, -2, -33, 75, 21, 19})\n\texpected_5 := 3\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := specialFilter([]int{1})\n\texpected_6 := 0\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := specialFilter([]int{})\n\texpected_7 := 0\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸੰਖਿਆਵਾਂ ਦੀ ਇੱਕ ਲਡ਼ੀ ਨੂੰ ਇੰਪੁੱਟ ਅਤੇ ਰਿਟਰਨ ਵਜੋਂ ਲੈਂਦਾ ਹੈ \nਐਰੇ ਵਿੱਚ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਜੋ 10 ਤੋਂ ਵੱਧ ਹੈ ਅਤੇ ਦੋਵੇਂ \nਕਿਸੇ ਸੰਖਿਆ ਦੇ ਪਹਿਲੇ ਅਤੇ ਆਖਰੀ ਅੰਕ ਅਜੀਬ (1,3,5,7,9) ਹੁੰਦੇ ਹਨ। \nਉਦਾਹਰਨ ਲਈਃ \nਸਪੈਸ਼ਲਫਿਲਟਰ ([15,-73,14,-15]) => 1 \nਵਿਸ਼ੇਸ਼ ਫਿਲਟਰ ([33,-2,-3,45,21,109]) => 2", "entry_point": "specialFilter", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/69", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_max_triples(5)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_max_triples(6)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_max_triples(10)\n\texpected_3 := 36\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := get_max_triples(100)\n\texpected_4 := 53361\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ। ਤੁਹਾਨੂੰ n ਦੀ ਲੰਬਾਈ ਦਾ ਇੱਕ ਪੂਰਨ ਅੰਕ ਐਰੇ ਬਣਾਉਣਾ ਪਵੇਗਾ। \nਹਰੇਕ i (1 ≤ i ≤ n) ਲਈ, a [i] = i * i-i + 1 ਦਾ ਮੁੱਲ ਹੈ। \na ਦੇ ਤਿੰਨਾਂ ਦੀ ਗਿਣਤੀ (a [i], a [j], a [k]) ਵਾਪਸ ਕਰੋ ਜਿੱਥੇ i <j <k, \nਅਤੇ a [i] + a [j] + a [k] 3 ਦਾ ਮਲਟੀਪਲ ਹੁੰਦਾ ਹੈ। \n\nਉਦਾਹਰਨਃ \nਇੰਪੁੱਟਃ n = 5 \nਆਉਟਪੁੱਟਃ 1 \nਵਿਆਖਿਆਃ \na = [1,3,7,13,21] \nਇੱਕੋ ਇੱਕ ਵੈਧ ਟ੍ਰਿਪਲ (1,7,13) ਹੈ।", "entry_point": "get_max_triples", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/70", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := bf(\"Jupiter\",\"Neptune\")\n\texpected_1 := []string{\"Saturn\", \"Uranus\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := bf(\"Earth\",\"Mercury\")\n\texpected_2 := []string{\"Venus\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := bf(\"Mercury\",\"Uranus\")\n\texpected_3 := []string{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := bf(\"Neptune\",\"Venus\")\n\texpected_4 := []string{\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := bf(\"Earth\",\"Earth\")\n\texpected_5 := []string{}\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := bf(\"Mars\",\"Earth\")\n\texpected_6 := []string{}\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := bf(\"Jupiter\",\"Makemake\")\n\texpected_7 := []string{}\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਸਾਡੇ ਸੂਰਜੀ ਮੰਡਲ ਵਿੱਚ ਅੱਠ ਗ੍ਰਹਿ ਹਨਃ ਸੂਰਜ ਦੇ ਸਭ ਤੋਂ ਨੇਡ਼ੇ \nਬੁਧ ਹੈ, ਅਗਲਾ ਸ਼ੁੱਕਰ ਹੈ, ਫਿਰ ਧਰਤੀ, ਮੰਗਲ, ਜੁਪੀਟਰ, ਸ਼ਨੀਵਾਰ, \nਯੂਰੇਨਸ, ਨੇਪਚਿਊਨ। \nਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਦੋ ਗ੍ਰਹਿਆਂ ਦੇ ਨਾਮ ਗ੍ਰਹਿ 1 ਅਤੇ ਗ੍ਰਹਿ 2 ਦੇ ਰੂਪ ਵਿੱਚ ਲੈਂਦਾ ਹੈ। \nਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸਾਰੇ ਗ੍ਰਹਿ ਹੁੰਦੇ ਹਨ ਜਿਨ੍ਹਾਂ ਦੇ ਚੱਕਰ ਹਨ \nਗ੍ਰਹਿ 1 ਦੇ ਚੱਕਰ ਅਤੇ ਗ੍ਰਹਿ 2 ਦੇ ਚੱਕਰ ਦੇ ਵਿਚਕਾਰ ਸਥਿਤ, ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ \nਸੂਰਜ ਦੀ ਨੇਡ਼ਤਾ. \nਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇਕਰ ਗ੍ਰਹਿ 1 ਜਾਂ ਗ੍ਰਹਿ 2 \nਇਹ ਗ੍ਰਹਿਆਂ ਦੇ ਸਹੀ ਨਾਮ ਨਹੀਂ ਹਨ। \nਉਦਾਹਰਣਾਂ \nbf (\"ਜੁਪੀਟਰ\", \"ਨੇਪਚੂਨ\") = => (\"ਸੈਟਰਨ\", \"ਯੂਰੇਨਸ\") \nbf (\"ਧਰਤੀ\", \"ਮਰਕਰੀ\") = => (\"ਵੀਨਸ\") \nbf (\"ਮਰਕਰੀ\", \"ਯੂਰੇਨਸ\") = => (\"ਵੀਨਸ\", \"ਧਰਤੀ\", \"ਮੰਗਲ\", \"ਜੁਪੀਟਰ\", \"ਸੈਟਰਨ\")", "entry_point": "bf", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/71", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := x_or_y(7,34,12)\n\texpected_1 := 34\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := x_or_y(15,8,5)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := x_or_y(3,33,5212)\n\texpected_3 := 33\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := x_or_y(1259,3,52)\n\texpected_4 := 3\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := x_or_y(7919,-1,12)\n\texpected_5 := -1\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := x_or_y(3609,1245,583)\n\texpected_6 := 583\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := x_or_y(91,56,129)\n\texpected_7 := 129\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := x_or_y(6,34,1234)\n\texpected_8 := 1234\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := x_or_y(1,2,0)\n\texpected_9 := 0\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := x_or_y(2,2,0)\n\texpected_10 := 2\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਧਾਰਨ ਪ੍ਰੋਗਰਾਮ ਜਿਸ ਨੂੰ x ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇਕਰ n ਹੈ \nਇੱਕ ਪ੍ਰਾਈਮ ਨੰਬਰ ਅਤੇ y ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ। \n\nਉਦਾਹਰਨਾਂਃ \nx _ ਜਾਂ _ y ਲਈ (7,34,12) = = 34 \nx _ ਜਾਂ _ y ਲਈ (15,8,5) = = 5", "entry_point": "x_or_y", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/72", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := double_the_difference([]interface{}{})\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := double_the_difference([]interface{}{5, 4})\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := double_the_difference([]interface{}{0.1, 0.2, 0.3})\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := double_the_difference([]interface{}{-10, -20, -30})\n\texpected_4 := 0\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := double_the_difference([]interface{}{-1, -2, 8})\n\texpected_5 := 0\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := double_the_difference([]interface{}{0.2, 3, 5})\n\texpected_6 := 34\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := double_the_difference([]interface{}{-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99})\n\texpected_7 := 166650\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n}", "language": "go", "description": "ਸੰਖਿਆਵਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਤਾਂ ਸੰਖਿਆਵਾਂ ਦੇ ਵਰਗਾਂ ਦਾ ਜੋਡ਼ ਵਾਪਸ ਕਰੋ। \nਸੂਚੀ ਵਿੱਚ ਜੋ ਅਜੀਬ ਹਨ। ਉਹਨਾਂ ਸੰਖਿਆਵਾਂ ਨੂੰ ਨਜ਼ਰਅੰਦਾਜ਼ ਕਰੋ ਜੋ ਨਕਾਰਾਤਮਕ ਹਨ ਜਾਂ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ। \n\nਡਬਲ _ ਦ _ ਫਰਕ ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nਡਬਲ _ ਦ _ ਫਰਕ ([-1,2,0]) = = 0 \nਡਬਲ _ ਦ _ ਫਰਕ ([9,-2]) = = 81 \nਡਬਲ _ ਦ _ ਫਰਕ ([0]) = = 0 \n\nਜੇਕਰ ਇੰਪੁੱਟ ਸੂਚੀ ਖਾਲੀ ਹੈ, ਤਾਂ 0 ਵਾਪਸ ਕਰੋ।", "entry_point": "double_the_difference", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/73", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Strongest_Extension(\"Watashi\",[]string{\"tEN\", \"niNE\", \"eIGHt8OKe\"})\n\texpected_1 := \"Watashi.eIGHt8OKe\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Strongest_Extension(\"Boku123\",[]string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"})\n\texpected_2 := \"Boku123.YEs.WeCaNe\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Strongest_Extension(\"__YESIMHERE\",[]string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"})\n\texpected_3 := \"__YESIMHERE.NuLl__\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := Strongest_Extension(\"K\",[]string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"})\n\texpected_4 := \"K.TAR\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := Strongest_Extension(\"__HAHA\",[]string{\"Tab\", \"123\", \"781345\", \"-_-\"})\n\texpected_5 := \"__HAHA.123\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := Strongest_Extension(\"YameRore\",[]string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"})\n\texpected_6 := \"YameRore.okIWILL123\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := Strongest_Extension(\"finNNalLLly\",[]string{\"Die\", \"NowW\", \"Wow\", \"WoW\"})\n\texpected_7 := \"finNNalLLly.WoW\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := Strongest_Extension(\"_\",[]string{\"Bb\", \"91245\"})\n\texpected_8 := \"_.Bb\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := Strongest_Extension(\"Sp\",[]string{\"671235\", \"Bb\"})\n\texpected_9 := \"Sp.671235\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ ਕਲਾਸ (ਇੱਕ ਸਤਰ) ਦਾ ਨਾਮ ਅਤੇ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਜਾਵੇਗੀ। \nਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਵਰਤੋਂ ਕਲਾਸ ਵਿੱਚ ਵਾਧੂ ਕਲਾਸਾਂ ਨੂੰ ਲੋਡ ਕਰਨ ਲਈ ਕੀਤੀ ਜਾਣੀ ਹੈ। \nਐਕਸਟੈਂਸ਼ਨ ਦੀ ਤਾਕਤ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਹੈਃ ਮੰਨ ਲਓ ਕਿ CAP ਵੱਡੇ ਅੱਖਰ ਦੀ ਸੰਖਿਆ ਹੈ। \nਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ ਅੱਖਰ, ਅਤੇ ਮੰਨ ਲਓ ਕਿ ਐੱਸ. ਐੱਮ. ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈ। \nਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ, ਤਾਕਤ CAP-SM ਦੇ ਅੰਸ਼ ਦੁਆਰਾ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਲੱਭਣੀ ਚਾਹੀਦੀ ਹੈ ਅਤੇ ਇਸ ਵਿੱਚ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। \nਫਾਰਮੈਟਃ ClassName.StrongestExtensionName। \nਜੇ ਇੱਕੋ ਤਾਕਤ ਦੇ ਨਾਲ ਦੋ ਜਾਂ ਦੋ ਤੋਂ ਵੱਧ ਐਕਸਟੈਂਸ਼ਨ ਹਨ, ਤਾਂ ਤੁਹਾਨੂੰ ਚਾਹੀਦਾ ਹੈ \nਸੂਚੀ ਵਿੱਚ ਸਭ ਤੋਂ ਪਹਿਲਾਂ ਆਉਣ ਵਾਲੇ ਨੂੰ ਚੁਣੋ। \nਉਦਾਹਰਨ ਲਈ, ਜੇ ਤੁਹਾਨੂੰ ਕਲਾਸ ਅਤੇ ਸੂਚੀ ਦੇ ਰੂਪ ਵਿੱਚ \"ਸਲਾਈਸ\" ਦਿੱਤਾ ਗਿਆ ਹੈ \nਐਕਸਟੈਂਸ਼ਨਃ ['SERVINGSliCes','ਚੀਜ਼','ਸਟੂਫੈਡ'] ਤਾਂ ਤੁਹਾਨੂੰ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ \n'Slices.SErviNGSliCes'ਵਾਪਸ ਕਰੋ ਕਿਉਂਕਿ'SERVINGSliCes'ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਹੈ \n(ਇਸ ਦੀ ਤਾਕਤ-1 ਹੈ)। \nਉਦਾਹਰਨਃ \nਸਭ ਤੋਂ ਮਜ਼ਬੂਤ _ ਐਕਸਟੈਂਸ਼ਨ ਲਈ ('ਮੇਰੀ _ ਕਲਾਸ', ['AA','Be','CC']) = ='my_class.AA'", "entry_point": "Strongest_Extension", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/74", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cycpattern_check(\"xyzw\",\"xyw\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cycpattern_check(\"yello\",\"ell\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cycpattern_check(\"whattup\",\"ptut\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := cycpattern_check(\"efef\",\"fee\")\n\texpected_4 := true\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := cycpattern_check(\"abab\",\"aabb\")\n\texpected_5 := false\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := cycpattern_check(\"winemtt\",\"tinem\")\n\texpected_6 := true\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ 2 ਸ਼ਬਦ ਦਿੱਤੇ ਗਏ ਹਨ। ਤੁਹਾਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨ ਦੀ ਜ਼ਰੂਰਤ ਹੈ ਜੇਕਰ ਦੂਜਾ ਸ਼ਬਦ ਜਾਂ ਇਸ ਦੀਆਂ ਰੋਟੇਸ਼ਨਾਂ ਵਿੱਚੋਂ ਕੋਈ ਵੀ ਪਹਿਲੇ ਸ਼ਬਦ ਵਿੱਚ ਇੱਕ ਸਬਸਟਰਿੰਗ ਹੈ। \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਏ. ਬੀ. ਸੀ. ਡੀ\"., \"ਏ. ਬੀ. ਡੀ\".) => ਗਲਤ \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਹੈਲੋ\", \"ਈਲ\") => ਸੱਚ \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਵ੍ਹਾਸਅਪ\", \"ਪੀਸਸ\") => ਗਲਤ \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਅਬਾਬ\", \"ਬਾ\") => ਸੱਚ \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਈ. ਐੱਫ. ਈ. ਐੱਫ\"., \"ਈ. ਈ. ਐੱਫ. ਐੱਫ\".) => ਗਲਤ \nਸਾਈਕਪੈਟਰਨ _ ਚੈੱਕ (\"ਹਿਮੇਨਸ\", \"ਸਿਮੇਨ\") => ਸੱਚ", "entry_point": "cycpattern_check", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/75", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := int_to_mini_roman(19)\n\texpected_1 := \"xix\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := int_to_mini_roman(152)\n\texpected_2 := \"clii\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := int_to_mini_roman(251)\n\texpected_3 := \"ccli\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := int_to_mini_roman(426)\n\texpected_4 := \"cdxxvi\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := int_to_mini_roman(500)\n\texpected_5 := \"d\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := int_to_mini_roman(1)\n\texpected_6 := \"i\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := int_to_mini_roman(4)\n\texpected_7 := \"iv\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := int_to_mini_roman(43)\n\texpected_8 := \"xliii\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := int_to_mini_roman(90)\n\texpected_9 := \"xc\"\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := int_to_mini_roman(94)\n\texpected_10 := \"xciv\"\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := int_to_mini_roman(532)\n\texpected_11 := \"dxxxii\"\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n\tactual_12 := int_to_mini_roman(900)\n\texpected_12 := \"cm\"\n\tdeepCompare(actual_12, expected_12, \"Exception --- test case 11 failed to pass\")\n\n\tactual_13 := int_to_mini_roman(994)\n\texpected_13 := \"cmxciv\"\n\tdeepCompare(actual_13, expected_13, \"Exception --- test case 12 failed to pass\")\n\n\tactual_14 := int_to_mini_roman(1000)\n\texpected_14 := \"m\"\n\tdeepCompare(actual_14, expected_14, \"Exception --- test case 13 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਿੱਤੇ ਜਾਣ ਉੱਤੇ, ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਇਸਦੇ ਰੋਮਨ ਅੰਕ ਦੇ ਬਰਾਬਰ ਪ੍ਰਾਪਤ ਕਰੋ, \nਅਤੇ ਇਸ ਨੂੰ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਵਾਪਸ ਕਰ ਦਿਓ। \nਪਾਬੰਦੀਆਂਃ 1 <= num <= 1000 \n\nਉਦਾਹਰਨਾਂਃ \n>> ਇੰਟ _ ਤੋਂ _ ਮਿਨੀ _ ਰੋਮਨ (19) = ='xix'\n>> ਇੰਟ _ ਟੂ _ ਮਿਨੀ _ ਰੋਮਨ (152) = ='ਕਲਿ'\n>> ਇੰਟ _ ਤੋਂ _ ਮਿਨੀ _ ਰੋਮਨ (426) = ='cdxxvi'", "entry_point": "int_to_mini_roman", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/76", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := right_angle_triangle(3,4,5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := right_angle_triangle(1,2,3)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := right_angle_triangle(10,6,8)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := right_angle_triangle(2,2,2)\n\texpected_4 := false\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := right_angle_triangle(7,24,25)\n\texpected_5 := true\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := right_angle_triangle(10,5,7)\n\texpected_6 := false\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := right_angle_triangle(5,12,13)\n\texpected_7 := true\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := right_angle_triangle(15,8,17)\n\texpected_8 := true\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n\tactual_9 := right_angle_triangle(48,55,73)\n\texpected_9 := true\n\tdeepCompare(actual_9, expected_9, \"Exception --- test case 8 failed to pass\")\n\n\tactual_10 := right_angle_triangle(1,1,1)\n\texpected_10 := false\n\tdeepCompare(actual_10, expected_10, \"Exception --- test case 9 failed to pass\")\n\n\tactual_11 := right_angle_triangle(2,2,10)\n\texpected_11 := false\n\tdeepCompare(actual_11, expected_11, \"Exception --- test case 10 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ। ਸਹੀ ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਤਿੰਨੋਂ \nਪਾਸੇ ਇੱਕ ਸੱਜੇ-ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ, ਨਹੀਂ ਤਾਂ ਗਲਤ। \nਇੱਕ ਸੱਜੇ ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਇੱਕ ਤਿਕੋਣ ਹੁੰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਇੱਕ ਕੋਣ ਸੱਜੇ ਕੋਣ ਜਾਂ \n90 ਡਿਗਰੀ. \nਉਦਾਹਰਨਃ \nਸੱਜੇ ਕੋਣ ਦਾ ਤਿਕੋਣ (3,4,5) = = ਸੱਚਾ \nਸੱਜੇ ਕੋਣ ਦਾ ਤਿਕੋਣ (1,2,3) = = ਗਲਤ", "entry_point": "right_angle_triangle", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/77", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solve(\"AsDf\")\n\texpected_1 := \"aSdF\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solve(\"1234\")\n\texpected_2 := \"4321\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solve(\"ab\")\n\texpected_3 := \"AB\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := solve(\"#a@C\")\n\texpected_4 := \"#A@c\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n\tactual_5 := solve(\"#AsdfW^45\")\n\texpected_5 := \"#aSDFw^45\"\n\tdeepCompare(actual_5, expected_5, \"Exception --- test case 4 failed to pass\")\n\n\tactual_6 := solve(\"#6@2\")\n\texpected_6 := \"2@6#\"\n\tdeepCompare(actual_6, expected_6, \"Exception --- test case 5 failed to pass\")\n\n\tactual_7 := solve(\"#$a^D\")\n\texpected_7 := \"#$A^d\"\n\tdeepCompare(actual_7, expected_7, \"Exception --- test case 6 failed to pass\")\n\n\tactual_8 := solve(\"#ccc\")\n\texpected_8 := \"#CCC\"\n\tdeepCompare(actual_8, expected_8, \"Exception --- test case 7 failed to pass\")\n\n}", "language": "go", "description": "ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। \nਜੇਕਰ s [i] ਇੱਕ ਅੱਖਰ ਹੈ, ਤਾਂ ਇਸ ਦੇ ਮਾਮਲੇ ਨੂੰ ਹੇਠਲੇ ਤੋਂ ਉੱਪਰ ਵੱਲ ਜਾਂ ਉਲਟ ਕਰੋ, \nਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਜਿਵੇਂ ਹੈ ਉਸੇ ਤਰ੍ਹਾਂ ਰੱਖੋ। \nਜੇ ਸਤਰ ਵਿੱਚ ਕੋਈ ਅੱਖਰ ਨਹੀਂ ਹਨ, ਤਾਂ ਸਤਰ ਨੂੰ ਉਲਟਾ ਦਿਓ। \nਫੰਕਸ਼ਨ ਨੂੰ ਨਤੀਜੇ ਵਾਲੀ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। \nਉਦਾਹਰਣਾਂ \nਹੱਲ ਕਰੋ (\"1234\") = \"4321\" \nਹੱਲ ਕਰੋ (\"ab\") = \"AB\" \nਹੱਲ ਕਰੋ (\"#a @C\") = \"#A @c\"", "entry_point": "solve", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/78", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_to_md5(\"Hello world\")\n\texpected_1 := \"3e25960a79dbc69b674cd4ec67a72c62\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_to_md5(\"\")\n\texpected_2 := nil\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_to_md5(\"A B C\")\n\texpected_3 := \"0ef78513b0cb8cef12743f5aeb35f888\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := string_to_md5(\"password\")\n\texpected_4 := \"5f4dcc3b5aa765d61d8327deb882cf99\"\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਇੱਕ ਸਤਰ'ਟੈਕਸਟ'ਦਿੱਤੇ ਜਾਣ ਉੱਤੇ, ਇਸ ਦੀ md5 ਹੈਸ਼ ਦੇ ਬਰਾਬਰ ਸਤਰ ਵਾਪਸ ਕਰੋ। \nਜੇਕਰ'ਟੈਕਸਟ'ਇੱਕ ਖਾਲੀ ਸਤਰ ਹੈ, ਤਾਂ ਨੱਲ ਵਾਪਸ ਕਰੋ। \n\n>> ਸਤਰ _ ਤੋਂ _ md5 ('ਹੈਲੋ ਵਰਲਡ') = ='3e25960a79dbc69b674cd4ec67a72c62'", "entry_point": "string_to_md5", "canonical_solution": null, "natural_language": "Punjabi"}
{"task_id": "go/79", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := generate_integers(2,10)\n\texpected_1 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := generate_integers(10,2)\n\texpected_2 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := generate_integers(132,2)\n\texpected_3 := []int{2, 4, 6, 8}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n\tactual_4 := generate_integers(17,89)\n\texpected_4 := []int{}\n\tdeepCompare(actual_4, expected_4, \"Exception --- test case 3 failed to pass\")\n\n}", "language": "go", "description": "ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦਿੱਤੇ ਗਏ ਹਨ, ਤਾਂ a ਦੇ ਵਿਚਕਾਰ ਦੇ ਜੋਡ਼ ਅੰਕ ਵਾਪਸ ਕਰੋ। \nਅਤੇ ਬੀ, ਚਡ਼੍ਹਦੇ ਕ੍ਰਮ ਵਿੱਚ। \n\nਉਦਾਹਰਨ ਲਈਃ \nਜਨਰੇਟ _ ਇੰਟੀਜਰਸ (2,8) => [2,4,6,8] \nਜਨਰੇਟ _ ਇੰਟੀਜਰਸ (8,2) => [2,4,6,8] \nਪੂਰਨ ਅੰਕ ਤਿਆਰ ਕਰੋ (10,14) => []", "entry_point": "generate_integers", "canonical_solution": null, "natural_language": "Punjabi"}
