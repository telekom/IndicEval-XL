{"task_id": "perl/0", "entry_point": "below_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = below_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, -3, 1, 2, -3];\nmy $x1 = below_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, -4, 5, 6];\nmy $x2 = below_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\nmy $x3 = below_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\nmy $x4 = below_zero($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\nmy $x5 = below_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "ஒரு வங்கிக் கணக்கில் வைப்பு மற்றும் திரும்பப் பெறும் செயல்பாடுகளின் பட்டியல் உங்களுக்கு வழங்கப்படுகிறது. \nபூஜ்ஜிய இருப்பு. உங்கள் பணி எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்கு கீழே விழுகிறதா என்பதைக் கண்டறிவது, மற்றும் \nஅந்த நேரத்தில் செயல்பாடு சரி என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறு என்று திரும்ப வேண்டும். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,3]) \nபொய். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,-4,5]) \nஉண்மை.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/1", "entry_point": "sum_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = sum_product($arg00);\nmy $v0 = [0, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $x1 = sum_product($arg10);\nmy $v1 = [3, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [100, 0];\nmy $x2 = sum_product($arg20);\nmy $v2 = [100, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 7];\nmy $x3 = sum_product($arg30);\nmy $v3 = [15, 105];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [10];\nmy $x4 = sum_product($arg40);\nmy $v4 = [10, 10];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் பெருக்கல் ஆகியவற்றைக் கொண்ட ஒரு டப்பிளைத் திருப்பித் தரவும். \nகாலியான தொகை 0 க்கு சமமாகவும், காலியான பெருக்கல் 1 க்கு சமமாகவும் இருக்க வேண்டும். \n>>> கூட்டுத்தொகை ([]) \n(0,1) \n>> தொகை _ தயாரிப்பு ([1,2,3,4]) \n(10,24)", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/2", "entry_point": "string_xor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"111000\";\nmy $arg01 = \"101010\";\nmy $x0 = string_xor($arg00, $arg01);\nmy $v0 = \"010010\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1\";\nmy $arg11 = \"1\";\nmy $x1 = string_xor($arg10, $arg11);\nmy $v1 = \"0\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0101\";\nmy $arg21 = \"0000\";\nmy $x2 = string_xor($arg20, $arg21);\nmy $v2 = \"0101\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "உள்ளீடு என்பது 1s மற்றும் 0s ஐ மட்டுமே கொண்ட இரண்டு சரங்கள் a மற்றும் b ஆகும். \nஇந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள், மேலும் ரிட்டர்ன் ரிசல்ட்டையும் ஒரு சரமாக வழங்கவும். \n>> சரம் _ xor ('010','110') \n'100'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/3", "entry_point": "longest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = longest($arg00);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"x\", \"y\", \"z\"];\nmy $x1 = longest($arg10);\nmy $v1 = \"x\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\nmy $x2 = longest($arg20);\nmy $v2 = \"zzzz\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "சரங்களின் பட்டியலிலிருந்து, நீளமான சரத்தை திருப்பி அனுப்புங்கள். பல சரங்கள் இருந்தால் முதல் சரத்தை திருப்பி அனுப்புங்கள். \nஅதே நீளமுள்ள சரங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் பூஜ்யத்தைத் திருப்பவும். \n>>> நீளமானது ([]) \n\n>>> நீளமானது (['a','b','c']) \n\"அ\"... \n>>> நீளமானது (['a','bb','ccc']) \n\"சிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசி", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/4", "entry_point": "greatest_common_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 7;\nmy $x0 = greatest_common_divisor($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = greatest_common_divisor($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 49;\nmy $arg21 = 14;\nmy $x2 = greatest_common_divisor($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 144;\nmy $arg31 = 60;\nmy $x3 = greatest_common_divisor($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "a மற்றும் b ஆகிய இரண்டு முழு எண்களின் மிகப் பெரிய பொதுவான வகுத்தியைத் திருப்பித் தரவும். \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (3,5) \n1. \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (25,15) \n5.......................................................................................................................................................................................................", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/5", "entry_point": "sort_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = sort_numbers($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"three\";\nmy $x1 = sort_numbers($arg10);\nmy $v1 = \"three\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"three five nine\";\nmy $x2 = sort_numbers($arg20);\nmy $v2 = \"three five nine\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"five zero four seven nine eight\";\nmy $x3 = sort_numbers($arg30);\nmy $v3 = \"zero four five seven eight nine\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"six five four three two one zero\";\nmy $x4 = sort_numbers($arg40);\nmy $v4 = \"zero one two three four five six\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "உள்ளீடு என்பது'பூஜ்ஜியம்'முதல்'ஒன்பது'வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம் ஆகும். \nசெல்லுபடியாகும் தேர்வுகள்'பூஜ்ஜியம்','ஒன்று','இரண்டு','மூன்று','நான்கு','ஐந்து','ஆறு','ஏழு','எட்டு'மற்றும்'ஒன்பது'ஆகும். \nசிறியது முதல் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தைத் திருப்பவும் \n>>> வரிசைப்படுத்தப்பட்ட எண்கள் ('மூன்று ஒன்று ஐந்து') \n'ஒன் த்ரீ ஃபைவ்'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/6", "entry_point": "rescale_to_unit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2.0, 49.9];\nmy $x0 = rescale_to_unit($arg00);\nmy $v0 = [0.0, 1.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100.0, 49.9];\nmy $x1 = rescale_to_unit($arg10);\nmy $v1 = [1.0, 0.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nmy $x2 = rescale_to_unit($arg20);\nmy $v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\nmy $x3 = rescale_to_unit($arg30);\nmy $v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\nmy $x4 = rescale_to_unit($arg40);\nmy $v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு உறுப்புகளின்), அந்த பட்டியலுக்கு ஒரு நேரியல் மாற்றத்தைப் பயன்படுத்துங்கள், \nஅதாவது மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும். \n>> மீட்டமை _ முதல் _ அலகு வரை ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/7", "entry_point": "flip_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = flip_case($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello!\";\nmy $x1 = flip_case($arg10);\nmy $v1 = \"hELLO!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"These violent delights have violent ends\";\nmy $x2 = flip_case($arg20);\nmy $v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும். \n>>> ஃபிளிப் கேஸ் ('ஹலோ') \n'ஹலோ'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/8", "entry_point": "get_positive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 4, 5, 6];\nmy $x0 = get_positive($arg00);\nmy $v0 = [4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\nmy $x1 = get_positive($arg10);\nmy $v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2];\nmy $x2 = get_positive($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = get_positive($arg30);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திருப்பி அனுப்புங்கள். \n>>> பெட் பாசிட்டிவ் ([-1,2,-4,5,6]) \n[2,5,6] \n>>> நேர்மறையைப் பெறுங்கள் ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/9", "entry_point": "is_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = is_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 101;\nmy $x1 = is_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = is_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 13441;\nmy $x3 = is_prime($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 61;\nmy $x4 = is_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4;\nmy $x5 = is_prime($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 1;\nmy $x6 = is_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 5;\nmy $x7 = is_prime($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 11;\nmy $x8 = is_prime($arg80);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 17;\nmy $x9 = is_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 85;\nmy $x10 = is_prime($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 77;\nmy $x11 = is_prime($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 255379;\nmy $x12 = is_prime($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட எண் பகா எண்ணாக இருந்தால் சரி என்றும், இல்லையெனில் தவறு என்றும் காட்டவும். \n>>> என்பது _ பிரைம் (6) \nபொய். \n>>> என்பது _ பிரைம் (101) \nஉண்மை. \n>>> என்பது _ பிரைம் (11) \nஉண்மை. \n>>> is _ Prime (13441) \nஉண்மை. \n>>> என்பது _ பிரைம் (61) \nஉண்மை. \n>>> என்பது _ பிரைம் (4) \nபொய். \n>>> என்பது _ பிரைம் (1) \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/10", "entry_point": "unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\nmy $x0 = unique($arg00);\nmy $v0 = [0, 2, 3, 5, 9, 123];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\n", "description": "ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளை திருப்பி அனுப்பவும் \n>>> தனித்துவமானது ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/11", "entry_point": "prime_fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = prime_fib($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = prime_fib($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = prime_fib($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 4;\nmy $x3 = prime_fib($arg30);\nmy $v3 = 13;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 5;\nmy $x4 = prime_fib($arg40);\nmy $v4 = 89;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 6;\nmy $x5 = prime_fib($arg50);\nmy $v5 = 233;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $x6 = prime_fib($arg60);\nmy $v6 = 1597;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 8;\nmy $x7 = prime_fib($arg70);\nmy $v7 = 28657;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 9;\nmy $x8 = prime_fib($arg80);\nmy $v8 = 514229;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 10;\nmy $x9 = prime_fib($arg90);\nmy $v9 = 433494437;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "பிரைம் _ ஃபைப் n-வது எண்ணை வழங்குகிறது, இது ஒரு ஃபிபோனாச்சி எண் மற்றும் அது பகா எண்ணாகும். \n>>> பிரைம் ஃபைப் (1) \n2. \n>>> பிரைம் ஃபைப் (2) \n3. \n>>> பிரைம் ஃபைப் (3) \n5....................................................................................................................................................................................................... \n>>> பிரைம் ஃபைப் (4) \n13. \n>>> பிரைம் ஃபைப் (5) \n89", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/12", "entry_point": "triples_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = triples_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, -1];\nmy $x1 = triples_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, -2, 1];\nmy $x2 = triples_sum_to_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 7];\nmy $x3 = triples_sum_to_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 5, 7];\nmy $x4 = triples_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 4, -5, 3, 9, 7];\nmy $x5 = triples_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1];\nmy $x6 = triples_sum_to_zero($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 3, 5, -100];\nmy $x7 = triples_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [100, 3, 5, -100];\nmy $x8 = triples_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n\n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> மூன்று மடங்கு _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,9,7]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/13", "entry_point": "pairs_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = pairs_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, -2, 1];\nmy $x1 = pairs_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 7];\nmy $x2 = pairs_sum_to_zero($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, -5, 3, 5, 7];\nmy $x3 = pairs_sum_to_zero($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = pairs_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-3, 9, -1, 3, 2, 30];\nmy $x5 = pairs_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-3, 9, -1, 3, 2, 31];\nmy $x6 = pairs_sum_to_zero($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-3, 9, -1, 4, 2, 30];\nmy $x7 = pairs_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-3, 9, -1, 4, 2, 31];\nmy $x8 = pairs_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,5,7]) \nஉண்மை. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/14", "entry_point": "fib4", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = fib4($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = fib4($arg10);\nmy $v1 = 28;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = fib4($arg20);\nmy $v2 = 104;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 12;\nmy $x3 = fib4($arg30);\nmy $v3 = 386;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "ஃபைப் 4 எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப் 4 (0)-> 0 \nஃபைப் 4 (1)-> 0 \nஃபைப் 4 (2)-> 2 \nஃபைப் 4 (3)-> 0 \nஃபைப் 4 (என்)-> ஃபைப் 4 (என்-1) + ஃபைப் 4 (என்-2) + ஃபைப் 4 (என்-3) + ஃபைப் 4 (என்-4). \nஃபைப் 4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுநிகழ்வைப் பயன்படுத்த வேண்டாம். \n>>> ஃபைப்4 (5) \n4. \n>>> ஃபைப்4 (6) \n8. \n>>> ஃபைப்4 (7) \n14.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/15", "entry_point": "median", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = median($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, 4, 6, 1000, 10, 20];\nmy $x1 = median($arg10);\nmy $v1 = 8.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5];\nmy $x2 = median($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [6, 5];\nmy $x3 = median($arg30);\nmy $v3 = 5.5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [8, 1, 3, 9, 9, 2, 7];\nmy $x4 = median($arg40);\nmy $v4 = 7;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "பட்டியலில் உள்ள உறுப்புகளின் சராசரி l ஐத் திருப்பித் தரவும். \n>>> சராசரி ([3,1,2,4,5]) \n3. \n>>> சராசரி ([-10,4,6,1000,10,20]) \n15. 0", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/16", "entry_point": "is_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = is_palindrome($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aba\";\nmy $x1 = is_palindrome($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aaaaa\";\nmy $x2 = is_palindrome($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"zbcd\";\nmy $x3 = is_palindrome($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"xywyx\";\nmy $x4 = is_palindrome($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xywyz\";\nmy $x5 = is_palindrome($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"xywzx\";\nmy $x6 = is_palindrome($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சரிபார்க்கிறது \n>>> என்பது _ பாலிண்ட்ரோம் (\") \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('அபா') \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('zbcd') \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/17", "entry_point": "remove_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = remove_vowels($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\\nghijklm\";\nmy $x1 = remove_vowels($arg10);\nmy $v1 = \"bcdf\\nghjklm\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fedcba\";\nmy $x2 = remove_vowels($arg20);\nmy $v2 = \"fdcb\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eeeee\";\nmy $x3 = remove_vowels($arg30);\nmy $v3 = \"\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"acBAA\";\nmy $x4 = remove_vowels($arg40);\nmy $v4 = \"cB\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"EcBOO\";\nmy $x5 = remove_vowels($arg50);\nmy $v5 = \"cB\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ybcd\";\nmy $x6 = remove_vowels($arg60);\nmy $v6 = \"ybcd\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "நீக்குதல் உயிரெழுத்துக்கள் என்பது சரத்தை எடுத்து உயிரெழுத்துக்கள் இல்லாமல் சரத்தை திருப்பித் தரும் ஒரு செயல்பாடாகும். \n>>> உயிரெழுத்துக்களை அகற்று (\") \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று (\"abcdef\\ nghijklm\") \n'bcdf\\ nghjklm'\n>>> உயிரெழுத்துக்களை அகற்று ('abcdef') \n'பிசிடிஎஃப்'\n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏபிஏஏ') \n'பி'\n>>> உயிரெழுத்துக்களை அகற்று ('zbcd') \n'zbcd'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/18", "entry_point": "below_threshold", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 10];\nmy $arg01 = 100;\nmy $x0 = below_threshold($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 20, 4, 10];\nmy $arg11 = 5;\nmy $x1 = below_threshold($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 20, 4, 10];\nmy $arg21 = 21;\nmy $x2 = below_threshold($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 20, 4, 10];\nmy $arg31 = 22;\nmy $x3 = below_threshold($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 8, 4, 10];\nmy $arg41 = 11;\nmy $x4 = below_threshold($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 8, 4, 10];\nmy $arg51 = 10;\nmy $x5 = below_threshold($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "பட்டியலில் உள்ள அனைத்து எண்களும் t வரம்பிற்குக் கீழே இருந்தால் சரி என்று திரும்பவும். \n>>> கீழ் வரம்பு ([1,2,4,10], 100) \nஉண்மை. \n>>> கீழ் வரம்பு ([1,20,4,10], 5) \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/19", "entry_point": "add", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $arg01 = 1;\nmy $x0 = add($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 0;\nmy $x1 = add($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 3;\nmy $x2 = add($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5;\nmy $arg31 = 7;\nmy $x3 = add($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 5;\nmy $x4 = add($arg40, $arg41);\nmy $v4 = 12;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 572;\nmy $arg51 = 725;\nmy $x5 = add($arg50, $arg51);\nmy $v5 = 1297;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 51;\nmy $arg61 = 804;\nmy $x6 = add($arg60, $arg61);\nmy $v6 = 855;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 645;\nmy $arg71 = 96;\nmy $x7 = add($arg70, $arg71);\nmy $v7 = 741;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 712;\nmy $arg81 = 853;\nmy $x8 = add($arg80, $arg81);\nmy $v8 = 1565;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 223;\nmy $arg91 = 101;\nmy $x9 = add($arg90, $arg91);\nmy $v9 = 324;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 76;\nmy $arg101 = 29;\nmy $x10 = add($arg100, $arg101);\nmy $v10 = 105;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 416;\nmy $arg111 = 149;\nmy $x11 = add($arg110, $arg111);\nmy $v11 = 565;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 145;\nmy $arg121 = 409;\nmy $x12 = add($arg120, $arg121);\nmy $v12 = 554;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 535;\nmy $arg131 = 430;\nmy $x13 = add($arg130, $arg131);\nmy $v13 = 965;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = 118;\nmy $arg141 = 303;\nmy $x14 = add($arg140, $arg141);\nmy $v14 = 421;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = 287;\nmy $arg151 = 94;\nmy $x15 = add($arg150, $arg151);\nmy $v15 = 381;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = 768;\nmy $arg161 = 257;\nmy $x16 = add($arg160, $arg161);\nmy $v16 = 1025;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = 421;\nmy $arg171 = 677;\nmy $x17 = add($arg170, $arg171);\nmy $v17 = 1098;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = 802;\nmy $arg181 = 814;\nmy $x18 = add($arg180, $arg181);\nmy $v18 = 1616;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = 510;\nmy $arg191 = 922;\nmy $x19 = add($arg190, $arg191);\nmy $v19 = 1432;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = 345;\nmy $arg201 = 819;\nmy $x20 = add($arg200, $arg201);\nmy $v20 = 1164;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = 895;\nmy $arg211 = 436;\nmy $x21 = add($arg210, $arg211);\nmy $v21 = 1331;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = 123;\nmy $arg221 = 424;\nmy $x22 = add($arg220, $arg221);\nmy $v22 = 547;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = 923;\nmy $arg231 = 245;\nmy $x23 = add($arg230, $arg231);\nmy $v23 = 1168;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = 23;\nmy $arg241 = 438;\nmy $x24 = add($arg240, $arg241);\nmy $v24 = 461;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\nmy $arg250 = 565;\nmy $arg251 = 133;\nmy $x25 = add($arg250, $arg251);\nmy $v25 = 698;\nunless(Compare($x25, $v25)) {\n    die \"Exception -- test case 25 did not pass.\";\n}\nmy $arg260 = 945;\nmy $arg261 = 925;\nmy $x26 = add($arg260, $arg261);\nmy $v26 = 1870;\nunless(Compare($x26, $v26)) {\n    die \"Exception -- test case 26 did not pass.\";\n}\nmy $arg270 = 261;\nmy $arg271 = 983;\nmy $x27 = add($arg270, $arg271);\nmy $v27 = 1244;\nunless(Compare($x27, $v27)) {\n    die \"Exception -- test case 27 did not pass.\";\n}\nmy $arg280 = 139;\nmy $arg281 = 577;\nmy $x28 = add($arg280, $arg281);\nmy $v28 = 716;\nunless(Compare($x28, $v28)) {\n    die \"Exception -- test case 28 did not pass.\";\n}\nmy $arg290 = 763;\nmy $arg291 = 178;\nmy $x29 = add($arg290, $arg291);\nmy $v29 = 941;\nunless(Compare($x29, $v29)) {\n    die \"Exception -- test case 29 did not pass.\";\n}\nmy $arg300 = 147;\nmy $arg301 = 892;\nmy $x30 = add($arg300, $arg301);\nmy $v30 = 1039;\nunless(Compare($x30, $v30)) {\n    die \"Exception -- test case 30 did not pass.\";\n}\nmy $arg310 = 436;\nmy $arg311 = 402;\nmy $x31 = add($arg310, $arg311);\nmy $v31 = 838;\nunless(Compare($x31, $v31)) {\n    die \"Exception -- test case 31 did not pass.\";\n}\nmy $arg320 = 610;\nmy $arg321 = 581;\nmy $x32 = add($arg320, $arg321);\nmy $v32 = 1191;\nunless(Compare($x32, $v32)) {\n    die \"Exception -- test case 32 did not pass.\";\n}\nmy $arg330 = 103;\nmy $arg331 = 416;\nmy $x33 = add($arg330, $arg331);\nmy $v33 = 519;\nunless(Compare($x33, $v33)) {\n    die \"Exception -- test case 33 did not pass.\";\n}\nmy $arg340 = 339;\nmy $arg341 = 990;\nmy $x34 = add($arg340, $arg341);\nmy $v34 = 1329;\nunless(Compare($x34, $v34)) {\n    die \"Exception -- test case 34 did not pass.\";\n}\nmy $arg350 = 130;\nmy $arg351 = 504;\nmy $x35 = add($arg350, $arg351);\nmy $v35 = 634;\nunless(Compare($x35, $v35)) {\n    die \"Exception -- test case 35 did not pass.\";\n}\nmy $arg360 = 242;\nmy $arg361 = 717;\nmy $x36 = add($arg360, $arg361);\nmy $v36 = 959;\nunless(Compare($x36, $v36)) {\n    die \"Exception -- test case 36 did not pass.\";\n}\nmy $arg370 = 562;\nmy $arg371 = 110;\nmy $x37 = add($arg370, $arg371);\nmy $v37 = 672;\nunless(Compare($x37, $v37)) {\n    die \"Exception -- test case 37 did not pass.\";\n}\nmy $arg380 = 396;\nmy $arg381 = 909;\nmy $x38 = add($arg380, $arg381);\nmy $v38 = 1305;\nunless(Compare($x38, $v38)) {\n    die \"Exception -- test case 38 did not pass.\";\n}\nmy $arg390 = 887;\nmy $arg391 = 703;\nmy $x39 = add($arg390, $arg391);\nmy $v39 = 1590;\nunless(Compare($x39, $v39)) {\n    die \"Exception -- test case 39 did not pass.\";\n}\nmy $arg400 = 870;\nmy $arg401 = 551;\nmy $x40 = add($arg400, $arg401);\nmy $v40 = 1421;\nunless(Compare($x40, $v40)) {\n    die \"Exception -- test case 40 did not pass.\";\n}\nmy $arg410 = 422;\nmy $arg411 = 391;\nmy $x41 = add($arg410, $arg411);\nmy $v41 = 813;\nunless(Compare($x41, $v41)) {\n    die \"Exception -- test case 41 did not pass.\";\n}\nmy $arg420 = 299;\nmy $arg421 = 505;\nmy $x42 = add($arg420, $arg421);\nmy $v42 = 804;\nunless(Compare($x42, $v42)) {\n    die \"Exception -- test case 42 did not pass.\";\n}\nmy $arg430 = 346;\nmy $arg431 = 56;\nmy $x43 = add($arg430, $arg431);\nmy $v43 = 402;\nunless(Compare($x43, $v43)) {\n    die \"Exception -- test case 43 did not pass.\";\n}\nmy $arg440 = 36;\nmy $arg441 = 706;\nmy $x44 = add($arg440, $arg441);\nmy $v44 = 742;\nunless(Compare($x44, $v44)) {\n    die \"Exception -- test case 44 did not pass.\";\n}\nmy $arg450 = 738;\nmy $arg451 = 411;\nmy $x45 = add($arg450, $arg451);\nmy $v45 = 1149;\nunless(Compare($x45, $v45)) {\n    die \"Exception -- test case 45 did not pass.\";\n}\nmy $arg460 = 679;\nmy $arg461 = 87;\nmy $x46 = add($arg460, $arg461);\nmy $v46 = 766;\nunless(Compare($x46, $v46)) {\n    die \"Exception -- test case 46 did not pass.\";\n}\nmy $arg470 = 25;\nmy $arg471 = 303;\nmy $x47 = add($arg470, $arg471);\nmy $v47 = 328;\nunless(Compare($x47, $v47)) {\n    die \"Exception -- test case 47 did not pass.\";\n}\nmy $arg480 = 161;\nmy $arg481 = 612;\nmy $x48 = add($arg480, $arg481);\nmy $v48 = 773;\nunless(Compare($x48, $v48)) {\n    die \"Exception -- test case 48 did not pass.\";\n}\nmy $arg490 = 306;\nmy $arg491 = 841;\nmy $x49 = add($arg490, $arg491);\nmy $v49 = 1147;\nunless(Compare($x49, $v49)) {\n    die \"Exception -- test case 49 did not pass.\";\n}\nmy $arg500 = 973;\nmy $arg501 = 411;\nmy $x50 = add($arg500, $arg501);\nmy $v50 = 1384;\nunless(Compare($x50, $v50)) {\n    die \"Exception -- test case 50 did not pass.\";\n}\nmy $arg510 = 711;\nmy $arg511 = 157;\nmy $x51 = add($arg510, $arg511);\nmy $v51 = 868;\nunless(Compare($x51, $v51)) {\n    die \"Exception -- test case 51 did not pass.\";\n}\nmy $arg520 = 471;\nmy $arg521 = 27;\nmy $x52 = add($arg520, $arg521);\nmy $v52 = 498;\nunless(Compare($x52, $v52)) {\n    die \"Exception -- test case 52 did not pass.\";\n}\nmy $arg530 = 714;\nmy $arg531 = 792;\nmy $x53 = add($arg530, $arg531);\nmy $v53 = 1506;\nunless(Compare($x53, $v53)) {\n    die \"Exception -- test case 53 did not pass.\";\n}\nmy $arg540 = 38;\nmy $arg541 = 206;\nmy $x54 = add($arg540, $arg541);\nmy $v54 = 244;\nunless(Compare($x54, $v54)) {\n    die \"Exception -- test case 54 did not pass.\";\n}\nmy $arg550 = 907;\nmy $arg551 = 343;\nmy $x55 = add($arg550, $arg551);\nmy $v55 = 1250;\nunless(Compare($x55, $v55)) {\n    die \"Exception -- test case 55 did not pass.\";\n}\nmy $arg560 = 23;\nmy $arg561 = 760;\nmy $x56 = add($arg560, $arg561);\nmy $v56 = 783;\nunless(Compare($x56, $v56)) {\n    die \"Exception -- test case 56 did not pass.\";\n}\nmy $arg570 = 524;\nmy $arg571 = 859;\nmy $x57 = add($arg570, $arg571);\nmy $v57 = 1383;\nunless(Compare($x57, $v57)) {\n    die \"Exception -- test case 57 did not pass.\";\n}\nmy $arg580 = 30;\nmy $arg581 = 529;\nmy $x58 = add($arg580, $arg581);\nmy $v58 = 559;\nunless(Compare($x58, $v58)) {\n    die \"Exception -- test case 58 did not pass.\";\n}\nmy $arg590 = 341;\nmy $arg591 = 691;\nmy $x59 = add($arg590, $arg591);\nmy $v59 = 1032;\nunless(Compare($x59, $v59)) {\n    die \"Exception -- test case 59 did not pass.\";\n}\nmy $arg600 = 167;\nmy $arg601 = 729;\nmy $x60 = add($arg600, $arg601);\nmy $v60 = 896;\nunless(Compare($x60, $v60)) {\n    die \"Exception -- test case 60 did not pass.\";\n}\nmy $arg610 = 636;\nmy $arg611 = 289;\nmy $x61 = add($arg610, $arg611);\nmy $v61 = 925;\nunless(Compare($x61, $v61)) {\n    die \"Exception -- test case 61 did not pass.\";\n}\nmy $arg620 = 503;\nmy $arg621 = 144;\nmy $x62 = add($arg620, $arg621);\nmy $v62 = 647;\nunless(Compare($x62, $v62)) {\n    die \"Exception -- test case 62 did not pass.\";\n}\nmy $arg630 = 51;\nmy $arg631 = 985;\nmy $x63 = add($arg630, $arg631);\nmy $v63 = 1036;\nunless(Compare($x63, $v63)) {\n    die \"Exception -- test case 63 did not pass.\";\n}\nmy $arg640 = 287;\nmy $arg641 = 149;\nmy $x64 = add($arg640, $arg641);\nmy $v64 = 436;\nunless(Compare($x64, $v64)) {\n    die \"Exception -- test case 64 did not pass.\";\n}\nmy $arg650 = 659;\nmy $arg651 = 75;\nmy $x65 = add($arg650, $arg651);\nmy $v65 = 734;\nunless(Compare($x65, $v65)) {\n    die \"Exception -- test case 65 did not pass.\";\n}\nmy $arg660 = 462;\nmy $arg661 = 797;\nmy $x66 = add($arg660, $arg661);\nmy $v66 = 1259;\nunless(Compare($x66, $v66)) {\n    die \"Exception -- test case 66 did not pass.\";\n}\nmy $arg670 = 406;\nmy $arg671 = 141;\nmy $x67 = add($arg670, $arg671);\nmy $v67 = 547;\nunless(Compare($x67, $v67)) {\n    die \"Exception -- test case 67 did not pass.\";\n}\nmy $arg680 = 106;\nmy $arg681 = 44;\nmy $x68 = add($arg680, $arg681);\nmy $v68 = 150;\nunless(Compare($x68, $v68)) {\n    die \"Exception -- test case 68 did not pass.\";\n}\nmy $arg690 = 300;\nmy $arg691 = 934;\nmy $x69 = add($arg690, $arg691);\nmy $v69 = 1234;\nunless(Compare($x69, $v69)) {\n    die \"Exception -- test case 69 did not pass.\";\n}\nmy $arg700 = 471;\nmy $arg701 = 524;\nmy $x70 = add($arg700, $arg701);\nmy $v70 = 995;\nunless(Compare($x70, $v70)) {\n    die \"Exception -- test case 70 did not pass.\";\n}\nmy $arg710 = 122;\nmy $arg711 = 429;\nmy $x71 = add($arg710, $arg711);\nmy $v71 = 551;\nunless(Compare($x71, $v71)) {\n    die \"Exception -- test case 71 did not pass.\";\n}\nmy $arg720 = 735;\nmy $arg721 = 195;\nmy $x72 = add($arg720, $arg721);\nmy $v72 = 930;\nunless(Compare($x72, $v72)) {\n    die \"Exception -- test case 72 did not pass.\";\n}\nmy $arg730 = 335;\nmy $arg731 = 484;\nmy $x73 = add($arg730, $arg731);\nmy $v73 = 819;\nunless(Compare($x73, $v73)) {\n    die \"Exception -- test case 73 did not pass.\";\n}\nmy $arg740 = 28;\nmy $arg741 = 809;\nmy $x74 = add($arg740, $arg741);\nmy $v74 = 837;\nunless(Compare($x74, $v74)) {\n    die \"Exception -- test case 74 did not pass.\";\n}\nmy $arg750 = 430;\nmy $arg751 = 20;\nmy $x75 = add($arg750, $arg751);\nmy $v75 = 450;\nunless(Compare($x75, $v75)) {\n    die \"Exception -- test case 75 did not pass.\";\n}\nmy $arg760 = 916;\nmy $arg761 = 635;\nmy $x76 = add($arg760, $arg761);\nmy $v76 = 1551;\nunless(Compare($x76, $v76)) {\n    die \"Exception -- test case 76 did not pass.\";\n}\nmy $arg770 = 301;\nmy $arg771 = 999;\nmy $x77 = add($arg770, $arg771);\nmy $v77 = 1300;\nunless(Compare($x77, $v77)) {\n    die \"Exception -- test case 77 did not pass.\";\n}\nmy $arg780 = 454;\nmy $arg781 = 466;\nmy $x78 = add($arg780, $arg781);\nmy $v78 = 920;\nunless(Compare($x78, $v78)) {\n    die \"Exception -- test case 78 did not pass.\";\n}\nmy $arg790 = 905;\nmy $arg791 = 259;\nmy $x79 = add($arg790, $arg791);\nmy $v79 = 1164;\nunless(Compare($x79, $v79)) {\n    die \"Exception -- test case 79 did not pass.\";\n}\nmy $arg800 = 168;\nmy $arg801 = 205;\nmy $x80 = add($arg800, $arg801);\nmy $v80 = 373;\nunless(Compare($x80, $v80)) {\n    die \"Exception -- test case 80 did not pass.\";\n}\nmy $arg810 = 570;\nmy $arg811 = 434;\nmy $x81 = add($arg810, $arg811);\nmy $v81 = 1004;\nunless(Compare($x81, $v81)) {\n    die \"Exception -- test case 81 did not pass.\";\n}\nmy $arg820 = 64;\nmy $arg821 = 959;\nmy $x82 = add($arg820, $arg821);\nmy $v82 = 1023;\nunless(Compare($x82, $v82)) {\n    die \"Exception -- test case 82 did not pass.\";\n}\nmy $arg830 = 957;\nmy $arg831 = 510;\nmy $x83 = add($arg830, $arg831);\nmy $v83 = 1467;\nunless(Compare($x83, $v83)) {\n    die \"Exception -- test case 83 did not pass.\";\n}\nmy $arg840 = 722;\nmy $arg841 = 598;\nmy $x84 = add($arg840, $arg841);\nmy $v84 = 1320;\nunless(Compare($x84, $v84)) {\n    die \"Exception -- test case 84 did not pass.\";\n}\nmy $arg850 = 770;\nmy $arg851 = 226;\nmy $x85 = add($arg850, $arg851);\nmy $v85 = 996;\nunless(Compare($x85, $v85)) {\n    die \"Exception -- test case 85 did not pass.\";\n}\nmy $arg860 = 579;\nmy $arg861 = 66;\nmy $x86 = add($arg860, $arg861);\nmy $v86 = 645;\nunless(Compare($x86, $v86)) {\n    die \"Exception -- test case 86 did not pass.\";\n}\nmy $arg870 = 117;\nmy $arg871 = 674;\nmy $x87 = add($arg870, $arg871);\nmy $v87 = 791;\nunless(Compare($x87, $v87)) {\n    die \"Exception -- test case 87 did not pass.\";\n}\nmy $arg880 = 530;\nmy $arg881 = 30;\nmy $x88 = add($arg880, $arg881);\nmy $v88 = 560;\nunless(Compare($x88, $v88)) {\n    die \"Exception -- test case 88 did not pass.\";\n}\nmy $arg890 = 776;\nmy $arg891 = 345;\nmy $x89 = add($arg890, $arg891);\nmy $v89 = 1121;\nunless(Compare($x89, $v89)) {\n    die \"Exception -- test case 89 did not pass.\";\n}\nmy $arg900 = 327;\nmy $arg901 = 389;\nmy $x90 = add($arg900, $arg901);\nmy $v90 = 716;\nunless(Compare($x90, $v90)) {\n    die \"Exception -- test case 90 did not pass.\";\n}\nmy $arg910 = 596;\nmy $arg911 = 12;\nmy $x91 = add($arg910, $arg911);\nmy $v91 = 608;\nunless(Compare($x91, $v91)) {\n    die \"Exception -- test case 91 did not pass.\";\n}\nmy $arg920 = 599;\nmy $arg921 = 511;\nmy $x92 = add($arg920, $arg921);\nmy $v92 = 1110;\nunless(Compare($x92, $v92)) {\n    die \"Exception -- test case 92 did not pass.\";\n}\nmy $arg930 = 936;\nmy $arg931 = 476;\nmy $x93 = add($arg930, $arg931);\nmy $v93 = 1412;\nunless(Compare($x93, $v93)) {\n    die \"Exception -- test case 93 did not pass.\";\n}\nmy $arg940 = 461;\nmy $arg941 = 14;\nmy $x94 = add($arg940, $arg941);\nmy $v94 = 475;\nunless(Compare($x94, $v94)) {\n    die \"Exception -- test case 94 did not pass.\";\n}\nmy $arg950 = 966;\nmy $arg951 = 157;\nmy $x95 = add($arg950, $arg951);\nmy $v95 = 1123;\nunless(Compare($x95, $v95)) {\n    die \"Exception -- test case 95 did not pass.\";\n}\nmy $arg960 = 326;\nmy $arg961 = 91;\nmy $x96 = add($arg960, $arg961);\nmy $v96 = 417;\nunless(Compare($x96, $v96)) {\n    die \"Exception -- test case 96 did not pass.\";\n}\nmy $arg970 = 392;\nmy $arg971 = 455;\nmy $x97 = add($arg970, $arg971);\nmy $v97 = 847;\nunless(Compare($x97, $v97)) {\n    die \"Exception -- test case 97 did not pass.\";\n}\nmy $arg980 = 446;\nmy $arg981 = 477;\nmy $x98 = add($arg980, $arg981);\nmy $v98 = 923;\nunless(Compare($x98, $v98)) {\n    die \"Exception -- test case 98 did not pass.\";\n}\nmy $arg990 = 324;\nmy $arg991 = 860;\nmy $x99 = add($arg990, $arg991);\nmy $v99 = 1184;\nunless(Compare($x99, $v99)) {\n    die \"Exception -- test case 99 did not pass.\";\n}\nmy $arg1000 = 945;\nmy $arg1001 = 85;\nmy $x100 = add($arg1000, $arg1001);\nmy $v100 = 1030;\nunless(Compare($x100, $v100)) {\n    die \"Exception -- test case 100 did not pass.\";\n}\nmy $arg1010 = 886;\nmy $arg1011 = 582;\nmy $x101 = add($arg1010, $arg1011);\nmy $v101 = 1468;\nunless(Compare($x101, $v101)) {\n    die \"Exception -- test case 101 did not pass.\";\n}\nmy $arg1020 = 886;\nmy $arg1021 = 712;\nmy $x102 = add($arg1020, $arg1021);\nmy $v102 = 1598;\nunless(Compare($x102, $v102)) {\n    die \"Exception -- test case 102 did not pass.\";\n}\nmy $arg1030 = 842;\nmy $arg1031 = 953;\nmy $x103 = add($arg1030, $arg1031);\nmy $v103 = 1795;\nunless(Compare($x103, $v103)) {\n    die \"Exception -- test case 103 did not pass.\";\n}\n", "description": "x மற்றும் y என்ற இரண்டு எண்களைச் சேர்க்கவும். \n>>> சேர் (2,3) \n5....................................................................................................................................................................................................... \n>>> சேர் (5,7) \n12.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/20", "entry_point": "same_chars", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"eabcdzzzz\";\nmy $arg01 = \"dddzzzzzzzddeddabc\";\nmy $x0 = same_chars($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $arg11 = \"dddddddabc\";\nmy $x1 = same_chars($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"dddddddabc\";\nmy $arg21 = \"abcd\";\nmy $x2 = same_chars($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eabcd\";\nmy $arg31 = \"dddddddabc\";\nmy $x3 = same_chars($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abcd\";\nmy $arg41 = \"dddddddabcf\";\nmy $x4 = same_chars($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"eabcdzzzz\";\nmy $arg51 = \"dddzzzzzzzddddabc\";\nmy $x5 = same_chars($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"aabb\";\nmy $arg61 = \"aaccc\";\nmy $x6 = same_chars($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "இரண்டு சொற்களும் ஒரே எழுத்துக்களைக் கொண்டுள்ளனவா என்று சரிபார்க்கவும். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzuddeddabc') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடிபிசி') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('dddddddabc','abcd') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஈஏபிசிடி','டிடிடிடிடிபிசி') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடாப்ஸ்') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzdddddadbc') \nபொய்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/21", "entry_point": "fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = fib($arg00);\nmy $v0 = 55;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fib($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = fib($arg20);\nmy $v2 = 21;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 11;\nmy $x3 = fib($arg30);\nmy $v3 = 89;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 12;\nmy $x4 = fib($arg40);\nmy $v4 = 144;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "n-th ஃபிபோனாச்சி எண்ணைத் திருப்பித் தரவும். \n>>> ஃபைப் (10) \n55 \n>>> ஃபைப் (1) \n1. \n>>> ஃபைப் (8) \n21", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/22", "entry_point": "common", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 3, 34, 653, 2, 5];\nmy $arg01 = [5, 7, 1, 5, 9, 653, 121];\nmy $x0 = common($arg00, $arg01);\nmy $v0 = [1, 5, 653];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, 2, 8];\nmy $arg11 = [3, 2];\nmy $x1 = common($arg10, $arg11);\nmy $v1 = [2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 2, 8];\nmy $arg21 = [3, 2, 4];\nmy $x2 = common($arg20, $arg21);\nmy $v2 = [2, 3, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 3, 2, 8];\nmy $arg31 = [];\nmy $x3 = common($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "இரண்டு பட்டியல்களுக்கு தனித்துவமான பொதுவான கூறுகளை வரிசைப்படுத்துங்கள். \n>> பொதுவான ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>> பொதுவான ([5,3,2,8], [3,2]) \n[2,3]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/23", "entry_point": "largest_prime_factor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = largest_prime_factor($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 27;\nmy $x1 = largest_prime_factor($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 63;\nmy $x2 = largest_prime_factor($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 330;\nmy $x3 = largest_prime_factor($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 13195;\nmy $x4 = largest_prime_factor($arg40);\nmy $v4 = 29;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "n இன் மிகப்பெரிய பகாக் காரணியை திருப்பிக் கொடுங்கள். n> 1 என்று வைத்துக்கொள்வோம், அது பகாக் காரணி அல்ல. \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (13195) \n29 \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (2048) \n2.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/24", "entry_point": "sum_to_n", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = sum_to_n($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = sum_to_n($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = sum_to_n($arg20);\nmy $v2 = 66;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 30;\nmy $x3 = sum_to_n($arg30);\nmy $v3 = 465;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 100;\nmy $x4 = sum_to_n($arg40);\nmy $v4 = 5050;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "sum _ to _ n என்பது 1 முதல் n வரையிலான எண்களைச் சேர்க்கும் ஒரு சார்பாகும். \n>>> கூட்டுத்தொகை _ முதல் _ வரை (30) \n465 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (100) \n5050 \n>>> கூட்டுத்தொகை _ முதல் _ வரை (5) \n15. \n>>> கூட்டுத்தொகை _ முதல் _ வரை (10) \n55 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (1) \n1.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/25", "entry_point": "derivative", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = derivative($arg00);\nmy $v0 = [1, 4, 12, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = derivative($arg10);\nmy $v1 = [2, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $x2 = derivative($arg20);\nmy $v2 = [2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 1, 0, 4];\nmy $x3 = derivative($arg30);\nmy $v3 = [2, 2, 0, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = derivative($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "xs என்பது ஒரு பல்லுறுப்புக்கோவையின் குணகங்களைக் குறிக்கிறது. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nஅதே வடிவத்தில் இந்த பல்லுறுப்புக்கோவையின் திரும்ப வழித்தோன்றல். \n>>> வழித்தோன்றல் ([3,1,2,4,5]) \n[1,4,12,20] \n>>> வழித்தோன்றல் ([1,2,3]) \n[2,6]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/26", "entry_point": "fibfib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fibfib($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fibfib($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = fibfib($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 8;\nmy $x3 = fibfib($arg30);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 10;\nmy $x4 = fibfib($arg40);\nmy $v4 = 81;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 12;\nmy $x5 = fibfib($arg50);\nmy $v5 = 274;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 14;\nmy $x6 = fibfib($arg60);\nmy $v6 = 927;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஃபைப்ஃபைப் எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப்ஃபைப் (0) = = 0 \nஃபைப்ஃபைப் (1) = = 0 \nஃபைப்ஃபைப் (2) = = 1 \nஃபைப்ஃபைப் (n) = = ஃபைப்ஃபைப் (n-1) + ஃபைப்ஃபைப் (n-2) + ஃபைப்ஃபைப் (n-3). \nஃபைப்ஃபைப் எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். \n>>> ஃபைப்ஃபைப் (1) \n0 \n>>> ஃபைப்ஃபைப் (5) \n4. \n>>> ஃபைப்ஃபைப் (8) \n24.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/27", "entry_point": "vowels_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $x0 = vowels_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Alone\";\nmy $x1 = vowels_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"key\";\nmy $x2 = vowels_count($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bye\";\nmy $x3 = vowels_count($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"keY\";\nmy $x4 = vowels_count($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"bYe\";\nmy $x5 = vowels_count($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ACEDY\";\nmy $x6 = vowels_count($arg60);\nmy $v6 = 3;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஒரு செயல்பாட்டை எழுதுங்கள் உயிரெழுத்துக்கள் _ எண்ணிக்கை இது ஒரு சரத்தை குறிக்கிறது \nஉள்ளீடாக ஒரு சொல் மற்றும் சரத்தில் உள்ள உயிரெழுத்துக்களின் எண்ணிக்கையைத் தருகிறது. \nஇந்த வழக்கில் அச்சுகள்'a','e','i','o','u'. இங்கே,'y'கூட ஒரு \nஉயிரெழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. \n\nஉதாரணம்ஃ \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"அப்ச்டே\") \n2. \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"ACEDY\") \n3.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/28", "entry_point": "search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 5, 5, 5, 1];\nmy $x0 = search($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 1, 4, 1, 4, 4];\nmy $x1 = search($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 3];\nmy $x2 = search($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\nmy $x3 = search($arg30);\nmy $v3 = 8;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 3, 3, 2, 2];\nmy $x4 = search($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\nmy $x5 = search($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [3, 2, 8, 2];\nmy $x6 = search($arg60);\nmy $v6 = 2;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\nmy $x7 = search($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [8, 8, 3, 6, 5, 6, 4];\nmy $x8 = search($arg80);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\nmy $x9 = search($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 9, 10, 1, 3];\nmy $x10 = search($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\nmy $x11 = search($arg110);\nmy $v11 = 5;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = [1];\nmy $x12 = search($arg120);\nmy $v12 = 1;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\nmy $x13 = search($arg130);\nmy $v13 = 4;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\nmy $x14 = search($arg140);\nmy $v14 = 2;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\nmy $x15 = search($arg150);\nmy $v15 = 1;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\nmy $x16 = search($arg160);\nmy $v16 = 4;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\nmy $x17 = search($arg170);\nmy $v17 = 4;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\nmy $x18 = search($arg180);\nmy $v18 = 2;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\nmy $x19 = search($arg190);\nmy $v19 = -1;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = [10];\nmy $x20 = search($arg200);\nmy $v20 = -1;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\nmy $x21 = search($arg210);\nmy $v21 = 2;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\nmy $x22 = search($arg220);\nmy $v22 = 1;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\nmy $x23 = search($arg230);\nmy $v23 = 1;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = [3, 10, 10, 9, 2];\nmy $x24 = search($arg240);\nmy $v24 = -1;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\n", "description": "உங்களுக்கு வெற்றிடமற்ற நேர்மறை முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. அதை விட பெரிய முழு எண்ணை கொடுக்கவும். \nபூஜ்ஜியம், மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ அதிர்வெண் உள்ளது. \nஒரு முழு எண்ணின் அதிர்வெண் என்பது அது பட்டியலில் எத்தனை முறை தோன்றுகிறது என்பதாகும். \nஅத்தகைய மதிப்பு இல்லை என்றால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணங்கள்ஃ \nதேடல் ([4,1,2,2,3,1]) = = 2 \nதேடல் ([1,2,3,3,4,4]) = = 3 \nதேடல் ([5,5,4,4]) = =-1", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/29", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = triangle_area($arg00, $arg01, $arg02);\nmy $v0 = 6.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 10;\nmy $x1 = triangle_area($arg10, $arg11, $arg12);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 8;\nmy $arg22 = 5;\nmy $x2 = triangle_area($arg20, $arg21, $arg22);\nmy $v2 = 8.18;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = triangle_area($arg30, $arg31, $arg32);\nmy $v3 = 1.73;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 1;\nmy $arg41 = 2;\nmy $arg42 = 3;\nmy $x4 = triangle_area($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = triangle_area($arg50, $arg51, $arg52);\nmy $v5 = 16.25;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2;\nmy $arg61 = 6;\nmy $arg62 = 3;\nmy $x6 = triangle_area($arg60, $arg61, $arg62);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $arg71 = 1;\nmy $arg72 = 1;\nmy $x7 = triangle_area($arg70, $arg71, $arg72);\nmy $v7 = 0.43;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 2;\nmy $arg81 = 2;\nmy $arg82 = 10;\nmy $x8 = triangle_area($arg80, $arg81, $arg82);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. \nமூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்கினால் முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமிடப்படுகிறது. \nஇல்லையெனில் திரும்ப-1 \nஏதேனும் இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருக்கும்போது மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. \nமூன்றாவது பக்கத்தை விட. \nஉதாரணம்ஃ \nமுக்கோணப் பரப்பளவு (3,4,5) = = 6 \nமுக்கோணப் பரப்பளவு (1,2,10) = =-1", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/30", "entry_point": "will_it_fly", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 3];\nmy $arg01 = 9;\nmy $x0 = will_it_fly($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 5;\nmy $x1 = will_it_fly($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3];\nmy $arg21 = 5;\nmy $x2 = will_it_fly($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 3];\nmy $arg31 = 1;\nmy $x3 = will_it_fly($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3];\nmy $arg41 = 6;\nmy $x4 = will_it_fly($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5];\nmy $arg51 = 5;\nmy $x5 = will_it_fly($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "பொருள் q பறக்கும் என்றால் சரி, இல்லையெனில் தவறு என்று காட்டும் செயல்பாட்டை எழுதுங்கள். \nபொருள் q சமநிலையாக இருந்தால் பறக்கும் (இது ஒரு பாலிண்ட்ரோமிக் பட்டியல்) மற்றும் அதன் உறுப்புகளின் கூட்டுத்தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால். \n\nஉதாரணம்ஃ \nவில் _ இட் _ ஃப்ளை ([1,2], 5) பொய் \n#1 + 2 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 1) பொய் \n#இது சமநிலையானது, ஆனால் 3 + 2 + 3 என்பது அதிகபட்ச எடையை விட அதிகமாகும். \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 9) ட்ரு \n#3 + 2 + 3 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது. \n\nவில் _ இட் _ ஃப்ளை ([3], 5) ட்ரு \n#3 அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/31", "entry_point": "is_multiply_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_multiply_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = is_multiply_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = is_multiply_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = is_multiply_prime($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 125;\nmy $x4 = is_multiply_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 105;\nmy $x5 = is_multiply_prime($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 126;\nmy $x6 = is_multiply_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 729;\nmy $x7 = is_multiply_prime($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 891;\nmy $x8 = is_multiply_prime($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1001;\nmy $x9 = is_multiply_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட எண் 3 பகா எண்களின் பெருக்கமாக இருந்தால் உண்மை என்று திரும்பும் செயல்பாட்டை எழுதுங்கள். \nஇல்லையெனில் பொய்யானது. \n(அ) என்பது 100க்கும் குறைவானது என்பதை அறிவது. \nஉதாரணம்ஃ \nபெருக்கல் பகா எண் (30) = = உண்மை \n30 = 2 * 3 * 5", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/32", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = \"db0db\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 32;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = \"db100000db\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 103;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = \"db1100111db\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 15;\nmy $x3 = decimal_to_binary($arg30);\nmy $v3 = \"db1111db\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "உங்களுக்கு தசம வடிவத்தில் ஒரு எண் வழங்கப்படும், அதை ஒரு எண்ணாக மாற்றுவதே உங்கள் பணியாகும். \nபைனரி வடிவம். செயல்பாடு ஒரு சரத்தைத் திருப்ப வேண்டும், ஒவ்வொரு எழுத்தும் ஒரு பைனரியைக் குறிக்கும் \nஎண். சரத்தில் உள்ள ஒவ்வொரு எழுத்தும்'0'அல்லது'1'ஆக இருக்கும். \n\nசரத்தின் தொடக்கத்திலும் முடிவிலும் கூடுதலாக இரண்டு எழுத்துக்கள்'db'இருக்கும். \nவடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன. \n\nஉதாரணங்கள்ஃ \nடெசிமல் _ டு _ பைனரி (15) #\"db1111db\" ஐத் தருகிறது \nடெசிமல் _ டு _ பைனரி (32) #\"db100000db\" ஐத் தருகிறது", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/33", "entry_point": "is_happy", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a\";\nmy $x0 = is_happy($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aa\";\nmy $x1 = is_happy($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = is_happy($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"aabb\";\nmy $x3 = is_happy($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"adb\";\nmy $x4 = is_happy($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xyy\";\nmy $x5 = is_happy($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"iopaxpoi\";\nmy $x6 = is_happy($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"iopaxioi\";\nmy $x7 = is_happy($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nசரம் மகிழ்ச்சியாக உள்ளதா இல்லையா என்பதைச் சரிபார்ப்பது உங்கள் பணியாகும். \nஒரு சரத்தின் நீளம் குறைந்தது 3 ஆகவும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் தனித்துவமாகவும் இருந்தால் அது மகிழ்ச்சியாக இருக்கும். \nஉதாரணத்திற்குஃ \nமகிழ்ச்சியாக உள்ளது (a) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏஏ) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏபிசிடி) => உண்மை \nமகிழ்ச்சியாக உள்ளது (ஆப்) => பொய் \nமகிழ்ச்சியாக உள்ளது (adb) => உண்மை \nமகிழ்ச்சியாக உள்ளது (xyy) => தவறு", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/34", "entry_point": "numerical_letter_grade", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4.0, 3, 1.7, 2, 3.5];\nmy $x0 = numerical_letter_grade($arg00);\nmy $v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.2];\nmy $x1 = numerical_letter_grade($arg10);\nmy $v1 = [\"D+\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.5];\nmy $x2 = numerical_letter_grade($arg20);\nmy $v2 = [\"D-\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0.0];\nmy $x3 = numerical_letter_grade($arg30);\nmy $v3 = [\"E\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 0.3, 1.5, 2.8, 3.3];\nmy $x4 = numerical_letter_grade($arg40);\nmy $v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 0.7];\nmy $x5 = numerical_letter_grade($arg50);\nmy $v5 = [\"E\", \"D-\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் தரங்களை வழங்க வேண்டும். \nமாணவர்களுக்கு. ஆசிரியர் தரப்படுத்தலுக்கான தனது சொந்த வழிமுறையை உருவாக்கி வருகிறார். \nஒரே பிரச்சனை என்னவென்றால், தரப்படுத்துவதற்கு அவர் பயன்படுத்திய குறியீட்டை அவர் இழந்துவிட்டார். \nசில மாணவர்களுக்கான ஜி. பி. ஏ. களின் பட்டியலை அவர் உங்களுக்கு வழங்கியுள்ளார், நீங்கள் எழுத வேண்டும். \nபின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் பட்டியலை வெளியிடக்கூடிய ஒரு செயல்பாடுஃ \nஜிபிஏ | எழுத்து தரம் \n4. 0 ஏ + \n> 3.7 ஏ \n> 3.3 ஏ-\n> 3 பி + \n> 2.7 பி \n> 2.3 பி-\n> 2 சி + \n> 1.7 டிகிரி செல். \n> 1.3 சி-\n> 1. 0 டி + \n> 0.7 டி \n> 0.0 டி-\n0. 0 ஈ \n\nஉதாரணம்ஃ \nதரச் சமன்பாடு ([4.0,3,17,2,3,5]) = => ['A +','B','C-','C','A -']", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/35", "entry_point": "prime_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello\";\nmy $x0 = prime_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdcba\";\nmy $x1 = prime_length($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"kittens\";\nmy $x2 = prime_length($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"orange\";\nmy $x3 = prime_length($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"wow\";\nmy $x4 = prime_length($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"world\";\nmy $x5 = prime_length($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"MadaM\";\nmy $x6 = prime_length($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"Wow\";\nmy $x7 = prime_length($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"\";\nmy $x8 = prime_length($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"HI\";\nmy $x9 = prime_length($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"go\";\nmy $x10 = prime_length($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"gogo\";\nmy $x11 = prime_length($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"aaaaaaaaaaaaaaa\";\nmy $x12 = prime_length($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"Madam\";\nmy $x13 = prime_length($arg130);\nmy $v13 = 1;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"M\";\nmy $x14 = prime_length($arg140);\nmy $v14 = 0;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"0\";\nmy $x15 = prime_length($arg150);\nmy $v15 = 0;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\n", "description": "ஒரு சரத்தை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள், சரம் இருந்தால் சரி என்று திருப்பித் தருகிறது \nநீளம் ஒரு பகா எண் அல்லது இல்லையெனில் தவறு \nஉதாரணங்கள் \nபகா நீளம் ('ஹலோ') = = உண்மை \nபகா நீளம் ('abcdcba') = = உண்மை \nபகா நீளம் ('பூனைகள்') = = உண்மை \nபகா நீளம் ('ஆரஞ்சு') = = தவறு", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/36", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1000;\nmy $x0 = solve($arg00);\nmy $v0 = \"1\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 150;\nmy $x1 = solve($arg10);\nmy $v1 = \"110\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 147;\nmy $x2 = solve($arg20);\nmy $v2 = \"1100\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 333;\nmy $x3 = solve($arg30);\nmy $v3 = \"1001\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 963;\nmy $x4 = solve($arg40);\nmy $v4 = \"10010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த கூட்டுத்தொகையை பைனரியில் திருப்பித் தரவும். \n\nஉதாரணம் \nN = 1000 க்கு, இலக்கங்களின் கூட்டுத்தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். \nN = 150 க்கு, இலக்கங்களின் கூட்டுத்தொகை 6 ஆகவும், வெளியீடு \"110\" ஆகவும் இருக்க வேண்டும். \nN = 147 க்கு, இலக்கங்களின் கூட்டுத்தொகை 12 ஆகவும், வெளியீடு \"1100\" ஆகவும் இருக்க வேண்டும். \n\nமாறுபாடுகள்ஃ \n@N முழு எண் \nகட்டுப்பாடுகள்ஃ 0 ≤ N ≤ 10000. \nவெளியீடுஃ \nபைனரி எண்ணின் சரம்", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/37", "entry_point": "get_row", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = 1;\nmy $x0 = get_row($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1]];\nmy $arg11 = 2;\nmy $x1 = get_row($arg10, $arg11);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [1], [1, 2, 3]];\nmy $arg21 = 3;\nmy $x2 = get_row($arg20, $arg21);\nmy $v2 = [[2, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியல்களாக வழங்கப்படுகிறது, \nஇது மேட்ரிக்ஸைப் போன்றது, இருப்பினும், மேட்ரிக்ஸ்களைப் போலல்லாமல், \nஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். \nகொடுக்கப்பட்ட lst மற்றும் முழு எண் x, பட்டியலில் உள்ள x முழு எண்களைக் கண்டறியவும், \nமற்றும் டப்பிள்களின் திரும்பும் பட்டியல், [(x1, y1), (x2, y2)...] \nஒவ்வொரு டுபிலும் ஒரு ஒருங்கிணைப்பு-(வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. \nஏறுவரிசையில் வரிசைகளால் ஆரம்பத்தில் ஆயங்களை வரிசைப்படுத்துங்கள். \nமேலும், வரிசையின் ஆயத்தொகுதிகளை நெடுவரிசைகளால் இறங்கு வரிசையில் வரிசைப்படுத்துங்கள். \n\nஉதாரணங்கள்ஃ \nவரிசை பெறு (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nபெற _ வரிசை ([], 1) = = [] \nபெற _ வரிசை ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/38", "entry_point": "next_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = next_smallest($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 1, 4, 3, 2];\nmy $x1 = next_smallest($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = next_smallest($arg20);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 1];\nmy $x3 = next_smallest($arg30);\nmy $v3 = \"none\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 1, 1, 1, 0];\nmy $x4 = next_smallest($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 1];\nmy $x5 = next_smallest($arg50);\nmy $v5 = \"none\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-35, 34, 12, -45];\nmy $x6 = next_smallest($arg60);\nmy $v6 = -35;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nபட்டியலின் 2 வது மிகச்சிறிய உறுப்பைத் தரும் அடுத்த _ மிகச்சிறிய () செயல்பாட்டை எழுதுங்கள். \nஅத்தகைய உறுப்பு இல்லையென்றால் பூஜ்யத்தைத் திருப்பவும். \n\nஅடுத்தது _ மிகச்சிறியது ([1,2,3,4,5]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([5,1,4,3,2]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([]) = = எதுவும் இல்லை \nஅடுத்தது _ மிகச்சிறியது ([1,1]) = = எதுவும் இல்லை", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/39", "entry_point": "is_bored", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = is_bored($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Is the sky blue?\";\nmy $x1 = is_bored($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"I love It !\";\nmy $x2 = is_bored($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bIt\";\nmy $x3 = is_bored($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"I feel good today. I will be productive. will kill It\";\nmy $x4 = is_bored($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"You and I are going for a walk\";\nmy $x5 = is_bored($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "உங்களுக்கு வார்த்தைகளின் சரம் வழங்கப்படும், மேலும் உங்கள் பணி எண்ணிக்கையை எண்ணுவதாகும். \nசலிப்பு. சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். \nவாக்கியங்கள் '.', '?'அல்லது '!'ஆகியவற்றால் வரையறுக்கப்படுகின்றன. \n\nஉதாரணத்திற்குஃ \n>>> பரவாயில்லை (\"ஹலோ வேர்ல்ட்\") \n0 \n>>> பரவாயில்லை (\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. எனக்கு இந்த வானிலை பிடிக்கும்\") \n1.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/40", "entry_point": "skjkasdkd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nmy $x0 = skjkasdkd($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\nmy $x1 = skjkasdkd($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\nmy $x2 = skjkasdkd($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\nmy $x3 = skjkasdkd($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [0, 81, 12, 3, 1, 21];\nmy $x4 = skjkasdkd($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 8, 1, 2, 1, 7];\nmy $x5 = skjkasdkd($arg50);\nmy $v5 = 7;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [8191];\nmy $x6 = skjkasdkd($arg60);\nmy $v6 = 19;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [8191, 123456, 127, 7];\nmy $x7 = skjkasdkd($arg70);\nmy $v7 = 19;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [127, 97, 8192];\nmy $x8 = skjkasdkd($arg80);\nmy $v8 = 10;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nநீங்கள் மிகப்பெரிய பகா மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] க்கு வெளியீடு 10 ஆக இருக்க வேண்டும். \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] க்கு வெளியீடு 25 ஆக இருக்க வேண்டும். \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] க்கு வெளியீடு 13 ஆக இருக்க வேண்டும். \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] க்கு வெளியீடு 11 ஆக இருக்க வேண்டும். \nlst = [0,81,12, 3,1,21] க்கு வெளியீடு 3 ஆக இருக்க வேண்டும். \nlst = [0,8,1, 2,1,7] க்கு வெளியீடு 7 ஆக இருக்க வேண்டும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/41", "entry_point": "check_dict_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"p\" => \"pineapple\", \"b\" => \"banana\"};\nmy $x0 = check_dict_case($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"};\nmy $x1 = check_dict_case($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"};\nmy $x2 = check_dict_case($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = {\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"};\nmy $x3 = check_dict_case($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = {\"STATE\" => \"NC\", \"ZIP\" => \"12345\"};\nmy $x4 = check_dict_case($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = {\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"};\nmy $x5 = check_dict_case($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = {};\nmy $x6 = check_dict_case($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஒரு அகராதியைக் கொடுத்தால், அனைத்து விசைகளும் கீழே உள்ள சரங்களாக இருந்தால் சரி என்று திருப்பித் தரவும். \nவழக்கு அல்லது அனைத்து விசைகளும் பெரிய வழக்கில் சரங்கள், இல்லையெனில் தவறானது. \nகொடுக்கப்பட்ட அகராதி காலியாக இருப்பதால் செயல்பாடு தவறாக திரும்ப வேண்டும். \nஉதாரணங்கள்ஃ \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"b\": \"வாழைப்பழம்\"}) சரி என்று திரும்ப வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"A\": \"வாழைப்பழம்\", \"B\": \"வாழைப்பழம்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", 8: \"வாழைப்பழம்\", \"a\": \"ஆப்பிள்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"பெயர்\": \"ஜான்\", \"வயது\": \"36\", \"சிட்டி\": \"ஹூஸ்டன்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) சரி என்று திரும்ப வேண்டும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/42", "entry_point": "closest_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"10\";\nmy $x0 = closest_integer($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"14.5\";\nmy $x1 = closest_integer($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"-15.5\";\nmy $x2 = closest_integer($arg20);\nmy $v2 = -16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"15.3\";\nmy $x3 = closest_integer($arg30);\nmy $v3 = 15;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"0\";\nmy $x4 = closest_integer($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "ஒரு எண்ணைக் குறிக்கும் மதிப்பை (சரம்) எடுக்கும் செயல்பாட்டை உருவாக்கவும் \nஅதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தருகிறது. எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். \n\nஉதாரணங்கள் \n>>> நெருங்கிய முழு எண் (\"10\") \n10. \n>>> நெருங்கிய முழு எண் (\"15.3\") \n15. \n\nகுறிப்புஃ \nபூஜ்ஜியத்திலிருந்து வட்டமிடுவது என்பது கொடுக்கப்பட்ட எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, நீங்கள் திருப்பித் தர வேண்டிய ஒன்று \nபூஜ்ஜியத்திலிருந்து மிகத் தொலைவில் உள்ளது. எடுத்துக்காட்டாக, அருகிலுள்ள முழு எண் (\"14.5\") இருக்க வேண்டும். \n15 ஐத் திருப்பி, அருகிலுள்ள முழு எண் (\"-14.5\")-15 ஐத் திருப்பித் தர வேண்டும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/43", "entry_point": "make_a_pile", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = make_a_pile($arg00);\nmy $v0 = [3, 5, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = make_a_pile($arg10);\nmy $v1 = [4, 6, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = make_a_pile($arg20);\nmy $v2 = [5, 7, 9, 11, 13];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = make_a_pile($arg30);\nmy $v3 = [6, 8, 10, 12, 14, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 8;\nmy $x4 = make_a_pile($arg40);\nmy $v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலைகளின் கற்களின் குவியலை உருவாக்க வேண்டும். \nமுதல் மட்டத்தில் n கற்கள் உள்ளன. \nஅடுத்த கட்டத்தில் உள்ள கற்களின் எண்ணிக்கை பின்வருமாறுஃ \n- n ஒற்றைப்படை என்றால் அடுத்த ஒற்றைப்படை எண். \n- n சமமாக இருந்தால் அடுத்த சம எண். \nஒரு பட்டியலில் உள்ள ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் திருப்பித் தரவும், அங்கு குறியீட்டில் உள்ள உறுப்பு \ni என்பது மட்டத்தில் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது (i + 1). \n\nஉதாரணங்கள்ஃ \n>>> ஒரு குவியலை உருவாக்குங்கள் (3) \n[3,5,7]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/44", "entry_point": "words_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hi, my name is John\";\nmy $x0 = words_string($arg00);\nmy $v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"One, two, three, four, five, six\";\nmy $x1 = words_string($arg10);\nmy $v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hi, my name\";\nmy $x2 = words_string($arg20);\nmy $v2 = [\"Hi\", \"my\", \"name\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"One,, two, three, four, five, six,\";\nmy $x3 = words_string($arg30);\nmy $v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"\";\nmy $x4 = words_string($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"ahmed     , gamal\";\nmy $x5 = words_string($arg50);\nmy $v5 = [\"ahmed\", \"gamal\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட சொற்களின் சரம் உங்களுக்கு வழங்கப்படும். உங்கள் பணி \nசரத்தை வார்த்தைகளாகப் பிரிக்கவும், சொற்களின் வரிசையைத் திருப்பவும். \n\nஉதாரணத்திற்குஃ \nசொற்கள் _ சரம் (\"ஹாய், என் பெயர் ஜான்\") = = [\"ஹாய்\", \"என்\", \"பெயர்\", \"\", ஜான் \"] \nசொற்கள் _ சரம் (\"ஒன்று, இரண்டு, மூன்று, நான்கு, ஐந்து, ஆறு\") = = [\"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\"]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/45", "entry_point": "choose_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 15;\nmy $x0 = choose_num($arg00, $arg01);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 12;\nmy $x1 = choose_num($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 33;\nmy $arg21 = 12354;\nmy $x2 = choose_num($arg20, $arg21);\nmy $v2 = 12354;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5234;\nmy $arg31 = 5233;\nmy $x3 = choose_num($arg30, $arg31);\nmy $v3 = -1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 6;\nmy $arg41 = 29;\nmy $x4 = choose_num($arg40, $arg41);\nmy $v4 = 28;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 27;\nmy $arg51 = 10;\nmy $x5 = choose_num($arg50, $arg51);\nmy $v5 = -1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $arg61 = 7;\nmy $x6 = choose_num($arg60, $arg61);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 546;\nmy $arg71 = 546;\nmy $x7 = choose_num($arg70, $arg71);\nmy $v7 = 546;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "இந்த சார்பு x மற்றும் y என்ற இரண்டு நேர்மறை எண்களை எடுத்து, \n[x, y] வரம்பில் உள்ள மிகப் பெரிய இரட்டை முழு எண். \nஅத்தகைய எண் இல்லை, பின்னர் செயல்பாடு-1 ஐத் திருப்ப வேண்டும். \n\nஉதாரணத்திற்குஃ \nதேர்வு செய்க (12,15) = 14 \nதேர்வு செய்க (13,12) =-1", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/46", "entry_point": "rounded_avg", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $x0 = rounded_avg($arg00, $arg01);\nmy $v0 = \"0b11\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 13;\nmy $x1 = rounded_avg($arg10, $arg11);\nmy $v1 = \"0b1010\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 964;\nmy $arg21 = 977;\nmy $x2 = rounded_avg($arg20, $arg21);\nmy $v2 = \"0b1111001010\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 996;\nmy $arg31 = 997;\nmy $x3 = rounded_avg($arg30, $arg31);\nmy $v3 = \"0b1111100100\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 560;\nmy $arg41 = 851;\nmy $x4 = rounded_avg($arg40, $arg41);\nmy $v4 = \"0b1011000010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 185;\nmy $arg51 = 546;\nmy $x5 = rounded_avg($arg50, $arg51);\nmy $v5 = \"0b101101110\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 362;\nmy $arg61 = 496;\nmy $x6 = rounded_avg($arg60, $arg61);\nmy $v6 = \"0b110101101\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 350;\nmy $arg71 = 902;\nmy $x7 = rounded_avg($arg70, $arg71);\nmy $v7 = \"0b1001110010\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 197;\nmy $arg81 = 233;\nmy $x8 = rounded_avg($arg80, $arg81);\nmy $v8 = \"0b11010111\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 7;\nmy $arg91 = 5;\nmy $x9 = rounded_avg($arg90, $arg91);\nmy $v9 = -1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 5;\nmy $arg101 = 1;\nmy $x10 = rounded_avg($arg100, $arg101);\nmy $v10 = -1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 5;\nmy $arg111 = 5;\nmy $x11 = rounded_avg($arg110, $arg111);\nmy $v11 = \"0b101\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m வழங்கப்படுகின்றன, மேலும் உங்கள் பணி கணக்கிடுவதாகும் \nn முதல் m வரையிலான முழு எண்களின் சராசரி (n மற்றும் m உட்பட). \nஅருகிலுள்ள முழு எண்ணுக்கு பதிலை வட்டமிட்டு அதை பைனரியாக மாற்றவும். \nn என்பது m ஐ விட அதிகமாக இருந்தால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணம்ஃ \nவட்டமான _ avg (1,5) => \"0b11\" \nவட்டமான (7,5) =>-1 \nவட்டமான _ அவ்ஜி (10,20) => \"0பி1111\" \nவட்டமான _ avg (20,33) => \"0b11010\"", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/47", "entry_point": "f", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = f($arg00);\nmy $v0 = [1, 2, 6, 24, 15];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = f($arg10);\nmy $v1 = [1, 2, 6, 24, 15, 720, 28];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = f($arg20);\nmy $v2 = [1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 3;\nmy $x3 = f($arg30);\nmy $v3 = [1, 2, 6];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "n ஐ ஒரு அளவுருவாக எடுக்கும் f செயல்பாட்டை செயல்படுத்தவும், \nமற்றும் அளவு n இன் பட்டியலைத் திருப்பித் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணியாக இருந்தால் i சமமாக இருந்தால் \nஅல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை. \nநான் 1 இல் தொடங்குகிறேன். \ni இன் காரணி என்பது 1 முதல் i (1 * 2 *... * i) வரையிலான எண்களின் பெருக்கமாகும். \nஉதாரணம்ஃ \nf (5) = = [1,2,6,24,15]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/48", "entry_point": "even_odd_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = even_odd_palindrome($arg00);\nmy $v0 = [8, 13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = even_odd_palindrome($arg10);\nmy $v1 = [4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = even_odd_palindrome($arg20);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 63;\nmy $x3 = even_odd_palindrome($arg30);\nmy $v3 = [6, 8];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 25;\nmy $x4 = even_odd_palindrome($arg40);\nmy $v4 = [5, 6];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 19;\nmy $x5 = even_odd_palindrome($arg50);\nmy $v5 = [4, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = even_odd_palindrome($arg60);\nmy $v6 = [4, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $x7 = even_odd_palindrome($arg70);\nmy $v7 = [0, 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், சம மற்றும் ஒற்றைப்படை எண்ணிக்கையைக் கொண்ட ஒரு டுபிலைத் திருப்பவும் \n(1, n) வரம்பிற்குள் வரும் முழு எண் பாலிண்ட்ரோம்கள் உட்பட. \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ 3 \nவெளியீடுஃ (1,2) \nவிளக்கம்ஃ \nமுழு எண் பாலிண்ட்ரோம் 1,2,3. அவற்றில் ஒன்று சமம், அவற்றில் இரண்டு ஒற்றைப்படை. \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ 12 \nவெளியீடுஃ (4,6) \nவிளக்கம்ஃ \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவற்றில் நான்கு சமமானவை, அவற்றில் 6 ஒற்றைப்படை. \n\nகுறிப்புஃ \n1. 1 <= n <= 10 3 \n2. திரும்பிய டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு எண் பாலிண்ட்ரோம்களின் எண்ணிக்கையைக் கொண்டுள்ளது.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/49", "entry_point": "move_one_ball", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 1, 2];\nmy $x0 = move_one_ball($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 5, 10, 1, 2];\nmy $x1 = move_one_ball($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 1, 2];\nmy $x2 = move_one_ball($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 4, 1, 2];\nmy $x3 = move_one_ball($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = move_one_ball($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "நம்மிடம் n முழு எண்களின் வரிசை'arr'உள்ளது arr [1], arr [2],..., arr [N]. \nவரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். என்பதைத் தீர்மானிப்பதே உங்கள் பணி \nசெயல்பாட்டின் மூலம் ஒரு வரிசையை குறைக்காத வரிசையில் வரிசைப்படுத்த முடியும் \nகொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ \nஎத்தனை முறை வேண்டுமானாலும் சரியான ஷிப்ட் செயல்பாட்டைச் செய்ய நீங்கள் அனுமதிக்கப்படுகிறீர்கள். \n\nஒரு வலது ஷிப்ட் செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் ஒன்றால் மாற்றுவதாகும். \nசரியான திசையில் நிலை. வரிசையின் கடைசி உறுப்பு நகர்த்தப்படும் \nவரிசையில் தொடக்க நிலை அதாவது 0 வது குறியீடு. \n\nமேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் \nபின்னர் ட்ரு இல்லையெனில் ஃபால்ஸ் என்று திருப்பிக் கொடுங்கள். \nகொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், சரி என்று திருப்பி விடுங்கள். \n\nகுறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பது உறுதி செய்யப்படுகிறது. \n\nஉதாரணத்திற்குஃ \n\nமூவ் ஒன் பந்து ([3,4,5,1,2]) = => உண்மை \nவிளக்கம்ஃ 2 வலது ஷிப்ட் செயல்பாடுகளில் செயல்படுவதன் மூலம், குறைக்கப்படாத வரிசை முடியும் \nகொடுக்கப்பட்ட வரிசைக்கு அடைய வேண்டும். \nமூவ் ஒன் பந்து ([3,5,4,1,2]) = => பொய் \nவிளக்கம்ஃ கொடுக்கப்பட்ட ஆர்டருக்கு குறைக்கப்படாத ஆர்டரைப் பெற முடியாது \nஎந்த எண்ணிக்கையிலான சரியான ஷிப்ட் செயல்பாடுகளைச் செய்வதன் மூலம் வரிசை.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/50", "entry_point": "exchange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = [1, 2, 3, 4];\nmy $x0 = exchange($arg00, $arg01);\nmy $v0 = \"YES\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [1, 5, 3, 4];\nmy $x1 = exchange($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = [2, 1, 4, 3];\nmy $x2 = exchange($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 7, 3];\nmy $arg31 = [2, 6, 4];\nmy $x3 = exchange($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 7, 3];\nmy $arg41 = [2, 6, 3];\nmy $x4 = exchange($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 2, 6, 1, 8, 9];\nmy $arg51 = [3, 5, 5, 1, 1, 1];\nmy $x5 = exchange($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [100, 200];\nmy $arg61 = [200, 200];\nmy $x6 = exchange($arg60, $arg61);\nmy $v6 = \"YES\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "இந்த சிக்கலில், எண்களின் இரண்டு பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை நீங்கள் செயல்படுத்துவீர்கள், \nமற்றும் கூறுகளின் பரிமாற்றத்தை செய்ய முடியுமா என்பதை தீர்மானிக்கிறது \nஅவர்களிடையே lst1 ஐ இரட்டை எண்களின் பட்டியலை மட்டுமே உருவாக்க வேண்டும். \nlst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. \nசெய்ய lst1 மற்றும் lst2 க்கு இடையில் கூறுகளை பரிமாறிக்கொள்ள முடிந்தால் \nlst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"ஆம்\" என்று திருப்பித் தரவும். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஉதாரணத்திற்குஃ \nபரிமாற்றம் ([1,2,3,4], [1,2,3,4]) => \"ஆம்\" \nபரிமாற்றம் ([1,2,3,4], [1,5,3,4]) => \"இல்லை\" \nஉள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/51", "entry_point": "reverse_delete", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $arg01 = \"ae\";\nmy $x0 = reverse_delete($arg00, $arg01);\nmy $v0 = [\"bcd\", 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\";\nmy $arg11 = \"b\";\nmy $x1 = reverse_delete($arg10, $arg11);\nmy $v1 = [\"acdef\", 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcdedcba\";\nmy $arg21 = \"ab\";\nmy $x2 = reverse_delete($arg20, $arg21);\nmy $v2 = [\"cdedc\", 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"dwik\";\nmy $arg31 = \"w\";\nmy $x3 = reverse_delete($arg30, $arg31);\nmy $v3 = [\"dik\", 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"a\";\nmy $arg41 = \"a\";\nmy $x4 = reverse_delete($arg40, $arg41);\nmy $v4 = [\"\", 1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"abcdedcba\";\nmy $arg51 = \"\";\nmy $x5 = reverse_delete($arg50, $arg51);\nmy $v5 = [\"abcdedcba\", 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"abcdedcba\";\nmy $arg61 = \"v\";\nmy $x6 = reverse_delete($arg60, $arg61);\nmy $v6 = [\"abcdedcba\", 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"vabba\";\nmy $arg71 = \"v\";\nmy $x7 = reverse_delete($arg70, $arg71);\nmy $v7 = [\"abba\", 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"mamma\";\nmy $arg81 = \"mia\";\nmy $x8 = reverse_delete($arg80, $arg81);\nmy $v8 = [\"\", 1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "பணி \nஎங்களுக்கு இரண்டு சரங்கள் s மற்றும் c வழங்கப்பட்டுள்ளன, c இல் உள்ள எந்த எழுத்துக்கும் சமமான s இல் உள்ள அனைத்து எழுத்துக்களையும் நீங்கள் நீக்க வேண்டும். \nபின்னர் ரிசல்ட் ஸ்ட்ரிங் பாலிண்ட்ரோமா என்பதைச் சரிபார்க்கவும். \nஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. \nகாசோலைக்கு முடிவு சரம் மற்றும் உண்மை/தவறு ஆகியவற்றைக் கொண்ட ஒரு டப்பிளை நீங்கள் திருப்பித் தர வேண்டும். \nஉதாரணம் \nஎஸ் = \"ஏபிசிடிஇ\", சி = \"ஏஇ\" க்கு, முடிவு ('பிசிடி', தவறானது) ஆக இருக்க வேண்டும். \ns = \"abcdef\", c = \"b\" க்கு முடிவு ('acdef', பொய்) ஆக இருக்க வேண்டும். \ns = \"abcdedcba\", c = \"ab\" க்கு, முடிவு ('cdedc', உண்மை) ஆக இருக்க வேண்டும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/52", "entry_point": "max_fill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nmy $arg01 = 1;\nmy $x0 = max_fill($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nmy $arg11 = 2;\nmy $x1 = max_fill($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[0, 0, 0], [0, 0, 0]];\nmy $arg21 = 5;\nmy $x2 = max_fill($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg31 = 2;\nmy $x3 = max_fill($arg30, $arg31);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg41 = 9;\nmy $x4 = max_fill($arg40, $arg41);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு செவ்வக கிணறு கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றைக் குறிக்கிறது. \nஒரு வரிசையில் உள்ள ஒவ்வொன்றும் ஒரு ஒற்றை அலகு தண்ணீரைக் குறிக்கிறது. \nஒவ்வொரு கிணற்றிலும் அதனுடன் தொடர்புடைய ஒரு வாளி உள்ளது, அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்க இது பயன்படுத்தப்படலாம். \nமேலும் அனைத்து வாளிகளும் ஒரே மாதிரியான திறனைக் கொண்டுள்ளன. \nகிணறுகளை காலி செய்ய வாளிகளைப் பயன்படுத்துவதே உங்கள் பணி. \nநீங்கள் வாளிகளைக் குறைக்க வேண்டிய எண்ணிக்கையை உள்ளிடவும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nவாளி திறன் (_ c): 1 \nவெளியீடுஃ 6 \n\nஉதாரணம் 2: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1] \nவாளி திறன் (_ c): 2 \nவெளியீடுஃ 5 \n\nஉதாரணம் 3: \nஉள்ளீடுஃ \nகட்டம்ஃ [0,0,0], [0,0,0] \nவாளி திறன்ஃ 5 \nவெளியீடுஃ 0 \n\nகட்டுப்பாடுகள்ஃ \n* அனைத்து கிணறுகளுக்கும் ஒரே நீளம் இருக்கும். \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= கட்டம் [:, 1]. நீளம் <= 10 ^ 2 \nகட்டம் [i] [j]-> 0 | 1 \n* 1 <= திறன் <= 10", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/53", "entry_point": "select_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Mary had a little lamb\";\nmy $arg01 = 4;\nmy $x0 = select_words($arg00, $arg01);\nmy $v0 = [\"little\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mary had a little lamb\";\nmy $arg11 = 3;\nmy $x1 = select_words($arg10, $arg11);\nmy $v1 = [\"Mary\", \"lamb\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"simple white space\";\nmy $arg21 = 2;\nmy $x2 = select_words($arg20, $arg21);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hello world\";\nmy $arg31 = 4;\nmy $x3 = select_words($arg30, $arg31);\nmy $v3 = [\"world\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Uncle sam\";\nmy $arg41 = 3;\nmy $x4 = select_words($arg40, $arg41);\nmy $v4 = [\"Uncle\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"\";\nmy $arg51 = 4;\nmy $x5 = select_words($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"a b c d e f\";\nmy $arg61 = 1;\nmy $x6 = select_words($arg60, $arg61);\nmy $v6 = [\"b\", \"c\", \"d\", \"f\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிக்கப்பட்டுள்ளீர்கள் \nசரம் s இலிருந்து அனைத்து சொற்களின் பட்டியலையும் சரியாக உள்ளடக்கிய ஒரு செயல்பாடு \nn மெய், வரிசையில் இந்த சொற்கள் சரம் s இல் தோன்றும். \nசரம் s காலியாக இருந்தால், செயல்பாடு ஒரு வெற்று பட்டியலைத் திருப்பித் தர வேண்டும். \nகுறிப்புஃ உள்ளீட்டு சரத்தில் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே உள்ளன என்று நீங்கள் கருதலாம். \nஉதாரணங்கள்ஃ \nதேர்ந்தெடுக்கும் சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) = => [\"சிறிய\"] \nதேர்ந்தெடுக்கப்பட்ட சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) = => [\"மேரி\", \"ஆட்டுக்குட்டி\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"எளிய வெள்ளை இடம்\", 2) = => [] \nதேர்ந்தெடுக்கும் சொற்கள் (\"ஹலோ வேர்ல்ட்\", 4) = => [\"வேர்ல்ட்\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"மாமா சாம்\", 3) = => [\"மாமா\"]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/54", "entry_point": "maximum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-3, -4, 5];\nmy $arg01 = 3;\nmy $x0 = maximum($arg00, $arg01);\nmy $v0 = [-4, -3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, -4, 4];\nmy $arg11 = 2;\nmy $x1 = maximum($arg10, $arg11);\nmy $v1 = [4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, 2, 1, 2, -1, -2, 1];\nmy $arg21 = 1;\nmy $x2 = maximum($arg20, $arg21);\nmy $v2 = [2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [123, -123, 20, 0, 1, 2, -3];\nmy $arg31 = 3;\nmy $x3 = maximum($arg30, $arg31);\nmy $v3 = [2, 20, 123];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-123, 20, 0, 1, 2, -3];\nmy $arg41 = 4;\nmy $x4 = maximum($arg40, $arg41);\nmy $v4 = [0, 1, 2, 20];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 15, 0, 3, -13, -8, 0];\nmy $arg51 = 7;\nmy $x5 = maximum($arg50, $arg51);\nmy $v5 = [-13, -8, 0, 0, 3, 5, 15];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, 0, 2, 5, 3, -10];\nmy $arg61 = 2;\nmy $x6 = maximum($arg60, $arg61);\nmy $v6 = [3, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 0, 5, -7];\nmy $arg71 = 1;\nmy $x7 = maximum($arg70, $arg71);\nmy $v7 = [5];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [4, -4];\nmy $arg81 = 2;\nmy $x8 = maximum($arg80, $arg81);\nmy $v8 = [-4, 4];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-10, 10];\nmy $arg91 = 2;\nmy $x9 = maximum($arg90, $arg91);\nmy $v9 = [-10, 10];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 2, 3, -23, 243, -400, 0];\nmy $arg101 = 0;\nmy $x10 = maximum($arg100, $arg101);\nmy $v10 = [];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "முழு எண்களின் வரிசை arr மற்றும் நேர்மறை முழு எண் k கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பித் தரவும். \narr இல் அதிகபட்ச k எண்களுடன் k நீளம். \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ arr = [-3,-4,5], k = 3 \nவெளியீடுஃ [-4,-3,5] \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ arr = [4,-4,4], k = 2 \nவெளியீடுஃ [4,4] \n\nஉதாரணம் 3: \n\nஉள்ளீடுஃ arr = [-3,2,1,2,-1,2,1], k = 1 \nவெளியீடுஃ [2] \n\nகுறிப்புஃ \n1. வரிசையின் நீளம் [1000] வரம்பில் இருக்கும். \n2. வரிசையில் உள்ள உறுப்புகள் [-1000] வரம்பில் இருக்கும். \n3. 0 <= k <= லென் (arr)", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/55", "entry_point": "add_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\nmy $arg01 = 3;\nmy $x0 = add_elements($arg00, $arg01);\nmy $v0 = -4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [111, 121, 3, 4000, 5, 6];\nmy $arg11 = 2;\nmy $x1 = add_elements($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\nmy $arg21 = 4;\nmy $x2 = add_elements($arg20, $arg21);\nmy $v2 = 125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nmy $arg31 = 4;\nmy $x3 = add_elements($arg30, $arg31);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $arg41 = 1;\nmy $x4 = add_elements($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்பவும் \narr இன் முதல் k உறுப்புகளிலிருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் கூட்டுத்தொகை. \n\nஉதாரணம்ஃ \n\nஉள்ளீடுஃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nவெளியீடுஃ 24 #21 + 3 இன் கூட்டுத்தொகை \n\nகட்டுப்பாடுகள்ஃ \n1. 1 <= லென் (arr) <= 100 \n2. 1 <= k <= லென் (arr)", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/56", "entry_point": "intersection", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2];\nmy $arg01 = [2, 3];\nmy $x0 = intersection($arg00, $arg01);\nmy $v0 = \"NO\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 1];\nmy $arg11 = [0, 4];\nmy $x1 = intersection($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, -1];\nmy $arg21 = [-5, 5];\nmy $x2 = intersection($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-2, 2];\nmy $arg31 = [-4, 0];\nmy $x3 = intersection($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-11, 2];\nmy $arg41 = [-1, -1];\nmy $x4 = intersection($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 2];\nmy $arg51 = [3, 5];\nmy $x5 = intersection($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2];\nmy $arg61 = [1, 2];\nmy $x6 = intersection($arg60, $arg61);\nmy $v6 = \"NO\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-2, -2];\nmy $arg71 = [-3, -2];\nmy $x7 = intersection($arg70, $arg71);\nmy $v7 = \"NO\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "உங்களுக்கு இரண்டு இடைவெளிகள் வழங்கப்படுகின்றன, \nஇங்கு ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்களாகும். எடுத்துக்காட்டாக, இடைவெளி = (தொடக்கம், முடிவு) = (1,2). \nகொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டுள்ளன, அதாவது இடைவெளி (தொடக்கம், முடிவு) \nஇதில் தொடக்கமும் முடிவும் அடங்கும். \nகொடுக்கப்பட்ட ஒவ்வொரு இடைவெளியிலும், அதன் தொடக்கம் அதன் முடிவை விட குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது. \nஇந்த இரண்டின் குறுக்குவெட்டின் நீளம் எவ்வளவு என்பதைத் தீர்மானிப்பதே உங்கள் பணி. \nஇடைவெளிகள் ஒரு பகா எண். \nஎடுத்துக்காட்டாக, (1,3), (2,4) இடைவெளிகளின் குறுக்குவெட்டு (2,3) ஆகும். \nஅதன் நீளம் 1, இது ஒரு பகா எண் அல்ல. \nகுறுக்குவெட்டின் நீளம் ஒரு பகா எண்ணாக இருந்தால், \"ஆம்\" என்று திருப்பிக் கொடுங்கள். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஇரண்டு இடைவெளிகளும் வெட்டவில்லை என்றால், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \n\n[உள்ளீடு/வெளியீடு] மாதிரிகள்ஃ \nகுறுக்குவெட்டு ((1,2,3)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-1,1), (0,4)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-3,-1), (-5,5)) = => \"ஆம்\"", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/57", "entry_point": "tri", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = tri($arg00);\nmy $v0 = [1, 3, 2.0, 8.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = tri($arg10);\nmy $v1 = [1, 3, 2.0, 8.0, 3.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = tri($arg20);\nmy $v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = tri($arg30);\nmy $v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $x4 = tri($arg40);\nmy $v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 8;\nmy $x5 = tri($arg50);\nmy $v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = tri($arg60);\nmy $v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 20;\nmy $x7 = tri($arg70);\nmy $v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 0;\nmy $x8 = tri($arg80);\nmy $v8 = [1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $x9 = tri($arg90);\nmy $v9 = [1, 3];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "எல்லோருக்கும் ஃபிபோனாச்சி வரிசை தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது \nகடந்த இரண்டு நூற்றாண்டுகள். இருப்பினும், மக்களுக்குத் தெரியாதது டிரிபோனாச்சி வரிசை. \nடிரிபோனாச்சி வரிசை மீண்டும் மீண்டும் வரையறுக்கப்படுகிறதுஃ \nமுக்கோணம் (1) = 3 \nமுக்கோணம் (n) = 1 + n/2, n சமமாக இருந்தால். \nமுக்கோணம் (n) = முக்கோணம் (n-1) + முக்கோணம் (n-2) + முக்கோணம் (n + 1), n ஒற்றைப்படை என்றால். \nஉதாரணத்திற்குஃ \nமுக்கோணம் (2) = 1 + (2/2) = 2 \nமுக்கோணம் (4) = 3 \nமுக்கோணம் (3) = முக்கோணம் (2) + முக்கோணம் (1) + முக்கோணம் (4) \n= 2 + 3 + 3 = 8 \nஉங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n வழங்கப்படுகிறது, நீங்கள் ஒரு பட்டியலைத் திருப்பித் தர வேண்டும் \nடிரிபோனாச்சி வரிசையின் முதல் n + 1 எண்கள். \nஉதாரணங்கள்ஃ \nமுக்கோணம் (3) = [1,3,2,8]", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/58", "entry_point": "digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = digits($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 54;\nmy $x1 = digits($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = digits($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5014;\nmy $x3 = digits($arg30);\nmy $v3 = 5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 98765;\nmy $x4 = digits($arg40);\nmy $v4 = 315;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 5576543;\nmy $x5 = digits($arg50);\nmy $v5 = 2625;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2468;\nmy $x6 = digits($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றைப்படை இலக்கங்களின் பெருக்கல் திரும்பும். \nஅனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பவும். \nஉதாரணத்திற்குஃ \nஇலக்கங்கள் (1) = = 1 \nஇலக்கங்கள் (4) = = 0 \nஇலக்கங்கள் (235) = = 15", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/59", "entry_point": "is_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"[[]]\";\nmy $x0 = is_nested($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"[]]]]]]][[[[[]\";\nmy $x1 = is_nested($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"[][]\";\nmy $x2 = is_nested($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"[]\";\nmy $x3 = is_nested($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"[[[[]]]]\";\nmy $x4 = is_nested($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"[]]]]]]]]]]\";\nmy $x5 = is_nested($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"[][][[]]\";\nmy $x6 = is_nested($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"[[]\";\nmy $x7 = is_nested($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"[]]\";\nmy $x8 = is_nested($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"[[]][[\";\nmy $x9 = is_nested($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"[[][]]\";\nmy $x10 = is_nested($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"\";\nmy $x11 = is_nested($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"[[[[[[[[\";\nmy $x12 = is_nested($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"]]]]]]]]\";\nmy $x13 = is_nested($arg130);\nmy $v13 = 0;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "சதுர அடைப்புகளை மட்டுமே கொண்ட ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். \nஅடைப்புக்குறிகளின் செல்லுபடியாகும் பின்தொடர்தல் இருந்தால் மட்டுமே செயல்பாடு உண்மை என்று திரும்ப வேண்டும் \nஅங்கு அடுத்தடுத்த குறைந்தபட்சம் ஒரு அடைப்புக்குறிப்பு கூடு கட்டப்பட்டுள்ளது. \n\nnested ('[[]]') என்பது உண்மை \nis _ nested ('[]]]]] [[[[]') பொய் \nis _ nested ('[] []') பொய் \nis _ nested ('[]') என்பது தவறானது \nnested ('[[] []]') என்பது உண்மை \nnested ('[[]] [[') என்பது உண்மை", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/60", "entry_point": "sum_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sum_squares($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2, 3];\nmy $x1 = sum_squares($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7];\nmy $x2 = sum_squares($arg20);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.4, 4.2, 0];\nmy $x3 = sum_squares($arg30);\nmy $v3 = 29;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-2.4, 1, 1];\nmy $x4 = sum_squares($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [100, 1, 15, 2];\nmy $x5 = sum_squares($arg50);\nmy $v5 = 10230;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [10000, 10000];\nmy $x6 = sum_squares($arg60);\nmy $v6 = 200000000;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1.4, 4.6, 6.3];\nmy $x7 = sum_squares($arg70);\nmy $v7 = 75;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1.4, 17.9, 18.9, 19.9];\nmy $x8 = sum_squares($arg80);\nmy $v8 = 1086;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [0];\nmy $x9 = sum_squares($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-1];\nmy $x10 = sum_squares($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [-1, 1, 0];\nmy $x11 = sum_squares($arg110);\nmy $v11 = 2;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "உங்களுக்கு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nகொடுக்கப்பட்ட பட்டியலில் உள்ள வர்க்க எண்களின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும், \nபட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் முதலில் மேல் உள்ளீடு (உச்சவரம்பு) க்கு சுற்றவும். \nஉதாரணங்கள்ஃ \nlst = [1,2,3] க்கு வெளியீடு 14 ஆக இருக்க வேண்டும். \nlst = [1,4,9] க்கு வெளியீடு 98 ஆக இருக்க வேண்டும். \nlst = [1,3,5, 7] க்கு வெளியீடு 84 ஆக இருக்க வேண்டும். \nlst = [1.4,4.2, 0] க்கு வெளியீடு 29 ஆக இருக்க வேண்டும். \nlst = [-2.4,1, 1] க்கு வெளியீடு 6 ஆக இருக்க வேண்டும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/61", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"apple\";\nmy $x0 = check_if_last_char_is_a_letter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"apple pi e\";\nmy $x1 = check_if_last_char_is_a_letter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eeeee\";\nmy $x2 = check_if_last_char_is_a_letter($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"A\";\nmy $x3 = check_if_last_char_is_a_letter($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Pumpkin pie \";\nmy $x4 = check_if_last_char_is_a_letter($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Pumpkin pie 1\";\nmy $x5 = check_if_last_char_is_a_letter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = check_if_last_char_is_a_letter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"eeeee e \";\nmy $x7 = check_if_last_char_is_a_letter($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"apple pie\";\nmy $x8 = check_if_last_char_is_a_letter($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"apple pi e \";\nmy $x9 = check_if_last_char_is_a_letter($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "கடைசி எழுத்து இருந்தால் சரி என்று திரும்பும் செயல்பாட்டை உருவாக்கவும் \nகொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை \nஒரு வார்த்தையின் ஒரு பகுதி, இல்லையெனில் பொய். \nகுறிப்புஃ \"சொல்\" என்பது இடத்தால் பிரிக்கப்பட்ட எழுத்துக்களின் தொகுப்பாகும். \n\nஉதாரணங்கள்ஃ \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ ஒரு _ எழுத்து (\"ஆப்பிள் பை\") \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") சரி \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") பொய் \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"\") பொய்", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/62", "entry_point": "can_arrange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 3, 5];\nmy $x0 = can_arrange($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $x1 = can_arrange($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\nmy $x2 = can_arrange($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 8, 5, 7, 3];\nmy $x3 = can_arrange($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = can_arrange($arg40);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "ஒரு தனிமத்தின் மிகப்பெரிய குறியீட்டைத் தரும் செயல்பாட்டை உருவாக்கவும் \nஅது உடனடியாக அதற்கு முந்தைய உறுப்பை விட பெரியதாகவோ அல்லது சமமாகவோ இல்லை. \nஅத்தகைய உறுப்பு எதுவும் இல்லை, பின்னர் திரும்பும்-1. கொடுக்கப்பட்ட வரிசை கொண்டிருக்காது \nஇரட்டை மதிப்புகள். \n\nஉதாரணங்கள்ஃ \ncan _ அரங்கேற்றலாம் ([1,2,4, 3,5]) = 3 \nசெய்ய முடியும் ([1,2,3]) =-1", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/63", "entry_point": "largest_smallest_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 1, 3, 5, 7];\nmy $x0 = largest_smallest_integers($arg00);\nmy $v0 = [\"none\", 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 1, 3, 5, 7, 0];\nmy $x1 = largest_smallest_integers($arg10);\nmy $v1 = [\"none\", 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2, 4, 5, 6, -2];\nmy $x2 = largest_smallest_integers($arg20);\nmy $v2 = [-2, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 5, 3, 6, 2, 7, -7];\nmy $x3 = largest_smallest_integers($arg30);\nmy $v3 = [-7, 2];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\nmy $x4 = largest_smallest_integers($arg40);\nmy $v4 = [-9, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [];\nmy $x5 = largest_smallest_integers($arg50);\nmy $v5 = [\"none\", \"none\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [0];\nmy $x6 = largest_smallest_integers($arg60);\nmy $v6 = [\"none\", \"none\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1, -3, -5, -6];\nmy $x7 = largest_smallest_integers($arg70);\nmy $v7 = [-1, \"none\"];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1, -3, -5, -6, 0];\nmy $x8 = largest_smallest_integers($arg80);\nmy $v8 = [-1, \"none\"];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-6, -4, -4, -3, 1];\nmy $x9 = largest_smallest_integers($arg90);\nmy $v9 = [-3, 1];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-6, -4, -4, -3, -100, 1];\nmy $x10 = largest_smallest_integers($arg100);\nmy $v10 = [-3, 1];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "ஒரு டுபில் (a, b) ஐத் தரும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு'a'என்பது \nஎதிர்மறை முழு எண்களில் மிகப் பெரியது, மற்றும்'b'மிகச்சிறியது \nஒரு பட்டியலில் நேர்மறை முழு எண்கள். \nஎதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை இல்லை என்று திருப்பித் தரவும். \n\nஉதாரணங்கள்ஃ \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([2,4,1,3,5,7]) = = (எதுவும் இல்லை, 1) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([]) = = (எதுவும் இல்லை, எதுவும் இல்லை) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([0]) = = (எதுவும் இல்லை, எதுவும் இல்லை)", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/64", "entry_point": "special_factorial", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = special_factorial($arg00);\nmy $v0 = 288;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = special_factorial($arg10);\nmy $v1 = 34560;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = special_factorial($arg20);\nmy $v2 = 125411328000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1;\nmy $x3 = special_factorial($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nபிரேசில் _ காரணி (n) = n! * (n-1)! * (n-2)! *... * 1! \nஇங்கு n> 0 \n\nஉதாரணத்திற்குஃ \n>>> சிறப்பு _ காரணி (4) \n288 \n\nசெயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும், மேலும் சிறப்புத் தொகையைத் திருப்பித் தர வேண்டும். \nஇந்த முழு எண்ணின் காரணி.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/65", "entry_point": "words_in_sentence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"This is a test\";\nmy $x0 = words_in_sentence($arg00);\nmy $v0 = \"is\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lets go for swimming\";\nmy $x1 = words_in_sentence($arg10);\nmy $v1 = \"go for\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"there is no place available here\";\nmy $x2 = words_in_sentence($arg20);\nmy $v2 = \"there is no place\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hi I am Hussein\";\nmy $x3 = words_in_sentence($arg30);\nmy $v3 = \"Hi am Hussein\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"go for it\";\nmy $x4 = words_in_sentence($arg40);\nmy $v4 = \"go for it\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"here\";\nmy $x5 = words_in_sentence($arg50);\nmy $v5 = \"\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"here is\";\nmy $x6 = words_in_sentence($arg60);\nmy $v6 = \"is\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "ஒரு வாக்கியத்தைக் குறிக்கும் சரம் உங்களுக்கு வழங்கப்படுகிறது, \nவாக்கியத்தில் ஒரு இடைவெளியால் பிரிக்கப்பட்ட சில சொற்கள் உள்ளன, \nஅசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை நீங்கள் திருப்பித் தர வேண்டும், \nஅதன் நீளம் பகா எண்கள், \nபுதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் வரிசையைப் போலவே இருக்க வேண்டும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" \nவெளியீடுஃ \"உள்ளது\" \n\nஉதாரணம் 2: \nஉள்ளீடுஃ வாக்கியம் = \"நீச்சலுக்கு செல்வோம்\" \nவெளியீடுஃ \"செல்லுங்கள்\" \n\nகட்டுப்பாடுகள்ஃ \n* 1 <= லென் (வாக்கியம்) <= 100 \n* வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/66", "entry_point": "simplify", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1/5\";\nmy $arg01 = \"5/1\";\nmy $x0 = simplify($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1/6\";\nmy $arg11 = \"2/1\";\nmy $x1 = simplify($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"5/1\";\nmy $arg21 = \"3/1\";\nmy $x2 = simplify($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"7/10\";\nmy $arg31 = \"10/2\";\nmy $x3 = simplify($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"2/10\";\nmy $arg41 = \"50/10\";\nmy $x4 = simplify($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"7/2\";\nmy $arg51 = \"4/2\";\nmy $x5 = simplify($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"11/6\";\nmy $arg61 = \"6/1\";\nmy $x6 = simplify($arg60, $arg61);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"2/3\";\nmy $arg71 = \"5/2\";\nmy $x7 = simplify($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"5/2\";\nmy $arg81 = \"3/5\";\nmy $x8 = simplify($arg80, $arg81);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"2/4\";\nmy $arg91 = \"8/4\";\nmy $x9 = simplify($arg90, $arg91);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"2/4\";\nmy $arg101 = \"4/2\";\nmy $x10 = simplify($arg100, $arg101);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"1/5\";\nmy $arg111 = \"5/1\";\nmy $x11 = simplify($arg110, $arg111);\nmy $v11 = 1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"1/5\";\nmy $arg121 = \"1/5\";\nmy $x12 = simplify($arg120, $arg121);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "உங்கள் பணி வெளிப்பாட்டை எளிதாக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவதாகும் \nx * n. x * n ஒரு முழு எண்ணை மதிப்பீடு செய்தால் சரி மற்றும் தவறு என்று செயல்பாடு காட்டும். \nஇல்லையெனில். x மற்றும் n இரண்டும், ஒரு பின்னத்தின் சரம் பிரதிநிதித்துவம் மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, \nஇங்கு எண் மற்றும் வகுத்தல் இரண்டும் நேர்மறை முழு எண்களாகும். \n\nx, மற்றும் n ஆகியவை செல்லுபடியாகும் பின்னங்கள் என்றும், பூஜ்ஜியத்தை வகுப்பாகக் கொண்டிருக்கவில்லை என்றும் நீங்கள் கருதலாம். \n\nஎளிமைப்படுத்தவும் (\"1/5\", \"5/1\") = உண்மை \nஎளிமைப்படுத்துதல் (\"1/6\", \"2/1\") = தவறு \nஎளிமைப்படுத்தவும் (\"7/10\", \"10/2\") = தவறு", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/67", "entry_point": "order_by_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 11, -1, -11, -12];\nmy $x0 = order_by_points($arg00);\nmy $v0 = [-1, -11, 1, -12, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\nmy $x1 = order_by_points($arg10);\nmy $v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = order_by_points($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\nmy $x3 = order_by_points($arg30);\nmy $v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nmy $x4 = order_by_points($arg40);\nmy $v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 6, 6, -76, -21, 23, 4];\nmy $x5 = order_by_points($arg50);\nmy $v5 = [-76, -21, 0, 4, 23, 6, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள் \nஅவற்றின் இலக்கங்களின் கூட்டுத்தொகையின்படி ஏறுவரிசையில். \nகுறிப்புஃ பல உருப்படிகள் அவற்றின் இலக்கங்களின் ஒத்த கூட்டுத்தொகையுடன் இருந்தால், \nஅசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை ஆர்டர் செய்யுங்கள். \n\nஉதாரணத்திற்குஃ \n>> வரிசைப் புள்ளிகள் ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ஆர்டர் _ பை _ பாயிண்ட்ஸ் ([]) = = []", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/68", "entry_point": "specialfilter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, -2, 1, -5];\nmy $x0 = specialfilter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [15, -73, 14, -15];\nmy $x1 = specialfilter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [33, -2, -3, 45, 21, 109];\nmy $x2 = specialfilter($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [43, -12, 93, 125, 121, 109];\nmy $x3 = specialfilter($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [71, -2, -33, 75, 21, 19];\nmy $x4 = specialfilter($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1];\nmy $x5 = specialfilter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = specialfilter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "எண்களின் வரிசையை உள்ளீடாகவும் திரும்பவும் எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள் \nவரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 க்கும் அதிகமாக உள்ளது மற்றும் இரண்டும் \nஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1,3,5,7,9). \nஉதாரணத்திற்குஃ \nசிறப்பு வடிகட்டி ([15,-73,14,-15]) => 1 \nசிறப்பு வடிகட்டி ([33,-2,-3,45,21,109]) => 2", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/69", "entry_point": "get_max_triples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = get_max_triples($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = get_max_triples($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = get_max_triples($arg20);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = get_max_triples($arg30);\nmy $v3 = 53361;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீங்கள் n நீளமுள்ள ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும். \nஒவ்வொரு i க்கும் (1 ≤ i ≤ n), a [i] = i * i-i + 1 இன் மதிப்பு. \ni <j <k என்ற இடத்தின் மூன்று மடங்குகளின் (a [i], a [j], a [k]) எண்ணிக்கையைத் திருப்பித் தரவும். \nமேலும் a [i] + a [j] + a [k] என்பது 3 இன் பெருக்கமாகும். \n\nஉதாரணம்ஃ \nஉள்ளீடுஃ n = 5 \nவெளியீடுஃ 1 \nவிளக்கம்ஃ \na = [1,3,7,13,21] \nஒரே செல்லுபடியாகும் மூன்று (1,7,13) ஆகும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/70", "entry_point": "bf", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Jupiter\";\nmy $arg01 = \"Neptune\";\nmy $x0 = bf($arg00, $arg01);\nmy $v0 = [\"Saturn\", \"Uranus\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Earth\";\nmy $arg11 = \"Mercury\";\nmy $x1 = bf($arg10, $arg11);\nmy $v1 = [\"Venus\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Mercury\";\nmy $arg21 = \"Uranus\";\nmy $x2 = bf($arg20, $arg21);\nmy $v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Neptune\";\nmy $arg31 = \"Venus\";\nmy $x3 = bf($arg30, $arg31);\nmy $v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Earth\";\nmy $arg41 = \"Earth\";\nmy $x4 = bf($arg40, $arg41);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Mars\";\nmy $arg51 = \"Earth\";\nmy $x5 = bf($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"Jupiter\";\nmy $arg61 = \"Makemake\";\nmy $x6 = bf($arg60, $arg61);\nmy $v6 = [];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளனஃ சூரியனுக்கு மிக நெருக்கமானவை. \nபுதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, \nயுரேனஸ், நெப்டியூன். \nகிரகம் 1 மற்றும் கிரகம் 2 என இரண்டு கிரக பெயர்களை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள். \nசெயல்பாடு அதன் சுற்றுப்பாதைகள் அனைத்து கிரகங்கள் கொண்ட ஒரு tuple திரும்ப வேண்டும் \nகிரகம் 1 இன் சுற்றுப்பாதைக்கும் கிரகம் 2 இன் சுற்றுப்பாதைக்கும் இடையில் அமைந்துள்ளது, வரிசைப்படுத்தப்பட்டுள்ளது \nசூரியனின் அருகாமை. \nகிரகம் 1 அல்லது கிரகம் 2 என்றால் செயல்பாடு ஒரு வெற்று டப்பிளை திருப்ப வேண்டும் \nகிரகங்களின் பெயர்கள் சரியானவை அல்ல. \nஉதாரணங்கள் \nbf (\"வியாழன்\", \"நெப்டியூன்\") = => (\"சனி\", \"யுரேனஸ்\") \nbf (\"பூமி\", \"புதன்\") = => (\"வீனஸ்\") \nbf (\"புதன்\", \"யுரேனஸ்\") = => (\"வீனஸ்\", \"பூமி\", \"செவ்வாய்\", \"வியாழன்\", \"சனி\")", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/71", "entry_point": "x_or_y", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 34;\nmy $arg02 = 12;\nmy $x0 = x_or_y($arg00, $arg01, $arg02);\nmy $v0 = 34;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 8;\nmy $arg12 = 5;\nmy $x1 = x_or_y($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 33;\nmy $arg22 = 5212;\nmy $x2 = x_or_y($arg20, $arg21, $arg22);\nmy $v2 = 33;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1259;\nmy $arg31 = 3;\nmy $arg32 = 52;\nmy $x3 = x_or_y($arg30, $arg31, $arg32);\nmy $v3 = 3;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7919;\nmy $arg41 = -1;\nmy $arg42 = 12;\nmy $x4 = x_or_y($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 3609;\nmy $arg51 = 1245;\nmy $arg52 = 583;\nmy $x5 = x_or_y($arg50, $arg51, $arg52);\nmy $v5 = 583;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 91;\nmy $arg61 = 56;\nmy $arg62 = 129;\nmy $x6 = x_or_y($arg60, $arg61, $arg62);\nmy $v6 = 129;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 6;\nmy $arg71 = 34;\nmy $arg72 = 1234;\nmy $x7 = x_or_y($arg70, $arg71, $arg72);\nmy $v7 = 1234;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 1;\nmy $arg81 = 2;\nmy $arg82 = 0;\nmy $x8 = x_or_y($arg80, $arg81, $arg82);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 2;\nmy $arg91 = 2;\nmy $arg92 = 0;\nmy $x9 = x_or_y($arg90, $arg91, $arg92);\nmy $v9 = 2;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "ஒரு எளிய நிரல், இது n என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும் \nஒரு பகா எண் மற்றும் இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nx _ அல்லது _ y க்கு (7,34,12) = = 34 \nx _ அல்லது _ y க்கு (15,8,5) = = 5", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/72", "entry_point": "double_the_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = double_the_difference($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 4];\nmy $x1 = double_the_difference($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.1, 0.2, 0.3];\nmy $x2 = double_the_difference($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-10, -20, -30];\nmy $x3 = double_the_difference($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-1, -2, 8];\nmy $x4 = double_the_difference($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0.2, 3, 5];\nmy $x5 = double_the_difference($arg50);\nmy $v5 = 34;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\nmy $x6 = double_the_difference($arg60);\nmy $v6 = 166650;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால், எண்களின் வர்க்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். \nஒற்றைப்படை பட்டியலில். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். \n\nஇரட்டை வேறுபாடு ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nஇரட்டை வேறுபாடு ([-1,0]) = = 0 \nஇரட்டை வேறுபாடு ([9,-2]) = = 81 \nஇரட்டை _ தி _ வேறுபாடு ([0]) = = 0 \n\nஉள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பித் தரவும்.", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/73", "entry_point": "strongest_extension", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Watashi\";\nmy $arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\nmy $x0 = strongest_extension($arg00, $arg01);\nmy $v0 = \"Watashi.eIGHt8OKe\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Boku123\";\nmy $arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\nmy $x1 = strongest_extension($arg10, $arg11);\nmy $v1 = \"Boku123.YEs.WeCaNe\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"__YESIMHERE\";\nmy $arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\nmy $x2 = strongest_extension($arg20, $arg21);\nmy $v2 = \"__YESIMHERE.NuLl__\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"K\";\nmy $arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\nmy $x3 = strongest_extension($arg30, $arg31);\nmy $v3 = \"K.TAR\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"__HAHA\";\nmy $arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\nmy $x4 = strongest_extension($arg40, $arg41);\nmy $v4 = \"__HAHA.123\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"YameRore\";\nmy $arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\nmy $x5 = strongest_extension($arg50, $arg51);\nmy $v5 = \"YameRore.okIWILL123\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"finNNalLLly\";\nmy $arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\nmy $x6 = strongest_extension($arg60, $arg61);\nmy $v6 = \"finNNalLLly.WoW\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"_\";\nmy $arg71 = [\"Bb\", \"91245\"];\nmy $x7 = strongest_extension($arg70, $arg71);\nmy $v7 = \"_.Bb\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"Sp\";\nmy $arg81 = [\"671235\", \"Bb\"];\nmy $x8 = strongest_extension($arg80, $arg81);\nmy $v8 = \"Sp.671235\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் வழங்கப்படும். \nவகுப்புக்கு கூடுதல் வகுப்புகளை ஏற்றுவதற்கு நீட்டிப்புகள் பயன்படுத்தப்பட வேண்டும். \nநீட்டிப்பின் வலிமை பின்வருமாறுஃ CAP என்பது பெரிய எழுத்தின் எண்ணாக இருக்கட்டும். \nநீட்டிப்பின் பெயரில் உள்ள எழுத்துக்கள், மற்றும் எஸ். எம் சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும் \nநீட்டிப்பின் பெயரில், வலிமை CAP-ஏஸஏம என்ற பின்னத்தால் வழங்கப்படுகிறது. \nநீங்கள் வலுவான நீட்டிப்பைக் கண்டுபிடித்து இதில் ஒரு சரத்தைத் திருப்ப வேண்டும். \nவடிவம்ஃ ClassName.StrongestExtensionName. \nஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், நீங்கள் செய்ய வேண்டும் \nபட்டியலில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும். \nஎடுத்துக்காட்டாக, உங்களுக்கு \"ஸ்லைஸ்கள்\" வகுப்பாகவும் ஒரு பட்டியலாகவும் வழங்கப்பட்டால் \nநீட்டிப்புகள்ஃ ['SERVINGSliCes','சீஸ்','ஸ்டுஃபெட்'] பின்னர் நீங்கள் செய்ய வேண்டும் \n'SERVINGSliCes'வலுவான நீட்டிப்பாக இருப்பதால்'Slices.SErviNGSliCes'ஐத் திருப்பவும் \n(அதன் வலிமை-1). \nஉதாரணம்ஃ \nவலுவான _ நீட்டிப்புக்கு ('எனது _ வகுப்பு', ['AA','Be','CC']) = ='my_class.AA'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/74", "entry_point": "cycpattern_check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"xyzw\";\nmy $arg01 = \"xyw\";\nmy $x0 = cycpattern_check($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"yello\";\nmy $arg11 = \"ell\";\nmy $x1 = cycpattern_check($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"whattup\";\nmy $arg21 = \"ptut\";\nmy $x2 = cycpattern_check($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"efef\";\nmy $arg31 = \"fee\";\nmy $x3 = cycpattern_check($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abab\";\nmy $arg41 = \"aabb\";\nmy $x4 = cycpattern_check($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"winemtt\";\nmy $arg51 = \"tinem\";\nmy $x5 = cycpattern_check($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு அடி மூலக்கூறாக இருந்தால் நீங்கள் உண்மை என்று திருப்பித் தர வேண்டும். \nசைக்பாடர்ன் _ செக் (\"abcd\", \"abd\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹலோ\", \"எல்\") => உண்மை \nசைக்பேட்டர்ன் _ செக் (\"வஸ்ஸப்\", \"psus\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"அபாப்\", \"பா\") => உண்மை \nசைக்பாடர்ன் _ செக் (\"ஈஃபெஃப்\", \"ஈஃபெஃப்\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹீமென்ஸ்\", \"சைமென்\") => உண்மை", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/75", "entry_point": "int_to_mini_roman", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 19;\nmy $x0 = int_to_mini_roman($arg00);\nmy $v0 = \"xix\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 152;\nmy $x1 = int_to_mini_roman($arg10);\nmy $v1 = \"clii\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 251;\nmy $x2 = int_to_mini_roman($arg20);\nmy $v2 = \"ccli\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 426;\nmy $x3 = int_to_mini_roman($arg30);\nmy $v3 = \"cdxxvi\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 500;\nmy $x4 = int_to_mini_roman($arg40);\nmy $v4 = \"d\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 1;\nmy $x5 = int_to_mini_roman($arg50);\nmy $v5 = \"i\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 4;\nmy $x6 = int_to_mini_roman($arg60);\nmy $v6 = \"iv\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 43;\nmy $x7 = int_to_mini_roman($arg70);\nmy $v7 = \"xliii\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 90;\nmy $x8 = int_to_mini_roman($arg80);\nmy $v8 = \"xc\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 94;\nmy $x9 = int_to_mini_roman($arg90);\nmy $v9 = \"xciv\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 532;\nmy $x10 = int_to_mini_roman($arg100);\nmy $v10 = \"dxxxii\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 900;\nmy $x11 = int_to_mini_roman($arg110);\nmy $v11 = \"cm\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 994;\nmy $x12 = int_to_mini_roman($arg120);\nmy $v12 = \"cmxciv\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 1000;\nmy $x13 = int_to_mini_roman($arg130);\nmy $v13 = \"m\";\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "ஒரு நேர்மறை முழு எண்ணைக் கொடுத்தால், அதன் ரோமானிய எண்ணை ஒரு சரமாக சமமாகப் பெறுங்கள், \nஅதை சிறிய எழுத்தில் திருப்பி விடுங்கள். \nகட்டுப்பாடுகள்ஃ 1 <= எண் <= 1000 \n\nஉதாரணங்கள்ஃ \n>> இன்ட் _ டு _ மினி _ ரோமன் (19) = ='xix'\n>> இன்ட் _ டு _ மினி _ ரோமன் (152) = ='க்ளி'\n>> இன்ட் _ டு _ மினி _ ரோமன் (426) = ='cdxxvi'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/76", "entry_point": "right_angle_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = right_angle_triangle($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = right_angle_triangle($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 6;\nmy $arg22 = 8;\nmy $x2 = right_angle_triangle($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = right_angle_triangle($arg30, $arg31, $arg32);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 24;\nmy $arg42 = 25;\nmy $x4 = right_angle_triangle($arg40, $arg41, $arg42);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = right_angle_triangle($arg50, $arg51, $arg52);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 5;\nmy $arg61 = 12;\nmy $arg62 = 13;\nmy $x6 = right_angle_triangle($arg60, $arg61, $arg62);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 15;\nmy $arg71 = 8;\nmy $arg72 = 17;\nmy $x7 = right_angle_triangle($arg70, $arg71, $arg72);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 48;\nmy $arg81 = 55;\nmy $arg82 = 73;\nmy $x8 = right_angle_triangle($arg80, $arg81, $arg82);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $arg91 = 1;\nmy $arg92 = 1;\nmy $x9 = right_angle_triangle($arg90, $arg91, $arg92);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 2;\nmy $arg101 = 2;\nmy $arg102 = 10;\nmy $x10 = right_angle_triangle($arg100, $arg101, $arg102);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. இவை மூன்றும் இருந்தால் சரி என்று திரும்பவும். \nபக்கங்கள் வலது கோண முக்கோணத்தை உருவாக்குகின்றன, இல்லையெனில் தவறானது. \nஒரு வலது கோண முக்கோணம் என்பது ஒரு கோணம் வலது கோணமாக அல்லது வலது கோணமாக இருக்கும் ஒரு முக்கோணம் ஆகும். \n90 டிகிரி. \nஉதாரணம்ஃ \nவலது கோண முக்கோணம் (3,4,5) = = உண்மை \nவலது கோண முக்கோணம் (1,2,3) = = தவறு", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/77", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AsDf\";\nmy $x0 = solve($arg00);\nmy $v0 = \"aSdF\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1234\";\nmy $x1 = solve($arg10);\nmy $v1 = \"4321\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = solve($arg20);\nmy $v2 = \"AB\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"#a@C\";\nmy $x3 = solve($arg30);\nmy $v3 = \"#A@c\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"#AsdfW^45\";\nmy $x4 = solve($arg40);\nmy $v4 = \"#aSDFw^45\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"#6@2\";\nmy $x5 = solve($arg50);\nmy $v5 = \"2@6#\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"#\\$a^D\";\nmy $x6 = solve($arg60);\nmy $v6 = \"#\\$A^d\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"#ccc\";\nmy $x7 = solve($arg70);\nmy $v7 = \"#CCC\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nஎஸ் [ஐ] ஒரு எழுத்தாக இருந்தால், அதன் வழக்கை கீழ் இருந்து மேல் அல்லது நேர்மாறாக மாற்றவும், \nஇல்லையெனில் அதை அப்படியே வைத்திருங்கள். \nசரத்தில் எழுத்துக்கள் இல்லையென்றால், சரத்தை தலைகீழாக மாற்றவும். \nசெயல்பாடு விளைந்த சரத்தை திருப்பித் தர வேண்டும். \nஉதாரணங்கள் \nதீர்வு (\"1234\") = \"4321\" \nதீர்வு (\"ஏபி\") = \"ஏபி\" \nதீர்க்கவும் (\"#a @C\") = \"#A @c\"", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/78", "entry_point": "string_to_md5", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = string_to_md5($arg00);\nmy $v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"\";\nmy $x1 = string_to_md5($arg10);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"A B C\";\nmy $x2 = string_to_md5($arg20);\nmy $v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"password\";\nmy $x3 = string_to_md5($arg30);\nmy $v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "ஒரு சரம்'உரை'கொடுக்கப்பட்டால், அதன் md5 ஹாஷ் சமமான சரத்தைத் திருப்பித் தரவும். \n'உரை'ஒரு வெற்று சரம் என்றால், பூஜ்யத்தைத் திருப்பவும். \n\n>> சரம் _ முதல் _ md5 வரை ('வணக்கம் உலகம்') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "perl/79", "entry_point": "generate_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 10;\nmy $x0 = generate_integers($arg00, $arg01);\nmy $v0 = [2, 4, 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 2;\nmy $x1 = generate_integers($arg10, $arg11);\nmy $v1 = [2, 4, 6, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 132;\nmy $arg21 = 2;\nmy $x2 = generate_integers($arg20, $arg21);\nmy $v2 = [2, 4, 6, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 17;\nmy $arg31 = 89;\nmy $x3 = generate_integers($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "a மற்றும் b ஆகிய இரண்டு நேர்மறை முழு எண்களைக் கொடுத்தால், a க்கு இடையே உள்ள சம இலக்கங்களைத் திருப்பித் தரவும். \nமற்றும் b, ஏறுவரிசையில். \n\nஉதாரணத்திற்குஃ \nமுழு எண்களை உருவாக்குதல் (2,8) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (8,2) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (10,14) => []", "language": "perl", "canonical_solution": null, "natural_language": "Tamil"}
