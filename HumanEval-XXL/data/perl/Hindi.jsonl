{"task_id": "perl/0", "entry_point": "below_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = below_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, -3, 1, 2, -3];\nmy $x1 = below_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, -4, 5, 6];\nmy $x2 = below_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\nmy $x3 = below_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\nmy $x4 = below_zero($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\nmy $x5 = below_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "आपको बैंक खाते में जमा और निकासी कार्यों की एक सूची दी जाती है जो किस से शुरू होती है \nशून्य शेष राशि। आपका काम यह पता लगाना है कि क्या किसी भी समय खाते की शेष राशि शून्य से नीचे गिरती है, और \nउस बिंदु पर फ़ंक्शन को सही लौटाना चाहिए। अन्यथा इसे गलत लौटाना चाहिए। \n>>> शून्य से नीचे ([1,2,3]) \nझूठ बोलती है। \n>>> शून्य से नीचे ([1,2,-4,5]) \nसच है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/1", "entry_point": "sum_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = sum_product($arg00);\nmy $v0 = [0, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $x1 = sum_product($arg10);\nmy $v1 = [3, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [100, 0];\nmy $x2 = sum_product($arg20);\nmy $v2 = [100, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 7];\nmy $x3 = sum_product($arg30);\nmy $v3 = [15, 105];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [10];\nmy $x4 = sum_product($arg40);\nmy $v4 = [10, 10];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "पूर्णांकों की दी गई सूची के लिए, एक टुपल वापस करें जिसमें एक सूची में सभी पूर्णांकों का योग और एक गुणनफल हो। \nखाली राशि 0 के बराबर होनी चाहिए और खाली उत्पाद 1 के बराबर होना चाहिए। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/2", "entry_point": "string_xor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"111000\";\nmy $arg01 = \"101010\";\nmy $x0 = string_xor($arg00, $arg01);\nmy $v0 = \"010010\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1\";\nmy $arg11 = \"1\";\nmy $x1 = string_xor($arg10, $arg11);\nmy $v1 = \"0\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0101\";\nmy $arg21 = \"0000\";\nmy $x2 = string_xor($arg20, $arg21);\nmy $v2 = \"0101\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "इनपुट दो स्ट्रिंग a और b हैं जिनमें केवल 1s और 0s होते हैं। \nइन निवेशों पर द्विआधारी XOR करें और एक स्ट्रिंग के रूप में परिणाम भी वापस करें। \n>>> स्ट्रिंग _ xor ('010','110') \n'100'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/3", "entry_point": "longest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = longest($arg00);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"x\", \"y\", \"z\"];\nmy $x1 = longest($arg10);\nmy $v1 = \"x\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\nmy $x2 = longest($arg20);\nmy $v2 = \"zzzz\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "स्ट्रिंग्स की सूची में से सबसे लंबा स्ट्रिंग्स वापस करें। कई स्ट्रिंग्स होने पर पहला स्ट्रिंग्स वापस करें। \nसमान लंबाई के स्ट्रिंग। यदि इनपुट सूची खाली है तो शून्य लौटें। \n>>> सबसे लंबा ([]) \n\n>>> सबसे लंबा (['ए','बी','सी']) \n'ए'\n>>> सबसे लंबा (['ए','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/4", "entry_point": "greatest_common_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 7;\nmy $x0 = greatest_common_divisor($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = greatest_common_divisor($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 49;\nmy $arg21 = 14;\nmy $x2 = greatest_common_divisor($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 144;\nmy $arg31 = 60;\nmy $x3 = greatest_common_divisor($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "दो पूर्णांकों a और b का सबसे बड़ा सामान्य भाजक वापस करें \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (3,5) \n1. \n>>> ग्रेटेस्ट _ कॉमन _ डिवाइजर (25,15) \n5.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/5", "entry_point": "sort_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = sort_numbers($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"three\";\nmy $x1 = sort_numbers($arg10);\nmy $v1 = \"three\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"three five nine\";\nmy $x2 = sort_numbers($arg20);\nmy $v2 = \"three five nine\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"five zero four seven nine eight\";\nmy $x3 = sort_numbers($arg30);\nmy $v3 = \"zero four five seven eight nine\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"six five four three two one zero\";\nmy $x4 = sort_numbers($arg40);\nmy $v4 = \"zero one two three four five six\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "इनपुट'शून्य'से'नौ'तक की संख्याओं की एक स्थान-सीमित स्ट्रिंग है। \nवैध विकल्प'शून्य','एक','दो','तीन','चार','पाँच','छह','सात','आठ'और'नौ'हैं। \nस्ट्रिंग को सबसे छोटी से सबसे बड़ी तक क्रमबद्ध संख्याओं के साथ वापस करें \n>>> छँटाई संख्याएँ ('तीन एक पाँच') \n'एक तीन पाँच'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/6", "entry_point": "rescale_to_unit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2.0, 49.9];\nmy $x0 = rescale_to_unit($arg00);\nmy $v0 = [0.0, 1.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100.0, 49.9];\nmy $x1 = rescale_to_unit($arg10);\nmy $v1 = [1.0, 0.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nmy $x2 = rescale_to_unit($arg20);\nmy $v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\nmy $x3 = rescale_to_unit($arg30);\nmy $v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\nmy $x4 = rescale_to_unit($arg40);\nmy $v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "संख्याओं की सूची (कम से कम दो तत्वों की) को देखते हुए, उस सूची में एक रैखिक परिवर्तन लागू करें, \nकि सबसे छोटी संख्या 0 हो जाएगी और सबसे बड़ी संख्या 1 हो जाएगी। \n>>> इकाई को पुनः प्राप्त करें ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/7", "entry_point": "flip_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = flip_case($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello!\";\nmy $x1 = flip_case($arg10);\nmy $v1 = \"hELLO!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"These violent delights have violent ends\";\nmy $x2 = flip_case($arg20);\nmy $v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "किसी दिए गए स्ट्रिंग के लिए, छोटे अक्षरों को बड़े अक्षरों में और बड़े अक्षरों को छोटे अक्षरों में बदलें। \n>>> फ़्लिप केस ('हैलो') \n'हैलो'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/8", "entry_point": "get_positive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 4, 5, 6];\nmy $x0 = get_positive($arg00);\nmy $v0 = [4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\nmy $x1 = get_positive($arg10);\nmy $v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2];\nmy $x2 = get_positive($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = get_positive($arg30);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "सूची में केवल सकारात्मक संख्याएँ वापस करें। \n>>> सकारात्मक प्राप्त करें ([-1,2,-4,5,6]) \n[2,5,6] \n>>> सकारात्मक प्राप्त करें ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/9", "entry_point": "is_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = is_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 101;\nmy $x1 = is_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = is_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 13441;\nmy $x3 = is_prime($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 61;\nmy $x4 = is_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4;\nmy $x5 = is_prime($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 1;\nmy $x6 = is_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 5;\nmy $x7 = is_prime($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 11;\nmy $x8 = is_prime($arg80);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 17;\nmy $x9 = is_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 85;\nmy $x10 = is_prime($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 77;\nmy $x11 = is_prime($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 255379;\nmy $x12 = is_prime($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "यदि कोई दी गई संख्या अभाज्य है तो सही वापस करें, और अन्यथा गलत। \n>>> प्राइम है (6) \nझूठ बोलती है। \n>>> इस _ प्राइम (101) है \nसच है। \n>>> प्राइम है (11) \nसच है। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसच है। \n>>> इस _ प्राइम (61) \nसच है। \n>>> प्राइम है (4) \nझूठ बोलती है। \n>>> प्राइम है (1) \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/10", "entry_point": "unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\nmy $x0 = unique($arg00);\nmy $v0 = [0, 2, 3, 5, 9, 123];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\n", "description": "एक सूची में क्रमबद्ध अद्वितीय तत्वों को वापस करें \n>>> अद्वितीय ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/11", "entry_point": "prime_fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = prime_fib($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = prime_fib($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = prime_fib($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 4;\nmy $x3 = prime_fib($arg30);\nmy $v3 = 13;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 5;\nmy $x4 = prime_fib($arg40);\nmy $v4 = 89;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 6;\nmy $x5 = prime_fib($arg50);\nmy $v5 = 233;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $x6 = prime_fib($arg60);\nmy $v6 = 1597;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 8;\nmy $x7 = prime_fib($arg70);\nmy $v7 = 28657;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 9;\nmy $x8 = prime_fib($arg80);\nmy $v8 = 514229;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 10;\nmy $x9 = prime_fib($arg90);\nmy $v9 = 433494437;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "प्राइम _ फाइब n-th संख्या बताता है जो एक फिबोनाची संख्या है और यह भी अभाज्य है। \n>>> प्राइम _ फाइब (1) \n2. \n>>> प्राइम _ फाइब (2) \n3. \n>>> प्राइम _ फाइब (3) \n5. \n>>> प्राइम _ फाइब (4) \n13. \n>>> प्राइम _ फाइब (5) \n89", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/12", "entry_point": "triples_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = triples_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, -1];\nmy $x1 = triples_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, -2, 1];\nmy $x2 = triples_sum_to_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 7];\nmy $x3 = triples_sum_to_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 5, 7];\nmy $x4 = triples_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 4, -5, 3, 9, 7];\nmy $x5 = triples_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1];\nmy $x6 = triples_sum_to_zero($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 3, 5, -100];\nmy $x7 = triples_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [100, 3, 5, -100];\nmy $x8 = triples_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "ट्रिपल्स _ सम _ से _ जीरो एक इनपुट के रूप में पूर्णांकों की एक सूची लेता है। \nयह सही बताता है यदि सूची में तीन अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n\n>>> ट्रिपल _ सम _ से _ शून्य ([1,35,5,0]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,3,-2,1]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> ट्रिपल _ सम _ से _ शून्य ([2,4,-5,3,9,7]) \nसच है। \n>>> ट्रिपल _ सम _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/13", "entry_point": "pairs_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = pairs_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, -2, 1];\nmy $x1 = pairs_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 7];\nmy $x2 = pairs_sum_to_zero($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, -5, 3, 5, 7];\nmy $x3 = pairs_sum_to_zero($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = pairs_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-3, 9, -1, 3, 2, 30];\nmy $x5 = pairs_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-3, 9, -1, 3, 2, 31];\nmy $x6 = pairs_sum_to_zero($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-3, 9, -1, 4, 2, 30];\nmy $x7 = pairs_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-3, 9, -1, 4, 2, 31];\nmy $x8 = pairs_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "pair _ sum _ to _ zero पूर्णांकों की एक सूची को एक इनपुट के रूप में लेता है। \nयह सही बताता है यदि सूची में दो अलग-अलग तत्व हैं जो \nशून्य का योग, और अन्यथा गलत। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,5,0]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,3,-2,1]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([1,2,3,7]) \nझूठ बोलती है। \n>>> जोड़े _ योग _ से _ शून्य ([2,4,-5,3,5,7]) \nसच है। \n>>> जोड़े _ योग _ से _ शून्य ([1]) \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/14", "entry_point": "fib4", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = fib4($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = fib4($arg10);\nmy $v1 = 28;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = fib4($arg20);\nmy $v2 = 104;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 12;\nmy $x3 = fib4($arg30);\nmy $v3 = 386;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "फाइब4 संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nfib4 (0)-> 0 \nफाइब 4 (1)-> 0 \nफाइब 4 (2)-> 2 \nफाइब 4 (3)-> 0 \nफाइब 4 (एन)-> फाइब 4 (एन-1) + फाइब 4 (एन-2) + फाइब 4 (एन-3) + फाइब 4 (एन-4)। \nकृपया तन्तु 4 संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। पुनरावृत्ति का उपयोग न करें। \n>>> फाइब4 (5) \n4. \n>>> fib4 (6) \n8. \n>>> fib4 (7) \n14.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/15", "entry_point": "median", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = median($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, 4, 6, 1000, 10, 20];\nmy $x1 = median($arg10);\nmy $v1 = 8.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5];\nmy $x2 = median($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [6, 5];\nmy $x3 = median($arg30);\nmy $v3 = 5.5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [8, 1, 3, 9, 9, 2, 7];\nmy $x4 = median($arg40);\nmy $v4 = 7;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "सूची एल में तत्वों का माध्यिका वापस करें। \n>>> माध्यिका ([3,1,2,4,5]) \n3. \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n15. 0", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/16", "entry_point": "is_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = is_palindrome($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aba\";\nmy $x1 = is_palindrome($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aaaaa\";\nmy $x2 = is_palindrome($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"zbcd\";\nmy $x3 = is_palindrome($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"xywyx\";\nmy $x4 = is_palindrome($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xywyz\";\nmy $x5 = is_palindrome($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"xywzx\";\nmy $x6 = is_palindrome($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "जाँच करता है कि क्या दी गई स्ट्रिंग एक पालिंड्रोम है \n>>> इस _ पालिंड्रोम (\") है \nसच है। \n>>> इस _ पालिंड्रोम ('अबा') है \nसच है। \n>>> इस _ पालिंड्रोम ('एएएएए') है \nसच है। \n>>> is _ palindrom ('zbcd') है \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/17", "entry_point": "remove_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = remove_vowels($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\\nghijklm\";\nmy $x1 = remove_vowels($arg10);\nmy $v1 = \"bcdf\\nghjklm\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fedcba\";\nmy $x2 = remove_vowels($arg20);\nmy $v2 = \"fdcb\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eeeee\";\nmy $x3 = remove_vowels($arg30);\nmy $v3 = \"\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"acBAA\";\nmy $x4 = remove_vowels($arg40);\nmy $v4 = \"cB\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"EcBOO\";\nmy $x5 = remove_vowels($arg50);\nmy $v5 = \"cB\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ybcd\";\nmy $x6 = remove_vowels($arg60);\nmy $v6 = \"ybcd\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "रिमूव _ वॉवेल्स एक ऐसा फंक्शन है जो स्ट्रिंग लेता है और बिना स्वर के स्ट्रिंग लौटाता है। \n>>> स्वर हटाएँ (\") \n\"\n>>> स्वरों को हटाएँ (\"abcdef\\nghijklm\") \n'बी. सी. डी. एफ. \\एनजी. जे. के. एल. एम.'\n>>> स्वरों को हटाएँ ('abcdef') \n'बी. सी. डी. एफ.'\n>>> स्वरों को हटाएँ ('एएएए') \n\"\n>>> स्वरों को हटाएँ ('एएबीएए') \n'बी'\n>>> स्वर हटाएँ ('zbcd') \n'जेड. बी. सी. डी.'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/18", "entry_point": "below_threshold", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 10];\nmy $arg01 = 100;\nmy $x0 = below_threshold($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 20, 4, 10];\nmy $arg11 = 5;\nmy $x1 = below_threshold($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 20, 4, 10];\nmy $arg21 = 21;\nmy $x2 = below_threshold($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 20, 4, 10];\nmy $arg31 = 22;\nmy $x3 = below_threshold($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 8, 4, 10];\nmy $arg41 = 11;\nmy $x4 = below_threshold($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 8, 4, 10];\nmy $arg51 = 10;\nmy $x5 = below_threshold($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "सही लौटें यदि सूची में सभी संख्याएँ t की सीमा से नीचे हैं। \n>>> थ्रेसहोल्ड के नीचे ([1,2,4,10], 100) \nसच है। \n>>> थ्रेसहोल्ड के नीचे ([1,20,4,10], 5) \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/19", "entry_point": "add", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $arg01 = 1;\nmy $x0 = add($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 0;\nmy $x1 = add($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 3;\nmy $x2 = add($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5;\nmy $arg31 = 7;\nmy $x3 = add($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 5;\nmy $x4 = add($arg40, $arg41);\nmy $v4 = 12;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 572;\nmy $arg51 = 725;\nmy $x5 = add($arg50, $arg51);\nmy $v5 = 1297;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 51;\nmy $arg61 = 804;\nmy $x6 = add($arg60, $arg61);\nmy $v6 = 855;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 645;\nmy $arg71 = 96;\nmy $x7 = add($arg70, $arg71);\nmy $v7 = 741;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 712;\nmy $arg81 = 853;\nmy $x8 = add($arg80, $arg81);\nmy $v8 = 1565;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 223;\nmy $arg91 = 101;\nmy $x9 = add($arg90, $arg91);\nmy $v9 = 324;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 76;\nmy $arg101 = 29;\nmy $x10 = add($arg100, $arg101);\nmy $v10 = 105;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 416;\nmy $arg111 = 149;\nmy $x11 = add($arg110, $arg111);\nmy $v11 = 565;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 145;\nmy $arg121 = 409;\nmy $x12 = add($arg120, $arg121);\nmy $v12 = 554;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 535;\nmy $arg131 = 430;\nmy $x13 = add($arg130, $arg131);\nmy $v13 = 965;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = 118;\nmy $arg141 = 303;\nmy $x14 = add($arg140, $arg141);\nmy $v14 = 421;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = 287;\nmy $arg151 = 94;\nmy $x15 = add($arg150, $arg151);\nmy $v15 = 381;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = 768;\nmy $arg161 = 257;\nmy $x16 = add($arg160, $arg161);\nmy $v16 = 1025;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = 421;\nmy $arg171 = 677;\nmy $x17 = add($arg170, $arg171);\nmy $v17 = 1098;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = 802;\nmy $arg181 = 814;\nmy $x18 = add($arg180, $arg181);\nmy $v18 = 1616;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = 510;\nmy $arg191 = 922;\nmy $x19 = add($arg190, $arg191);\nmy $v19 = 1432;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = 345;\nmy $arg201 = 819;\nmy $x20 = add($arg200, $arg201);\nmy $v20 = 1164;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = 895;\nmy $arg211 = 436;\nmy $x21 = add($arg210, $arg211);\nmy $v21 = 1331;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = 123;\nmy $arg221 = 424;\nmy $x22 = add($arg220, $arg221);\nmy $v22 = 547;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = 923;\nmy $arg231 = 245;\nmy $x23 = add($arg230, $arg231);\nmy $v23 = 1168;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = 23;\nmy $arg241 = 438;\nmy $x24 = add($arg240, $arg241);\nmy $v24 = 461;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\nmy $arg250 = 565;\nmy $arg251 = 133;\nmy $x25 = add($arg250, $arg251);\nmy $v25 = 698;\nunless(Compare($x25, $v25)) {\n    die \"Exception -- test case 25 did not pass.\";\n}\nmy $arg260 = 945;\nmy $arg261 = 925;\nmy $x26 = add($arg260, $arg261);\nmy $v26 = 1870;\nunless(Compare($x26, $v26)) {\n    die \"Exception -- test case 26 did not pass.\";\n}\nmy $arg270 = 261;\nmy $arg271 = 983;\nmy $x27 = add($arg270, $arg271);\nmy $v27 = 1244;\nunless(Compare($x27, $v27)) {\n    die \"Exception -- test case 27 did not pass.\";\n}\nmy $arg280 = 139;\nmy $arg281 = 577;\nmy $x28 = add($arg280, $arg281);\nmy $v28 = 716;\nunless(Compare($x28, $v28)) {\n    die \"Exception -- test case 28 did not pass.\";\n}\nmy $arg290 = 763;\nmy $arg291 = 178;\nmy $x29 = add($arg290, $arg291);\nmy $v29 = 941;\nunless(Compare($x29, $v29)) {\n    die \"Exception -- test case 29 did not pass.\";\n}\nmy $arg300 = 147;\nmy $arg301 = 892;\nmy $x30 = add($arg300, $arg301);\nmy $v30 = 1039;\nunless(Compare($x30, $v30)) {\n    die \"Exception -- test case 30 did not pass.\";\n}\nmy $arg310 = 436;\nmy $arg311 = 402;\nmy $x31 = add($arg310, $arg311);\nmy $v31 = 838;\nunless(Compare($x31, $v31)) {\n    die \"Exception -- test case 31 did not pass.\";\n}\nmy $arg320 = 610;\nmy $arg321 = 581;\nmy $x32 = add($arg320, $arg321);\nmy $v32 = 1191;\nunless(Compare($x32, $v32)) {\n    die \"Exception -- test case 32 did not pass.\";\n}\nmy $arg330 = 103;\nmy $arg331 = 416;\nmy $x33 = add($arg330, $arg331);\nmy $v33 = 519;\nunless(Compare($x33, $v33)) {\n    die \"Exception -- test case 33 did not pass.\";\n}\nmy $arg340 = 339;\nmy $arg341 = 990;\nmy $x34 = add($arg340, $arg341);\nmy $v34 = 1329;\nunless(Compare($x34, $v34)) {\n    die \"Exception -- test case 34 did not pass.\";\n}\nmy $arg350 = 130;\nmy $arg351 = 504;\nmy $x35 = add($arg350, $arg351);\nmy $v35 = 634;\nunless(Compare($x35, $v35)) {\n    die \"Exception -- test case 35 did not pass.\";\n}\nmy $arg360 = 242;\nmy $arg361 = 717;\nmy $x36 = add($arg360, $arg361);\nmy $v36 = 959;\nunless(Compare($x36, $v36)) {\n    die \"Exception -- test case 36 did not pass.\";\n}\nmy $arg370 = 562;\nmy $arg371 = 110;\nmy $x37 = add($arg370, $arg371);\nmy $v37 = 672;\nunless(Compare($x37, $v37)) {\n    die \"Exception -- test case 37 did not pass.\";\n}\nmy $arg380 = 396;\nmy $arg381 = 909;\nmy $x38 = add($arg380, $arg381);\nmy $v38 = 1305;\nunless(Compare($x38, $v38)) {\n    die \"Exception -- test case 38 did not pass.\";\n}\nmy $arg390 = 887;\nmy $arg391 = 703;\nmy $x39 = add($arg390, $arg391);\nmy $v39 = 1590;\nunless(Compare($x39, $v39)) {\n    die \"Exception -- test case 39 did not pass.\";\n}\nmy $arg400 = 870;\nmy $arg401 = 551;\nmy $x40 = add($arg400, $arg401);\nmy $v40 = 1421;\nunless(Compare($x40, $v40)) {\n    die \"Exception -- test case 40 did not pass.\";\n}\nmy $arg410 = 422;\nmy $arg411 = 391;\nmy $x41 = add($arg410, $arg411);\nmy $v41 = 813;\nunless(Compare($x41, $v41)) {\n    die \"Exception -- test case 41 did not pass.\";\n}\nmy $arg420 = 299;\nmy $arg421 = 505;\nmy $x42 = add($arg420, $arg421);\nmy $v42 = 804;\nunless(Compare($x42, $v42)) {\n    die \"Exception -- test case 42 did not pass.\";\n}\nmy $arg430 = 346;\nmy $arg431 = 56;\nmy $x43 = add($arg430, $arg431);\nmy $v43 = 402;\nunless(Compare($x43, $v43)) {\n    die \"Exception -- test case 43 did not pass.\";\n}\nmy $arg440 = 36;\nmy $arg441 = 706;\nmy $x44 = add($arg440, $arg441);\nmy $v44 = 742;\nunless(Compare($x44, $v44)) {\n    die \"Exception -- test case 44 did not pass.\";\n}\nmy $arg450 = 738;\nmy $arg451 = 411;\nmy $x45 = add($arg450, $arg451);\nmy $v45 = 1149;\nunless(Compare($x45, $v45)) {\n    die \"Exception -- test case 45 did not pass.\";\n}\nmy $arg460 = 679;\nmy $arg461 = 87;\nmy $x46 = add($arg460, $arg461);\nmy $v46 = 766;\nunless(Compare($x46, $v46)) {\n    die \"Exception -- test case 46 did not pass.\";\n}\nmy $arg470 = 25;\nmy $arg471 = 303;\nmy $x47 = add($arg470, $arg471);\nmy $v47 = 328;\nunless(Compare($x47, $v47)) {\n    die \"Exception -- test case 47 did not pass.\";\n}\nmy $arg480 = 161;\nmy $arg481 = 612;\nmy $x48 = add($arg480, $arg481);\nmy $v48 = 773;\nunless(Compare($x48, $v48)) {\n    die \"Exception -- test case 48 did not pass.\";\n}\nmy $arg490 = 306;\nmy $arg491 = 841;\nmy $x49 = add($arg490, $arg491);\nmy $v49 = 1147;\nunless(Compare($x49, $v49)) {\n    die \"Exception -- test case 49 did not pass.\";\n}\nmy $arg500 = 973;\nmy $arg501 = 411;\nmy $x50 = add($arg500, $arg501);\nmy $v50 = 1384;\nunless(Compare($x50, $v50)) {\n    die \"Exception -- test case 50 did not pass.\";\n}\nmy $arg510 = 711;\nmy $arg511 = 157;\nmy $x51 = add($arg510, $arg511);\nmy $v51 = 868;\nunless(Compare($x51, $v51)) {\n    die \"Exception -- test case 51 did not pass.\";\n}\nmy $arg520 = 471;\nmy $arg521 = 27;\nmy $x52 = add($arg520, $arg521);\nmy $v52 = 498;\nunless(Compare($x52, $v52)) {\n    die \"Exception -- test case 52 did not pass.\";\n}\nmy $arg530 = 714;\nmy $arg531 = 792;\nmy $x53 = add($arg530, $arg531);\nmy $v53 = 1506;\nunless(Compare($x53, $v53)) {\n    die \"Exception -- test case 53 did not pass.\";\n}\nmy $arg540 = 38;\nmy $arg541 = 206;\nmy $x54 = add($arg540, $arg541);\nmy $v54 = 244;\nunless(Compare($x54, $v54)) {\n    die \"Exception -- test case 54 did not pass.\";\n}\nmy $arg550 = 907;\nmy $arg551 = 343;\nmy $x55 = add($arg550, $arg551);\nmy $v55 = 1250;\nunless(Compare($x55, $v55)) {\n    die \"Exception -- test case 55 did not pass.\";\n}\nmy $arg560 = 23;\nmy $arg561 = 760;\nmy $x56 = add($arg560, $arg561);\nmy $v56 = 783;\nunless(Compare($x56, $v56)) {\n    die \"Exception -- test case 56 did not pass.\";\n}\nmy $arg570 = 524;\nmy $arg571 = 859;\nmy $x57 = add($arg570, $arg571);\nmy $v57 = 1383;\nunless(Compare($x57, $v57)) {\n    die \"Exception -- test case 57 did not pass.\";\n}\nmy $arg580 = 30;\nmy $arg581 = 529;\nmy $x58 = add($arg580, $arg581);\nmy $v58 = 559;\nunless(Compare($x58, $v58)) {\n    die \"Exception -- test case 58 did not pass.\";\n}\nmy $arg590 = 341;\nmy $arg591 = 691;\nmy $x59 = add($arg590, $arg591);\nmy $v59 = 1032;\nunless(Compare($x59, $v59)) {\n    die \"Exception -- test case 59 did not pass.\";\n}\nmy $arg600 = 167;\nmy $arg601 = 729;\nmy $x60 = add($arg600, $arg601);\nmy $v60 = 896;\nunless(Compare($x60, $v60)) {\n    die \"Exception -- test case 60 did not pass.\";\n}\nmy $arg610 = 636;\nmy $arg611 = 289;\nmy $x61 = add($arg610, $arg611);\nmy $v61 = 925;\nunless(Compare($x61, $v61)) {\n    die \"Exception -- test case 61 did not pass.\";\n}\nmy $arg620 = 503;\nmy $arg621 = 144;\nmy $x62 = add($arg620, $arg621);\nmy $v62 = 647;\nunless(Compare($x62, $v62)) {\n    die \"Exception -- test case 62 did not pass.\";\n}\nmy $arg630 = 51;\nmy $arg631 = 985;\nmy $x63 = add($arg630, $arg631);\nmy $v63 = 1036;\nunless(Compare($x63, $v63)) {\n    die \"Exception -- test case 63 did not pass.\";\n}\nmy $arg640 = 287;\nmy $arg641 = 149;\nmy $x64 = add($arg640, $arg641);\nmy $v64 = 436;\nunless(Compare($x64, $v64)) {\n    die \"Exception -- test case 64 did not pass.\";\n}\nmy $arg650 = 659;\nmy $arg651 = 75;\nmy $x65 = add($arg650, $arg651);\nmy $v65 = 734;\nunless(Compare($x65, $v65)) {\n    die \"Exception -- test case 65 did not pass.\";\n}\nmy $arg660 = 462;\nmy $arg661 = 797;\nmy $x66 = add($arg660, $arg661);\nmy $v66 = 1259;\nunless(Compare($x66, $v66)) {\n    die \"Exception -- test case 66 did not pass.\";\n}\nmy $arg670 = 406;\nmy $arg671 = 141;\nmy $x67 = add($arg670, $arg671);\nmy $v67 = 547;\nunless(Compare($x67, $v67)) {\n    die \"Exception -- test case 67 did not pass.\";\n}\nmy $arg680 = 106;\nmy $arg681 = 44;\nmy $x68 = add($arg680, $arg681);\nmy $v68 = 150;\nunless(Compare($x68, $v68)) {\n    die \"Exception -- test case 68 did not pass.\";\n}\nmy $arg690 = 300;\nmy $arg691 = 934;\nmy $x69 = add($arg690, $arg691);\nmy $v69 = 1234;\nunless(Compare($x69, $v69)) {\n    die \"Exception -- test case 69 did not pass.\";\n}\nmy $arg700 = 471;\nmy $arg701 = 524;\nmy $x70 = add($arg700, $arg701);\nmy $v70 = 995;\nunless(Compare($x70, $v70)) {\n    die \"Exception -- test case 70 did not pass.\";\n}\nmy $arg710 = 122;\nmy $arg711 = 429;\nmy $x71 = add($arg710, $arg711);\nmy $v71 = 551;\nunless(Compare($x71, $v71)) {\n    die \"Exception -- test case 71 did not pass.\";\n}\nmy $arg720 = 735;\nmy $arg721 = 195;\nmy $x72 = add($arg720, $arg721);\nmy $v72 = 930;\nunless(Compare($x72, $v72)) {\n    die \"Exception -- test case 72 did not pass.\";\n}\nmy $arg730 = 335;\nmy $arg731 = 484;\nmy $x73 = add($arg730, $arg731);\nmy $v73 = 819;\nunless(Compare($x73, $v73)) {\n    die \"Exception -- test case 73 did not pass.\";\n}\nmy $arg740 = 28;\nmy $arg741 = 809;\nmy $x74 = add($arg740, $arg741);\nmy $v74 = 837;\nunless(Compare($x74, $v74)) {\n    die \"Exception -- test case 74 did not pass.\";\n}\nmy $arg750 = 430;\nmy $arg751 = 20;\nmy $x75 = add($arg750, $arg751);\nmy $v75 = 450;\nunless(Compare($x75, $v75)) {\n    die \"Exception -- test case 75 did not pass.\";\n}\nmy $arg760 = 916;\nmy $arg761 = 635;\nmy $x76 = add($arg760, $arg761);\nmy $v76 = 1551;\nunless(Compare($x76, $v76)) {\n    die \"Exception -- test case 76 did not pass.\";\n}\nmy $arg770 = 301;\nmy $arg771 = 999;\nmy $x77 = add($arg770, $arg771);\nmy $v77 = 1300;\nunless(Compare($x77, $v77)) {\n    die \"Exception -- test case 77 did not pass.\";\n}\nmy $arg780 = 454;\nmy $arg781 = 466;\nmy $x78 = add($arg780, $arg781);\nmy $v78 = 920;\nunless(Compare($x78, $v78)) {\n    die \"Exception -- test case 78 did not pass.\";\n}\nmy $arg790 = 905;\nmy $arg791 = 259;\nmy $x79 = add($arg790, $arg791);\nmy $v79 = 1164;\nunless(Compare($x79, $v79)) {\n    die \"Exception -- test case 79 did not pass.\";\n}\nmy $arg800 = 168;\nmy $arg801 = 205;\nmy $x80 = add($arg800, $arg801);\nmy $v80 = 373;\nunless(Compare($x80, $v80)) {\n    die \"Exception -- test case 80 did not pass.\";\n}\nmy $arg810 = 570;\nmy $arg811 = 434;\nmy $x81 = add($arg810, $arg811);\nmy $v81 = 1004;\nunless(Compare($x81, $v81)) {\n    die \"Exception -- test case 81 did not pass.\";\n}\nmy $arg820 = 64;\nmy $arg821 = 959;\nmy $x82 = add($arg820, $arg821);\nmy $v82 = 1023;\nunless(Compare($x82, $v82)) {\n    die \"Exception -- test case 82 did not pass.\";\n}\nmy $arg830 = 957;\nmy $arg831 = 510;\nmy $x83 = add($arg830, $arg831);\nmy $v83 = 1467;\nunless(Compare($x83, $v83)) {\n    die \"Exception -- test case 83 did not pass.\";\n}\nmy $arg840 = 722;\nmy $arg841 = 598;\nmy $x84 = add($arg840, $arg841);\nmy $v84 = 1320;\nunless(Compare($x84, $v84)) {\n    die \"Exception -- test case 84 did not pass.\";\n}\nmy $arg850 = 770;\nmy $arg851 = 226;\nmy $x85 = add($arg850, $arg851);\nmy $v85 = 996;\nunless(Compare($x85, $v85)) {\n    die \"Exception -- test case 85 did not pass.\";\n}\nmy $arg860 = 579;\nmy $arg861 = 66;\nmy $x86 = add($arg860, $arg861);\nmy $v86 = 645;\nunless(Compare($x86, $v86)) {\n    die \"Exception -- test case 86 did not pass.\";\n}\nmy $arg870 = 117;\nmy $arg871 = 674;\nmy $x87 = add($arg870, $arg871);\nmy $v87 = 791;\nunless(Compare($x87, $v87)) {\n    die \"Exception -- test case 87 did not pass.\";\n}\nmy $arg880 = 530;\nmy $arg881 = 30;\nmy $x88 = add($arg880, $arg881);\nmy $v88 = 560;\nunless(Compare($x88, $v88)) {\n    die \"Exception -- test case 88 did not pass.\";\n}\nmy $arg890 = 776;\nmy $arg891 = 345;\nmy $x89 = add($arg890, $arg891);\nmy $v89 = 1121;\nunless(Compare($x89, $v89)) {\n    die \"Exception -- test case 89 did not pass.\";\n}\nmy $arg900 = 327;\nmy $arg901 = 389;\nmy $x90 = add($arg900, $arg901);\nmy $v90 = 716;\nunless(Compare($x90, $v90)) {\n    die \"Exception -- test case 90 did not pass.\";\n}\nmy $arg910 = 596;\nmy $arg911 = 12;\nmy $x91 = add($arg910, $arg911);\nmy $v91 = 608;\nunless(Compare($x91, $v91)) {\n    die \"Exception -- test case 91 did not pass.\";\n}\nmy $arg920 = 599;\nmy $arg921 = 511;\nmy $x92 = add($arg920, $arg921);\nmy $v92 = 1110;\nunless(Compare($x92, $v92)) {\n    die \"Exception -- test case 92 did not pass.\";\n}\nmy $arg930 = 936;\nmy $arg931 = 476;\nmy $x93 = add($arg930, $arg931);\nmy $v93 = 1412;\nunless(Compare($x93, $v93)) {\n    die \"Exception -- test case 93 did not pass.\";\n}\nmy $arg940 = 461;\nmy $arg941 = 14;\nmy $x94 = add($arg940, $arg941);\nmy $v94 = 475;\nunless(Compare($x94, $v94)) {\n    die \"Exception -- test case 94 did not pass.\";\n}\nmy $arg950 = 966;\nmy $arg951 = 157;\nmy $x95 = add($arg950, $arg951);\nmy $v95 = 1123;\nunless(Compare($x95, $v95)) {\n    die \"Exception -- test case 95 did not pass.\";\n}\nmy $arg960 = 326;\nmy $arg961 = 91;\nmy $x96 = add($arg960, $arg961);\nmy $v96 = 417;\nunless(Compare($x96, $v96)) {\n    die \"Exception -- test case 96 did not pass.\";\n}\nmy $arg970 = 392;\nmy $arg971 = 455;\nmy $x97 = add($arg970, $arg971);\nmy $v97 = 847;\nunless(Compare($x97, $v97)) {\n    die \"Exception -- test case 97 did not pass.\";\n}\nmy $arg980 = 446;\nmy $arg981 = 477;\nmy $x98 = add($arg980, $arg981);\nmy $v98 = 923;\nunless(Compare($x98, $v98)) {\n    die \"Exception -- test case 98 did not pass.\";\n}\nmy $arg990 = 324;\nmy $arg991 = 860;\nmy $x99 = add($arg990, $arg991);\nmy $v99 = 1184;\nunless(Compare($x99, $v99)) {\n    die \"Exception -- test case 99 did not pass.\";\n}\nmy $arg1000 = 945;\nmy $arg1001 = 85;\nmy $x100 = add($arg1000, $arg1001);\nmy $v100 = 1030;\nunless(Compare($x100, $v100)) {\n    die \"Exception -- test case 100 did not pass.\";\n}\nmy $arg1010 = 886;\nmy $arg1011 = 582;\nmy $x101 = add($arg1010, $arg1011);\nmy $v101 = 1468;\nunless(Compare($x101, $v101)) {\n    die \"Exception -- test case 101 did not pass.\";\n}\nmy $arg1020 = 886;\nmy $arg1021 = 712;\nmy $x102 = add($arg1020, $arg1021);\nmy $v102 = 1598;\nunless(Compare($x102, $v102)) {\n    die \"Exception -- test case 102 did not pass.\";\n}\nmy $arg1030 = 842;\nmy $arg1031 = 953;\nmy $x103 = add($arg1030, $arg1031);\nmy $v103 = 1795;\nunless(Compare($x103, $v103)) {\n    die \"Exception -- test case 103 did not pass.\";\n}\n", "description": "दो संख्याएँ x और y जोड़ें \n>>> जोड़ें (2,3) \n5. \n>>> जोड़ें (5,7) \n12.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/20", "entry_point": "same_chars", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"eabcdzzzz\";\nmy $arg01 = \"dddzzzzzzzddeddabc\";\nmy $x0 = same_chars($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $arg11 = \"dddddddabc\";\nmy $x1 = same_chars($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"dddddddabc\";\nmy $arg21 = \"abcd\";\nmy $x2 = same_chars($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eabcd\";\nmy $arg31 = \"dddddddabc\";\nmy $x3 = same_chars($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abcd\";\nmy $arg41 = \"dddddddabcf\";\nmy $x4 = same_chars($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"eabcdzzzz\";\nmy $arg51 = \"dddzzzzzzzddddabc\";\nmy $x5 = same_chars($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"aabb\";\nmy $arg61 = \"aaccc\";\nmy $x6 = same_chars($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "जाँच करें कि क्या दो शब्दों में समान अक्षर हैं। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzuddeddabc') \nसच है। \n>>> समान अक्षर ('एबीसीडी','डीडीडीडीडीएबीसी') \nसच है। \n>>> समान अक्षर ('ddddddabc','abcd') \nसच है। \n>>> समान अक्षर ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. \nझूठ बोलती है। \n>>> समान अक्षर ('eabcdzzzz','dddzzzzzddddddabc') \nझूठ बोलती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/21", "entry_point": "fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = fib($arg00);\nmy $v0 = 55;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fib($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = fib($arg20);\nmy $v2 = 21;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 11;\nmy $x3 = fib($arg30);\nmy $v3 = 89;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 12;\nmy $x4 = fib($arg40);\nmy $v4 = 144;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "n-th फिबोनाची संख्या वापस करें। \n>>> फाइबर (10) \n55. \n>>> फाइबर (1) \n1. \n>>> फाइबर (8) \n21.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/22", "entry_point": "common", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 3, 34, 653, 2, 5];\nmy $arg01 = [5, 7, 1, 5, 9, 653, 121];\nmy $x0 = common($arg00, $arg01);\nmy $v0 = [1, 5, 653];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, 2, 8];\nmy $arg11 = [3, 2];\nmy $x1 = common($arg10, $arg11);\nmy $v1 = [2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 2, 8];\nmy $arg21 = [3, 2, 4];\nmy $x2 = common($arg20, $arg21);\nmy $v2 = [2, 3, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 3, 2, 8];\nmy $arg31 = [];\nmy $x3 = common($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "दो सूचियों के लिए विशिष्ट सामान्य तत्वों को वापस क्रमबद्ध करें। \n>>> सामान्य ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्य ([5,3,2,8], [3,2]) \n[2,3]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/23", "entry_point": "largest_prime_factor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = largest_prime_factor($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 27;\nmy $x1 = largest_prime_factor($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 63;\nmy $x2 = largest_prime_factor($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 330;\nmy $x3 = largest_prime_factor($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 13195;\nmy $x4 = largest_prime_factor($arg40);\nmy $v4 = 29;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "n का सबसे बड़ा अभाज्य गुणनखंड वापस करें। मान लीजिए कि n> 1 अभाज्य नहीं है। \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (13195) \n29. \n>>> सबसे बड़ा _ प्राइम _ फैक्टर (2048) \n2.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/24", "entry_point": "sum_to_n", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = sum_to_n($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = sum_to_n($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = sum_to_n($arg20);\nmy $v2 = 66;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 30;\nmy $x3 = sum_to_n($arg30);\nmy $v3 = 465;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 100;\nmy $x4 = sum_to_n($arg40);\nmy $v4 = 5050;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "sum _ to _ n एक फलन है जो 1 से n तक की संख्याओं का योग करता है। \n>>> योग _ से _ एन (30) \n465 \n>>> योग _ से _ एन (100) \n5050 \n>>> योग _ से _ एन (5) \n15. \n>>> योग _ से _ एन (10) \n55. \n>>> योग _ से _ एन (1) \n1.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/25", "entry_point": "derivative", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = derivative($arg00);\nmy $v0 = [1, 4, 12, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = derivative($arg10);\nmy $v1 = [2, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $x2 = derivative($arg20);\nmy $v2 = [2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 1, 0, 4];\nmy $x3 = derivative($arg30);\nmy $v3 = [2, 2, 0, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = derivative($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "xs एक बहुपद के गुणांक का प्रतिनिधित्व करता है। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nइस बहुपद का उसी रूप में व्युत्पन्न वापस करें। \n>>> व्युत्पन्न ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्न ([1,2,3]) \n[2,6]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/26", "entry_point": "fibfib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fibfib($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fibfib($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = fibfib($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 8;\nmy $x3 = fibfib($arg30);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 10;\nmy $x4 = fibfib($arg40);\nmy $v4 = 81;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 12;\nmy $x5 = fibfib($arg50);\nmy $v5 = 274;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 14;\nmy $x6 = fibfib($arg60);\nmy $v6 = 927;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "फाइबफाइब संख्या अनुक्रम फाइबोनैचि सेकुनेस के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः \nफाइबफिब (0) = = 0 \nफाइबफिब (1) = = 0 \nफाइबफिब (2) = = 1 \nफाइबफिब (एन) = = फाइबफिब (एन-1) + फाइबफिब (एन-2) + फाइबफिब (एन-3)। \nकृपया फाइबफिब संख्या अनुक्रम के n-th तत्व की कुशलता से गणना करने के लिए एक कार्य लिखें। \n>>> फाइबफिब (1) \n0 \n>>> फाइबफिब (5) \n4. \n>>> फाइबफिब (8) \n24.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/27", "entry_point": "vowels_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $x0 = vowels_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Alone\";\nmy $x1 = vowels_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"key\";\nmy $x2 = vowels_count($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bye\";\nmy $x3 = vowels_count($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"keY\";\nmy $x4 = vowels_count($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"bYe\";\nmy $x5 = vowels_count($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ACEDY\";\nmy $x6 = vowels_count($arg60);\nmy $v6 = 3;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "एक फलन स्वर गणना लिखें जो एक स्ट्रिंग का प्रतिनिधित्व करता है \nइनपुट के रूप में एक शब्द और स्ट्रिंग में स्वरों की संख्या लौटाता है। \nइस मामले में स्वर'ए','ई','आई','ओ','यू'हैं। यहाँ,'वाई'भी एक है। \nस्वर, लेकिन केवल तभी जब यह दिए गए शब्द के अंत में हो। \n\nउदाहरणः \n>>> स्वरों की गिनती (\"एबीसीडीई\") \n2. \n>>> स्वर गणना (\"ACEDY\") \n3.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/28", "entry_point": "search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 5, 5, 5, 1];\nmy $x0 = search($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 1, 4, 1, 4, 4];\nmy $x1 = search($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 3];\nmy $x2 = search($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\nmy $x3 = search($arg30);\nmy $v3 = 8;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 3, 3, 2, 2];\nmy $x4 = search($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\nmy $x5 = search($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [3, 2, 8, 2];\nmy $x6 = search($arg60);\nmy $v6 = 2;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\nmy $x7 = search($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [8, 8, 3, 6, 5, 6, 4];\nmy $x8 = search($arg80);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\nmy $x9 = search($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 9, 10, 1, 3];\nmy $x10 = search($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\nmy $x11 = search($arg110);\nmy $v11 = 5;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = [1];\nmy $x12 = search($arg120);\nmy $v12 = 1;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\nmy $x13 = search($arg130);\nmy $v13 = 4;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\nmy $x14 = search($arg140);\nmy $v14 = 2;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\nmy $x15 = search($arg150);\nmy $v15 = 1;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\nmy $x16 = search($arg160);\nmy $v16 = 4;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\nmy $x17 = search($arg170);\nmy $v17 = 4;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\nmy $x18 = search($arg180);\nmy $v18 = 2;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\nmy $x19 = search($arg190);\nmy $v19 = -1;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = [10];\nmy $x20 = search($arg200);\nmy $v20 = -1;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\nmy $x21 = search($arg210);\nmy $v21 = 2;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\nmy $x22 = search($arg220);\nmy $v22 = 1;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\nmy $x23 = search($arg230);\nmy $v23 = 1;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = [3, 10, 10, 9, 2];\nmy $x24 = search($arg240);\nmy $v24 = -1;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\n", "description": "आपको सकारात्मक पूर्णांकों की एक गैर-खाली सूची दी जाती है। सबसे बड़ा पूर्णांक वापस करें जो उससे बड़ा है \nशून्य, और इसकी आवृत्ति पूर्णांक के मूल्य से अधिक या उसके बराबर होती है। \nएक पूर्णांक की आवृत्ति वह संख्या है जो वह सूची में कितनी बार दिखाई देती है। \nयदि ऐसा कोई मान मौजूद नहीं है, तो-1 वापस करें। \nउदाहरण के लिएः \nखोज ([4,1,2,2,3,1]) = = 2 \nखोज ([1,2,3,3,4,4]) = = 3 \nखोज ([5,5,4,4]) = =-1", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/29", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = triangle_area($arg00, $arg01, $arg02);\nmy $v0 = 6.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 10;\nmy $x1 = triangle_area($arg10, $arg11, $arg12);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 8;\nmy $arg22 = 5;\nmy $x2 = triangle_area($arg20, $arg21, $arg22);\nmy $v2 = 8.18;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = triangle_area($arg30, $arg31, $arg32);\nmy $v3 = 1.73;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 1;\nmy $arg41 = 2;\nmy $arg42 = 3;\nmy $x4 = triangle_area($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = triangle_area($arg50, $arg51, $arg52);\nmy $v5 = 16.25;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2;\nmy $arg61 = 6;\nmy $arg62 = 3;\nmy $x6 = triangle_area($arg60, $arg61, $arg62);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $arg71 = 1;\nmy $arg72 = 1;\nmy $x7 = triangle_area($arg70, $arg71, $arg72);\nmy $v7 = 0.43;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 2;\nmy $arg81 = 2;\nmy $arg82 = 10;\nmy $x8 = triangle_area($arg80, $arg81, $arg82);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए। \nत्रिभुज को 2 दशमलव बिंदुओं पर गोल किया जाता है यदि तीनों भुजाएं एक वैध त्रिभुज बनाती हैं। \nअन्यथा वापसी-1 \nतीन भुजाएँ एक वैध त्रिभुज बनाती हैं जब किसी भी दो भुजाओं का योग अधिक होता है। \nतीसरे पक्ष की तुलना में। \nउदाहरणः \nत्रिभुज क्षेत्रफल (3,4,5) = = 6.00 \nत्रिभुज क्षेत्र (1,2,10) = =-1", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/30", "entry_point": "will_it_fly", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 3];\nmy $arg01 = 9;\nmy $x0 = will_it_fly($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 5;\nmy $x1 = will_it_fly($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3];\nmy $arg21 = 5;\nmy $x2 = will_it_fly($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 3];\nmy $arg31 = 1;\nmy $x3 = will_it_fly($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3];\nmy $arg41 = 6;\nmy $x4 = will_it_fly($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5];\nmy $arg51 = 5;\nmy $x5 = will_it_fly($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "एक फलन लिखें जो सही बताता है यदि वस्तु q उड़ान भरेगी, और अन्यथा गलत। \nवस्तु q उड़ जाएगी यदि यह संतुलित है (यह एक पैलिन्ड्रोमिक सूची है) और इसके तत्वों का योग अधिकतम संभव वजन डब्ल्यू से कम या उसके बराबर है। \n\nउदाहरणः \nविल इट फ्लाई ([1,2], 5) ′ फाल्स \n#1 + 2 अधिकतम संभव वजन से कम है, लेकिन यह असंतुलित है। \n\nविल इट फ्लाई ([3,2,3], 1) ′ फाल्स \n#यह संतुलित है, लेकिन 3 + 2 + 3 अधिकतम संभव वजन से अधिक है। \n\nविल इट फ्लाई ([3,2,3], 9) सही है \n#3 + 2 + 3 अधिकतम संभव वजन से कम है, और यह संतुलित है। \n\nविल इट फ्लाई ([3], 5) ट्रू \n#3 अधिकतम संभव वजन से कम है, और यह संतुलित है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/31", "entry_point": "is_multiply_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_multiply_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = is_multiply_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = is_multiply_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = is_multiply_prime($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 125;\nmy $x4 = is_multiply_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 105;\nmy $x5 = is_multiply_prime($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 126;\nmy $x6 = is_multiply_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 729;\nmy $x7 = is_multiply_prime($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 891;\nmy $x8 = is_multiply_prime($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1001;\nmy $x9 = is_multiply_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "एक फलन लिखें जो सही लौटता है यदि दी गई संख्या 3 अभाज्य संख्याओं का गुणन है। \nऔर अन्यथा गलत। \nयह जानते हुए कि (ए) 100 से कम है। \nउदाहरणः \nक्या _ गुणा _ अभाज्य (30) = = सही है \n30 = 2 * 3 * 5", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/32", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = \"db0db\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 32;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = \"db100000db\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 103;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = \"db1100111db\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 15;\nmy $x3 = decimal_to_binary($arg30);\nmy $v3 = \"db1111db\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "आपको दशमलव के रूप में एक संख्या दी जाएगी और आपका काम इसे में बदलना है \nद्विआधारी प्रारूप। फलन को एक स्ट्रिंग वापस करनी चाहिए, जिसमें प्रत्येक वर्ण द्विआधारी का प्रतिनिधित्व करता है। \nसंख्या. स्ट्रिंग में प्रत्येक वर्ण'0'या'1'होगा। \n\nस्ट्रिंग के शुरू में और अंत में कुछ अतिरिक्त वर्ण'db'होंगे। \nप्रारूप में मदद करने के लिए अतिरिक्त वर्ण हैं। \n\nउदाहरण के लिएः \nदशमलव से द्विआधारी (15) #\"db1111db\" बताता है \nदशमलव _ से _ द्विआधारी (32) #बताता है \"db100000db\"", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/33", "entry_point": "is_happy", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a\";\nmy $x0 = is_happy($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aa\";\nmy $x1 = is_happy($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = is_happy($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"aabb\";\nmy $x3 = is_happy($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"adb\";\nmy $x4 = is_happy($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xyy\";\nmy $x5 = is_happy($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"iopaxpoi\";\nmy $x6 = is_happy($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"iopaxioi\";\nmy $x7 = is_happy($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nआपका काम यह जांचना है कि स्ट्रिंग खुश है या नहीं। \nएक स्ट्रिंग तब खुश होती है जब इसकी लंबाई कम से कम 3 हो और हर 3 लगातार अक्षर अलग-अलग हों। \nउदाहरण के लिएः \nखुश है (a) => गलत है \nखुश है (एए) => गलत है \nखुश है (ए. बी. सी. डी.) => सही है \nखुश है (आब्ब) => गलत है \nखुश है (ए. डी. बी.) => सच है \nखुश है (xyy) => गलत है", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/34", "entry_point": "numerical_letter_grade", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4.0, 3, 1.7, 2, 3.5];\nmy $x0 = numerical_letter_grade($arg00);\nmy $v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.2];\nmy $x1 = numerical_letter_grade($arg10);\nmy $v1 = [\"D+\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.5];\nmy $x2 = numerical_letter_grade($arg20);\nmy $v2 = [\"D-\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0.0];\nmy $x3 = numerical_letter_grade($arg30);\nmy $v3 = [\"E\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 0.3, 1.5, 2.8, 3.3];\nmy $x4 = numerical_letter_grade($arg40);\nmy $v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 0.7];\nmy $x5 = numerical_letter_grade($arg50);\nmy $v5 = [\"E\", \"D-\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "यह सेमेस्टर का अंतिम सप्ताह होता है और शिक्षक को अंक देने होते हैं। \nछात्रों के लिए। शिक्षक ग्रेडिंग के लिए अपना खुद का एल्गोरिदम बना रहे हैं। \nएकमात्र समस्या यह है कि उसने ग्रेडिंग के लिए उपयोग किया गया कोड खो दिया है। \nउन्होंने आपको कुछ छात्रों के लिए जी. पी. ए. की सूची दी है और आपको लिखना होगा। \nएक प्रकार्य जो निम्नलिखित तालिका का उपयोग करके अक्षर श्रेणी की सूची तैयार कर सकता हैः \nजी. पी. ए। लेटर ग्रेड \n4. 0 ए + \n> 3.7 ए \n> 3.3 ए-\n> 3 बी + \n> 2.7 बी \n> 2.3 बी-\n> 2 सी + \n> 1.7 डिग्री सेल्सियस \n> 1.3 सी-\n> 1 डी + \n> 0.7 डी \n> 0.0 डी-\n0. 0 ई \n\nउदाहरणः \nश्रेणी समीकरण ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/35", "entry_point": "prime_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello\";\nmy $x0 = prime_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdcba\";\nmy $x1 = prime_length($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"kittens\";\nmy $x2 = prime_length($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"orange\";\nmy $x3 = prime_length($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"wow\";\nmy $x4 = prime_length($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"world\";\nmy $x5 = prime_length($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"MadaM\";\nmy $x6 = prime_length($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"Wow\";\nmy $x7 = prime_length($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"\";\nmy $x8 = prime_length($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"HI\";\nmy $x9 = prime_length($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"go\";\nmy $x10 = prime_length($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"gogo\";\nmy $x11 = prime_length($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"aaaaaaaaaaaaaaa\";\nmy $x12 = prime_length($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"Madam\";\nmy $x13 = prime_length($arg130);\nmy $v13 = 1;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"M\";\nmy $x14 = prime_length($arg140);\nmy $v14 = 0;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"0\";\nmy $x15 = prime_length($arg150);\nmy $v15 = 0;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\n", "description": "एक फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और सही लौटाता है यदि स्ट्रिंग \nलंबाई एक अभाज्य संख्या है या अन्यथा गलत है \nउदाहरण \nप्राइम लेंथ ('हैलो') = = सही \nप्राइम _ लेंथ ('एबीसीडीसीबीए') = = सही \nअभाज्य लंबाई ('बिल्ली के बच्चे') = = सही \nअभाज्य लंबाई ('नारंगी') = = गलत", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/36", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1000;\nmy $x0 = solve($arg00);\nmy $v0 = \"1\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 150;\nmy $x1 = solve($arg10);\nmy $v1 = \"110\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 147;\nmy $x2 = solve($arg20);\nmy $v2 = \"1100\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 333;\nmy $x3 = solve($arg30);\nmy $v3 = \"1001\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 963;\nmy $x4 = solve($arg40);\nmy $v4 = \"10010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "एक सकारात्मक पूर्णांक N दिए जाने पर, इसके अंकों का कुल योग द्विआधारी में वापस करें। \n\nउदाहरण \nएन = 1000 के लिए, अंकों का योग 1 होगा और आउटपुट \"1\" होना चाहिए। \nएन = 150 के लिए, अंकों का योग 6 होगा और आउटपुट \"110\" होना चाहिए। \nएन = 147 के लिए, अंकों का योग 12 होगा और आउटपुट \"1100\" होना चाहिए। \n\nचरः \n@N पूर्णांक \nबाधाएँः 0 ≤ एन ≤ 10000। \nआउटपुटः \nद्विआधारी संख्या की एक स्ट्रिंग", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/37", "entry_point": "get_row", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = 1;\nmy $x0 = get_row($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1]];\nmy $arg11 = 2;\nmy $x1 = get_row($arg10, $arg11);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [1], [1, 2, 3]];\nmy $arg21 = 3;\nmy $x2 = get_row($arg20, $arg21);\nmy $v2 = [[2, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "आपको एक 2 आयामी डेटा दिया जाता है, एक नेस्टेड सूची के रूप में, \nजो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, \nप्रत्येक पंक्ति में अलग-अलग संख्या में स्तंभ हो सकते हैं। \nपहले और पूर्णांक x को देखते हुए, सूची में पूर्णांक x खोजें, \nऔर टुपल्स की वापसी सूची, [(x1, y1), (x2, y2)...] जैसे कि \nप्रत्येक टुपल एक निर्देशांक है-(पंक्ति, कॉलम), जो 0 से शुरू होता है। \nनिर्देशांकों को प्रारंभ में पंक्तियों द्वारा आरोही क्रम में क्रमबद्ध करें। \nइसके अलावा, पंक्ति के निर्देशांक को स्तंभों द्वारा अवरोही क्रम में क्रमबद्ध करें। \n\nउदाहरण के लिएः \nपंक्ति प्राप्त करें (_ r) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nपंक्ति प्राप्त करें ([], 1) = = [] \nगेट _ रो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/38", "entry_point": "next_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = next_smallest($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 1, 4, 3, 2];\nmy $x1 = next_smallest($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = next_smallest($arg20);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 1];\nmy $x3 = next_smallest($arg30);\nmy $v3 = \"none\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 1, 1, 1, 0];\nmy $x4 = next_smallest($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 1];\nmy $x5 = next_smallest($arg50);\nmy $v5 = \"none\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-35, 34, 12, -45];\nmy $x6 = next_smallest($arg60);\nmy $v6 = -35;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nएक फलन अगला _ सबसे छोटा () लिखें जो सूची का दूसरा सबसे छोटा तत्व देता है। \nशून्य लौटें यदि ऐसा कोई तत्व नहीं है। \n\nअगला _ सबसे छोटा ([1,2,3,4,5]) = = 2 \nअगला _ सबसे छोटा ([5,1,4,3,2]) = = 2 \nअगला _ सबसे छोटा ([]) = = कोई नहीं \nअगला _ सबसे छोटा ([1,1]) = = कोई नहीं", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/39", "entry_point": "is_bored", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = is_bored($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Is the sky blue?\";\nmy $x1 = is_bored($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"I love It !\";\nmy $x2 = is_bored($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bIt\";\nmy $x3 = is_bored($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"I feel good today. I will be productive. will kill It\";\nmy $x4 = is_bored($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"You and I are going for a walk\";\nmy $x5 = is_bored($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "आपको शब्दों की एक श्रृंखला दी जाएगी, और आपका काम संख्या को गिनना है। \nऊब का। ऊब एक वाक्य है जो \"मैं\" शब्द से शुरू होता है। \nवाक्यों को '.', '?'या '!'द्वारा सीमांकित किया जाता है। \n\nउदाहरण के लिएः \n>>> बोर हो गया है (\"हैलो वर्ल्ड\") \n0 \n>>> ऊब गया है (\"आकाश नीला है। सूरज चमक रहा है। मुझे यह मौसम पसंद है\") \n1.", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/40", "entry_point": "skjkasdkd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nmy $x0 = skjkasdkd($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\nmy $x1 = skjkasdkd($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\nmy $x2 = skjkasdkd($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\nmy $x3 = skjkasdkd($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [0, 81, 12, 3, 1, 21];\nmy $x4 = skjkasdkd($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 8, 1, 2, 1, 7];\nmy $x5 = skjkasdkd($arg50);\nmy $v5 = 7;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [8191];\nmy $x6 = skjkasdkd($arg60);\nmy $v6 = 19;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [8191, 123456, 127, 7];\nmy $x7 = skjkasdkd($arg70);\nmy $v7 = 19;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [127, 97, 8192];\nmy $x8 = skjkasdkd($arg80);\nmy $v8 = 10;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "आपको पूर्णांकों की एक सूची दी जाती है। \nआपको सबसे बड़ा अभाज्य मूल्य खोजने और उसके अंकों का योग वापस करने की आवश्यकता है। \n\nउदाहरण के लिएः \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] के लिए आउटपुट 10 होना चाहिए। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] के लिए आउटपुट 25 होना चाहिए। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] के लिए आउटपुट 13 होना चाहिए। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] के लिए आउटपुट 11 होना चाहिए। \nlst = [0,81,12, 3,1,21] के लिए आउटपुट 3 होना चाहिए। \nlst = [0,8,1, 2,1,7] के लिए आउटपुट 7 होना चाहिए।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/41", "entry_point": "check_dict_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"p\" => \"pineapple\", \"b\" => \"banana\"};\nmy $x0 = check_dict_case($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"};\nmy $x1 = check_dict_case($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"};\nmy $x2 = check_dict_case($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = {\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"};\nmy $x3 = check_dict_case($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = {\"STATE\" => \"NC\", \"ZIP\" => \"12345\"};\nmy $x4 = check_dict_case($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = {\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"};\nmy $x5 = check_dict_case($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = {};\nmy $x6 = check_dict_case($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "शब्दकोश दिए जाने पर, सही वापस करें यदि सभी कुंजी निचले हिस्से में स्ट्रिंग हैं \nकेस या सभी कुंजी ऊपरी मामले में स्ट्रिंग हैं, अन्यथा गलत लौटें। \nफ़ंक्शन को वापस करना चाहिए गलत है दिया गया शब्दकोश खाली है। \nउदाहरण के लिएः \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"b\": \"केला\"}) को सही लौटना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", \"A\": \"केला\", \"B\": \"केला\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"a\": \"सेब\", 8: \"केला\", \"a\": \"सेब\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"नाम\": \"जॉन\", \"आयु\": \"36\", \"सिटी\": \"ह्यूस्टन\"}) को गलत लौटाना चाहिए। \nचेक _ डिक्ट _ केस ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) को सही लौटना चाहिए।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/42", "entry_point": "closest_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"10\";\nmy $x0 = closest_integer($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"14.5\";\nmy $x1 = closest_integer($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"-15.5\";\nmy $x2 = closest_integer($arg20);\nmy $v2 = -16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"15.3\";\nmy $x3 = closest_integer($arg30);\nmy $v3 = 15;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"0\";\nmy $x4 = closest_integer($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "एक फ़ंक्शन बनाएँ जो एक संख्या का प्रतिनिधित्व करने वाला मान (स्ट्रिंग) लेता है \nऔर निकटतम पूर्णांक देता है। यदि संख्या समान दूरी पर है। \nदो पूर्णांकों से, इसे शून्य से दूर गोल करें। \n\nउदाहरण \n>>> निकटतम पूर्णांक (\"10\") \n10. \n>>> निकटतम पूर्णांक (\"15.3\") \n15. \n\nध्यान देंः \nशून्य से दूर गोल करने का अर्थ है कि यदि दी गई संख्या समान दूरी पर है \nदो पूर्णांकों से, जिसे आपको वापस करना चाहिए वह वह है जो \nशून्य से सबसे दूर। उदाहरण के लिए निकटतम पूर्णांक (\"14.5\") चाहिए \n15 वापस करें और निकटतम पूर्णांक (\"-14.5\") को-15 वापस करना चाहिए।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/43", "entry_point": "make_a_pile", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = make_a_pile($arg00);\nmy $v0 = [3, 5, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = make_a_pile($arg10);\nmy $v1 = [4, 6, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = make_a_pile($arg20);\nmy $v2 = [5, 7, 9, 11, 13];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = make_a_pile($arg30);\nmy $v3 = [6, 8, 10, 12, 14, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 8;\nmy $x4 = make_a_pile($arg40);\nmy $v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "एक सकारात्मक पूर्णांक n को देखते हुए, आपको पत्थरों के n स्तरों का ढेर बनाना होगा। \nपहले स्तर में एन पत्थर हैं। \nअगले स्तर पर पत्थरों की संख्या हैः \n- अगली विषम संख्या यदि n विषम है। \n- अगली सम संख्या यदि n सम है। \nसूची में प्रत्येक स्तर पर पत्थरों की संख्या वापस करें, जहां सूचकांक पर तत्व है \ni स्तर (i + 1) में पत्थरों की संख्या का प्रतिनिधित्व करता है। \n\nउदाहरण के लिएः \n>>> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3,5,7]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/44", "entry_point": "words_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hi, my name is John\";\nmy $x0 = words_string($arg00);\nmy $v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"One, two, three, four, five, six\";\nmy $x1 = words_string($arg10);\nmy $v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hi, my name\";\nmy $x2 = words_string($arg20);\nmy $v2 = [\"Hi\", \"my\", \"name\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"One,, two, three, four, five, six,\";\nmy $x3 = words_string($arg30);\nmy $v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"\";\nmy $x4 = words_string($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"ahmed     , gamal\";\nmy $x5 = words_string($arg50);\nmy $v5 = [\"ahmed\", \"gamal\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "आपको अल्पविराम या रिक्त स्थान द्वारा अलग किए गए शब्दों की एक श्रृंखला दी जाएगी। आपका कार्य है \nस्ट्रिंग को शब्दों में विभाजित करने और शब्दों की एक सरणी वापस करने के लिए। \n\nउदाहरण के लिएः \nशब्द _ स्ट्रिंग (\"हाय, मेरा नाम जॉन है\") = = [\"हाय\", \"मेरा\", \"नाम\", \"है\", \"जॉन\"] \nशब्द _ स्ट्रिंग (\"एक, दो, तीन, चार, पांच, छह\") = = [\"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\"]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/45", "entry_point": "choose_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 15;\nmy $x0 = choose_num($arg00, $arg01);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 12;\nmy $x1 = choose_num($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 33;\nmy $arg21 = 12354;\nmy $x2 = choose_num($arg20, $arg21);\nmy $v2 = 12354;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5234;\nmy $arg31 = 5233;\nmy $x3 = choose_num($arg30, $arg31);\nmy $v3 = -1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 6;\nmy $arg41 = 29;\nmy $x4 = choose_num($arg40, $arg41);\nmy $v4 = 28;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 27;\nmy $arg51 = 10;\nmy $x5 = choose_num($arg50, $arg51);\nmy $v5 = -1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $arg61 = 7;\nmy $x6 = choose_num($arg60, $arg61);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 546;\nmy $arg71 = 546;\nmy $x7 = choose_num($arg70, $arg71);\nmy $v7 = 546;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "यह फलन दो धनात्मक संख्याएँ x और y लेता है और वापस करता है \nसबसे बड़ी सम पूर्णांक संख्या जो [x, y] समावेशी सीमा में है। यदि \nऐसी कोई संख्या नहीं है, तो फ़ंक्शन-1 लौटना चाहिए। \n\nउदाहरण के लिएः \nचुनें (12,15) = 14 \nचुनें (13,12) =-1", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/46", "entry_point": "rounded_avg", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $x0 = rounded_avg($arg00, $arg01);\nmy $v0 = \"0b11\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 13;\nmy $x1 = rounded_avg($arg10, $arg11);\nmy $v1 = \"0b1010\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 964;\nmy $arg21 = 977;\nmy $x2 = rounded_avg($arg20, $arg21);\nmy $v2 = \"0b1111001010\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 996;\nmy $arg31 = 997;\nmy $x3 = rounded_avg($arg30, $arg31);\nmy $v3 = \"0b1111100100\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 560;\nmy $arg41 = 851;\nmy $x4 = rounded_avg($arg40, $arg41);\nmy $v4 = \"0b1011000010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 185;\nmy $arg51 = 546;\nmy $x5 = rounded_avg($arg50, $arg51);\nmy $v5 = \"0b101101110\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 362;\nmy $arg61 = 496;\nmy $x6 = rounded_avg($arg60, $arg61);\nmy $v6 = \"0b110101101\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 350;\nmy $arg71 = 902;\nmy $x7 = rounded_avg($arg70, $arg71);\nmy $v7 = \"0b1001110010\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 197;\nmy $arg81 = 233;\nmy $x8 = rounded_avg($arg80, $arg81);\nmy $v8 = \"0b11010111\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 7;\nmy $arg91 = 5;\nmy $x9 = rounded_avg($arg90, $arg91);\nmy $v9 = -1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 5;\nmy $arg101 = 1;\nmy $x10 = rounded_avg($arg100, $arg101);\nmy $v10 = -1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 5;\nmy $arg111 = 5;\nmy $x11 = rounded_avg($arg110, $arg111);\nmy $v11 = \"0b101\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "आपको दो सकारात्मक पूर्णांक n और m दिए गए हैं, और आपका कार्य गणना करना है \nn से m तक के पूर्णांकों का औसत (n और m सहित)। \nनिकटतम पूर्णांक के उत्तर को गोल करें और उसे द्विआधारी में परिवर्तित करें। \nयदि n, m से बड़ा है, तो-1 वापस करें। \nउदाहरणः \nगोलाकार _ ए. वी. जी. (1,5) => \"0बी11\" \nगोलाकार _ ए. वी. जी. (7,5) =>-1 \nगोलाकार _ ए. वी. जी. (10,20) => \"0बी1111\" \nगोलाकार _ ए. वी. जी. (20,33) => \"0बी11010\"", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/47", "entry_point": "f", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = f($arg00);\nmy $v0 = [1, 2, 6, 24, 15];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = f($arg10);\nmy $v1 = [1, 2, 6, 24, 15, 720, 28];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = f($arg20);\nmy $v2 = [1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 3;\nmy $x3 = f($arg30);\nmy $v3 = [1, 2, 6];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "फलन f को लागू करें जो n को एक पैरामीटर के रूप में लेता है, \nऔर आकार n की एक सूची लौटाता है, जैसे कि सूचकांक i पर तत्व का मान i का भाज्य है यदि i सम है \nया अन्यथा 1 से i तक की संख्याओं का योग। \nमैं 1 से शुरू करता हूँ। \ni का भाज्य 1 से i (1 * 2 *... * i) तक की संख्याओं का गुणन है। \nउदाहरणः \nf (5) = = [1,2,6,24,15]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/48", "entry_point": "even_odd_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = even_odd_palindrome($arg00);\nmy $v0 = [8, 13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = even_odd_palindrome($arg10);\nmy $v1 = [4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = even_odd_palindrome($arg20);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 63;\nmy $x3 = even_odd_palindrome($arg30);\nmy $v3 = [6, 8];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 25;\nmy $x4 = even_odd_palindrome($arg40);\nmy $v4 = [5, 6];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 19;\nmy $x5 = even_odd_palindrome($arg50);\nmy $v5 = [4, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = even_odd_palindrome($arg60);\nmy $v6 = [4, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $x7 = even_odd_palindrome($arg70);\nmy $v7 = [0, 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, एक टुपल वापस करें जिसमें सम और विषम की संख्या हो। \nपूर्णांक पालिंड्रोम जो सीमा (1, एन) के भीतर आते हैं, समावेशी। \n\nउदाहरण 1: \n\nइनपुटः 3 \nआउटपुटः (1,2) \nव्याख्याः \nपूर्णांक पालिंड्रोम 1,2,3 हैं. उनमें से एक सम है, और उनमें से दो विषम हैं। \n\nउदाहरण 2: \n\nइनपुटः 12 \nआउटपुटः (4,6) \nव्याख्याः \nपूर्णांक पालिंड्रोम हैं 1,2,3,4,5,6,7,8,9,11. उनमें से चार सम हैं, और उनमें से 6 विषम हैं। \n\nध्यान देंः \n1. 1 <= n <= 10 ^ 3 \n2. लौटाए गए टुपल में क्रमशः सम और विषम पूर्णांक पालिंड्रोम्स की संख्या होती है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/49", "entry_point": "move_one_ball", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 1, 2];\nmy $x0 = move_one_ball($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 5, 10, 1, 2];\nmy $x1 = move_one_ball($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 1, 2];\nmy $x2 = move_one_ball($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 4, 1, 2];\nmy $x3 = move_one_ball($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = move_one_ball($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "हमारे पास एन पूर्णांक arr [1], arr [2],..., arr [N] की एक सरणी'arr'है। \nसरणी में संख्याओं को यादृच्छिक रूप से क्रमबद्ध किया जाएगा। आपका कार्य यह निर्धारित करना है कि क्या \nप्रदर्शन करके गैर-घटते क्रम में एक सरणी को क्रमबद्ध करना संभव है। \nदिए गए सरणी पर निम्नलिखित ऑपरेशनः \nआपको किसी भी समय सही शिफ्ट ऑपरेशन करने की अनुमति है। \n\nएक राइट शिफ्ट ऑपरेशन का अर्थ है सरणी के सभी तत्वों को एक से स्थानांतरित करना। \nसही दिशा में स्थिति। सरणी के अंतिम तत्व को स्थानांतरित किया जाएगा \nसरणी में प्रारंभिक स्थिति अर्थात 0 वां सूचकांक। \n\nयदि उपरोक्त ऑपरेशन करके क्रमबद्ध सरणी प्राप्त करना संभव है \nफिर सही लौटें अन्यथा गलत लौटें। \nयदि दी गई सरणी खाली है तो सही वापस करें। \n\nनोटः दी गई सूची में अद्वितीय तत्व होने की गारंटी है। \n\nउदाहरण के लिएः \n\nमूव _ वन _ बॉल ([3,4,5,1,2]) = => सही \nव्याख्याः 2 सही शिफ्ट संचालन में प्रदर्शन करके, गैर-घटता क्रम कर सकता है \nदिए गए सरणी के लिए प्राप्त किया जा सकता है। \nमूव _ वन _ बॉल ([3,5,4,1,2]) = => गलत \nव्याख्याः दिए गए के लिए गैर-घटता आदेश प्राप्त करना संभव नहीं है। \nकिसी भी संख्या में सही शिफ्ट संचालन करके सरणी।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/50", "entry_point": "exchange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = [1, 2, 3, 4];\nmy $x0 = exchange($arg00, $arg01);\nmy $v0 = \"YES\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [1, 5, 3, 4];\nmy $x1 = exchange($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = [2, 1, 4, 3];\nmy $x2 = exchange($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 7, 3];\nmy $arg31 = [2, 6, 4];\nmy $x3 = exchange($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 7, 3];\nmy $arg41 = [2, 6, 3];\nmy $x4 = exchange($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 2, 6, 1, 8, 9];\nmy $arg51 = [3, 5, 5, 1, 1, 1];\nmy $x5 = exchange($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [100, 200];\nmy $arg61 = [200, 200];\nmy $x6 = exchange($arg60, $arg61);\nmy $v6 = \"YES\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "इस समस्या में, आप एक फ़ंक्शन लागू करेंगे जो संख्याओं की दो सूचियाँ लेता है, \nऔर यह निर्धारित करता है कि क्या तत्वों का आदान-प्रदान करना संभव है \nउनके बीच lst1 को केवल सम संख्याओं की सूची बनाने के लिए। \nlst1 और lst2 के बीच आदान-प्रदान किए गए तत्वों की संख्या की कोई सीमा नहीं है। \nयदि बनाने के लिए lst1 और lst2 के बीच तत्वों का आदान-प्रदान करना संभव है \nlst1 के सभी तत्वों को सम होने के लिए, \"हाँ\" वापस करें। \nअन्यथा, \"नहीं\" वापस करें। \nउदाहरण के लिएः \nविनिमय ([1,2,3,4], [1,2,3,4]) => \"हाँ\" \nविनिमय ([1,2,3,4], [1,5,3,4]) => \"नहीं\" \nयह माना जाता है कि इनपुट सूचियाँ खाली नहीं होंगी।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/51", "entry_point": "reverse_delete", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $arg01 = \"ae\";\nmy $x0 = reverse_delete($arg00, $arg01);\nmy $v0 = [\"bcd\", 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\";\nmy $arg11 = \"b\";\nmy $x1 = reverse_delete($arg10, $arg11);\nmy $v1 = [\"acdef\", 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcdedcba\";\nmy $arg21 = \"ab\";\nmy $x2 = reverse_delete($arg20, $arg21);\nmy $v2 = [\"cdedc\", 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"dwik\";\nmy $arg31 = \"w\";\nmy $x3 = reverse_delete($arg30, $arg31);\nmy $v3 = [\"dik\", 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"a\";\nmy $arg41 = \"a\";\nmy $x4 = reverse_delete($arg40, $arg41);\nmy $v4 = [\"\", 1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"abcdedcba\";\nmy $arg51 = \"\";\nmy $x5 = reverse_delete($arg50, $arg51);\nmy $v5 = [\"abcdedcba\", 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"abcdedcba\";\nmy $arg61 = \"v\";\nmy $x6 = reverse_delete($arg60, $arg61);\nmy $v6 = [\"abcdedcba\", 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"vabba\";\nmy $arg71 = \"v\";\nmy $x7 = reverse_delete($arg70, $arg71);\nmy $v7 = [\"abba\", 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"mamma\";\nmy $arg81 = \"mia\";\nmy $x8 = reverse_delete($arg80, $arg81);\nmy $v8 = [\"\", 1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "कार्य \nहमें दो स्ट्रिंग s और c दिए गए हैं, आपको s में सभी वर्णों को हटाना होगा जो c में किसी भी वर्ण के बराबर हैं। \nफिर जाँच करें कि परिणाम स्ट्रिंग पालिंड्रोम है या नहीं। \nएक तार को पालिंड्रोम कहा जाता है यदि यह आगे के समान पीछे की ओर पढ़ता है। \nआपको चेक के लिए परिणाम स्ट्रिंग और सही/गलत वाला एक टुपल वापस करना चाहिए। \nउदाहरण \nएस = \"एबीसीडी\", सी = \"एई\" के लिए, परिणाम होना चाहिए ('बीसीडी', गलत) \nएस = \"एबीसीडीएफ\" के लिए, सी = \"बी\" परिणाम होना चाहिए ('एसीडीएफ', गलत) \ns = \"abcdedcba\", c = \"ab\" के लिए, परिणाम होना चाहिए ('cdedc', सही)", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/52", "entry_point": "max_fill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nmy $arg01 = 1;\nmy $x0 = max_fill($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nmy $arg11 = 2;\nmy $x1 = max_fill($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[0, 0, 0], [0, 0, 0]];\nmy $arg21 = 5;\nmy $x2 = max_fill($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg31 = 2;\nmy $x3 = max_fill($arg30, $arg31);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg41 = 9;\nmy $x4 = max_fill($arg40, $arg41);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "आपको कुओं का एक आयताकार ग्रिड दिया जाता है। प्रत्येक पंक्ति एक कुएं का प्रतिनिधित्व करती है, \nऔर एक पंक्ति में प्रत्येक 1 पानी की एक इकाई का प्रतिनिधित्व करता है। \nप्रत्येक कुएँ में एक संबंधित बाल्टी होती है जिसका उपयोग उससे पानी निकालने के लिए किया जा सकता है। \nऔर सभी बाल्टियों में समान क्षमता होती है। \nआपका काम कुओं को खाली करने के लिए बाल्टियों का उपयोग करना है। \nजितनी बार आपको बाल्टियों को कम करने की आवश्यकता होगी, उसे आउटपुट करें। \n\nउदाहरण 1: \nइनपुटः \nग्रिडः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nबाल्टी क्षमताः 1 \nआउटपुटः 6 \n\nउदाहरण 2: \nइनपुटः \nग्रिडः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1]] \nबाल्टी क्षमताः 2 \nआउटपुटः 5 \n\nउदाहरण 3: \nइनपुटः \nग्रिडः [0,0,0], [0,0,0] \nबाल्टी क्षमताः 5 \nआउटपुटः 0 \n\nअड़चनेंः \n* सभी कुओं की लंबाई समान होती है। \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= ग्रिड [:, 1]. लंबाई <= 10 ^ 2 \nग्रिड [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/53", "entry_point": "select_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Mary had a little lamb\";\nmy $arg01 = 4;\nmy $x0 = select_words($arg00, $arg01);\nmy $v0 = [\"little\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mary had a little lamb\";\nmy $arg11 = 3;\nmy $x1 = select_words($arg10, $arg11);\nmy $v1 = [\"Mary\", \"lamb\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"simple white space\";\nmy $arg21 = 2;\nmy $x2 = select_words($arg20, $arg21);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hello world\";\nmy $arg31 = 4;\nmy $x3 = select_words($arg30, $arg31);\nmy $v3 = [\"world\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Uncle sam\";\nmy $arg41 = 3;\nmy $x4 = select_words($arg40, $arg41);\nmy $v4 = [\"Uncle\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"\";\nmy $arg51 = 4;\nmy $x5 = select_words($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"a b c d e f\";\nmy $arg61 = 1;\nmy $x6 = select_words($arg60, $arg61);\nmy $v6 = [\"b\", \"c\", \"d\", \"f\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "एक स्ट्रिंग s और एक प्राकृतिक संख्या n को देखते हुए, आपको इसे लागू करने का काम सौंपा गया है। \nएक प्रकार्य जो स्ट्रिंग एस से सभी शब्दों की एक सूची देता है जिसमें ठीक-ठीक शब्द होते हैं \nएन व्यंजन, क्रम में ये शब्द स्ट्रिंग एस में दिखाई देते हैं। \nयदि स्ट्रिंग s खाली है तो फ़ंक्शन को एक खाली सूची वापस करनी चाहिए। \nनोटः आप मान सकते हैं कि इनपुट स्ट्रिंग में केवल अक्षर और रिक्त स्थान हैं। \nउदाहरण के लिएः \nशब्द चुनें (\"मैरी के पास एक छोटा भेड़ का बच्चा था\", 4) = => [\"छोटा\"] \nशब्द चुनें (\"मैरी का एक छोटा भेड़ का बच्चा था\", 3) = => [\"मैरी\", \"भेड़ का बच्चा\"] \nशब्द चुनें (\"साधारण सफेद स्थान\", 2) = => [] \nशब्द चुनें (\"हैलो वर्ल्ड\", 4) = => [\"वर्ल्ड\"] \nशब्द चुनें (\"अंकल सैम\", 3) = => [\"अंकल\"]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/54", "entry_point": "maximum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-3, -4, 5];\nmy $arg01 = 3;\nmy $x0 = maximum($arg00, $arg01);\nmy $v0 = [-4, -3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, -4, 4];\nmy $arg11 = 2;\nmy $x1 = maximum($arg10, $arg11);\nmy $v1 = [4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, 2, 1, 2, -1, -2, 1];\nmy $arg21 = 1;\nmy $x2 = maximum($arg20, $arg21);\nmy $v2 = [2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [123, -123, 20, 0, 1, 2, -3];\nmy $arg31 = 3;\nmy $x3 = maximum($arg30, $arg31);\nmy $v3 = [2, 20, 123];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-123, 20, 0, 1, 2, -3];\nmy $arg41 = 4;\nmy $x4 = maximum($arg40, $arg41);\nmy $v4 = [0, 1, 2, 20];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 15, 0, 3, -13, -8, 0];\nmy $arg51 = 7;\nmy $x5 = maximum($arg50, $arg51);\nmy $v5 = [-13, -8, 0, 0, 3, 5, 15];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, 0, 2, 5, 3, -10];\nmy $arg61 = 2;\nmy $x6 = maximum($arg60, $arg61);\nmy $v6 = [3, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 0, 5, -7];\nmy $arg71 = 1;\nmy $x7 = maximum($arg70, $arg71);\nmy $v7 = [5];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [4, -4];\nmy $arg81 = 2;\nmy $x8 = maximum($arg80, $arg81);\nmy $v8 = [-4, 4];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-10, 10];\nmy $arg91 = 2;\nmy $x9 = maximum($arg90, $arg91);\nmy $v9 = [-10, 10];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 2, 3, -23, 243, -400, 0];\nmy $arg101 = 0;\nmy $x10 = maximum($arg100, $arg101);\nmy $v10 = [];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "पूर्णांकों की एक सरणी arr और एक सकारात्मक पूर्णांक k दिए जाने पर, एक क्रमबद्ध सूची वापस करें \nए. आर. आर. में अधिकतम के संख्याओं के साथ लंबाई के. \n\nउदाहरण 1: \n\nइनपुटः arr = [-3,-4,5], k = 3 \nआउटपुटः [-4,-3,5] \n\nउदाहरण 2: \n\nइनपुटः arr = [4,-4,4], k = 2 \nआउटपुटः [4,4] \n\nउदाहरण 3: \n\nइनपुटः arr = [-3,2,1,2,-1,2,1], k = 1 \nआउटपुटः [2] \n\nध्यान देंः \n1. सरणी की लंबाई [1000] की सीमा में होगी। \n2. सरणी में तत्व [-1000] की सीमा में होंगे। \n3. 0 <= k <= लेन (arr)", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/55", "entry_point": "add_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\nmy $arg01 = 3;\nmy $x0 = add_elements($arg00, $arg01);\nmy $v0 = -4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [111, 121, 3, 4000, 5, 6];\nmy $arg11 = 2;\nmy $x1 = add_elements($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\nmy $arg21 = 4;\nmy $x2 = add_elements($arg20, $arg21);\nmy $v2 = 125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nmy $arg31 = 4;\nmy $x3 = add_elements($arg30, $arg31);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $arg41 = 1;\nmy $x4 = add_elements($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "पूर्णांक एआरआर और एक पूर्णांक के की एक गैर-खाली सरणी को देखते हुए, वापस करें \narr के पहले k तत्वों से अधिकतम दो अंकों वाले तत्वों का योग। \n\nउदाहरणः \n\nइनपुटः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nआउटपुटः 24 #21 + 3 का योग \n\nअड़चनेंः \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/56", "entry_point": "intersection", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2];\nmy $arg01 = [2, 3];\nmy $x0 = intersection($arg00, $arg01);\nmy $v0 = \"NO\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 1];\nmy $arg11 = [0, 4];\nmy $x1 = intersection($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, -1];\nmy $arg21 = [-5, 5];\nmy $x2 = intersection($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-2, 2];\nmy $arg31 = [-4, 0];\nmy $x3 = intersection($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-11, 2];\nmy $arg41 = [-1, -1];\nmy $x4 = intersection($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 2];\nmy $arg51 = [3, 5];\nmy $x5 = intersection($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2];\nmy $arg61 = [1, 2];\nmy $x6 = intersection($arg60, $arg61);\nmy $v6 = \"NO\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-2, -2];\nmy $arg71 = [-3, -2];\nmy $x7 = intersection($arg70, $arg71);\nmy $v7 = \"NO\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "आपको दो अंतराल दिए जाते हैं, \nजहाँ प्रत्येक अंतराल पूर्णांकों का एक जोड़ा है। उदाहरण के लिए, अंतराल = (प्रारंभ, अंत) = (1,2)। \nदिए गए अंतराल बंद होते हैं जिसका अर्थ है कि अंतराल (प्रारंभ, अंत) \nइसमें शुरुआत और अंत दोनों शामिल हैं। \nप्रत्येक दिए गए अंतराल के लिए, यह माना जाता है कि इसकी शुरुआत कम या इसके अंत के बराबर है। \nआपका काम यह निर्धारित करना है कि इन दोनों के प्रतिच्छेदन की लंबाई कितनी है। \nअंतराल एक अभाज्य संख्या है। \nउदाहरण के लिए, अंतराल (1,3), (2,4) का प्रतिच्छेदन (2,3) है। \nजिसकी लंबाई 1 है, जो एक अभाज्य संख्या नहीं है। \nयदि प्रतिच्छेदन की लंबाई एक अभाज्य संख्या है, तो \"हाँ\" वापस करें, \nअन्यथा, \"नहीं\" वापस करें। \nयदि दोनों अंतराल एक दूसरे को नहीं काटते हैं, तो \"नहीं\" वापस करें। \n\n[इनपुट/आउटपुट] नमूनेः \nप्रतिच्छेदन ((1,2,3)) = => \"नहीं\" \nप्रतिच्छेदन ((-1,1), (0,4)) = => \"नहीं\" \nप्रतिच्छेदन ((-3,-1), (-5,5)) = => \"हाँ\"", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/57", "entry_point": "tri", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = tri($arg00);\nmy $v0 = [1, 3, 2.0, 8.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = tri($arg10);\nmy $v1 = [1, 3, 2.0, 8.0, 3.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = tri($arg20);\nmy $v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = tri($arg30);\nmy $v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $x4 = tri($arg40);\nmy $v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 8;\nmy $x5 = tri($arg50);\nmy $v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = tri($arg60);\nmy $v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 20;\nmy $x7 = tri($arg70);\nmy $v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 0;\nmy $x8 = tri($arg80);\nmy $v8 = [1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $x9 = tri($arg90);\nmy $v9 = [1, 3];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "हर कोई फिबोनाची अनुक्रम को जानता है, इसका गणितविदों द्वारा गहराई से अध्ययन किया गया था \nपिछली कुछ शताब्दियाँ। हालाँकि, लोग जो नहीं जानते हैं वह है ट्रिबोनाची अनुक्रम। \nट्राइबोनाची अनुक्रम को पुनरावृत्ति द्वारा परिभाषित किया जाता हैः \nत्रि (1) = 3 \nत्रि (एन) = 1 + एन/2, यदि एन सम है। \nयदि n विषम है तो त्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1)। \nउदाहरण के लिएः \nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nआपको एक गैर-नकारात्मक पूर्णांक संख्या n दी गई है, आपको एक सूची वापस करनी होगी \nट्रिबोनाची अनुक्रम की पहली n + 1 संख्याएँ। \nउदाहरण के लिएः \nत्रि (3) = [1,3,2,8]", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/58", "entry_point": "digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = digits($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 54;\nmy $x1 = digits($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = digits($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5014;\nmy $x3 = digits($arg30);\nmy $v3 = 5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 98765;\nmy $x4 = digits($arg40);\nmy $v4 = 315;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 5576543;\nmy $x5 = digits($arg50);\nmy $v5 = 2625;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2468;\nmy $x6 = digits($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "एक सकारात्मक पूर्णांक n दिए जाने पर, विषम अंकों के गुणनफल को वापस करें। \nयदि सभी अंक सम हैं तो 0 वापस करें। \nउदाहरण के लिएः \nअंक (1) = = 1 \nअंक (4) = = 0 \nअंक (235) = = 15", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/59", "entry_point": "is_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"[[]]\";\nmy $x0 = is_nested($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"[]]]]]]][[[[[]\";\nmy $x1 = is_nested($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"[][]\";\nmy $x2 = is_nested($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"[]\";\nmy $x3 = is_nested($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"[[[[]]]]\";\nmy $x4 = is_nested($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"[]]]]]]]]]]\";\nmy $x5 = is_nested($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"[][][[]]\";\nmy $x6 = is_nested($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"[[]\";\nmy $x7 = is_nested($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"[]]\";\nmy $x8 = is_nested($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"[[]][[\";\nmy $x9 = is_nested($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"[[][]]\";\nmy $x10 = is_nested($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"\";\nmy $x11 = is_nested($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"[[[[[[[[\";\nmy $x12 = is_nested($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"]]]]]]]]\";\nmy $x13 = is_nested($arg130);\nmy $v13 = 0;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "एक ऐसा फ़ंक्शन बनाएँ जो एक स्ट्रिंग को इनपुट के रूप में लेता है जिसमें केवल वर्ग कोष्ठक होते हैं। \nफ़ंक्शन को सही लौटना चाहिए यदि और केवल तभी जब कोष्ठक का एक वैध अनुक्रम हो \nजेराव उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन उन। \n\nनेस्टेड ('[[]]') सही है \nis _ nested ('[]]]]] [[[[]') गलत है \nनेस्टेड ('[] []') गलत है \nनेस्टेड ('[]') गलत है \nनेस्टेड ('[[] []]') सही है \nनेस्टेड है ('[[]] [[') सही है", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/60", "entry_point": "sum_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sum_squares($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2, 3];\nmy $x1 = sum_squares($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7];\nmy $x2 = sum_squares($arg20);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.4, 4.2, 0];\nmy $x3 = sum_squares($arg30);\nmy $v3 = 29;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-2.4, 1, 1];\nmy $x4 = sum_squares($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [100, 1, 15, 2];\nmy $x5 = sum_squares($arg50);\nmy $v5 = 10230;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [10000, 10000];\nmy $x6 = sum_squares($arg60);\nmy $v6 = 200000000;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1.4, 4.6, 6.3];\nmy $x7 = sum_squares($arg70);\nmy $v7 = 75;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1.4, 17.9, 18.9, 19.9];\nmy $x8 = sum_squares($arg80);\nmy $v8 = 1086;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [0];\nmy $x9 = sum_squares($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-1];\nmy $x10 = sum_squares($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [-1, 1, 0];\nmy $x11 = sum_squares($arg110);\nmy $v11 = 2;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "आपको संख्याओं की एक सूची दी जाती है। \nआपको दी गई सूची में वर्ग संख्या का योग वापस करना होगा, \nसूची में प्रत्येक तत्व को पहले ऊपरी इंट (सीलिंग) में गोल करें। \nउदाहरण के लिएः \nlst = [1,2,3] के लिए आउटपुट 14 होना चाहिए। \nlst = [1,4,9] के लिए आउटपुट 98 होना चाहिए। \nlst = [1,3,5, 7] के लिए आउटपुट 84 होना चाहिए। \nlst = [1.4,4.2, 0] के लिए आउटपुट 29 होना चाहिए। \nlst = [-2.4,1, 1] के लिए आउटपुट 6 होना चाहिए।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/61", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"apple\";\nmy $x0 = check_if_last_char_is_a_letter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"apple pi e\";\nmy $x1 = check_if_last_char_is_a_letter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eeeee\";\nmy $x2 = check_if_last_char_is_a_letter($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"A\";\nmy $x3 = check_if_last_char_is_a_letter($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Pumpkin pie \";\nmy $x4 = check_if_last_char_is_a_letter($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Pumpkin pie 1\";\nmy $x5 = check_if_last_char_is_a_letter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = check_if_last_char_is_a_letter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"eeeee e \";\nmy $x7 = check_if_last_char_is_a_letter($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"apple pie\";\nmy $x8 = check_if_last_char_is_a_letter($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"apple pi e \";\nmy $x9 = check_if_last_char_is_a_letter($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "एक प्रकार्य बनाएँ जो सही लौटाता है यदि अंतिम वर्ण \nकिसी दिए गए स्ट्रिंग का वर्णमाला वर्ण है और यह नहीं है \nएक शब्द का एक हिस्सा, और अन्यथा गलत। \nनोटः \"शब्द\" अक्षरों का एक समूह है जो स्थान द्वारा अलग किया जाता है। \n\nउदाहरण के लिएः \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई\") ′ गलत \nजाँच करें कि अगर _ अंतिम _ चर _ है _ a _ अक्षर (\"एप्पल पाई ई\") सही है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"सेब पाई ई\") गलत है \nजाँचें _ अगर _ अंतिम _ चर _ है _ ए _ अक्षर (\"\") ′ गलत", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/62", "entry_point": "can_arrange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 3, 5];\nmy $x0 = can_arrange($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $x1 = can_arrange($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\nmy $x2 = can_arrange($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 8, 5, 7, 3];\nmy $x3 = can_arrange($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = can_arrange($arg40);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "एक ऐसा फलन बनाएँ जो किसी तत्व का सबसे बड़ा सूचकांक देता है जो \nयह उससे तुरंत पहले के तत्व से बड़ा या बराबर नहीं है। यदि \nऐसा कोई तत्व मौजूद नहीं है तो वापसी-1। दिए गए सरणी में शामिल नहीं होगा \nडुप्लिकेट मान। \n\nउदाहरण के लिएः \nकैन अरेंज ([1,2,4, 3,5]) = 3 \nकैन अरेंज ([1,2,3]) =-1", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/63", "entry_point": "largest_smallest_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 1, 3, 5, 7];\nmy $x0 = largest_smallest_integers($arg00);\nmy $v0 = [\"none\", 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 1, 3, 5, 7, 0];\nmy $x1 = largest_smallest_integers($arg10);\nmy $v1 = [\"none\", 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2, 4, 5, 6, -2];\nmy $x2 = largest_smallest_integers($arg20);\nmy $v2 = [-2, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 5, 3, 6, 2, 7, -7];\nmy $x3 = largest_smallest_integers($arg30);\nmy $v3 = [-7, 2];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\nmy $x4 = largest_smallest_integers($arg40);\nmy $v4 = [-9, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [];\nmy $x5 = largest_smallest_integers($arg50);\nmy $v5 = [\"none\", \"none\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [0];\nmy $x6 = largest_smallest_integers($arg60);\nmy $v6 = [\"none\", \"none\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1, -3, -5, -6];\nmy $x7 = largest_smallest_integers($arg70);\nmy $v7 = [-1, \"none\"];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1, -3, -5, -6, 0];\nmy $x8 = largest_smallest_integers($arg80);\nmy $v8 = [-1, \"none\"];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-6, -4, -4, -3, 1];\nmy $x9 = largest_smallest_integers($arg90);\nmy $v9 = [-3, 1];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-6, -4, -4, -3, -100, 1];\nmy $x10 = largest_smallest_integers($arg100);\nmy $v10 = [-3, 1];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "एक फलन बनाएँ जो एक टुपल (ए, बी) देता है, जहाँ'ए'है \nऋणात्मक पूर्णांकों में सबसे बड़ा, और'बी'सबसे छोटा है \nएक सूची में सकारात्मक पूर्णांक। \nयदि कोई ऋणात्मक या धनात्मक पूर्णांक नहीं हैं, तो उन्हें शून्य के रूप में वापस करें। \n\nउदाहरण के लिएः \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([2,4,1,3,5,7]) = = (कोई नहीं, 1) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([]) = = (कोई नहीं, कोई नहीं) \nसबसे बड़ा _ सबसे छोटा _ पूर्णांक ([0]) = = (कोई नहीं, कोई नहीं)", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/64", "entry_point": "special_factorial", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = special_factorial($arg00);\nmy $v0 = 288;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = special_factorial($arg10);\nmy $v1 = 34560;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = special_factorial($arg20);\nmy $v2 = 125411328000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1;\nmy $x3 = special_factorial($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "ब्राजीलियाई भाज्य को इस प्रकार परिभाषित किया गया हैः \nब्राज़ीलियाई _ फैक्टोरियल (एन) = एन! * (एन-1)! * (एन-2)! *... * 1! \nजहाँ n> 0 \n\nउदाहरण के लिएः \n>>> स्पेशल _ फैक्टोरियल (4) \n288 \n\nफ़ंक्शन को इनपुट के रूप में एक पूर्णांक प्राप्त होगा और विशेष वापस करना चाहिए \nइस पूर्णांक का भाज्य।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/65", "entry_point": "words_in_sentence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"This is a test\";\nmy $x0 = words_in_sentence($arg00);\nmy $v0 = \"is\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lets go for swimming\";\nmy $x1 = words_in_sentence($arg10);\nmy $v1 = \"go for\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"there is no place available here\";\nmy $x2 = words_in_sentence($arg20);\nmy $v2 = \"there is no place\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hi I am Hussein\";\nmy $x3 = words_in_sentence($arg30);\nmy $v3 = \"Hi am Hussein\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"go for it\";\nmy $x4 = words_in_sentence($arg40);\nmy $v4 = \"go for it\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"here\";\nmy $x5 = words_in_sentence($arg50);\nmy $v5 = \"\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"here is\";\nmy $x6 = words_in_sentence($arg60);\nmy $v6 = \"is\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "आपको एक वाक्य का प्रतिनिधित्व करने वाली एक स्ट्रिंग दी जाती है, \nवाक्य में कुछ शब्द हैं जो एक स्थान द्वारा अलग किए गए हैं, \nऔर आपको एक स्ट्रिंग वापस करनी होगी जिसमें मूल वाक्य के शब्द शामिल हैं, \nजिनकी लंबाई अभाज्य संख्याएँ हैं, \nनई स्ट्रिंग में शब्दों का क्रम मूल के समान होना चाहिए। \n\nउदाहरण 1: \nइनपुटः वाक्य = \"यह एक परीक्षण है\" \nआउटपुटः \"है\" \n\nउदाहरण 2: \nइनपुटः वाक्य = \"चलो तैरने के लिए चलते हैं\" \nआउटपुटः \"के लिए जाएँ\" \n\nअड़चनेंः \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्य में केवल अक्षर होते हैं", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/66", "entry_point": "simplify", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1/5\";\nmy $arg01 = \"5/1\";\nmy $x0 = simplify($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1/6\";\nmy $arg11 = \"2/1\";\nmy $x1 = simplify($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"5/1\";\nmy $arg21 = \"3/1\";\nmy $x2 = simplify($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"7/10\";\nmy $arg31 = \"10/2\";\nmy $x3 = simplify($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"2/10\";\nmy $arg41 = \"50/10\";\nmy $x4 = simplify($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"7/2\";\nmy $arg51 = \"4/2\";\nmy $x5 = simplify($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"11/6\";\nmy $arg61 = \"6/1\";\nmy $x6 = simplify($arg60, $arg61);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"2/3\";\nmy $arg71 = \"5/2\";\nmy $x7 = simplify($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"5/2\";\nmy $arg81 = \"3/5\";\nmy $x8 = simplify($arg80, $arg81);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"2/4\";\nmy $arg91 = \"8/4\";\nmy $x9 = simplify($arg90, $arg91);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"2/4\";\nmy $arg101 = \"4/2\";\nmy $x10 = simplify($arg100, $arg101);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"1/5\";\nmy $arg111 = \"5/1\";\nmy $x11 = simplify($arg110, $arg111);\nmy $v11 = 1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"1/5\";\nmy $arg121 = \"1/5\";\nmy $x12 = simplify($arg120, $arg121);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "आपका काम एक ऐसे कार्य को लागू करना है जो अभिव्यक्ति को सरल बनाएगा। \nx * n. फलन सही बताता है यदि x * n एक पूर्ण संख्या का मूल्यांकन करता है और गलत \nअन्यथा। x और n दोनों, एक अंश के स्ट्रिंग प्रतिनिधित्व हैं, और निम्नलिखित प्रारूप हैं, \n<अंश> <भाजक> जहाँ अंश और भाजक दोनों सकारात्मक पूर्ण संख्याएँ हैं। \n\nआप मान सकते हैं कि x, और n वैध अंश हैं, और विभाजक के रूप में शून्य नहीं हैं। \n\nसरलीकरण (\"1/5\", \"5/1\") = सही \nसरलीकरण (\"1/6\", \"2/1\") = गलत \nसरलीकरण (\"7/10\", \"10/2\") = गलत", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/67", "entry_point": "order_by_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 11, -1, -11, -12];\nmy $x0 = order_by_points($arg00);\nmy $v0 = [-1, -11, 1, -12, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\nmy $x1 = order_by_points($arg10);\nmy $v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = order_by_points($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\nmy $x3 = order_by_points($arg30);\nmy $v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nmy $x4 = order_by_points($arg40);\nmy $v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 6, 6, -76, -21, 23, 4];\nmy $x5 = order_by_points($arg50);\nmy $v5 = [-76, -21, 0, 4, 23, 6, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "एक प्रकार्य लिखें जो पूर्णांकों की दी गई सूची को क्रमबद्ध करता है। \nउनके अंकों के योग के अनुसार आरोही क्रम में। \nनोटः यदि कई वस्तुएँ हैं जिनके अंकों का योग समान है, \nमूल सूची में उनके सूचकांक के आधार पर उन्हें ऑर्डर करें। \n\nउदाहरण के लिएः \n>>> ऑर्डर _ बाय _ पॉइंट्स ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ऑर्डर _ बाय _ पॉइंट्स ([]) = = []", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/68", "entry_point": "specialfilter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, -2, 1, -5];\nmy $x0 = specialfilter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [15, -73, 14, -15];\nmy $x1 = specialfilter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [33, -2, -3, 45, 21, 109];\nmy $x2 = specialfilter($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [43, -12, 93, 125, 121, 109];\nmy $x3 = specialfilter($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [71, -2, -33, 75, 21, 19];\nmy $x4 = specialfilter($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1];\nmy $x5 = specialfilter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = specialfilter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "एक प्रकार्य लिखें जो इनपुट और रिटर्न के रूप में संख्याओं की एक सरणी लेता है। \nसरणी में तत्वों की संख्या जो 10 से अधिक है और दोनों \nएक संख्या के पहले और अंतिम अंक विषम (1,3,5,7,9) होते हैं। \nउदाहरण के लिएः \nविशेष फ़िल्टर ([15,-73,14,-15]) => 1 \nविशेष फ़िल्टर ([33,-2,-3,45,21,109]) => 2", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/69", "entry_point": "get_max_triples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = get_max_triples($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = get_max_triples($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = get_max_triples($arg20);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = get_max_triples($arg30);\nmy $v3 = 53361;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "आपको एक सकारात्मक पूर्णांक n दिया जाता है। आपको n लंबाई का एक पूर्णांक सरणी a बनाना होगा। \nप्रत्येक i (1 ≤ i ≤ n) के लिए, a [i] = i * i-i + 1 का मान। \na के तीन गुना (a [i], a [j], a [k]) की संख्या वापस करें जहाँ i <j <k, \nऔर a [i] + a [j] + a [k] 3 का गुणज है। \n\nउदाहरणः \nइनपुटः एन = 5 \nआउटपुटः 1 \nव्याख्याः \na = [1,3,7,13,21] \nएकमात्र वैध ट्रिपल (1,7,13) है।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/70", "entry_point": "bf", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Jupiter\";\nmy $arg01 = \"Neptune\";\nmy $x0 = bf($arg00, $arg01);\nmy $v0 = [\"Saturn\", \"Uranus\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Earth\";\nmy $arg11 = \"Mercury\";\nmy $x1 = bf($arg10, $arg11);\nmy $v1 = [\"Venus\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Mercury\";\nmy $arg21 = \"Uranus\";\nmy $x2 = bf($arg20, $arg21);\nmy $v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Neptune\";\nmy $arg31 = \"Venus\";\nmy $x3 = bf($arg30, $arg31);\nmy $v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Earth\";\nmy $arg41 = \"Earth\";\nmy $x4 = bf($arg40, $arg41);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Mars\";\nmy $arg51 = \"Earth\";\nmy $x5 = bf($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"Jupiter\";\nmy $arg61 = \"Makemake\";\nmy $x6 = bf($arg60, $arg61);\nmy $v6 = [];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "हमारे सौर मंडल में आठ ग्रह हैंः सूर्य के सबसे करीब \nबुध है, अगला शुक्र है, फिर पृथ्वी, मंगल, बृहस्पति, शनि, \nयूरेनस, नेपच्यून। \nएक कार्य लिखें जो दो ग्रहों के नाम ग्रह 1 और ग्रह 2 के रूप में लेता है। \nफ़ंक्शन को सभी ग्रहों वाले एक टुपल को वापस करना चाहिए जिनकी कक्षाएँ हैं \nग्रह 1 की कक्षा और ग्रह 2 की कक्षा के बीच स्थित, द्वारा क्रमबद्ध \nसूर्य की निकटता। \nयदि प्लैनेट1 या प्लैनेट2 है तो फ़ंक्शन को एक खाली टुपल वापस करना चाहिए। \nग्रहों के नाम सही नहीं हैं। \nउदाहरण \nbf (\"बृहस्पति\", \"नेपच्यून\") = => (\"शनि\", \"यूरेनस\") \nbf (\"पृथ्वी\", \"बुध\") = => (\"शुक्र\") \nbf (\"बुध\", \"यूरेनस\") = => (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"बृहस्पति\", \"शनि\")", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/71", "entry_point": "x_or_y", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 34;\nmy $arg02 = 12;\nmy $x0 = x_or_y($arg00, $arg01, $arg02);\nmy $v0 = 34;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 8;\nmy $arg12 = 5;\nmy $x1 = x_or_y($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 33;\nmy $arg22 = 5212;\nmy $x2 = x_or_y($arg20, $arg21, $arg22);\nmy $v2 = 33;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1259;\nmy $arg31 = 3;\nmy $arg32 = 52;\nmy $x3 = x_or_y($arg30, $arg31, $arg32);\nmy $v3 = 3;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7919;\nmy $arg41 = -1;\nmy $arg42 = 12;\nmy $x4 = x_or_y($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 3609;\nmy $arg51 = 1245;\nmy $arg52 = 583;\nmy $x5 = x_or_y($arg50, $arg51, $arg52);\nmy $v5 = 583;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 91;\nmy $arg61 = 56;\nmy $arg62 = 129;\nmy $x6 = x_or_y($arg60, $arg61, $arg62);\nmy $v6 = 129;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 6;\nmy $arg71 = 34;\nmy $arg72 = 1234;\nmy $x7 = x_or_y($arg70, $arg71, $arg72);\nmy $v7 = 1234;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 1;\nmy $arg81 = 2;\nmy $arg82 = 0;\nmy $x8 = x_or_y($arg80, $arg81, $arg82);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 2;\nmy $arg91 = 2;\nmy $arg92 = 0;\nmy $x9 = x_or_y($arg90, $arg91, $arg92);\nmy $v9 = 2;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "एक सरल प्रोग्राम जिसे x का मान वापस करना चाहिए यदि n है \nएक अभाज्य संख्या और अन्यथा y का मान वापस करना चाहिए। \n\nउदाहरण के लिएः \nx _ या _ y (7,34,12) = = 34 के लिए \nx _ या _ y (15,8,5) = = 5 के लिए", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/72", "entry_point": "double_the_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = double_the_difference($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 4];\nmy $x1 = double_the_difference($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.1, 0.2, 0.3];\nmy $x2 = double_the_difference($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-10, -20, -30];\nmy $x3 = double_the_difference($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-1, -2, 8];\nmy $x4 = double_the_difference($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0.2, 3, 5];\nmy $x5 = double_the_difference($arg50);\nmy $v5 = 34;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\nmy $x6 = double_the_difference($arg60);\nmy $v6 = 166650;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "संख्याओं की सूची दिए जाने पर, संख्याओं के वर्गों का योग वापस करें। \nविषम सूची में. उन संख्याओं को नजरअंदाज करें जो ऋणात्मक हैं या पूर्णांक नहीं हैं। \n\nडबल _ द _ डिफरेंस ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nडबल _ द _ डिफरेंस ([-1,0]) = = 0 \nडबल _ द _ डिफरेंस ([9,-2]) = = 81 \nडबल _ द _ डिफरेंस ([0]) = = 0 \n\nयदि इनपुट सूची खाली है, तो 0 वापस करें।", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/73", "entry_point": "strongest_extension", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Watashi\";\nmy $arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\nmy $x0 = strongest_extension($arg00, $arg01);\nmy $v0 = \"Watashi.eIGHt8OKe\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Boku123\";\nmy $arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\nmy $x1 = strongest_extension($arg10, $arg11);\nmy $v1 = \"Boku123.YEs.WeCaNe\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"__YESIMHERE\";\nmy $arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\nmy $x2 = strongest_extension($arg20, $arg21);\nmy $v2 = \"__YESIMHERE.NuLl__\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"K\";\nmy $arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\nmy $x3 = strongest_extension($arg30, $arg31);\nmy $v3 = \"K.TAR\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"__HAHA\";\nmy $arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\nmy $x4 = strongest_extension($arg40, $arg41);\nmy $v4 = \"__HAHA.123\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"YameRore\";\nmy $arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\nmy $x5 = strongest_extension($arg50, $arg51);\nmy $v5 = \"YameRore.okIWILL123\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"finNNalLLly\";\nmy $arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\nmy $x6 = strongest_extension($arg60, $arg61);\nmy $v6 = \"finNNalLLly.WoW\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"_\";\nmy $arg71 = [\"Bb\", \"91245\"];\nmy $x7 = strongest_extension($arg70, $arg71);\nmy $v7 = \"_.Bb\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"Sp\";\nmy $arg81 = [\"671235\", \"Bb\"];\nmy $x8 = strongest_extension($arg80, $arg81);\nmy $v8 = \"Sp.671235\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "आपको एक वर्ग का नाम (एक स्ट्रिंग) और एक्सटेंशन की एक सूची दी जाएगी। \nइन विस्तारों का उपयोग कक्षा में अतिरिक्त वर्गों को लोड करने के लिए किया जाना है। \nविस्तार की ताकत इस प्रकार हैः मान लीजिए कि CAP बड़े अक्षर की संख्या है। \nविस्तार के नाम में अक्षर, और एस. एम. को छोटे अक्षरों की संख्या होने दें \nविस्तार के नाम में, ताकत सीएपी-एसएम अंश द्वारा दी जाती है। \nआपको सबसे मजबूत एक्सटेंशन ढूंढना चाहिए और इसमें एक स्ट्रिंग वापस करनी चाहिए। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि एक ही ताकत के साथ दो या दो से अधिक विस्तार हैं, तो आपको करना चाहिए \nसूची में सबसे पहले आने वाले को चुनें। \nउदाहरण के लिए, यदि आपको वर्ग और सूची के रूप में \"स्लाइस\" दिए गए हैं \nविस्तारः ['SERVINGSliCes','चीज़','स्टुफ़ेड'] तो आपको करना चाहिए \nरिटर्न'Slices.SErviNGSliCes'क्योंकि'SERVINGSliCes'सबसे मजबूत एक्सटेंशन है \n(इसकी ताकत-1 है)। \nउदाहरणः \nसबसे मजबूत _ विस्तार के लिए ('माय _ क्लास', ['एए','बी','सीसी']) = ='my_class.AA'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/74", "entry_point": "cycpattern_check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"xyzw\";\nmy $arg01 = \"xyw\";\nmy $x0 = cycpattern_check($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"yello\";\nmy $arg11 = \"ell\";\nmy $x1 = cycpattern_check($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"whattup\";\nmy $arg21 = \"ptut\";\nmy $x2 = cycpattern_check($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"efef\";\nmy $arg31 = \"fee\";\nmy $x3 = cycpattern_check($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abab\";\nmy $arg41 = \"aabb\";\nmy $x4 = cycpattern_check($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"winemtt\";\nmy $arg51 = \"tinem\";\nmy $x5 = cycpattern_check($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "आपको 2 शब्द दिए गए हैं। आपको सही लौटाने की आवश्यकता है यदि दूसरा शब्द या इसका कोई भी आवर्तन पहले शब्द में एक सबस्ट्रिंग है। \nसाइकपेटर्न _ चेक (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => गलत \nसाइकपेटर्न _ चेक (\"हैलो\", \"ईल\") => सही \nसाइकपेटर्न _ चेक (\"व्हासअप\", \"psus\") => गलत \nसाइकपेटर्न _ चेक (\"अबाब\", \"बा\") => सही \nसाइकपेटर्न _ चेक (\"ई. एफ. ई. एफ\"., \"ई. ई. एफ. एफ\".) => गलत \nसाइकपेटर्न _ चेक (\"हिमेन्स\", \"सिमेन\") => सही", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/75", "entry_point": "int_to_mini_roman", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 19;\nmy $x0 = int_to_mini_roman($arg00);\nmy $v0 = \"xix\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 152;\nmy $x1 = int_to_mini_roman($arg10);\nmy $v1 = \"clii\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 251;\nmy $x2 = int_to_mini_roman($arg20);\nmy $v2 = \"ccli\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 426;\nmy $x3 = int_to_mini_roman($arg30);\nmy $v3 = \"cdxxvi\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 500;\nmy $x4 = int_to_mini_roman($arg40);\nmy $v4 = \"d\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 1;\nmy $x5 = int_to_mini_roman($arg50);\nmy $v5 = \"i\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 4;\nmy $x6 = int_to_mini_roman($arg60);\nmy $v6 = \"iv\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 43;\nmy $x7 = int_to_mini_roman($arg70);\nmy $v7 = \"xliii\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 90;\nmy $x8 = int_to_mini_roman($arg80);\nmy $v8 = \"xc\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 94;\nmy $x9 = int_to_mini_roman($arg90);\nmy $v9 = \"xciv\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 532;\nmy $x10 = int_to_mini_roman($arg100);\nmy $v10 = \"dxxxii\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 900;\nmy $x11 = int_to_mini_roman($arg110);\nmy $v11 = \"cm\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 994;\nmy $x12 = int_to_mini_roman($arg120);\nmy $v12 = \"cmxciv\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 1000;\nmy $x13 = int_to_mini_roman($arg130);\nmy $v13 = \"m\";\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "एक सकारात्मक पूर्णांक दिए जाने पर, एक स्ट्रिंग के रूप में इसके रोमन अंक के समतुल्य प्राप्त करें, \nऔर इसे छोटे अक्षर में वापस कर दें। \nप्रतिबंधः 1 <= संख्या <= 1000 \n\nउदाहरण के लिएः \n>>> इंट _ टू _ मिनी _ रोमन (19) = ='xix'\n>>> इंट _ टू _ मिनी _ रोमन (152) = ='क्लाई'\n>> इंट _ टू _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/76", "entry_point": "right_angle_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = right_angle_triangle($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = right_angle_triangle($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 6;\nmy $arg22 = 8;\nmy $x2 = right_angle_triangle($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = right_angle_triangle($arg30, $arg31, $arg32);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 24;\nmy $arg42 = 25;\nmy $x4 = right_angle_triangle($arg40, $arg41, $arg42);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = right_angle_triangle($arg50, $arg51, $arg52);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 5;\nmy $arg61 = 12;\nmy $arg62 = 13;\nmy $x6 = right_angle_triangle($arg60, $arg61, $arg62);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 15;\nmy $arg71 = 8;\nmy $arg72 = 17;\nmy $x7 = right_angle_triangle($arg70, $arg71, $arg72);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 48;\nmy $arg81 = 55;\nmy $arg82 = 73;\nmy $x8 = right_angle_triangle($arg80, $arg81, $arg82);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $arg91 = 1;\nmy $arg92 = 1;\nmy $x9 = right_angle_triangle($arg90, $arg91, $arg92);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 2;\nmy $arg101 = 2;\nmy $arg102 = 10;\nmy $x10 = right_angle_triangle($arg100, $arg101, $arg102);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "त्रिभुज की तीनों भुजाओं की लंबाई को देखते हुए. सही लौटें यदि तीनों \nभुजाएँ एक समकोण त्रिभुज बनाती हैं, अन्यथा गलत। \nसमकोण त्रिभुज वह त्रिभुज है जिसमें एक कोण समकोण या समकोण होता है। \n90 डिग्री। \nउदाहरणः \nसमकोण त्रिभुज (3,4,5) = = सही \nसमकोण त्रिभुज (1,2,3) = = गलत", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/77", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AsDf\";\nmy $x0 = solve($arg00);\nmy $v0 = \"aSdF\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1234\";\nmy $x1 = solve($arg10);\nmy $v1 = \"4321\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = solve($arg20);\nmy $v2 = \"AB\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"#a@C\";\nmy $x3 = solve($arg30);\nmy $v3 = \"#A@c\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"#AsdfW^45\";\nmy $x4 = solve($arg40);\nmy $v4 = \"#aSDFw^45\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"#6@2\";\nmy $x5 = solve($arg50);\nmy $v5 = \"2@6#\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"#\\$a^D\";\nmy $x6 = solve($arg60);\nmy $v6 = \"#\\$A^d\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"#ccc\";\nmy $x7 = solve($arg70);\nmy $v7 = \"#CCC\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "आपको एक स्ट्रिंग s दी जाती है। \nयदि एस [आई] एक अक्षर है, तो इसके मामले को निचले से ऊपरी या इसके विपरीत करें, \nअन्यथा इसे वैसे ही रखें जैसे वह है। \nयदि स्ट्रिंग में कोई अक्षर नहीं हैं, तो स्ट्रिंग को उलट दें। \nफ़ंक्शन को परिणामी स्ट्रिंग वापस करनी चाहिए। \nउदाहरण \nहल करें (\"1234\") = \"4321\" \nहल करें (\"एबी\") = \"एबी\" \nहल करें (\"#a @C\") = \"#A @c\"", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/78", "entry_point": "string_to_md5", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = string_to_md5($arg00);\nmy $v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"\";\nmy $x1 = string_to_md5($arg10);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"A B C\";\nmy $x2 = string_to_md5($arg20);\nmy $v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"password\";\nmy $x3 = string_to_md5($arg30);\nmy $v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "स्ट्रिंग'टेक्स्ट'को देखते हुए, इसके md5 हैश समकक्ष स्ट्रिंग को वापस करें। \nयदि'पाठ'एक खाली स्ट्रिंग है, तो शून्य वापस करें। \n\n>> स्ट्रिंग _ से _ md5 ('हैलो वर्ल्ड') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
{"task_id": "perl/79", "entry_point": "generate_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 10;\nmy $x0 = generate_integers($arg00, $arg01);\nmy $v0 = [2, 4, 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 2;\nmy $x1 = generate_integers($arg10, $arg11);\nmy $v1 = [2, 4, 6, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 132;\nmy $arg21 = 2;\nmy $x2 = generate_integers($arg20, $arg21);\nmy $v2 = [2, 4, 6, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 17;\nmy $arg31 = 89;\nmy $x3 = generate_integers($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "दो धनात्मक पूर्णांक a और b दिए जाने पर, a के बीच के सम अंकों को वापस करें। \nऔर बी, आरोही क्रम में। \n\nउदाहरण के लिएः \nपूर्णांक उत्पन्न करें (2,8) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (8,2) => [2,4,6,8] \nपूर्णांक उत्पन्न करें (10,14) => []", "language": "perl", "canonical_solution": null, "natural_language": "Hindi"}
