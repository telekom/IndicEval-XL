{"task_id": "ruby/0", "entry_point": "below_zero", "test": "\n\narg00 = []\nx0 = below_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, -3, 1, 2, -3]\nx1 = below_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, -4, 5, 6]\nx2 = below_zero(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, -1, 2, -2, 5, -5, 4, -4]\nx3 = below_zero(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, -1, 2, -2, 5, -5, 4, -5]\nx4 = below_zero(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, -2, 2, -2, 5, -5, 4, -4]\nx5 = below_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "भवतः कृते ब्याङ्क्-अकौण्ट् मध्ये निक्षेपस्य तथा निष्कासनस्य च कार्याणां सूची दत्ता अस्ति, यस्मात् आरभ्यते। \nशून्यं शेषम्। कस्मिंश्चित् काले अपि लेखायाः शेषराशिः शून्यात् अधः पतति वा इति ज्ञातुं भवतः कार्यम् अस्ति, तथा। \nतस्मिन् समये फंक्षन् ट्रु इति प्रत्यावर्तयेत्। अन्यथा तत् फाल्स् इति प्रत्यावर्तयेत्। \n>>> शून्यात् अधः ([1,2,3]) \nमिथ्याचारः। \n>>> शून्यात् अधः ([1,2,-4,5]) \nसत्यम्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/1", "entry_point": "sum_product", "test": "\n\narg00 = []\nx0 = sum_product(arg00)\nv0 = [0, 1]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 1, 1]\nx1 = sum_product(arg10)\nv1 = [3, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [100, 0]\nx2 = sum_product(arg20)\nv2 = [100, 0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 5, 7]\nx3 = sum_product(arg30)\nv3 = [15, 105]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [10]\nx4 = sum_product(arg40)\nv4 = [10, 10]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "पूर्णांशकानां प्रदत्तसूच्यां, सूच्यां सर्वानां पूर्णांशकानां योगस्य गुणनफलस्य च एकं टुपल् प्रत्यर्पयतु। \nरिक्तराशिः 0 समानं भवेत्, रिक्तगुणितं च 1 समानं भवेत्। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/2", "entry_point": "string_xor", "test": "\n\narg00 = \"111000\"\narg01 = \"101010\"\nx0 = string_xor(arg00, arg01)\nv0 = \"010010\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1\"\narg11 = \"1\"\nx1 = string_xor(arg10, arg11)\nv1 = \"0\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"0101\"\narg21 = \"0000\"\nx2 = string_xor(arg20, arg21)\nv2 = \"0101\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "इन्पुट् इतीदं a तथा b इति द्वौ सूत्रौ स्तः यत्र केवलं 1s तथा 0s इत्येतौ स्तः। \nएतेषु इन्पुट्-मध्ये द्वैतीयं XOR कुर्वन्तु तथा च रिटर्न्-परिणामम् अपि स्ट्रिङ्ग्-रूपेण कुर्वन्तु। \n>> स्ट्रिङ्ग् _ xor ('010','110') \n\"100\" इति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/3", "entry_point": "longest", "test": "\n\narg00 = []\nx0 = longest(arg00)\nv0 = nil\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [\"x\", \"y\", \"z\"]\nx1 = longest(arg10)\nv1 = \"x\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]\nx2 = longest(arg20)\nv2 = \"zzzz\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "स्ट्रिङ्ग्-सूचीतः दीर्घतमं प्रत्यर्पयतु। बहुविधस्य सन्दर्भे प्रथमं प्रत्यर्पयतु। \nसमानदीर्घतायाः स्ट्रिङ्ग्स्। इन्पुट्-सूची रिक्तं भवति चेत् शून्यं प्रत्यावर्तयतु। \n>>> दीर्घतमः ([]) \n\n>>> दीर्घतमः (['a','b','c']) \n\"अ\" इति। \n>>> दीर्घतमः (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/4", "entry_point": "greatest_common_divisor", "test": "\n\narg00 = 3\narg01 = 7\nx0 = greatest_common_divisor(arg00, arg01)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 10\narg11 = 15\nx1 = greatest_common_divisor(arg10, arg11)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 49\narg21 = 14\nx2 = greatest_common_divisor(arg20, arg21)\nv2 = 7\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 144\narg31 = 60\nx3 = greatest_common_divisor(arg30, arg31)\nv3 = 12\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "a तथा b इति पूर्णांशकयोः बृहत्तमः सामान्यभागकः प्रत्यावर्तयतु। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (3,5) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (25,15) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/5", "entry_point": "sort_numbers", "test": "\n\narg00 = \"\"\nx0 = sort_numbers(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"three\"\nx1 = sort_numbers(arg10)\nv1 = \"three\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"three five nine\"\nx2 = sort_numbers(arg20)\nv2 = \"three five nine\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"five zero four seven nine eight\"\nx3 = sort_numbers(arg30)\nv3 = \"zero four five seven eight nine\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"six five four three two one zero\"\nx4 = sort_numbers(arg40)\nv4 = \"zero one two three four five six\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "इन्पुट् इति'शून्य'तः'नव'पर्यन्तं संख्यानां स्पेस्-डिलिमिटेड् स्ट्रिङ्ग् अस्ति। \n'शून्यः','एकः','द्वौ','त्रीणि','चत्वारः','पञ्च','षट्','सप्त','अष्ट'तथा'नव'इति वैधानि विकल्पानि सन्ति। \nलघुतमात् बृहत्तमं यावत् क्रमबद्धां सङ्ख्याभिः सह स्ट्रिङ्ग् प्रत्यावर्तयतु। \n>>> संख्यानां क्रमनिर्धारणं करोतु ('तिस्रः एकः पञ्च') \n\"एकत्रयं पञ्च\" इति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/6", "entry_point": "rescale_to_unit", "test": "\n\narg00 = [2.0, 49.9]\nx0 = rescale_to_unit(arg00)\nv0 = [0.0, 1.0]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [100.0, 49.9]\nx1 = rescale_to_unit(arg10)\nv1 = [1.0, 0.0]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1.0, 2.0, 3.0, 4.0, 5.0]\nx2 = rescale_to_unit(arg20)\nv2 = [0.0, 0.25, 0.5, 0.75, 1.0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [2.0, 1.0, 5.0, 3.0, 4.0]\nx3 = rescale_to_unit(arg30)\nv3 = [0.25, 0.0, 1.0, 0.5, 0.75]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [12.0, 11.0, 15.0, 13.0, 14.0]\nx4 = rescale_to_unit(arg40)\nv4 = [0.25, 0.0, 1.0, 0.5, 0.75]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "संख्यासूच्यां (न्यूनातिन्यूनं द्वयोः तत्त्वयोः) दत्तं, तस्मिन् सूच्यां रेखीयपरिवर्तनं प्रयुज्यताम्। \nयथा लघुतमः सङ्ख्या 0 भविष्यति, बृहत्तमा च 1 भविष्यति। \n>> रिकेल्-टु-युनिट् ([1,0,2,0,4,0]) \n[0,0,25,0,0,75,0,0]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/7", "entry_point": "flip_case", "test": "\n\narg00 = \"\"\nx0 = flip_case(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Hello!\"\nx1 = flip_case(arg10)\nv1 = \"hELLO!\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"These violent delights have violent ends\"\nx2 = flip_case(arg20)\nv2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "निर्दिष्टस्य स्ट्रिङ्ग् इत्यस्य कृते, लोवर्केस्-अक्षरान् अपरकेस्-रूपेण, अपरकेस्-अक्षरान् लोवर्केस्-रूपेण च परिवर्तयतु। \n>>> फ़्लिप्-केस् ('हेलो') \n\"हेलो\" इति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/8", "entry_point": "get_positive", "test": "\n\narg00 = [-1, -2, 4, 5, 6]\nx0 = get_positive(arg00)\nv0 = [4, 5, 6]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]\nx1 = get_positive(arg10)\nv1 = [5, 3, 2, 3, 3, 9, 123, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-1, -2]\nx2 = get_positive(arg20)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = []\nx3 = get_positive(arg30)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "सूच्यां केवलं धनात्मकसङ्ख्याः प्रत्यर्पयतु। \n>>> धनात्मकं प्रापयन्तु ([-1,2,-4,5,6]) \n[2,5,6] \n>>> प्राप्यते ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/9", "entry_point": "is_prime", "test": "\n\narg00 = 6\nx0 = is_prime(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 101\nx1 = is_prime(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 11\nx2 = is_prime(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 13441\nx3 = is_prime(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 61\nx4 = is_prime(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 4\nx5 = is_prime(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 1\nx6 = is_prime(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 5\nx7 = is_prime(arg70)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 11\nx8 = is_prime(arg80)\nv8 = true\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 17\nx9 = is_prime(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 85\nx10 = is_prime(arg100)\nv10 = false\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 77\nx11 = is_prime(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 255379\nx12 = is_prime(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\n", "description": "यदि दत्तसङ्ख्या अभाज्य अस्ति तर्हि सत्यं प्रत्यावर्तयतु, अन्यथा असत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/10", "entry_point": "unique", "test": "\n\narg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nx0 = unique(arg00)\nv0 = [0, 2, 3, 5, 9, 123]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\n", "description": "सूच्यां क्रमबद्धानि विशिष्टानि तत्त्वानि प्रत्यावर्तयतु। \n>>> अद्वितीयः ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/11", "entry_point": "prime_fib", "test": "\n\narg00 = 1\nx0 = prime_fib(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 2\nx1 = prime_fib(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\nx2 = prime_fib(arg20)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 4\nx3 = prime_fib(arg30)\nv3 = 13\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 5\nx4 = prime_fib(arg40)\nv4 = 89\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 6\nx5 = prime_fib(arg50)\nv5 = 233\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 7\nx6 = prime_fib(arg60)\nv6 = 1597\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 8\nx7 = prime_fib(arg70)\nv7 = 28657\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 9\nx8 = prime_fib(arg80)\nv8 = 514229\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 10\nx9 = prime_fib(arg90)\nv9 = 433494437\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "प्रैम्-फ़ैब् इतीदं n-तमं संख्यां प्रत्यर्पयति यत् फ़िबोनाची सङ्ख्या अपि च अभाज्यम् अस्ति। \n>>> प्रैम्-फैब् (1) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> प्रैम्-फैब् (2) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> प्रैम्-फैब् (3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> प्रैम्-फैब् (4) \n13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। \n>>> प्रैम्-फैब् (5) \n89।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/12", "entry_point": "triples_sum_to_zero", "test": "\n\narg00 = [1, 3, 5, 0]\nx0 = triples_sum_to_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 3, 5, -1]\nx1 = triples_sum_to_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, -2, 1]\nx2 = triples_sum_to_zero(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 2, 3, 7]\nx3 = triples_sum_to_zero(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 5, 7]\nx4 = triples_sum_to_zero(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [2, 4, -5, 3, 9, 7]\nx5 = triples_sum_to_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [1]\nx6 = triples_sum_to_zero(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [1, 3, 5, -100]\nx7 = triples_sum_to_zero(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [100, 3, 5, -100]\nx8 = triples_sum_to_zero(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "ट्रिपल्स्-सम्-तः-ज़ीरो-पर्यन्तं इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां त्रीणि विशिष्टानि तत्त्वानि सन्ति तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n\n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,35,5,0]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,3,-2,1]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,2,3,7]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([2,4,-5,3,9,7]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1]) \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/13", "entry_point": "pairs_sum_to_zero", "test": "\n\narg00 = [1, 3, 5, 0]\nx0 = pairs_sum_to_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 3, -2, 1]\nx1 = pairs_sum_to_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, 3, 7]\nx2 = pairs_sum_to_zero(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [2, 4, -5, 3, 5, 7]\nx3 = pairs_sum_to_zero(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\nx4 = pairs_sum_to_zero(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [-3, 9, -1, 3, 2, 30]\nx5 = pairs_sum_to_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-3, 9, -1, 3, 2, 31]\nx6 = pairs_sum_to_zero(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-3, 9, -1, 4, 2, 30]\nx7 = pairs_sum_to_zero(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-3, 9, -1, 4, 2, 31]\nx8 = pairs_sum_to_zero(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "pairs _ sum _ to _ zero इति इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां द्वे विशिष्टाः तत्त्वौ स्तः तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,3,5,0]) \nमिथ्याचारः। \n>>> युग्मानि _ राशिः _ तः _ शून्यं ([1,3,-2,1]) \nमिथ्याचारः। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,2,3,7]) \nमिथ्याचारः। \n>>> युग्म-राशि-तः-शून्यपर्यन्तं ([2,4,-5,3,5,7]) \nसत्यम्। \n>>> युग्मं _ सं _ तः _ शून्यं ([1]) \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/14", "entry_point": "fib4", "test": "\n\narg00 = 5\nx0 = fib4(arg00)\nv0 = 4\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 8\nx1 = fib4(arg10)\nv1 = 28\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\nx2 = fib4(arg20)\nv2 = 104\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 12\nx3 = fib4(arg30)\nv3 = 386\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "फैब्-4 सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nFib4 (0)-> 0 \nFib4 (1)-> 0 \nफैब4 (2)-> 2 \nFib4 (3)-> 0 \nफैब्4 (एन्)-> फैब्4 (एन्-1) + फैब्4 (एन्-2) + फैब्4 (एन्-3) + फैब्4 (एन्-4)। \nफैब्-4 सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। पुनरावर्तनस्य उपयोगं मा करोतु। \n>>> फैब्4 (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्4 (6) \n8। \n>>> फैब्4 (7) \n14।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/15", "entry_point": "median", "test": "\n\narg00 = [3, 1, 2, 4, 5]\nx0 = median(arg00)\nv0 = 3\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [-10, 4, 6, 1000, 10, 20]\nx1 = median(arg10)\nv1 = 8.0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [5]\nx2 = median(arg20)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [6, 5]\nx3 = median(arg30)\nv3 = 5.5\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [8, 1, 3, 9, 9, 2, 7]\nx4 = median(arg40)\nv4 = 7\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "सूची l मध्ये तत्त्वानां माध्यं प्रत्यावर्तयतु। \n>>> माध्यिका ([3,1,2,4,5]) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n0. 0।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/16", "entry_point": "is_palindrome", "test": "\n\narg00 = \"\"\nx0 = is_palindrome(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"aba\"\nx1 = is_palindrome(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"aaaaa\"\nx2 = is_palindrome(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"zbcd\"\nx3 = is_palindrome(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"xywyx\"\nx4 = is_palindrome(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"xywyz\"\nx5 = is_palindrome(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"xywzx\"\nx6 = is_palindrome(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "दत्तं स्ट्रिङ्ग् पालिण्ड्रोम् अस्ति वा इति पश्यतु। \n>>> अस्ति _ पालिण्ड्रोम् (\") \nसत्यम्। \n>>> अस्ति _ पालिण्ड्रोम् ('अबा') \nसत्यम्। \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n>>> is _ palindrome ('zbcd') अस्ति। \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/17", "entry_point": "remove_vowels", "test": "\n\narg00 = \"\"\nx0 = remove_vowels(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdef\\nghijklm\"\nx1 = remove_vowels(arg10)\nv1 = \"bcdf\\nghjklm\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"fedcba\"\nx2 = remove_vowels(arg20)\nv2 = \"fdcb\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"eeeee\"\nx3 = remove_vowels(arg30)\nv3 = \"\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"acBAA\"\nx4 = remove_vowels(arg40)\nv4 = \"cB\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"EcBOO\"\nx5 = remove_vowels(arg50)\nv5 = \"cB\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"ybcd\"\nx6 = remove_vowels(arg60)\nv6 = \"ybcd\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "रिमूव् _ वोवेल्स् इति एकं फंक्षन् अस्ति यत् स्ट्रिङ्ग् स्वीकृत्य स्वरं विना स्ट्रिङ्ग् प्रत्यावर्तयति। \n>>> स्वरान् निष्कासयतु (\") \n\"इति। \n>>> स्वरान् निष्कासयतु (\"abcdef\\nghijklm\") \n'bcdf\\ nghjklm'\n>>> स्वरान् निष्कासयतु ('ए. बी. सी. डी. एफ़्.') \n'बी. सी. डी. एफ़्.'\n>>> स्वरान् निष्कासयतु ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"इति। \n>>> स्वरान् निष्कासयतु ('आब्बा') \n\"बी\" इति। \n>>> स्वरान् निष्कासयतु ('zbcd') \n'एस्. बी. सी. डी.'", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/18", "entry_point": "below_threshold", "test": "\n\narg00 = [1, 2, 4, 10]\narg01 = 100\nx0 = below_threshold(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 20, 4, 10]\narg11 = 5\nx1 = below_threshold(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 20, 4, 10]\narg21 = 21\nx2 = below_threshold(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 20, 4, 10]\narg31 = 22\nx3 = below_threshold(arg30, arg31)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 8, 4, 10]\narg41 = 11\nx4 = below_threshold(arg40, arg41)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 8, 4, 10]\narg51 = 10\nx5 = below_threshold(arg50, arg51)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "यदि सूची l मध्ये सर्वाः सङ्ख्याः t-परिमितेः अधः सन्ति तर्हि सत्यं प्रत्यावर्तयतु। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,2,4,10], 100) \nसत्यम्। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,20,4,10], 5) \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/19", "entry_point": "add", "test": "\n\narg00 = 0\narg01 = 1\nx0 = add(arg00, arg01)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 0\nx1 = add(arg10, arg11)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 2\narg21 = 3\nx2 = add(arg20, arg21)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5\narg31 = 7\nx3 = add(arg30, arg31)\nv3 = 12\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\narg41 = 5\nx4 = add(arg40, arg41)\nv4 = 12\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 572\narg51 = 725\nx5 = add(arg50, arg51)\nv5 = 1297\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 51\narg61 = 804\nx6 = add(arg60, arg61)\nv6 = 855\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 645\narg71 = 96\nx7 = add(arg70, arg71)\nv7 = 741\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 712\narg81 = 853\nx8 = add(arg80, arg81)\nv8 = 1565\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 223\narg91 = 101\nx9 = add(arg90, arg91)\nv9 = 324\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 76\narg101 = 29\nx10 = add(arg100, arg101)\nv10 = 105\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 416\narg111 = 149\nx11 = add(arg110, arg111)\nv11 = 565\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 145\narg121 = 409\nx12 = add(arg120, arg121)\nv12 = 554\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = 535\narg131 = 430\nx13 = add(arg130, arg131)\nv13 = 965\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = 118\narg141 = 303\nx14 = add(arg140, arg141)\nv14 = 421\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = 287\narg151 = 94\nx15 = add(arg150, arg151)\nv15 = 381\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\narg160 = 768\narg161 = 257\nx16 = add(arg160, arg161)\nv16 = 1025\nif x16 != v16\n    raise StandardError, \"Error at test case 17\"\nend\n\narg170 = 421\narg171 = 677\nx17 = add(arg170, arg171)\nv17 = 1098\nif x17 != v17\n    raise StandardError, \"Error at test case 18\"\nend\n\narg180 = 802\narg181 = 814\nx18 = add(arg180, arg181)\nv18 = 1616\nif x18 != v18\n    raise StandardError, \"Error at test case 19\"\nend\n\narg190 = 510\narg191 = 922\nx19 = add(arg190, arg191)\nv19 = 1432\nif x19 != v19\n    raise StandardError, \"Error at test case 20\"\nend\n\narg200 = 345\narg201 = 819\nx20 = add(arg200, arg201)\nv20 = 1164\nif x20 != v20\n    raise StandardError, \"Error at test case 21\"\nend\n\narg210 = 895\narg211 = 436\nx21 = add(arg210, arg211)\nv21 = 1331\nif x21 != v21\n    raise StandardError, \"Error at test case 22\"\nend\n\narg220 = 123\narg221 = 424\nx22 = add(arg220, arg221)\nv22 = 547\nif x22 != v22\n    raise StandardError, \"Error at test case 23\"\nend\n\narg230 = 923\narg231 = 245\nx23 = add(arg230, arg231)\nv23 = 1168\nif x23 != v23\n    raise StandardError, \"Error at test case 24\"\nend\n\narg240 = 23\narg241 = 438\nx24 = add(arg240, arg241)\nv24 = 461\nif x24 != v24\n    raise StandardError, \"Error at test case 25\"\nend\n\narg250 = 565\narg251 = 133\nx25 = add(arg250, arg251)\nv25 = 698\nif x25 != v25\n    raise StandardError, \"Error at test case 26\"\nend\n\narg260 = 945\narg261 = 925\nx26 = add(arg260, arg261)\nv26 = 1870\nif x26 != v26\n    raise StandardError, \"Error at test case 27\"\nend\n\narg270 = 261\narg271 = 983\nx27 = add(arg270, arg271)\nv27 = 1244\nif x27 != v27\n    raise StandardError, \"Error at test case 28\"\nend\n\narg280 = 139\narg281 = 577\nx28 = add(arg280, arg281)\nv28 = 716\nif x28 != v28\n    raise StandardError, \"Error at test case 29\"\nend\n\narg290 = 763\narg291 = 178\nx29 = add(arg290, arg291)\nv29 = 941\nif x29 != v29\n    raise StandardError, \"Error at test case 30\"\nend\n\narg300 = 147\narg301 = 892\nx30 = add(arg300, arg301)\nv30 = 1039\nif x30 != v30\n    raise StandardError, \"Error at test case 31\"\nend\n\narg310 = 436\narg311 = 402\nx31 = add(arg310, arg311)\nv31 = 838\nif x31 != v31\n    raise StandardError, \"Error at test case 32\"\nend\n\narg320 = 610\narg321 = 581\nx32 = add(arg320, arg321)\nv32 = 1191\nif x32 != v32\n    raise StandardError, \"Error at test case 33\"\nend\n\narg330 = 103\narg331 = 416\nx33 = add(arg330, arg331)\nv33 = 519\nif x33 != v33\n    raise StandardError, \"Error at test case 34\"\nend\n\narg340 = 339\narg341 = 990\nx34 = add(arg340, arg341)\nv34 = 1329\nif x34 != v34\n    raise StandardError, \"Error at test case 35\"\nend\n\narg350 = 130\narg351 = 504\nx35 = add(arg350, arg351)\nv35 = 634\nif x35 != v35\n    raise StandardError, \"Error at test case 36\"\nend\n\narg360 = 242\narg361 = 717\nx36 = add(arg360, arg361)\nv36 = 959\nif x36 != v36\n    raise StandardError, \"Error at test case 37\"\nend\n\narg370 = 562\narg371 = 110\nx37 = add(arg370, arg371)\nv37 = 672\nif x37 != v37\n    raise StandardError, \"Error at test case 38\"\nend\n\narg380 = 396\narg381 = 909\nx38 = add(arg380, arg381)\nv38 = 1305\nif x38 != v38\n    raise StandardError, \"Error at test case 39\"\nend\n\narg390 = 887\narg391 = 703\nx39 = add(arg390, arg391)\nv39 = 1590\nif x39 != v39\n    raise StandardError, \"Error at test case 40\"\nend\n\narg400 = 870\narg401 = 551\nx40 = add(arg400, arg401)\nv40 = 1421\nif x40 != v40\n    raise StandardError, \"Error at test case 41\"\nend\n\narg410 = 422\narg411 = 391\nx41 = add(arg410, arg411)\nv41 = 813\nif x41 != v41\n    raise StandardError, \"Error at test case 42\"\nend\n\narg420 = 299\narg421 = 505\nx42 = add(arg420, arg421)\nv42 = 804\nif x42 != v42\n    raise StandardError, \"Error at test case 43\"\nend\n\narg430 = 346\narg431 = 56\nx43 = add(arg430, arg431)\nv43 = 402\nif x43 != v43\n    raise StandardError, \"Error at test case 44\"\nend\n\narg440 = 36\narg441 = 706\nx44 = add(arg440, arg441)\nv44 = 742\nif x44 != v44\n    raise StandardError, \"Error at test case 45\"\nend\n\narg450 = 738\narg451 = 411\nx45 = add(arg450, arg451)\nv45 = 1149\nif x45 != v45\n    raise StandardError, \"Error at test case 46\"\nend\n\narg460 = 679\narg461 = 87\nx46 = add(arg460, arg461)\nv46 = 766\nif x46 != v46\n    raise StandardError, \"Error at test case 47\"\nend\n\narg470 = 25\narg471 = 303\nx47 = add(arg470, arg471)\nv47 = 328\nif x47 != v47\n    raise StandardError, \"Error at test case 48\"\nend\n\narg480 = 161\narg481 = 612\nx48 = add(arg480, arg481)\nv48 = 773\nif x48 != v48\n    raise StandardError, \"Error at test case 49\"\nend\n\narg490 = 306\narg491 = 841\nx49 = add(arg490, arg491)\nv49 = 1147\nif x49 != v49\n    raise StandardError, \"Error at test case 50\"\nend\n\narg500 = 973\narg501 = 411\nx50 = add(arg500, arg501)\nv50 = 1384\nif x50 != v50\n    raise StandardError, \"Error at test case 51\"\nend\n\narg510 = 711\narg511 = 157\nx51 = add(arg510, arg511)\nv51 = 868\nif x51 != v51\n    raise StandardError, \"Error at test case 52\"\nend\n\narg520 = 471\narg521 = 27\nx52 = add(arg520, arg521)\nv52 = 498\nif x52 != v52\n    raise StandardError, \"Error at test case 53\"\nend\n\narg530 = 714\narg531 = 792\nx53 = add(arg530, arg531)\nv53 = 1506\nif x53 != v53\n    raise StandardError, \"Error at test case 54\"\nend\n\narg540 = 38\narg541 = 206\nx54 = add(arg540, arg541)\nv54 = 244\nif x54 != v54\n    raise StandardError, \"Error at test case 55\"\nend\n\narg550 = 907\narg551 = 343\nx55 = add(arg550, arg551)\nv55 = 1250\nif x55 != v55\n    raise StandardError, \"Error at test case 56\"\nend\n\narg560 = 23\narg561 = 760\nx56 = add(arg560, arg561)\nv56 = 783\nif x56 != v56\n    raise StandardError, \"Error at test case 57\"\nend\n\narg570 = 524\narg571 = 859\nx57 = add(arg570, arg571)\nv57 = 1383\nif x57 != v57\n    raise StandardError, \"Error at test case 58\"\nend\n\narg580 = 30\narg581 = 529\nx58 = add(arg580, arg581)\nv58 = 559\nif x58 != v58\n    raise StandardError, \"Error at test case 59\"\nend\n\narg590 = 341\narg591 = 691\nx59 = add(arg590, arg591)\nv59 = 1032\nif x59 != v59\n    raise StandardError, \"Error at test case 60\"\nend\n\narg600 = 167\narg601 = 729\nx60 = add(arg600, arg601)\nv60 = 896\nif x60 != v60\n    raise StandardError, \"Error at test case 61\"\nend\n\narg610 = 636\narg611 = 289\nx61 = add(arg610, arg611)\nv61 = 925\nif x61 != v61\n    raise StandardError, \"Error at test case 62\"\nend\n\narg620 = 503\narg621 = 144\nx62 = add(arg620, arg621)\nv62 = 647\nif x62 != v62\n    raise StandardError, \"Error at test case 63\"\nend\n\narg630 = 51\narg631 = 985\nx63 = add(arg630, arg631)\nv63 = 1036\nif x63 != v63\n    raise StandardError, \"Error at test case 64\"\nend\n\narg640 = 287\narg641 = 149\nx64 = add(arg640, arg641)\nv64 = 436\nif x64 != v64\n    raise StandardError, \"Error at test case 65\"\nend\n\narg650 = 659\narg651 = 75\nx65 = add(arg650, arg651)\nv65 = 734\nif x65 != v65\n    raise StandardError, \"Error at test case 66\"\nend\n\narg660 = 462\narg661 = 797\nx66 = add(arg660, arg661)\nv66 = 1259\nif x66 != v66\n    raise StandardError, \"Error at test case 67\"\nend\n\narg670 = 406\narg671 = 141\nx67 = add(arg670, arg671)\nv67 = 547\nif x67 != v67\n    raise StandardError, \"Error at test case 68\"\nend\n\narg680 = 106\narg681 = 44\nx68 = add(arg680, arg681)\nv68 = 150\nif x68 != v68\n    raise StandardError, \"Error at test case 69\"\nend\n\narg690 = 300\narg691 = 934\nx69 = add(arg690, arg691)\nv69 = 1234\nif x69 != v69\n    raise StandardError, \"Error at test case 70\"\nend\n\narg700 = 471\narg701 = 524\nx70 = add(arg700, arg701)\nv70 = 995\nif x70 != v70\n    raise StandardError, \"Error at test case 71\"\nend\n\narg710 = 122\narg711 = 429\nx71 = add(arg710, arg711)\nv71 = 551\nif x71 != v71\n    raise StandardError, \"Error at test case 72\"\nend\n\narg720 = 735\narg721 = 195\nx72 = add(arg720, arg721)\nv72 = 930\nif x72 != v72\n    raise StandardError, \"Error at test case 73\"\nend\n\narg730 = 335\narg731 = 484\nx73 = add(arg730, arg731)\nv73 = 819\nif x73 != v73\n    raise StandardError, \"Error at test case 74\"\nend\n\narg740 = 28\narg741 = 809\nx74 = add(arg740, arg741)\nv74 = 837\nif x74 != v74\n    raise StandardError, \"Error at test case 75\"\nend\n\narg750 = 430\narg751 = 20\nx75 = add(arg750, arg751)\nv75 = 450\nif x75 != v75\n    raise StandardError, \"Error at test case 76\"\nend\n\narg760 = 916\narg761 = 635\nx76 = add(arg760, arg761)\nv76 = 1551\nif x76 != v76\n    raise StandardError, \"Error at test case 77\"\nend\n\narg770 = 301\narg771 = 999\nx77 = add(arg770, arg771)\nv77 = 1300\nif x77 != v77\n    raise StandardError, \"Error at test case 78\"\nend\n\narg780 = 454\narg781 = 466\nx78 = add(arg780, arg781)\nv78 = 920\nif x78 != v78\n    raise StandardError, \"Error at test case 79\"\nend\n\narg790 = 905\narg791 = 259\nx79 = add(arg790, arg791)\nv79 = 1164\nif x79 != v79\n    raise StandardError, \"Error at test case 80\"\nend\n\narg800 = 168\narg801 = 205\nx80 = add(arg800, arg801)\nv80 = 373\nif x80 != v80\n    raise StandardError, \"Error at test case 81\"\nend\n\narg810 = 570\narg811 = 434\nx81 = add(arg810, arg811)\nv81 = 1004\nif x81 != v81\n    raise StandardError, \"Error at test case 82\"\nend\n\narg820 = 64\narg821 = 959\nx82 = add(arg820, arg821)\nv82 = 1023\nif x82 != v82\n    raise StandardError, \"Error at test case 83\"\nend\n\narg830 = 957\narg831 = 510\nx83 = add(arg830, arg831)\nv83 = 1467\nif x83 != v83\n    raise StandardError, \"Error at test case 84\"\nend\n\narg840 = 722\narg841 = 598\nx84 = add(arg840, arg841)\nv84 = 1320\nif x84 != v84\n    raise StandardError, \"Error at test case 85\"\nend\n\narg850 = 770\narg851 = 226\nx85 = add(arg850, arg851)\nv85 = 996\nif x85 != v85\n    raise StandardError, \"Error at test case 86\"\nend\n\narg860 = 579\narg861 = 66\nx86 = add(arg860, arg861)\nv86 = 645\nif x86 != v86\n    raise StandardError, \"Error at test case 87\"\nend\n\narg870 = 117\narg871 = 674\nx87 = add(arg870, arg871)\nv87 = 791\nif x87 != v87\n    raise StandardError, \"Error at test case 88\"\nend\n\narg880 = 530\narg881 = 30\nx88 = add(arg880, arg881)\nv88 = 560\nif x88 != v88\n    raise StandardError, \"Error at test case 89\"\nend\n\narg890 = 776\narg891 = 345\nx89 = add(arg890, arg891)\nv89 = 1121\nif x89 != v89\n    raise StandardError, \"Error at test case 90\"\nend\n\narg900 = 327\narg901 = 389\nx90 = add(arg900, arg901)\nv90 = 716\nif x90 != v90\n    raise StandardError, \"Error at test case 91\"\nend\n\narg910 = 596\narg911 = 12\nx91 = add(arg910, arg911)\nv91 = 608\nif x91 != v91\n    raise StandardError, \"Error at test case 92\"\nend\n\narg920 = 599\narg921 = 511\nx92 = add(arg920, arg921)\nv92 = 1110\nif x92 != v92\n    raise StandardError, \"Error at test case 93\"\nend\n\narg930 = 936\narg931 = 476\nx93 = add(arg930, arg931)\nv93 = 1412\nif x93 != v93\n    raise StandardError, \"Error at test case 94\"\nend\n\narg940 = 461\narg941 = 14\nx94 = add(arg940, arg941)\nv94 = 475\nif x94 != v94\n    raise StandardError, \"Error at test case 95\"\nend\n\narg950 = 966\narg951 = 157\nx95 = add(arg950, arg951)\nv95 = 1123\nif x95 != v95\n    raise StandardError, \"Error at test case 96\"\nend\n\narg960 = 326\narg961 = 91\nx96 = add(arg960, arg961)\nv96 = 417\nif x96 != v96\n    raise StandardError, \"Error at test case 97\"\nend\n\narg970 = 392\narg971 = 455\nx97 = add(arg970, arg971)\nv97 = 847\nif x97 != v97\n    raise StandardError, \"Error at test case 98\"\nend\n\narg980 = 446\narg981 = 477\nx98 = add(arg980, arg981)\nv98 = 923\nif x98 != v98\n    raise StandardError, \"Error at test case 99\"\nend\n\narg990 = 324\narg991 = 860\nx99 = add(arg990, arg991)\nv99 = 1184\nif x99 != v99\n    raise StandardError, \"Error at test case 100\"\nend\n\narg1000 = 945\narg1001 = 85\nx100 = add(arg1000, arg1001)\nv100 = 1030\nif x100 != v100\n    raise StandardError, \"Error at test case 101\"\nend\n\narg1010 = 886\narg1011 = 582\nx101 = add(arg1010, arg1011)\nv101 = 1468\nif x101 != v101\n    raise StandardError, \"Error at test case 102\"\nend\n\narg1020 = 886\narg1021 = 712\nx102 = add(arg1020, arg1021)\nv102 = 1598\nif x102 != v102\n    raise StandardError, \"Error at test case 103\"\nend\n\narg1030 = 842\narg1031 = 953\nx103 = add(arg1030, arg1031)\nv103 = 1795\nif x103 != v103\n    raise StandardError, \"Error at test case 104\"\nend\n\n", "description": "x तथा y संख्याद्वयं योजयतु। \n>>> योजयतु (2,3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> योजयतु (5,7) \n12।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/20", "entry_point": "same_chars", "test": "\n\narg00 = \"eabcdzzzz\"\narg01 = \"dddzzzzzzzddeddabc\"\nx0 = same_chars(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcd\"\narg11 = \"dddddddabc\"\nx1 = same_chars(arg10, arg11)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"dddddddabc\"\narg21 = \"abcd\"\nx2 = same_chars(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"eabcd\"\narg31 = \"dddddddabc\"\nx3 = same_chars(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"abcd\"\narg41 = \"dddddddabcf\"\nx4 = same_chars(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"eabcdzzzz\"\narg51 = \"dddzzzzzzzddddabc\"\nx5 = same_chars(arg50, arg51)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"aabb\"\narg61 = \"aaccc\"\nx6 = same_chars(arg60, arg61)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "द्वयोः शब्दयोः अक्षरद्वयम् समानम् अस्ति वा इति पश्यतु। \n>>> समान-अक्षरानि ('eabcdzzzz','dddzzzzzuddeddabc') \nसत्यम्। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nसत्यम्। \n>>> सेमचारस् ('ddddddabc','abcd') \nसत्यम्। \n>>> सेमचारस् ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>>> समान-अक्षरानि ('eabcdzzz','dddzzzzzddddddbc') \nमिथ्याचारः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/21", "entry_point": "fib", "test": "\n\narg00 = 10\nx0 = fib(arg00)\nv0 = 55\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\nx1 = fib(arg10)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 8\nx2 = fib(arg20)\nv2 = 21\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 11\nx3 = fib(arg30)\nv3 = 89\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 12\nx4 = fib(arg40)\nv4 = 144\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "n-th फिबोनाची सङ्ख्या प्रत्यावर्तयतु। \n>>> फैब् (10) \n55। \n>>> फैब् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> फैब् (8) \n21।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/22", "entry_point": "common", "test": "\n\narg00 = [1, 4, 3, 34, 653, 2, 5]\narg01 = [5, 7, 1, 5, 9, 653, 121]\nx0 = common(arg00, arg01)\nv0 = [1, 5, 653]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 3, 2, 8]\narg11 = [3, 2]\nx1 = common(arg10, arg11)\nv1 = [2, 3]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [4, 3, 2, 8]\narg21 = [3, 2, 4]\nx2 = common(arg20, arg21)\nv2 = [2, 3, 4]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 3, 2, 8]\narg31 = []\nx3 = common(arg30, arg31)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "द्वयोः सूच्याः कृते विशिष्टान् सामान्यान् तत्त्वान् पुनः क्रमबद्धं करोतु। \n>> सामान्यः ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्यः ([5,3,2,8], [3,2]) \n[2,3]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/23", "entry_point": "largest_prime_factor", "test": "\n\narg00 = 15\nx0 = largest_prime_factor(arg00)\nv0 = 5\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 27\nx1 = largest_prime_factor(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 63\nx2 = largest_prime_factor(arg20)\nv2 = 7\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 330\nx3 = largest_prime_factor(arg30)\nv3 = 11\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 13195\nx4 = largest_prime_factor(arg40)\nv4 = 29\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "n इत्यस्य बृहत्तमं अभाज्यघटकं प्रत्यावर्तयतु। n> 1 इति अमन्यताम्, सः अभाज्यः नास्ति। \n>>> बृहत्तमः _ प्रधानः _ कारकः (13195) \n29। \n>>> बृहत्तमं _ प्रधानम् _ कारकं (2048) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/24", "entry_point": "sum_to_n", "test": "\n\narg00 = 1\nx0 = sum_to_n(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 6\nx1 = sum_to_n(arg10)\nv1 = 21\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 11\nx2 = sum_to_n(arg20)\nv2 = 66\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 30\nx3 = sum_to_n(arg30)\nv3 = 465\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 100\nx4 = sum_to_n(arg40)\nv4 = 5050\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "sum _ to _ n इति एकं फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यानां योग्यं करोति। \n>>> सम्-टु-एन् (30) \n465। \n>>> सम्-टु-एन् (100) \n5050 \n>>> सम्-टु-एन् (5) \n15। \n>>> सम्-टु-एन् (10) \n55। \n>>> सम्-टु-एन् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/25", "entry_point": "derivative", "test": "\n\narg00 = [3, 1, 2, 4, 5]\nx0 = derivative(arg00)\nv0 = [1, 4, 12, 20]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 3]\nx1 = derivative(arg10)\nv1 = [2, 6]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3, 2, 1]\nx2 = derivative(arg20)\nv2 = [2, 2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 2, 1, 0, 4]\nx3 = derivative(arg30)\nv3 = [2, 2, 0, 16]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\nx4 = derivative(arg40)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "xs तु बहुपदस्य गुणकं निर्दिशति। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nअस्य बहुपदस्य व्युत्पन्नम् समानरूपेण प्रत्यावर्तयतु। \n>>> व्युत्पन्नम् ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्नम् ([1,2,3]) \n[2,6]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/26", "entry_point": "fibfib", "test": "\n\narg00 = 2\nx0 = fibfib(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\nx1 = fibfib(arg10)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = fibfib(arg20)\nv2 = 4\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 8\nx3 = fibfib(arg30)\nv3 = 24\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 10\nx4 = fibfib(arg40)\nv4 = 81\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 12\nx5 = fibfib(arg50)\nv5 = 274\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 14\nx6 = fibfib(arg60)\nv6 = 927\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "फैब्-फैब् सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nफैबफ़िब (0) = = 0 \nफैबफ़िब (1) = = 0 \nफैबफ़िब (2) = = 1 \nfibfib (n) = = fibfib (n-1) + fibfib (n-2) + fibfib (n-3)। \nफैब्फैब् सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। \n>>> फैब्फैब् (1) \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>>> फैब्फैब् (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्फैब् (8) \n24।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/27", "entry_point": "vowels_count", "test": "\n\narg00 = \"abcde\"\nx0 = vowels_count(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Alone\"\nx1 = vowels_count(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"key\"\nx2 = vowels_count(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"bye\"\nx3 = vowels_count(arg30)\nv3 = 1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"keY\"\nx4 = vowels_count(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"bYe\"\nx5 = vowels_count(arg50)\nv5 = 1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"ACEDY\"\nx6 = vowels_count(arg60)\nv6 = 3\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "एकं फंक्षन्-वोवेल्स्-कौण्ट् इति लिखतु यत् तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं \nएकं पदं इन्पुट्-रूपेण तथा स्ट्रिङ्ग्-मध्ये स्वराणां संख्यां प्रत्यर्पयति। \nअस्मिन् सन्दर्भे स्वराः'a','e','i','o','u'च सन्ति। अत्र'y'अपि a अस्ति। \nस्वरः, परन्तु केवलं यदा सः प्रदत्तस्य शब्दस्य अन्ते भवति। \n\nउदाहरणम्-\n>>> स्वरगणनाः (\"ए. बी. सी. डी\".) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> स्वरगणनाः (\"ACEDY\") \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/28", "entry_point": "search", "test": "\n\narg00 = [5, 5, 5, 5, 1]\nx0 = search(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [4, 1, 4, 1, 4, 4]\nx1 = search(arg10)\nv1 = 4\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3, 3]\nx2 = search(arg20)\nv2 = -1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [8, 8, 8, 8, 8, 8, 8, 8]\nx3 = search(arg30)\nv3 = 8\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [2, 3, 3, 2, 2]\nx4 = search(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]\nx5 = search(arg50)\nv5 = 1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [3, 2, 8, 2]\nx6 = search(arg60)\nv6 = 2\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]\nx7 = search(arg70)\nv7 = 1\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [8, 8, 3, 6, 5, 6, 4]\nx8 = search(arg80)\nv8 = -1\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]\nx9 = search(arg90)\nv9 = 1\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [1, 9, 10, 1, 3]\nx10 = search(arg100)\nv10 = 1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]\nx11 = search(arg110)\nv11 = 5\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = [1]\nx12 = search(arg120)\nv12 = 1\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]\nx13 = search(arg130)\nv13 = 4\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]\nx14 = search(arg140)\nv14 = 2\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]\nx15 = search(arg150)\nv15 = 1\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\narg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]\nx16 = search(arg160)\nv16 = 4\nif x16 != v16\n    raise StandardError, \"Error at test case 17\"\nend\n\narg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]\nx17 = search(arg170)\nv17 = 4\nif x17 != v17\n    raise StandardError, \"Error at test case 18\"\nend\n\narg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]\nx18 = search(arg180)\nv18 = 2\nif x18 != v18\n    raise StandardError, \"Error at test case 19\"\nend\n\narg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]\nx19 = search(arg190)\nv19 = -1\nif x19 != v19\n    raise StandardError, \"Error at test case 20\"\nend\n\narg200 = [10]\nx20 = search(arg200)\nv20 = -1\nif x20 != v20\n    raise StandardError, \"Error at test case 21\"\nend\n\narg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]\nx21 = search(arg210)\nv21 = 2\nif x21 != v21\n    raise StandardError, \"Error at test case 22\"\nend\n\narg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]\nx22 = search(arg220)\nv22 = 1\nif x22 != v22\n    raise StandardError, \"Error at test case 23\"\nend\n\narg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]\nx23 = search(arg230)\nv23 = 1\nif x23 != v23\n    raise StandardError, \"Error at test case 24\"\nend\n\narg240 = [3, 10, 10, 9, 2]\nx24 = search(arg240)\nv24 = -1\nif x24 != v24\n    raise StandardError, \"Error at test case 25\"\nend\n\n", "description": "भवते धनात्मक-पूर्णांकानां रिक्त-सूची दत्ता भवति। तस्य अपेक्षया बृहत्तमा पूर्णांकं प्रत्यर्पयतु। \nशून्यं, तथा च तस्य आवृत्तिः पूर्णांकस्य मूल्यात् अधिका वा समानं वा भवति। \nपूर्णांकस्य आवृत्तिः सूच्यां कियत् प्रावश्यं दृश्यते इति निर्दिशति। \nयदि एतादृशं मूल्यं नास्ति तर्हि-1 प्रत्यर्पयतु। \nउदाहरणानि-\nअन्वेषणम् ([4,1,2,2,3,1]) = = 2 \nअन्वेषणम् ([1,2,3,3,4,4]) = = 3 \nअन्वेषणम् ([5,5,4,4]) = =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/29", "entry_point": "triangle_area", "test": "\n\narg00 = 3\narg01 = 4\narg02 = 5\nx0 = triangle_area(arg00, arg01, arg02)\nv0 = 6.0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 2\narg12 = 10\nx1 = triangle_area(arg10, arg11, arg12)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 4\narg21 = 8\narg22 = 5\nx2 = triangle_area(arg20, arg21, arg22)\nv2 = 8.18\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 2\narg31 = 2\narg32 = 2\nx3 = triangle_area(arg30, arg31, arg32)\nv3 = 1.73\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 1\narg41 = 2\narg42 = 3\nx4 = triangle_area(arg40, arg41, arg42)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 10\narg51 = 5\narg52 = 7\nx5 = triangle_area(arg50, arg51, arg52)\nv5 = 16.25\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 2\narg61 = 6\narg62 = 3\nx6 = triangle_area(arg60, arg61, arg62)\nv6 = -1\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 1\narg71 = 1\narg72 = 1\nx7 = triangle_area(arg70, arg71, arg72)\nv7 = 0.43\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 2\narg81 = 2\narg82 = 10\nx8 = triangle_area(arg80, arg81, arg82)\nv8 = -1\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। अस्य क्षेत्रफलं प्रत्यावर्तयतु। \nत्रिकोणमितिः 2 दशमांश-बिन्दुभिः वृत्ताकारः भवति, यदि त्रिभिः पक्षैः वैधत्रिकोणमितिः कल्प्यते। \nअन्यथा पुनरागमनं-1 \nउभयपक्षयोः योगः अधिकः भवति चेत् त्रिभुजपक्षाः त्रिकोणं निर्मीयन्ते। \nतृतीयपक्षस्य अपेक्षया। \nउदाहरणम्-\nत्रिभुज-क्षेत्रफलं (3,4,5) = = 6.00 \nत्रिभुजक्षेत्रम् (1,2,10) = =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/30", "entry_point": "will_it_fly", "test": "\n\narg00 = [3, 2, 3]\narg01 = 9\nx0 = will_it_fly(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2]\narg11 = 5\nx1 = will_it_fly(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3]\narg21 = 5\nx2 = will_it_fly(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 2, 3]\narg31 = 1\nx3 = will_it_fly(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 3]\narg41 = 6\nx4 = will_it_fly(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [5]\narg51 = 5\nx5 = will_it_fly(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "यदि q वस्तु उड्डीयते तर्हि सत्यं प्रत्यावर्तयति, अन्यथा असत्यम् इति फलनम् लिखतु। \nयदि वस्तु q सन्तुलितम् अस्ति (एषा पालिण्ड्रोमिक्-सूची अस्ति) तथा च तस्य तत्त्वानां योगः अधिकतम-संभव-भारस्य डब्ल्यू-तः न्यूनं वा समानं वा भवति तर्हि तत् उड्डीयते। \n\nउदाहरणम्-\nविल् _ इट् _ फ़्लै ([1,2], 5) ′ फाल्स् \n#1 + 2 अधिकतम-संभव-भारात् न्यूनम् अस्ति, परन्तु असंतुलितम् अस्ति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 1) ′ फाल्स् \n#एतत् सन्तुलितम् अस्ति, परन्तु 3 + 2 + 3 अधिकतम-सम्भव-भारात् अधिकं भवति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 9) ट्रु \n#3 + 2 + 3 अधिकतम-संभव-भारात् न्यूनं भवति, सन्तुलितं च भवति। \n\nविल् _ इट् _ फ़्लै ([3], 5) ट्रु \n#3 अधिकतम-संभव-भारात् न्यूनः अस्ति, सन्तुलितः च अस्ति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/31", "entry_point": "is_multiply_prime", "test": "\n\narg00 = 5\nx0 = is_multiply_prime(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 30\nx1 = is_multiply_prime(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 8\nx2 = is_multiply_prime(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 10\nx3 = is_multiply_prime(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 125\nx4 = is_multiply_prime(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 105\nx5 = is_multiply_prime(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 126\nx6 = is_multiply_prime(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 729\nx7 = is_multiply_prime(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 891\nx8 = is_multiply_prime(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1001\nx9 = is_multiply_prime(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "यदि दत्तसङ्ख्या 3 अभाज्यसङ्ख्याणां गुणनम् अस्ति तर्हि सत्यं प्रत्यावर्त्यमानं फलनम् लिखतु। \nअन्यथा असत्यम्। \n(अ) 100 तः न्यूनम् इति ज्ञात्वा। \nउदाहरणम्-\nगुणितं अभाज्यम् (30) = = सत्यम् \n30 = 2 * 3 * 5", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/32", "entry_point": "decimal_to_binary", "test": "\n\narg00 = 0\nx0 = decimal_to_binary(arg00)\nv0 = \"db0db\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 32\nx1 = decimal_to_binary(arg10)\nv1 = \"db100000db\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 103\nx2 = decimal_to_binary(arg20)\nv2 = \"db1100111db\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 15\nx3 = decimal_to_binary(arg30)\nv3 = \"db1111db\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "भवते दशमांश-रूपेण संख्या दीयते तथा च भवतः कार्यम् अस्ति तत् दशमांश-रूपेण परिवर्तयेत्। \nद्वैतीयं स्वरूपम्। फलनम् एकं स्ट्रिङ्ग् प्रत्यावर्तयेत्, यत्र प्रत्येकं अक्षरं द्वैतीयं प्रतिनिधित्वं करोति। \nसंख्या। तन्त्रे प्रत्येकं अक्षरं'0'अथवा'1'भविष्यति। \n\nस्ट्रिङ्ग् इत्यस्य आरम्भे अन्ते च'db'इति अक्षरयोः अतिरिक्तयुगलः भविष्यन्ति। \nविन्यासे साहाय्यं कर्तुं अतिरिक्तानि अक्षरानि सन्ति। \n\nउदाहरणानि-\nदशमांशतः द्वैतीयं प्रति (15) #\"db1111db\" प्रत्यावर्तयति। \nदशमांशतः द्वैतीयं प्रति (32) #\"db100000db\" प्रत्यावर्तयति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/33", "entry_point": "is_happy", "test": "\n\narg00 = \"a\"\nx0 = is_happy(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"aa\"\nx1 = is_happy(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"abcd\"\nx2 = is_happy(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"aabb\"\nx3 = is_happy(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"adb\"\nx4 = is_happy(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"xyy\"\nx5 = is_happy(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"iopaxpoi\"\nx6 = is_happy(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"iopaxioi\"\nx7 = is_happy(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nस्ट्रिङ्ग् प्रसन्नः अस्ति वा न वा इति अन्वेष्टुं भवतः कार्यम् अस्ति। \nएकः सूत्रः प्रसन्नः भवति यदि तस्य दीर्घता न्यूनातिन्यूनं 3 भवति तथा च प्रति 3 क्रमानुगत-अक्षराणि विशिष्टाः भवन्ति। \nयथा-\nअस्ति _ प्रसन्नः (अ) => मिथ्या \nईस् _ हेप्पी (एए) => फाल्स् \nअस्ति _ प्रसन्नः (ए. बी. सी. डी.) => सत्यः \nईस् _ हेप्पी (आब्ब्) => फाल्स् इति। \nअस्ति _ प्रसन्नः (ए. डि. बि.) => सत्यः \nअस्ति _ प्रसन्नः (xyy) => मिथ्या", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/34", "entry_point": "numerical_letter_grade", "test": "\n\narg00 = [4.0, 3, 1.7, 2, 3.5]\nx0 = numerical_letter_grade(arg00)\nv0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1.2]\nx1 = numerical_letter_grade(arg10)\nv1 = [\"D+\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [0.5]\nx2 = numerical_letter_grade(arg20)\nv2 = [\"D-\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [0.0]\nx3 = numerical_letter_grade(arg30)\nv3 = [\"E\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 0.3, 1.5, 2.8, 3.3]\nx4 = numerical_letter_grade(arg40)\nv4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 0.7]\nx5 = numerical_letter_grade(arg50)\nv5 = [\"E\", \"D-\"]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "एषः सत्रस्य अन्तिमः सप्ताहः अस्ति, शिक्षकः श्रेण्याः दातव्यम् अस्ति। \nछात्राणां कृते। शिक्षिका ग्रेडिङ्ग् कृते स्वकीयं एल्गोरिथ्म् निर्मायन्ती अस्ति। \nएकमात्रा समस्या एषा अस्ति यत् सा ग्रेडिङ्ग् कृते प्रयुक्तं कोड् नष्टवती। \nसा भवतः कृते केषाञ्चन छात्राणां कृते जी. पी. ए. इत्येतेषां सूचीं दत्तवती, भवन्तं लेखनीयम् अस्ति। \nएकः प्रकारः यः निम्नलिखितं पट्टिकाम् उपयुज्य अक्षरश्रेण्याः सूचीं निर्गन्तुं शक्नोतिः \nजी. पी. ए। अक्षरश्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n3. 0 बी + \n> 2.7 बी \n> 2.3 बी-\n2. 0 सी + \n> 1.7 सी \n> 1.3 सी-\n1. 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणम्-\nश्रेणी-समीकरणं ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/35", "entry_point": "prime_length", "test": "\n\narg00 = \"Hello\"\nx0 = prime_length(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdcba\"\nx1 = prime_length(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"kittens\"\nx2 = prime_length(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"orange\"\nx3 = prime_length(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"wow\"\nx4 = prime_length(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"world\"\nx5 = prime_length(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"MadaM\"\nx6 = prime_length(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"Wow\"\nx7 = prime_length(arg70)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"\"\nx8 = prime_length(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"HI\"\nx9 = prime_length(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"go\"\nx10 = prime_length(arg100)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"gogo\"\nx11 = prime_length(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"aaaaaaaaaaaaaaa\"\nx12 = prime_length(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = \"Madam\"\nx13 = prime_length(arg130)\nv13 = true\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = \"M\"\nx14 = prime_length(arg140)\nv14 = false\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = \"0\"\nx15 = prime_length(arg150)\nv15 = false\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\n", "description": "एकं फंक्षन् लिखतु यत् स्ट्रिङ्ग् स्वीकृत्य सत्यं प्रत्यर्पयति यदि स्ट्रिङ्ग् अस्ति। \nदीर्घता अभाज्यसङ्ख्या अस्ति अथवा अन्यथा मिथ्या अस्ति। \nउदाहरणानि \nप्राइम-लेन्थ् ('हेलो') = = ट्रू \nअभाज्य-दीर्घता ('ए. बी. सी. डी. सी. बी. ए') = = सत्यम् \nप्रैम् _ लेन्थ् ('किटन्स्') = = ट्रू \nप्राइम-लेन्थ् ('नारङ्गवर्णः') = = मिथ्या", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/36", "entry_point": "solve", "test": "\n\narg00 = 1000\nx0 = solve(arg00)\nv0 = \"1\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 150\nx1 = solve(arg10)\nv1 = \"110\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 147\nx2 = solve(arg20)\nv2 = \"1100\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 333\nx3 = solve(arg30)\nv3 = \"1001\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 963\nx4 = solve(arg40)\nv4 = \"10010\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "धनात्मकं पूर्णांकं N दत्तं चेत्, तस्य अङ्कानां कुलसमं द्वैतीये प्रत्यावर्तयतु। \n\nउदाहरणम्। \nएन = 1000 इत्यस्य कृते अङ्कानां योगः 1 भविष्यति, निर्गमः \"1\" भवेत्। \nएन = 150 इत्यस्य कृते अङ्कानां योगः 6 भविष्यति, निर्गमः \"110\" भवेत्। \nएन = 147 इत्यस्य कृते अङ्कानां योगः 12 भविष्यति, निर्गमः \"1100\" भवेत्। \n\nपरिवर्तनशीलः। \n@N पूर्णांकः \nअवरोधः 0 ≤ एन ≤ 10000। \nनिर्गमः। \nद्वैती-सङ्ख्यायाः पङ्क्तिः।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/37", "entry_point": "get_row", "test": "\n\narg00 = []\narg01 = 1\nx0 = get_row(arg00, arg01)\nv0 = []\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [[1]]\narg11 = 2\nx1 = get_row(arg10, arg11)\nv1 = []\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [[], [1], [1, 2, 3]]\narg21 = 3\nx2 = get_row(arg20, arg21)\nv2 = [[2, 2]]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "भवते द्विमितीय-दत्तांशः दत्तः अस्ति, नेस्टड्-लिस्ट्-रूपेण, \nयत् म्याट्रिक्स्-सदृशम् अस्ति, तथापि, म्याट्रिक्स्-विपरीतम्, \nप्रत्येकं पङ्क्तौ भिन्नसङ्ख्याकाः स्तम्भाः भवेयुः। \nदत्तं lst, तथा च पूर्णांकं x, सूच्यां x इति पूर्णांशाः अन्विष्यतु। \nतथा च टुपल्-सूचीः प्रत्यावर्तयतु, [(x1, y1), (x2, y2)...] यथा \nप्रत्येकं टुपल् एकं कोआर्डिनेट्-(रो, कालम्स्) भवति, यत् 0 तः आरभ्यते। \nप्रारम्भे आरोहणक्रमेण पङ्क्तिद्वारा निर्देशांकान् क्रमबद्धं करोतु। \nअपि च, पङ्क्त्याः निर्देशांकान् स्तम्भैः अवरोहणक्रमेण क्रमबद्धं करोतु। \n\nउदाहरणानि-\nरो (रो) प्रापयन्तु (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nप्राप्नोतु _ रो ([], 1) = = [] \nरो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/38", "entry_point": "next_smallest", "test": "\n\narg00 = [1, 2, 3, 4, 5]\nx0 = next_smallest(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 1, 4, 3, 2]\nx1 = next_smallest(arg10)\nv1 = 2\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = []\nx2 = next_smallest(arg20)\nv2 = nil\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 1]\nx3 = next_smallest(arg30)\nv3 = nil\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 1, 1, 1, 0]\nx4 = next_smallest(arg40)\nv4 = 1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 1]\nx5 = next_smallest(arg50)\nv5 = nil\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-35, 34, 12, -45]\nx6 = next_smallest(arg60)\nv6 = -35\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nनेक्स्ट्-लैटेस्ट् () इति एकं फंक्षन् लिखतु यत् सूच्याः द्वितीयं लघुतमं तत्त्वं प्रत्यर्पयति। \nयदि एतादृशं तत्त्वं नास्ति तर्हि शून्यम् प्रत्यर्पयतु। \n\nअग्रिमे _ लघुतमे ([1,2,3,4,5]) = = 2 \nअग्रिमे _ लघुतमे ([5,1,4,3,2]) = = 2 \nअग्रिमे _ लघुतमे ([]) = = न \nअग्रिमे _ लघुतमे ([1,1]) = = न।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/39", "entry_point": "is_bored", "test": "\n\narg00 = \"Hello world\"\nx0 = is_bored(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Is the sky blue?\"\nx1 = is_bored(arg10)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"I love It !\"\nx2 = is_bored(arg20)\nv2 = 1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"bIt\"\nx3 = is_bored(arg30)\nv3 = 0\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"I feel good today. I will be productive. will kill It\"\nx4 = is_bored(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"You and I are going for a walk\"\nx5 = is_bored(arg50)\nv5 = 0\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "भवते शब्दानां पङ्क्तिः दीयते, संख्यां गणयितुं च भवतः कार्यम् अस्ति। \nविरक्तिः। विरक्तिः एकं वाक्यम् अस्ति यत् \"अहं\" इति शब्देन आरभ्यते। \nवाक्यानि '.', '?'अथवा '!'इत्यनेन परिमिताः भवन्ति। \n\nयथा-\n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/40", "entry_point": "skjkasdkd", "test": "\n\narg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nx0 = skjkasdkd(arg00)\nv0 = 10\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nx1 = skjkasdkd(arg10)\nv1 = 25\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nx2 = skjkasdkd(arg20)\nv2 = 13\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nx3 = skjkasdkd(arg30)\nv3 = 11\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [0, 81, 12, 3, 1, 21]\nx4 = skjkasdkd(arg40)\nv4 = 3\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 8, 1, 2, 1, 7]\nx5 = skjkasdkd(arg50)\nv5 = 7\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [8191]\nx6 = skjkasdkd(arg60)\nv6 = 19\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [8191, 123456, 127, 7]\nx7 = skjkasdkd(arg70)\nv7 = 19\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [127, 97, 8192]\nx8 = skjkasdkd(arg80)\nv8 = 10\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nभवन्तः बृहत्तमं अभाज्यमूल्यं अन्विष्य तस्य अङ्कानां योगम् प्रत्यर्पितुम् अर्हन्ति। \n\nउदाहरणानि-\nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] कृते निर्गमः 10 भवेत्। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] कृते निर्गमः 25 भवेत्। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] कृते निर्गमः 13 भवेत्। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] कृते निर्गमः 11 भवेत्। \nlst = [0,81,12, 3,1,21] कृते निर्गमः 3 भवेत्। \nlst = [0,8,1, 2,1,7] कृते निर्गमः 7 भवेत्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/41", "entry_point": "check_dict_case", "test": "\n\narg00 = {\"p\"=>\"pineapple\", \"b\"=>\"banana\"}\nx0 = check_dict_case(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = {\"p\"=>\"pineapple\", \"A\"=>\"banana\", \"B\"=>\"banana\"}\nx1 = check_dict_case(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = {\"p\"=>\"pineapple\", 5=>\"banana\", \"a\"=>\"apple\"}\nx2 = check_dict_case(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = {\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"}\nx3 = check_dict_case(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = {\"STATE\"=>\"NC\", \"ZIP\"=>\"12345\"}\nx4 = check_dict_case(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = {\"fruit\"=>\"Orange\", \"taste\"=>\"Sweet\"}\nx5 = check_dict_case(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = {}\nx6 = check_dict_case(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "यदि सर्वाः चाबिः अधः स्ट्रिङ्ग्-रूपेण सन्ति तर्हि शब्दकोशस्य दृष्ट्या सत्यं प्रत्यर्पयतु। \nकेस् अथवा सर्वाः चाबिः अपरकेस् इत्यस्मिन् स्ट्रिङ्ग्-रूपेण भवन्ति, अन्यथा फाल्स् इति प्रत्यर्पयन्ति। \nयत् फंक्षन् रिटर्न् कर्तव्यं तत् फाल्स् इति अस्ति यत् दत्तः शब्दकोशः रिक्तः अस्ति। \nउदाहरणानि-\nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"b\": \"बनाना\"}) सत्यं प्रत्यावर्तयेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"A\": \"बनाना\", \"B\": \"बनाना\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", 8: \"बनाना\", \"a\": \"आपल्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"नाम\": \"जान्\", \"आयुः\": \"36\", \"सिटी\": \"ह्यूस्टन्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) सत्यं प्रत्यावर्तयेत्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/42", "entry_point": "closest_integer", "test": "\n\narg00 = \"10\"\nx0 = closest_integer(arg00)\nv0 = 10\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"14.5\"\nx1 = closest_integer(arg10)\nv1 = 15\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"-15.5\"\nx2 = closest_integer(arg20)\nv2 = -16\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"15.3\"\nx3 = closest_integer(arg30)\nv3 = 15\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"0\"\nx4 = closest_integer(arg40)\nv4 = 0\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "संख्यायाः प्रतिनिधित्वं कुर्वतां मूल्यं (स्ट्रिङ्ग्) स्वीकृत्य एकं फंक्षन् निर्मायतु। \nतस्य समीपस्थं पूर्णकं प्रत्यर्पयति। यदि संख्या समदूरे अस्ति। \nपूर्णांकद्वयात्, शून्यात् दूरे तस्य वृत्तं करोतु। \n\nउदाहरणानि \n>>> निकटतम-पूर्णांकः (\"10\") \n10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। \n>>> निकटतम-पूर्णांकः (\"15.3\") \n15। \n\nटिप्पणीः \nशून्यात् दूरे वृत्ताकारस्य अर्थः यदि दत्तसङ्ख्या समदूरम् अस्ति इति। \nपूर्णांकद्वये यः प्रत्यावर्तनीयः, सः एव पूर्णांकः। \nशून्यात् सुदूरतमम्। उदाहरणार्थं निकटतमं पूर्णांकं (\"14.5\") भवेत्। \n15 प्रत्यावर्तयतु तथा च समीपस्थः पूर्णांकः (\"-14.5\")-15 प्रत्यावर्तयेत्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/43", "entry_point": "make_a_pile", "test": "\n\narg00 = 3\nx0 = make_a_pile(arg00)\nv0 = [3, 5, 7]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 4\nx1 = make_a_pile(arg10)\nv1 = [4, 6, 8, 10]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = make_a_pile(arg20)\nv2 = [5, 7, 9, 11, 13]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 6\nx3 = make_a_pile(arg30)\nv3 = [6, 8, 10, 12, 14, 16]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 8\nx4 = make_a_pile(arg40)\nv4 = [8, 10, 12, 14, 16, 18, 20, 22]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "धनात्मक-पूर्णांकस्य n इत्यस्य दृष्ट्या, भवन्तः n-स्तराणां शिलाखण्डं निर्मातुम् अर्हन्ति। \nप्रथमस्तरे एन-शिलाः सन्ति। \nअग्रिमस्तरे शिलानाम् सङ्ख्या अस्ति-\n- अग्रिमः विषमसङ्ख्या यदि n विषम अस्ति। \n- अग्रिमं समसङ्ख्या यदि n समम् अस्ति। \nसूच्यां प्रत्येकस्तरे शिलानां सङ्ख्या प्रत्यावर्तयतु, यत्र सूचकाङ्के तत्त्वम् अस्ति। \ni स्तरस्य शिलानां संख्यां सूचयति (i + 1)। \n\nउदाहरणानि-\n>>> मेक्-अ-पैल् (3) \n[3,5,7]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/44", "entry_point": "words_string", "test": "\n\narg00 = \"Hi, my name is John\"\nx0 = words_string(arg00)\nv0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"One, two, three, four, five, six\"\nx1 = words_string(arg10)\nv1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"Hi, my name\"\nx2 = words_string(arg20)\nv2 = [\"Hi\", \"my\", \"name\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"One,, two, three, four, five, six,\"\nx3 = words_string(arg30)\nv3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"\"\nx4 = words_string(arg40)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"ahmed     , gamal\"\nx5 = words_string(arg50)\nv5 = [\"ahmed\", \"gamal\"]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "भवते अल्पविरामाः रिक्तस्थानानि वा विभक्तानि शब्दशृङ्खला दीयन्ते। भवतः कार्यम् अस्ति-\nसूत्रं शब्दैः विभज्य शब्दानां श्रेणीं प्रत्यावर्तयेत्। \n\nयथा-\nशब्दः _ स्ट्रिङ्ग् (\"हाय्, मम नाम जान् अस्ति\") = = [\"हाय्\", \"मै\", \"नेम्\", \"इस्\", \"जान्\"] \n\"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\",", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/45", "entry_point": "choose_num", "test": "\n\narg00 = 12\narg01 = 15\nx0 = choose_num(arg00, arg01)\nv0 = 14\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 13\narg11 = 12\nx1 = choose_num(arg10, arg11)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 33\narg21 = 12354\nx2 = choose_num(arg20, arg21)\nv2 = 12354\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5234\narg31 = 5233\nx3 = choose_num(arg30, arg31)\nv3 = -1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 6\narg41 = 29\nx4 = choose_num(arg40, arg41)\nv4 = 28\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 27\narg51 = 10\nx5 = choose_num(arg50, arg51)\nv5 = -1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 7\narg61 = 7\nx6 = choose_num(arg60, arg61)\nv6 = -1\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 546\narg71 = 546\nx7 = choose_num(arg70, arg71)\nv7 = 546\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "एतत् फलनम् x तथा y इति धनात्मक-संख्याद्वयं स्वीकृत्य तत् प्रत्यावर्तयति। \nबृहत्तमः सम-पूर्णांकसङ्ख्या, या [x, y] समावेशीपरिधिमध्ये अस्ति। \nतत्र एतादृशी सङ्ख्या नास्ति, ततः फंक्षन्-1 पुनः प्राप्नुयात्। \n\nयथा-\nसंख्यां चिनोतु (12,15) = 14 \nसंख्यां चिनोतु (13,12) =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/46", "entry_point": "rounded_avg", "test": "\n\narg00 = 1\narg01 = 5\nx0 = rounded_avg(arg00, arg01)\nv0 = \"0b11\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 7\narg11 = 13\nx1 = rounded_avg(arg10, arg11)\nv1 = \"0b1010\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 964\narg21 = 977\nx2 = rounded_avg(arg20, arg21)\nv2 = \"0b1111001010\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 996\narg31 = 997\nx3 = rounded_avg(arg30, arg31)\nv3 = \"0b1111100100\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 560\narg41 = 851\nx4 = rounded_avg(arg40, arg41)\nv4 = \"0b1011000010\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 185\narg51 = 546\nx5 = rounded_avg(arg50, arg51)\nv5 = \"0b101101110\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 362\narg61 = 496\nx6 = rounded_avg(arg60, arg61)\nv6 = \"0b110101101\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 350\narg71 = 902\nx7 = rounded_avg(arg70, arg71)\nv7 = \"0b1001110010\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 197\narg81 = 233\nx8 = rounded_avg(arg80, arg81)\nv8 = \"0b11010111\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 7\narg91 = 5\nx9 = rounded_avg(arg90, arg91)\nv9 = -1\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 5\narg101 = 1\nx10 = rounded_avg(arg100, arg101)\nv10 = -1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 5\narg111 = 5\nx11 = rounded_avg(arg110, arg111)\nv11 = \"0b101\"\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\n", "description": "भवते n तथा m इति धनात्मक-पूर्णांकद्वयम् दत्तं भवति, तथा च भवतः कार्यम् गणना इति अस्ति। \nn तः m पर्यन्तं पूर्णांकानां माध्यं (n तथा m सहितं)। \nसमीपस्थस्य पूर्णांकस्य उत्तरस्य वृत्तं कृत्वा तं द्विमानरूपेण परिवर्तयतु। \nयदि n, m तः अधिकः अस्ति, तर्हि-1 प्रत्यावर्तयतु। \nउदाहरणम्-\nगोलः एव्ग् (1,5) => \"0बि11\" \nआवर्तितः (7,5) =>-1 \nगोलः एव्ग् (10,20) => \"0बि1111\" \nगोलः एव्ग् (20,33) => \"0बि11010\"", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/47", "entry_point": "f", "test": "\n\narg00 = 5\nx0 = f(arg00)\nv0 = [1, 2, 6, 24, 15]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 7\nx1 = f(arg10)\nv1 = [1, 2, 6, 24, 15, 720, 28]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 1\nx2 = f(arg20)\nv2 = [1]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 3\nx3 = f(arg30)\nv3 = [1, 2, 6]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "फलनस्य f इत्यस्य कार्यान्वयनं करोतु यत् n इत्येतं परिमापरूपेण स्वीकरोति, \nतथा च n परिमाणस्य सूचीं प्रत्यर्पयति, येन सूचकाङ्कः i इत्यत्र तत्त्वस्य मूल्यं i इत्यस्य भाज्यम् अस्ति, यदि i समः अस्ति। \nअथवा अन्यथा 1 तः i पर्यन्तं संख्यानां योगः। \nअहं 1 तः आरभत। \n1 तः i (1 * 2 *................................................................................................................................................................................................ \nउदाहरणम्-\nf (5) = = [1,2,6,24,15]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/48", "entry_point": "even_odd_palindrome", "test": "\n\narg00 = 123\nx0 = even_odd_palindrome(arg00)\nv0 = [8, 13]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 12\nx1 = even_odd_palindrome(arg10)\nv1 = [4, 6]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\nx2 = even_odd_palindrome(arg20)\nv2 = [1, 2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 63\nx3 = even_odd_palindrome(arg30)\nv3 = [6, 8]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 25\nx4 = even_odd_palindrome(arg40)\nv4 = [5, 6]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 19\nx5 = even_odd_palindrome(arg50)\nv5 = [4, 6]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 9\nx6 = even_odd_palindrome(arg60)\nv6 = [4, 5]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 1\nx7 = even_odd_palindrome(arg70)\nv7 = [0, 1]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, सम-विषम-संख्यायुक्तम् एकं टुपल् प्रत्यर्पयतु। \nपूर्णांक-पालिण्ड्रोम् इत्येतानि (1, n) इति परिधौ अन्तर्भवन्ति, सर्वसमावेशकानि। \n\nउदाहरणम्-1: \n\nनिवेशः 3 \nउत्पादनः (1,2) \nव्याख्याः \nइन्टिजर्-पालिण्ड्रोम् इत्येताः 1,2,3 सन्ति। तेषु एकः समः, द्वौ च विषमौ स्तः। \n\nउदाहरणं 2: \n\nनिवेशः 12 \nउत्पादनः (4,6) \nव्याख्याः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 इति पूर्णांकपेलिण्ड्रोम् अस्ति। तेषु चत्वारः समानि, 6 विषमानि च सन्ति। \n\nटिप्पणीः \n1. 1 <= n <= 10 ^ 3 \n2. प्रत्यावर्तित-टुपल्-मध्ये क्रमशः सम-विषम-पूर्णांक-पालिण्ड्रोम्-सङ्ख्या भवति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/49", "entry_point": "move_one_ball", "test": "\n\narg00 = [3, 4, 5, 1, 2]\nx0 = move_one_ball(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [3, 5, 10, 1, 2]\nx1 = move_one_ball(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [4, 3, 1, 2]\nx2 = move_one_ball(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 5, 4, 1, 2]\nx3 = move_one_ball(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = []\nx4 = move_one_ball(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "अस्माकं समीपे'arr'इति एन-पूर्णांकानां arr [1], arr [2],..., arr [N] इति व्यूहः अस्ति। \nश्रेण्यां संख्याः यादृच्छिकरूपेण क्रमिताः भविष्यन्ति। भवतः कार्यम् निर्धारणीयम् अस्ति यत् किम् इति। \nनिष्पादनेन अर्रे इत्यस्य क्रमनिर्धारणं न न्यूनीकर्तुं शक्यते। \nप्रदत्तश्रेण्यां निम्नलिखितं कार्यम् अस्ति। \nभवान् बहुवारं सम्यक् शिफ्ट्-शल्यक्रिया कर्तुं अनुमतः अस्ति। \n\nएकं रैट्-शिफ्ट्-आपरेशन् इत्यस्य अर्थः आरे इत्यस्य सर्वान् तत्त्वान् एकेन स्थानान्तरं कारयेत् इति। \nसम्यक् दिशायां स्थितिं करोतु। व्यूहस्य अन्तिमं तत्त्वं प्रति स्थानान्तरितं भविष्यति। \nआरे मध्ये आरम्भिक-स्थितिः अर्थात् 0 तम-सूचकाङ्कः। \n\nयदि उपर्युक्तकार्यस्य निष्पादनेन क्रमबद्धं व्यूहं प्राप्तुं शक्यते। \nततः ट्रू इति प्रत्यावर्तयतु अन्यथा फाल्स् इति प्रत्यावर्तयतु। \nयदि प्रदत्तः व्यूहः रिक्तः अस्ति तर्हि सत्यं प्रत्यर्पयतु। \n\nटिप्पणिः दत्तसूच्यां विशिष्टानि तत्त्वानि सन्ति इति सुनिश्चितं भवति। \n\nउदाहरणार्थं-\n\nमूव्-वन्-बाल् ([3,4,5,1,2]) = => ट्रू \nस्पष्टीकरणम्-2 रैट्-शिफ्ट्-आपरेशन्-मध्ये निष्पादनेन, अ-डीक्रीसिङ्ग्-आर्डर् कर्तुं शक्यते। \nप्रदत्तस्य श्रेण्याः कृते प्राप्यते। \nमूव्-वन्-बाल् ([3,5,4,1,2]) = => फाल्स् \nस्पष्टीकरणम्-दत्तस्य कृते अ-ह्रास-आदेशं प्राप्तुं न शक्यते। \nकस्यापि सङ्ख्यायां रैट्-शिफ्ट्-कार्याणि कृत्वा एरे।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/50", "entry_point": "exchange", "test": "\n\narg00 = [1, 2, 3, 4]\narg01 = [1, 2, 3, 4]\nx0 = exchange(arg00, arg01)\nv0 = \"YES\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 3, 4]\narg11 = [1, 5, 3, 4]\nx1 = exchange(arg10, arg11)\nv1 = \"NO\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, 3, 4]\narg21 = [2, 1, 4, 3]\nx2 = exchange(arg20, arg21)\nv2 = \"YES\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [5, 7, 3]\narg31 = [2, 6, 4]\nx3 = exchange(arg30, arg31)\nv3 = \"YES\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [5, 7, 3]\narg41 = [2, 6, 3]\nx4 = exchange(arg40, arg41)\nv4 = \"NO\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [3, 2, 6, 1, 8, 9]\narg51 = [3, 5, 5, 1, 1, 1]\nx5 = exchange(arg50, arg51)\nv5 = \"NO\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [100, 200]\narg61 = [200, 200]\nx6 = exchange(arg60, arg61)\nv6 = \"YES\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "अस्मिन् समस्यायां, भवान् एकं फंक्षन् प्रवर्तयिष्यति यत् संख्यानां सूचीं द्वयं स्वीकरोति, \nतथा च तत्त्वानां विनिमयं कर्तुं शक्यते वा इति निर्धारयति। \nतेषां मध्ये एल्. एस्. टि. 1 इतीदं केवलं समसङ्ख्याणां सूचीं निर्मातुम्। \nएल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये विनिमयितानां तत्त्वानां सङ्ख्यायाः सीमा नास्ति। \nयदि एल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये तत्त्वानां विनिमयं कर्तुं शक्यते। \nएल्. एस्. टि. 1 इत्यस्य सर्वाणि तत्त्वानि समानि भवेयुः चेत् \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयथा-\nविनिमयः ([1,2,3,4], [1,2,3,4]) => \"यस्\" \nविनिमयः ([1,2,3,4], [1,5,3,4]) => \"न\" \nनिवेशसूचीः रिक्तानि न भविष्यन्ति इति कल्प्यते।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/51", "entry_point": "reverse_delete", "test": "\n\narg00 = \"abcde\"\narg01 = \"ae\"\nx0 = reverse_delete(arg00, arg01)\nv0 = [\"bcd\", false]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdef\"\narg11 = \"b\"\nx1 = reverse_delete(arg10, arg11)\nv1 = [\"acdef\", false]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"abcdedcba\"\narg21 = \"ab\"\nx2 = reverse_delete(arg20, arg21)\nv2 = [\"cdedc\", true]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"dwik\"\narg31 = \"w\"\nx3 = reverse_delete(arg30, arg31)\nv3 = [\"dik\", false]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"a\"\narg41 = \"a\"\nx4 = reverse_delete(arg40, arg41)\nv4 = [\"\", true]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"abcdedcba\"\narg51 = \"\"\nx5 = reverse_delete(arg50, arg51)\nv5 = [\"abcdedcba\", true]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"abcdedcba\"\narg61 = \"v\"\nx6 = reverse_delete(arg60, arg61)\nv6 = [\"abcdedcba\", true]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"vabba\"\narg71 = \"v\"\nx7 = reverse_delete(arg70, arg71)\nv7 = [\"abba\", true]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"mamma\"\narg81 = \"mia\"\nx8 = reverse_delete(arg80, arg81)\nv8 = [\"\", true]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "कार्यम्। \nअस्माभिः एस् तथा सी इति स्ट्रिङ्ग् द्वयं दत्तम् अस्ति, भवन्तः एस् इत्यस्मिन् सर्वाणि अक्षरानि निष्कासयेयुः यानि सी इत्यस्मिन् कस्यापि अक्षरस्य समानानि सन्ति। \nततः परीक्षयतु यत् परिणामसूत्रं पालिण्ड्रोम् अस्ति वा इति। \nस्ट्रिङ्ग् इतीदं पालिण्ड्रोम् इति कथ्यते यदि तत् अग्रे पृष्ठतः एव पठ्यते। \nभवान् चेकस्य कृते ट्रु/फाल्स् इति परिणाम-स्ट्रिङ्ग् युक्तं टुपल् प्रत्यर्पयेत्। \nउदाहरणम्। \ns = \"एबिसिडि\", c = \"एइ\" कृते, परिणामः ('बिसिडि', फाल्स्) भवेत्। \ns = \"abcdef\", c = \"b\" इत्यस्य कृते परिणामः भवेत् ('acdef', असत्यम्)। \ns = \"abcdedcba\", c = \"ab\" कृते, परिणामः भवेत् ('cdedc', सत्यं)।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/52", "entry_point": "max_fill", "test": "\n\narg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\narg01 = 1\nx0 = max_fill(arg00, arg01)\nv0 = 6\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\narg11 = 2\nx1 = max_fill(arg10, arg11)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [[0, 0, 0], [0, 0, 0]]\narg21 = 5\nx2 = max_fill(arg20, arg21)\nv2 = 0\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [[1, 1, 1, 1], [1, 1, 1, 1]]\narg31 = 2\nx3 = max_fill(arg30, arg31)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [[1, 1, 1, 1], [1, 1, 1, 1]]\narg41 = 9\nx4 = max_fill(arg40, arg41)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "भवते कूपानां आयताकार-ग्रिड् दीयते। प्रत्येकं पङ्क्तिः एकस्य कूपस्य प्रतिनिधित्वं करोति। \nतथा च पङ्क्तिमध्ये प्रत्येकं 1 जलस्य एककं प्रतिनिधित्वं करोति। \nप्रत्येकस्य कूपस्य अनुरूपं बाल्टी वर्तते यस्य उपयोगेन तस्य जलं निष्कासयितुं शक्यते। \nअपि च सर्वाणि बाल्टिकाः समानक्षमतायुक्तानि भवन्ति। \nकूपान् रिक्तं कर्तुं बाल्टिकाः उपयोक्तुं भवतः कार्यम् अस्ति। \nबाल्टिकाः न्यूनीकर्तुं कियत् प्रावश्यं आवश्यकं भवति तत् निर्दिशतु। \n\nउदाहरणम्-1: \nनिवेशः। \nग्रिड्ः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1] \nबाल्टी-क्षमताः 1 \nउत्पादनः 6 \n\nउदाहरणं 2: \nनिवेशः। \nग्रिड्ः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबाल्टी-क्षमताः 2 \nउत्पादनः 5 \n\nउदाहरणं 3: \nनिवेशः। \nग्रिड्ः [[0,0,0], [0,0,0] \nबाल्टी-क्षमताः 5 \nउत्पादनः 0 \n\nबाधिताः। \n* सर्वाणि कूपाणि समानदीर्घानि भवन्ति। \n* 1 <= grid.length <= 102 \n* 1 <= ग्रिड् [:, 1]. दीर्घता <= 102 \nग्रिड् [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/53", "entry_point": "select_words", "test": "\n\narg00 = \"Mary had a little lamb\"\narg01 = 4\nx0 = select_words(arg00, arg01)\nv0 = [\"little\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Mary had a little lamb\"\narg11 = 3\nx1 = select_words(arg10, arg11)\nv1 = [\"Mary\", \"lamb\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"simple white space\"\narg21 = 2\nx2 = select_words(arg20, arg21)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Hello world\"\narg31 = 4\nx3 = select_words(arg30, arg31)\nv3 = [\"world\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Uncle sam\"\narg41 = 3\nx4 = select_words(arg40, arg41)\nv4 = [\"Uncle\"]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"\"\narg51 = 4\nx5 = select_words(arg50, arg51)\nv5 = []\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"a b c d e f\"\narg61 = 1\nx6 = select_words(arg60, arg61)\nv6 = [\"b\", \"c\", \"d\", \"f\"]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "स्ट्रिङ्ग् एस् तथा प्राकृतिकसङ्ख्या एन् इत्येतयोः दृष्ट्या, भवन्तं कार्यान्वितुम् कार्यभारः दत्तः अस्ति। \nएकं फंक्षन् यत् स्ट्रिङ्ग्-एस् इत्यतः सर्वाः शब्दानां सूचीं प्रत्यर्पयति यत्र यथार्थरूपेण सन्ति। \nn व्यञ्जनाः, क्रमशः एतानि शब्दानि स्ट्रिङ्ग् s मध्ये दृश्यन्ते। \nयदि स्ट्रिङ्ग् s रिक्तः अस्ति तर्हि फंक्षन् रिक्तसूचीम् प्रत्यर्पयेत्। \nटिप्पणिः भवन्तः अनुमन्यन्ते यत् इन्पुट् स्ट्रिङ्ग् मध्ये केवलं अक्षराणि रिक्तस्थानानि च सन्ति इति। \nउदाहरणानि-\nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 4) = => [\"लघुः\"] \nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 3) = => [\"मरियम\", \"मेषः\"] \nपदानि चिनोतु (\"सादा श्वेतस्थानम्\", 2) = => [] \nपदानि चिनोतु (\"नमस्ते वर्ल्ड्\", 4) = => [\"वर्ल्ड्\"] \nपदानि चिनोतु (\"अंकल् स्याम्\", 3) = => [\"अंकल्\"]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/54", "entry_point": "maximum", "test": "\n\narg00 = [-3, -4, 5]\narg01 = 3\nx0 = maximum(arg00, arg01)\nv0 = [-4, -3, 5]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [4, -4, 4]\narg11 = 2\nx1 = maximum(arg10, arg11)\nv1 = [4, 4]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-3, 2, 1, 2, -1, -2, 1]\narg21 = 1\nx2 = maximum(arg20, arg21)\nv2 = [2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [123, -123, 20, 0, 1, 2, -3]\narg31 = 3\nx3 = maximum(arg30, arg31)\nv3 = [2, 20, 123]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-123, 20, 0, 1, 2, -3]\narg41 = 4\nx4 = maximum(arg40, arg41)\nv4 = [0, 1, 2, 20]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [5, 15, 0, 3, -13, -8, 0]\narg51 = 7\nx5 = maximum(arg50, arg51)\nv5 = [-13, -8, 0, 0, 3, 5, 15]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-1, 0, 2, 5, 3, -10]\narg61 = 2\nx6 = maximum(arg60, arg61)\nv6 = [3, 5]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [1, 0, 5, -7]\narg71 = 1\nx7 = maximum(arg70, arg71)\nv7 = [5]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [4, -4]\narg81 = 2\nx8 = maximum(arg80, arg81)\nv8 = [-4, 4]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [-10, 10]\narg91 = 2\nx9 = maximum(arg90, arg91)\nv9 = [-10, 10]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [1, 2, 3, -23, 243, -400, 0]\narg101 = 0\nx10 = maximum(arg100, arg101)\nv10 = []\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "पूर्णांकानां एरे-आर् तथा धनात्मकं पूर्णांकं के च दत्तं चेत्, क्रमबद्धां सूचीं प्रत्यर्पयतु। \nआर्-आर् मध्ये अधिकतम-के-सङ्ख्याभिः सह के-इत्यस्य दीर्घता। \n\nउदाहरणम्-1: \n\nनिवेशः arr = [-3,-4,5], k = 3 \nनिर्गमः [-4,-3,5] \n\nउदाहरणं 2: \n\nनिवेशः arr = [4,-4,4], k = 2 \nनिर्गमः [4,4] \n\nउदाहरणं 3: \n\nनिवेशः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटिप्पणीः \n1. व्यूहस्य दीर्घता [1000] इति परिधौ भविष्यति। \n2. श्रेण्यां तत्त्वानि [-1000] इति परिधौ भविष्यन्ति। \n3. 0 <= k <= लेन (arr)", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/55", "entry_point": "add_elements", "test": "\n\narg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99]\narg01 = 3\nx0 = add_elements(arg00, arg01)\nv0 = -4\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [111, 121, 3, 4000, 5, 6]\narg11 = 2\nx1 = add_elements(arg10, arg11)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9]\narg21 = 4\nx2 = add_elements(arg20, arg21)\nv2 = 125\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\narg31 = 4\nx3 = add_elements(arg30, arg31)\nv3 = 24\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\narg41 = 1\nx4 = add_elements(arg40, arg41)\nv4 = 1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "ए. आर्. आर्. इति पूर्णांकस्य, के. इति पूर्णांकस्य च रिक्ततरश्रेण्या प्रदत्तं चेत्, पुनरागमनं करोतु। \nए. आर्. आर्. इत्यस्य प्रथम-के-तत्त्वात् अधिकतम-अङ्कद्वयेन युक्तानां तत्त्वानां योगः। \n\nउदाहरणम्-\n\nनिवेशः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nनिर्गमः 24 #21 + 3 इत्यस्य योगः \n\nबाधिताः। \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/56", "entry_point": "intersection", "test": "\n\narg00 = [1, 2]\narg01 = [2, 3]\nx0 = intersection(arg00, arg01)\nv0 = \"NO\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [-1, 1]\narg11 = [0, 4]\nx1 = intersection(arg10, arg11)\nv1 = \"NO\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-3, -1]\narg21 = [-5, 5]\nx2 = intersection(arg20, arg21)\nv2 = \"YES\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [-2, 2]\narg31 = [-4, 0]\nx3 = intersection(arg30, arg31)\nv3 = \"YES\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-11, 2]\narg41 = [-1, -1]\nx4 = intersection(arg40, arg41)\nv4 = \"NO\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 2]\narg51 = [3, 5]\nx5 = intersection(arg50, arg51)\nv5 = \"NO\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [1, 2]\narg61 = [1, 2]\nx6 = intersection(arg60, arg61)\nv6 = \"NO\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-2, -2]\narg71 = [-3, -2]\nx7 = intersection(arg70, arg71)\nv7 = \"NO\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "भवते द्वौ अन्तरालौ दीयन्ते। \nयत्र प्रत्येकः अन्तरालः पूर्णांकयुगलः भवति। यथा, अन्तरालः = (आरम्भः, समाप्तिः) = (1,2)। \nप्रदत्तानि अन्तरालानि परिवेष्टितानि भवन्ति यस्य अर्थः अन्तरालः (आरम्भः, समाप्तिः) इति। \nतत्र आरम्भः समाप्तिः च स्तः। \nप्रत्येकस्मिन् निर्दिष्टावधौ, तस्य आरम्भः तस्य अन्तात् न्यूनः अथवा समानः इति कल्प्यते। \nएतयोः द्वयोः प्रतिच्छेदनस्य दीर्घता कियत् इति निर्णेतुं भवतः कार्यम् अस्ति। \nअन्तरालः अभाज्यसङ्ख्या अस्ति। \nउदाहरणार्थं, अन्तरालानां (1,3), (2,4) प्रतिच्छेदनम् (2,3) अस्ति। \nयस्य दीर्घता 1 अस्ति, या अभाज्यसङ्ख्या नास्ति। \nयदि प्रतिच्छेदनस्य दीर्घता अभाज्यसङ्ख्या अस्ति, तर्हि \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयदि द्वयोः अन्तरालयोः प्रतिच्छेदनम् न भवति तर्हि \"न\" इति प्रत्यावर्तयतु। \n\n[इन्पुट्/औट्पुट्] प्रतिमानानिः \nप्रतिच्छेदनम् ((1,2,3)) = => \"न\" \nप्रतिच्छेदनम् ((-1,1), (0,4)) = => \"न\" \nप्रतिच्छेदनम् ((-3,-1), (-5,5)) = => \"यस्\"", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/57", "entry_point": "tri", "test": "\n\narg00 = 3\nx0 = tri(arg00)\nv0 = [1, 3, 2.0, 8.0]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 4\nx1 = tri(arg10)\nv1 = [1, 3, 2.0, 8.0, 3.0]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = tri(arg20)\nv2 = [1, 3, 2.0, 8.0, 3.0, 15.0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 6\nx3 = tri(arg30)\nv3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\nx4 = tri(arg40)\nv4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 8\nx5 = tri(arg50)\nv5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 9\nx6 = tri(arg60)\nv6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 20\nx7 = tri(arg70)\nv7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 0\nx8 = tri(arg80)\nv8 = [1]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1\nx9 = tri(arg90)\nv9 = [1, 3]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "फिबोनाची-क्रमं सर्वे जानन्ति, गणितशास्त्रज्ञैः तस्य गहनः अध्ययनम् अभूत्। \nअन्तिमानि युगयुगानि। तथापि, यत् जनाः न जानन्ति तत् ट्रिबोनाचि-क्रमः अस्ति। \nट्रैबोनाचि-क्रमः पुनरावर्तनेन परिभाषितः अस्ति। \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, यदि n समः अस्ति। \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), यदि n अयुग्मः अस्ति। \nयथा-\nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nभवते अ-ऋणात्मक-पूर्णांकसङ्ख्या n दीयते, भवते सूचीं प्रत्यर्पयेत्। \nट्रिबोनाची-क्रमस्य प्रथमा n + 1 सङ्ख्याः। \nउदाहरणानि-\nत्रि (3) = [1,3,2,8]", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/58", "entry_point": "digits", "test": "\n\narg00 = 5\nx0 = digits(arg00)\nv0 = 5\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 54\nx1 = digits(arg10)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 120\nx2 = digits(arg20)\nv2 = 1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5014\nx3 = digits(arg30)\nv3 = 5\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 98765\nx4 = digits(arg40)\nv4 = 315\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 5576543\nx5 = digits(arg50)\nv5 = 2625\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 2468\nx6 = digits(arg60)\nv6 = 0\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, विषम-अङ्कानां गुणितं प्रत्यावर्तयतु। \nयदि सर्वाणि अङ्कानि समानि सन्ति तर्हि 0 प्रत्यावर्तयतु। \nयथा-\nअङ्कः (1) = 1 \nसंख्या (4) = 0 \nअङ्कानि (235) = = 15", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/59", "entry_point": "is_nested", "test": "\n\narg00 = \"[[]]\"\nx0 = is_nested(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"[]]]]]]][[[[[]\"\nx1 = is_nested(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"[][]\"\nx2 = is_nested(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"[]\"\nx3 = is_nested(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"[[[[]]]]\"\nx4 = is_nested(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"[]]]]]]]]]]\"\nx5 = is_nested(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"[][][[]]\"\nx6 = is_nested(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"[[]\"\nx7 = is_nested(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"[]]\"\nx8 = is_nested(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"[[]][[\"\nx9 = is_nested(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"[[][]]\"\nx10 = is_nested(arg100)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"\"\nx11 = is_nested(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"[[[[[[[[\"\nx12 = is_nested(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = \"]]]]]]]]\"\nx13 = is_nested(arg130)\nv13 = false\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\n", "description": "एकं फंक्षन् रचयतु यत् स्ट्रिङ्ग् इतीदं इन्पुट् रूपेण स्वीकरोतु यस्मिन् केवलं वर्ग-कोष्ठकाः एव भवन्ति। \nयदि केवलम् कोष्ठकानां वैधम् अनुवर्तनं भवति तर्हि एव फंक्षन् ट्रू इति प्रत्यावर्तयेत्। \nयत्र अनुवर्तने न्यूनातिन्यूनं एकः कोष्ठकः निहितः भवति। \n\nइस नेस्टेड ('[[]]') सही है। \nis _ nested ('[]]]]] [[[[]') असत्यम् \nis _ nested ('[] []') असत्यम् अस्ति। \nis _ nested ('[]') असत्यम् अस्ति। \nनेस्टेड ('[[] []]') सत्यम् अस्ति। \nनेस्टेड ('[[]] [[') सत्यम् अस्ति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/60", "entry_point": "sum_squares", "test": "\n\narg00 = [1, 2, 3]\nx0 = sum_squares(arg00)\nv0 = 14\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1.0, 2, 3]\nx1 = sum_squares(arg10)\nv1 = 14\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 5, 7]\nx2 = sum_squares(arg20)\nv2 = 84\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1.4, 4.2, 0]\nx3 = sum_squares(arg30)\nv3 = 29\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-2.4, 1, 1]\nx4 = sum_squares(arg40)\nv4 = 6\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [100, 1, 15, 2]\nx5 = sum_squares(arg50)\nv5 = 10230\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [10000, 10000]\nx6 = sum_squares(arg60)\nv6 = 200000000\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-1.4, 4.6, 6.3]\nx7 = sum_squares(arg70)\nv7 = 75\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-1.4, 17.9, 18.9, 19.9]\nx8 = sum_squares(arg80)\nv8 = 1086\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [0]\nx9 = sum_squares(arg90)\nv9 = 0\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [-1]\nx10 = sum_squares(arg100)\nv10 = 1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = [-1, 1, 0]\nx11 = sum_squares(arg110)\nv11 = 2\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\n", "description": "भवते अङ्कानां सूची दत्ता भवति। \nभवान् दत्तसूच्यां वर्गसंख्यानां योगम् प्रत्यर्पयेत्। \nसूच्याः प्रत्येकं तत्त्वं प्रथमं उपरितनं इन्ट् (सीलिङ्ग्) प्रति परिभ्रमयतु। \nउदाहरणानि-\nlst = [1,2,3] इत्यस्य कृते निर्गमः 14 भवेत्। \nlst = [1,4,9] कृते निर्गमः 98 भवेत्। \nlst = [1,3,5, 7] कृते उत्पादनं 84 भवेत्। \nlst = [1.4,4.2, 0] कृते निर्गमः 29 भवेत्। \nlst = [-2.4,1, 1] कृते निर्गमः 6 भवेत्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/61", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\narg00 = \"apple\"\nx0 = check_if_last_char_is_a_letter(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"apple pi e\"\nx1 = check_if_last_char_is_a_letter(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"eeeee\"\nx2 = check_if_last_char_is_a_letter(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"A\"\nx3 = check_if_last_char_is_a_letter(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Pumpkin pie \"\nx4 = check_if_last_char_is_a_letter(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"Pumpkin pie 1\"\nx5 = check_if_last_char_is_a_letter(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"\"\nx6 = check_if_last_char_is_a_letter(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"eeeee e \"\nx7 = check_if_last_char_is_a_letter(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"apple pie\"\nx8 = check_if_last_char_is_a_letter(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"apple pi e \"\nx9 = check_if_last_char_is_a_letter(arg90)\nv9 = false\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "एकं फंक्षन् क्रीयेट् करोतु यत् ट्रु इति प्रत्यावर्तयति यदि अन्तिमः अक्षरः अस्ति। \nदत्तस्य स्ट्रिङ्ग् इत्यस्य वर्णमाला अस्ति, न च अस्ति। \nएकस्य शब्दस्य अंशः, अन्यथा असत्यम्। \nटिप्पणीः \"शब्दः\" इति अक्षराणां समूहः अस्ति यः स्थानैः विभक्तः अस्ति। \n\nउदाहरणानि-\nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\")-सत्यम् इति परीक्षयतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"\") इति पश्यतु।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/62", "entry_point": "can_arrange", "test": "\n\narg00 = [1, 2, 4, 3, 5]\nx0 = can_arrange(arg00)\nv0 = 3\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 4, 5]\nx1 = can_arrange(arg10)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10]\nx2 = can_arrange(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 8, 5, 7, 3]\nx3 = can_arrange(arg30)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = []\nx4 = can_arrange(arg40)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "एकं फंक्षन् रचयतु यत् तत्वस्य बृहत्तमं सूचकाङ्कं प्रत्यर्पयति यत् \nतत्क्षणात् पूर्ववर्तिनः तत्त्वात् बृहत्तरं वा समानं वा नास्ति। यदि \nएतादृशं तत्त्वं नास्ति, ततः रिटर्न्-1 भवति। दत्तश्रेण्यां तत् न भविष्यति। \nद्विगुणितानि मूल्यानि। \n\nउदाहरणानि-\nकेन _ अरेंज् ([1,2,4, 3,5]) = 3 \nकेन-अरेंज् ([1,2,3]) =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/63", "entry_point": "largest_smallest_integers", "test": "\n\narg00 = [2, 4, 1, 3, 5, 7]\nx0 = largest_smallest_integers(arg00)\nv0 = [nil, 1]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [2, 4, 1, 3, 5, 7, 0]\nx1 = largest_smallest_integers(arg10)\nv1 = [nil, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 2, 4, 5, 6, -2]\nx2 = largest_smallest_integers(arg20)\nv2 = [-2, 1]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 5, 3, 6, 2, 7, -7]\nx3 = largest_smallest_integers(arg30)\nv3 = [-7, 2]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [7, 3, 8, 4, 9, 2, 5, -9]\nx4 = largest_smallest_integers(arg40)\nv4 = [-9, 2]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = []\nx5 = largest_smallest_integers(arg50)\nv5 = [nil, nil]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [0]\nx6 = largest_smallest_integers(arg60)\nv6 = [nil, nil]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-1, -3, -5, -6]\nx7 = largest_smallest_integers(arg70)\nv7 = [-1, nil]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-1, -3, -5, -6, 0]\nx8 = largest_smallest_integers(arg80)\nv8 = [-1, nil]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [-6, -4, -4, -3, 1]\nx9 = largest_smallest_integers(arg90)\nv9 = [-3, 1]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [-6, -4, -4, -3, -100, 1]\nx10 = largest_smallest_integers(arg100)\nv10 = [-3, 1]\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "एकं फंक्षन् निर्माय यत् टुपल् (a, b) प्रत्यावर्तयति, यत्र'a'अस्ति। \nऋणात्मक-पूर्णांशेषु बृहत्तमः, तथा च'b'लघुतमः अस्ति। \nसूच्यां धनात्मक-पूर्णांशाः सन्ति। \nयदि ऋणात्मकं वा धनात्मकं वा पूर्णांकं नास्ति तर्हि तान् नन् इति प्रत्यर्पयतु। \n\nउदाहरणानि-\nबृहत्तम-लघुतमः-पूर्णांकः ([2,4,1,3,5,7]) = = (न, 1) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([]) = = (न, न) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([0]) = = (न, न)", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/64", "entry_point": "special_factorial", "test": "\n\narg00 = 4\nx0 = special_factorial(arg00)\nv0 = 288\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 5\nx1 = special_factorial(arg10)\nv1 = 34560\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 7\nx2 = special_factorial(arg20)\nv2 = 125411328000\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 1\nx3 = special_factorial(arg30)\nv3 = 1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "ब्राजीलीन्-फ़ैक्टोरियल् इतीदं एवं परिभाषितः अस्ति। \nब्राज़ीलियन्-फ़ैक्टोरियल् (n) = n! * (n-1)! * (n-2)! *... * 1! \nयत्र n> 0 \n\nयथा-\n>>> स्पेशिअल-फ़ैक्टोरियल् (4) \n288। \n\nफलनम् इन्पुट्-रूपेण पूर्णांकं प्राप्स्यति, विशेषम् प्रत्यर्पयेत् च। \nअस्य पूर्णांकस्य भाज्यम्।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/65", "entry_point": "words_in_sentence", "test": "\n\narg00 = \"This is a test\"\nx0 = words_in_sentence(arg00)\nv0 = \"is\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"lets go for swimming\"\nx1 = words_in_sentence(arg10)\nv1 = \"go for\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"there is no place available here\"\nx2 = words_in_sentence(arg20)\nv2 = \"there is no place\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Hi I am Hussein\"\nx3 = words_in_sentence(arg30)\nv3 = \"Hi am Hussein\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"go for it\"\nx4 = words_in_sentence(arg40)\nv4 = \"go for it\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"here\"\nx5 = words_in_sentence(arg50)\nv5 = \"\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"here is\"\nx6 = words_in_sentence(arg60)\nv6 = \"is\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "भवते वाक्यस्य प्रतिनिधित्वं कुर्वती स्ट्रिङ्ग् दीयते। \nअस्मिन् वाक्ये केषाञ्चन शब्दानि स्थानात् पृथक्कृतानि सन्ति, \nतथा च भवन्तः मूलवाक्यस्य शब्दयुक्तं स्ट्रिङ्ग् प्रत्यर्पयेयुः, \nयस्य दीर्घता अभाज्यसङ्ख्या अस्ति, \nनूतने तन्त्रे शब्दानां क्रमः मूलस्य समानः भवेत्। \n\nउदाहरणम्-1: \nनिवेशः वाक्य = \"एषा परीक्षा अस्ति\" \nनिर्गमः \"अस्ति\" इति। \n\nउदाहरणं 2: \nनिवेशः वाक्यम् = \"लॆट्स् गो फ़ार् स्विम्मिङ्ग्\" \nनिर्गमः \"गो फ़ार्\" इति। \n\nबाधिताः। \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्ये केवलं अक्षराणि एव सन्ति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/66", "entry_point": "simplify", "test": "\n\narg00 = \"1/5\"\narg01 = \"5/1\"\nx0 = simplify(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1/6\"\narg11 = \"2/1\"\nx1 = simplify(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"5/1\"\narg21 = \"3/1\"\nx2 = simplify(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"7/10\"\narg31 = \"10/2\"\nx3 = simplify(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"2/10\"\narg41 = \"50/10\"\nx4 = simplify(arg40, arg41)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"7/2\"\narg51 = \"4/2\"\nx5 = simplify(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"11/6\"\narg61 = \"6/1\"\nx6 = simplify(arg60, arg61)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"2/3\"\narg71 = \"5/2\"\nx7 = simplify(arg70, arg71)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"5/2\"\narg81 = \"3/5\"\nx8 = simplify(arg80, arg81)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"2/4\"\narg91 = \"8/4\"\nx9 = simplify(arg90, arg91)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"2/4\"\narg101 = \"4/2\"\nx10 = simplify(arg100, arg101)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"1/5\"\narg111 = \"5/1\"\nx11 = simplify(arg110, arg111)\nv11 = true\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"1/5\"\narg121 = \"1/5\"\nx12 = simplify(arg120, arg121)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\n", "description": "भवतः कार्यम् एकं फंक्षन् इत्यस्य कार्यान्वयनम् अस्ति येन अभिव्यक्तिः सरलीभवति। \nx * n. यदि x * n पूर्णसङ्ख्यायाः कृते मूल्याङ्कनं करोति तथा च असत्यम् इति फलनम् सत्यम् इति प्रत्यावर्तयति। \nअन्यथा। x तथा n द्वयोः अपि, भिन्नांशस्य स्ट्रिङ्ग्-प्रतिनिधित्वम् अस्ति, तथा च निम्नलिखितं स्वरूपम् अस्ति, \n<न्यूमरेटर्> <डिनोमिनेटर्> यत्र न्यूमरेटर् तथा डिनोमिनेटर् उभौ अपि धनात्मकं पूर्णसङ्ख्याः भवन्ति। \n\nभवन्तः अनुमातुं शक्नुवन्ति यत् x, n च वैधानि भिन्नांशानि सन्ति, तेषां विभाजकरूपेण शून्यं नास्ति। \n\nसरलीकरणम् (\"1/5\", \"5/1\") = सत्यं \nसरलीकरणम् (\"1/6\", \"2/1\") = असत्यम् \nसरलीकरणम् (\"7/10\", \"10/2\") = असत्यम्", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/67", "entry_point": "order_by_points", "test": "\n\narg00 = [1, 11, -1, -11, -12]\nx0 = order_by_points(arg00)\nv0 = [-1, -11, 1, -12, 11]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]\nx1 = order_by_points(arg10)\nv1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = []\nx2 = order_by_points(arg20)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, -11, -32, 43, 54, -98, 2, -3]\nx3 = order_by_points(arg30)\nv3 = [-3, -32, -98, -11, 1, 2, 43, 54]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nx4 = order_by_points(arg40)\nv4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 6, 6, -76, -21, 23, 4]\nx5 = order_by_points(arg50)\nv5 = [-76, -21, 0, 4, 23, 6, 6]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "एकं फंक्षन् लिखतु यत् दत्तानां पूर्णांकानां सूचीं क्रमबद्धं करोति। \nतेषां अङ्कानां योगानुगुणं आरोहणक्रमेण। \nटिप्पणिः यदि समान-अङ्कयुक्ताः अनेकाः वस्तूनि सन्ति, \nमूलसूच्यां तेषां सूचकाङ्कस्य आधारेण तान् आर्डर् कुर्वन्तु। \n\nयथा-\n>>> आर्डर्-बै-पोयिन्ट्स् ([1,11,-1,11,-12]) = = [-1,11,-1,1,-12,11] \n>>> आर्डर्-बै-पोयिन्ट्स् ([]) = = []", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/68", "entry_point": "specialfilter", "test": "\n\narg00 = [5, -2, 1, -5]\nx0 = specialfilter(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [15, -73, 14, -15]\nx1 = specialfilter(arg10)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [33, -2, -3, 45, 21, 109]\nx2 = specialfilter(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [43, -12, 93, 125, 121, 109]\nx3 = specialfilter(arg30)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [71, -2, -33, 75, 21, 19]\nx4 = specialfilter(arg40)\nv4 = 3\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1]\nx5 = specialfilter(arg50)\nv5 = 0\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = []\nx6 = specialfilter(arg60)\nv6 = 0\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "एकं फंक्षन् लिखतु यत् इन्पुट्-रिटर्न्स्-रूपेण संख्यानां श्रेणिं स्वीकरोति। \nश्रेण्यां तत्त्वानां सङ्ख्या या 10 तः अधिका अस्ति तथा च उभयोः। \nएकस्य अङ्कस्य प्रथमस्य अन्तिमस्य च अङ्कयोः विषमता भवति (1,3,5,7,9)। \nयथा-\nस्पेशिफ़िल्टर् ([15,-73,14,-15]) => 1 \nस्पेशिफ़िल्टर् ([33,-2,-3,45,21,109]) => 2", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/69", "entry_point": "get_max_triples", "test": "\n\narg00 = 5\nx0 = get_max_triples(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 6\nx1 = get_max_triples(arg10)\nv1 = 4\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\nx2 = get_max_triples(arg20)\nv2 = 36\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 100\nx3 = get_max_triples(arg30)\nv3 = 53361\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "भवते n इति धनात्मकं पूर्णांकं दीयते। भवते n इति दीर्घतायाः a इति पूर्णांकश्रेण्याः निर्माणं करणीयम्। \nप्रत्येकस्य i (1 ≤ i ≤ n) कृते, a [i] = i * i-i + 1 इत्यस्य मूल्यं भवति। \nत्रिकानां सङ्ख्याः प्रत्यावर्तयतु (a [i], a [j], a [k]) यत्र i <j <k, \nतथा च a [i] + a [j] + a [k] इति 3 इत्यस्य गुणितं भवति। \n\nउदाहरणम्-\nनिवेशः n = 5 \nउत्पादनः 1 \nव्याख्याः \nअ = [1,3,7,13,21] \nएकमात्रं वैधं त्रिगुणं (1,7,13) अस्ति।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/70", "entry_point": "bf", "test": "\n\narg00 = \"Jupiter\"\narg01 = \"Neptune\"\nx0 = bf(arg00, arg01)\nv0 = [\"Saturn\", \"Uranus\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Earth\"\narg11 = \"Mercury\"\nx1 = bf(arg10, arg11)\nv1 = [\"Venus\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"Mercury\"\narg21 = \"Uranus\"\nx2 = bf(arg20, arg21)\nv2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Neptune\"\narg31 = \"Venus\"\nx3 = bf(arg30, arg31)\nv3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Earth\"\narg41 = \"Earth\"\nx4 = bf(arg40, arg41)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"Mars\"\narg51 = \"Earth\"\nx5 = bf(arg50, arg51)\nv5 = []\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"Jupiter\"\narg61 = \"Makemake\"\nx6 = bf(arg60, arg61)\nv6 = []\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "अस्माकं सौरमण्डले अष्टग्रहाः सन्ति-सूर्यस्य समीपस्थाः। \nबुधः अस्ति, अग्रिमः शुक्रः अस्ति, ततः पृथिव्या, मङ्गलः, गुरुः, शनिः, \nयुरेनस्, नेप्च्यून्। \nप्लैनेट्-1 तथा प्लैनेट्-2 इति द्वयोः ग्रहयोः नामौ स्वीकृत्य एकं फंक्षन् लिखतु। \nअयं प्रकार्यक्रमः सर्वान् ग्रहान् समाविशत् एकं टुपल् प्रत्यावर्तयेत् यस्य परिक्रमणं भवति-\nग्रह-1 इत्यस्य कक्षायाः ग्रह-2 इत्यस्य कक्षायाः च मध्ये स्थितः, द्वारा क्रमबद्धः \nसूर्यस्य सामीप्यम्। \nयदि प्लैनेट्1 अथवा प्लैनेट्2 अस्ति तर्हि फंक्षन् रिक्तं टुपल् प्रत्यावर्तयेत्। \nग्रहाणां नामानि सम्यक् न सन्ति। \nउदाहरणानि \nbf (\"जुपिटर्\", \"नेप्च्यून्\") = => (\"स्याटर्न्\", \"युरेनस्\") \nbf (\"पृथिव्या\", \"बुधः\") = => (\"शुक्रः\") \nbf (\"बुधः\", \"युरेनस्\") = => (\"शुक्रः\", \"पृथिव्या\", \"मङ्गलः\", \"गुरुः\", \"शनिः\")", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/71", "entry_point": "x_or_y", "test": "\n\narg00 = 7\narg01 = 34\narg02 = 12\nx0 = x_or_y(arg00, arg01, arg02)\nv0 = 34\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 15\narg11 = 8\narg12 = 5\nx1 = x_or_y(arg10, arg11, arg12)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\narg21 = 33\narg22 = 5212\nx2 = x_or_y(arg20, arg21, arg22)\nv2 = 33\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 1259\narg31 = 3\narg32 = 52\nx3 = x_or_y(arg30, arg31, arg32)\nv3 = 3\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7919\narg41 = -1\narg42 = 12\nx4 = x_or_y(arg40, arg41, arg42)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 3609\narg51 = 1245\narg52 = 583\nx5 = x_or_y(arg50, arg51, arg52)\nv5 = 583\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 91\narg61 = 56\narg62 = 129\nx6 = x_or_y(arg60, arg61, arg62)\nv6 = 129\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 6\narg71 = 34\narg72 = 1234\nx7 = x_or_y(arg70, arg71, arg72)\nv7 = 1234\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 1\narg81 = 2\narg82 = 0\nx8 = x_or_y(arg80, arg81, arg82)\nv8 = 0\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 2\narg91 = 2\narg92 = 0\nx9 = x_or_y(arg90, arg91, arg92)\nv9 = 2\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "एकं सरलं प्रोग्राम् यत् x इत्यस्य मूल्यं प्रत्यर्पयेत् यदि n अस्ति। \nअभाज्यसङ्ख्या तथा च अन्यथा y इत्यस्य मूल्यं प्रत्यर्पयेत्। \n\nउदाहरणानि-\nx _ अथवा _ y कृते (7,34,12) = = 34 \nx _ अथवा _ y कृते (15,8,5) = = 5", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/72", "entry_point": "double_the_difference", "test": "\n\narg00 = []\nx0 = double_the_difference(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 4]\nx1 = double_the_difference(arg10)\nv1 = 25\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [0.1, 0.2, 0.3]\nx2 = double_the_difference(arg20)\nv2 = 0\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [-10, -20, -30]\nx3 = double_the_difference(arg30)\nv3 = 0\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-1, -2, 8]\nx4 = double_the_difference(arg40)\nv4 = 0\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0.2, 3, 5]\nx5 = double_the_difference(arg50)\nv5 = 34\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nx6 = double_the_difference(arg60)\nv6 = 166650\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "संख्यानां सूच्यां दत्तं चेत्, संख्यानां वर्गाणां योगम् प्रत्यर्पयतु। \nअसङ्गत्याः सूच्यां पश्यन्तु। ये संख्याः ऋणात्मकं वा पूर्णांशाः न वा सन्ति तान् अवगच्छन्तु। \n\nद्विगुणः भेदः ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nद्विगुणः भेदः ([-1,2,0]) = = 0 \nद्विगुणः भेदः ([9,-2]) = = 81 \nद्विगुणित-द-भेदः ([0]) = = 0 \n\nयदि इन्पुट्-सूची रिक्तः अस्ति तर्हि 0 प्रत्यावर्तयतु।", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/73", "entry_point": "strongest_extension", "test": "\n\narg00 = \"Watashi\"\narg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"]\nx0 = strongest_extension(arg00, arg01)\nv0 = \"Watashi.eIGHt8OKe\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Boku123\"\narg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]\nx1 = strongest_extension(arg10, arg11)\nv1 = \"Boku123.YEs.WeCaNe\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"__YESIMHERE\"\narg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]\nx2 = strongest_extension(arg20, arg21)\nv2 = \"__YESIMHERE.NuLl__\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"K\"\narg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]\nx3 = strongest_extension(arg30, arg31)\nv3 = \"K.TAR\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"__HAHA\"\narg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"]\nx4 = strongest_extension(arg40, arg41)\nv4 = \"__HAHA.123\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"YameRore\"\narg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]\nx5 = strongest_extension(arg50, arg51)\nv5 = \"YameRore.okIWILL123\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"finNNalLLly\"\narg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"]\nx6 = strongest_extension(arg60, arg61)\nv6 = \"finNNalLLly.WoW\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"_\"\narg71 = [\"Bb\", \"91245\"]\nx7 = strongest_extension(arg70, arg71)\nv7 = \"_.Bb\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"Sp\"\narg81 = [\"671235\", \"Bb\"]\nx8 = strongest_extension(arg80, arg81)\nv8 = \"Sp.671235\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "भवते वर्गस्य नाम (स्ट्रिङ्ग्) विस्ताराणां सूची च दीयते। \nवर्गस्य कृते अतिरिक्तवर्गान् भारयितुं विस्ताराणाम् उपयोगः करणीयः। \nविस्तारस्य शक्तिः ईदृशः अस्ति-CAP इतीदं अपरकेस् सङ्ख्या स्यात् इति मन्यन्ते। \nविस्तारस्य नाम्नः अक्षराणि, तथा च एस्. एम्. इतीदं लघु-अक्षरानां सङ्ख्या भवेत्। \nविस्तारस्य नाम्ना बलं CAP-एसएम इति भिन्नांशेन दीयते। \nभवन्तः प्रबलतमं विस्तारणं अन्विष्य अस्मिन् स्ट्रिङ्ग् प्रत्यर्पयतु। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि समानशक्तियुक्तौ द्वौ वा अधिकौ विस्तारौ स्तः तर्हि भवन्तः \nसूच्यां प्रथमं यत् आगच्छति तत् चिनोतु। \nयथा, यदि भवते \"स्लैस्\" इति वर्गरूपेण, सूचीरूपेण च दत्तं भवति। \nविस्तारः ['SERVINGSliCes','Cheese','StuFfed'] तदा भवन्तः कर्तुम् अर्हन्ति। \n'Slices.SErviNGSliCes'इति प्रत्यावर्तयतु यतः'SERVINGSliCes'प्रबलतमः विस्तारः अस्ति। \n(तस्य शक्तिः-1 अस्ति)। \nउदाहरणम्-\nस्ट्राङ्गेस्ट्-एक्स्टेन्शन् कृते ('मै _ क्लास्', ['AA','Be','CC']) = ='my_class.AA'", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/74", "entry_point": "cycpattern_check", "test": "\n\narg00 = \"xyzw\"\narg01 = \"xyw\"\nx0 = cycpattern_check(arg00, arg01)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"yello\"\narg11 = \"ell\"\nx1 = cycpattern_check(arg10, arg11)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"whattup\"\narg21 = \"ptut\"\nx2 = cycpattern_check(arg20, arg21)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"efef\"\narg31 = \"fee\"\nx3 = cycpattern_check(arg30, arg31)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"abab\"\narg41 = \"aabb\"\nx4 = cycpattern_check(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"winemtt\"\narg51 = \"tinem\"\nx5 = cycpattern_check(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "भवते 2 शब्दानि दीयन्ते। यदि द्वितीयः शब्दः अथवा तस्य कस्यापि परिभ्रमणम् प्रथमशब्दस्य सब्स्ट्रिङ्ग् अस्ति तर्हि भवते ट्रू इति प्रत्यावर्तितव्यम्। \nसैक्पेटर्न् _ चेक् (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हलो\", \"एल्\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"वास्सुप्\", \"प्सुस्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"अबाब\", \"बा\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"ईफ़ेफ़्\", \"ईफ़ेफ़्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हिमेन्स्\", \"सिमेन्\") => सत्यं", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/75", "entry_point": "int_to_mini_roman", "test": "\n\narg00 = 19\nx0 = int_to_mini_roman(arg00)\nv0 = \"xix\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 152\nx1 = int_to_mini_roman(arg10)\nv1 = \"clii\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 251\nx2 = int_to_mini_roman(arg20)\nv2 = \"ccli\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 426\nx3 = int_to_mini_roman(arg30)\nv3 = \"cdxxvi\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 500\nx4 = int_to_mini_roman(arg40)\nv4 = \"d\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 1\nx5 = int_to_mini_roman(arg50)\nv5 = \"i\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 4\nx6 = int_to_mini_roman(arg60)\nv6 = \"iv\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 43\nx7 = int_to_mini_roman(arg70)\nv7 = \"xliii\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 90\nx8 = int_to_mini_roman(arg80)\nv8 = \"xc\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 94\nx9 = int_to_mini_roman(arg90)\nv9 = \"xciv\"\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 532\nx10 = int_to_mini_roman(arg100)\nv10 = \"dxxxii\"\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 900\nx11 = int_to_mini_roman(arg110)\nv11 = \"cm\"\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 994\nx12 = int_to_mini_roman(arg120)\nv12 = \"cmxciv\"\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = 1000\nx13 = int_to_mini_roman(arg130)\nv13 = \"m\"\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\n", "description": "धनात्मक-पूर्णांकं दत्तं चेत्, तस्य रोमन्-अङ्कस्य समतुल्यं स्ट्रिङ्ग्-रूपेण प्राप्नुयात्। \nतथा लघुकरणे प्रत्यर्पयतु। \nप्रतिबन्धः 1 <= संख्या <= 1000 \n\nउदाहरणानि-\n>> इन्ट्-टु-मिनि-रोमन् (19) = ='xix'\n>> इन्ट्-टु-मिनि-रोमन् (152) = ='क्लि'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/76", "entry_point": "right_angle_triangle", "test": "\n\narg00 = 3\narg01 = 4\narg02 = 5\nx0 = right_angle_triangle(arg00, arg01, arg02)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 2\narg12 = 3\nx1 = right_angle_triangle(arg10, arg11, arg12)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\narg21 = 6\narg22 = 8\nx2 = right_angle_triangle(arg20, arg21, arg22)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 2\narg31 = 2\narg32 = 2\nx3 = right_angle_triangle(arg30, arg31, arg32)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\narg41 = 24\narg42 = 25\nx4 = right_angle_triangle(arg40, arg41, arg42)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 10\narg51 = 5\narg52 = 7\nx5 = right_angle_triangle(arg50, arg51, arg52)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 5\narg61 = 12\narg62 = 13\nx6 = right_angle_triangle(arg60, arg61, arg62)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 15\narg71 = 8\narg72 = 17\nx7 = right_angle_triangle(arg70, arg71, arg72)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 48\narg81 = 55\narg82 = 73\nx8 = right_angle_triangle(arg80, arg81, arg82)\nv8 = true\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1\narg91 = 1\narg92 = 1\nx9 = right_angle_triangle(arg90, arg91, arg92)\nv9 = false\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 2\narg101 = 2\narg102 = 10\nx10 = right_angle_triangle(arg100, arg101, arg102)\nv10 = false\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। सत्यम् प्रत्यावर्तयतु यदि त्रिः। \nपार्श्वभागाः दक्षिणकोणीयं त्रिकोणं निर्मीयन्ते, अन्यथा असत्यं भवति। \nसमकोणी त्रिभुजः एकः त्रिभुजः अस्ति यस्मिन् एकः कोणः समकोणः अथवा समकोणः भवति। \n90 डिग्री। \nउदाहरणम्-\nसमकोण-त्रिभुजम् (3,4,5) = = सत्यम् \nसमकोण-त्रिभुजम् (1,2,3) = = असत्यम्", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/77", "entry_point": "solve", "test": "\n\narg00 = \"AsDf\"\nx0 = solve(arg00)\nv0 = \"aSdF\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1234\"\nx1 = solve(arg10)\nv1 = \"4321\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"ab\"\nx2 = solve(arg20)\nv2 = \"AB\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"#a@C\"\nx3 = solve(arg30)\nv3 = \"#A@c\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"#AsdfW^45\"\nx4 = solve(arg40)\nv4 = \"#aSDFw^45\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"#6@2\"\nx5 = solve(arg50)\nv5 = \"2@6#\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"#\\$a^D\"\nx6 = solve(arg60)\nv6 = \"#\\$A^d\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"#ccc\"\nx7 = solve(arg70)\nv7 = \"#CCC\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nयदि s [i] एकः अक्षरः अस्ति, तर्हि तस्य प्रकरणं निम्नतः ऊर्ध्वं प्रति अथवा तद्विरुद्धं प्रतिवर्तयतु। \nअन्यथा तत् यथावत् स्थापयतु। \nयदि तन्त्रे अक्षराणि न सन्ति तर्हि तन्त्रे व्युत्क्रमं करोतु। \nफलनम् परिणामितं स्ट्रिङ्ग् प्रत्यावर्तयेत्। \nउदाहरणानि \nसमाधानम् (\"1234\") = \"4321\" \nसमाधानः (\"अब\") = \"एबी\" \nसमाधानम् (\"#a @C\") = \"#A @c\"", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/78", "entry_point": "string_to_md5", "test": "\n\narg00 = \"Hello world\"\nx0 = string_to_md5(arg00)\nv0 = \"3e25960a79dbc69b674cd4ec67a72c62\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"\"\nx1 = string_to_md5(arg10)\nv1 = nil\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"A B C\"\nx2 = string_to_md5(arg20)\nv2 = \"0ef78513b0cb8cef12743f5aeb35f888\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"password\"\nx3 = string_to_md5(arg30)\nv3 = \"5f4dcc3b5aa765d61d8327deb882cf99\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "'टेक्सट्'इति स्ट्रिङ्ग् दत्तं चेत्, तस्य md5 ह्याश्-समतुल्यं स्ट्रिङ्ग् प्रत्यर्पयतु। \nयदि'टेक्सट्'रिक्तं स्ट्रिङ्ग् अस्ति तर्हि शून्यं प्रत्यर्पयतु। \n\n>> स्ट्रिङ्ग् _ तः _ md5 ('नमस्ते वर्ल्ड्') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "ruby/79", "entry_point": "generate_integers", "test": "\n\narg00 = 2\narg01 = 10\nx0 = generate_integers(arg00, arg01)\nv0 = [2, 4, 6, 8]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 10\narg11 = 2\nx1 = generate_integers(arg10, arg11)\nv1 = [2, 4, 6, 8]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 132\narg21 = 2\nx2 = generate_integers(arg20, arg21)\nv2 = [2, 4, 6, 8]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 17\narg31 = 89\nx3 = generate_integers(arg30, arg31)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "a तथा b इति धनात्मक-पूर्णांकद्वयं दत्तं चेत्, a मध्ये सम-अङ्कान् प्रत्यर्पयतु। \nतथा च b, आरोहणक्रमेण। \n\nयथा-\nजनरेट्-इन्टिजर् (2,8) => [2,4,6,8] \nजनरेट्-इन्टिजर् (8,2) => [2,4,6,8] \nजनरेट्-इन्टिजर् (10,14) => []", "language": "ruby", "canonical_solution": null, "natural_language": "Sanskrit"}
