{"task_id": "ruby/0", "entry_point": "below_zero", "test": "\n\narg00 = []\nx0 = below_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, -3, 1, 2, -3]\nx1 = below_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, -4, 5, 6]\nx2 = below_zero(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, -1, 2, -2, 5, -5, 4, -4]\nx3 = below_zero(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, -1, 2, -2, 5, -5, 4, -5]\nx4 = below_zero(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, -2, 2, -2, 5, -5, 4, -4]\nx5 = below_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "ஒரு வங்கிக் கணக்கில் வைப்பு மற்றும் திரும்பப் பெறும் செயல்பாடுகளின் பட்டியல் உங்களுக்கு வழங்கப்படுகிறது. \nபூஜ்ஜிய இருப்பு. உங்கள் பணி எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்கு கீழே விழுகிறதா என்பதைக் கண்டறிவது, மற்றும் \nஅந்த நேரத்தில் செயல்பாடு சரி என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறு என்று திரும்ப வேண்டும். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,3]) \nபொய். \n>>> பூஜ்ஜியத்திற்கு கீழே ([1,2,-4,5]) \nஉண்மை.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/1", "entry_point": "sum_product", "test": "\n\narg00 = []\nx0 = sum_product(arg00)\nv0 = [0, 1]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 1, 1]\nx1 = sum_product(arg10)\nv1 = [3, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [100, 0]\nx2 = sum_product(arg20)\nv2 = [100, 0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 5, 7]\nx3 = sum_product(arg30)\nv3 = [15, 105]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [10]\nx4 = sum_product(arg40)\nv4 = [10, 10]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் பெருக்கல் ஆகியவற்றைக் கொண்ட ஒரு டப்பிளைத் திருப்பித் தரவும். \nகாலியான தொகை 0 க்கு சமமாகவும், காலியான பெருக்கல் 1 க்கு சமமாகவும் இருக்க வேண்டும். \n>>> கூட்டுத்தொகை ([]) \n(0,1) \n>> தொகை _ தயாரிப்பு ([1,2,3,4]) \n(10,24)", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/2", "entry_point": "string_xor", "test": "\n\narg00 = \"111000\"\narg01 = \"101010\"\nx0 = string_xor(arg00, arg01)\nv0 = \"010010\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1\"\narg11 = \"1\"\nx1 = string_xor(arg10, arg11)\nv1 = \"0\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"0101\"\narg21 = \"0000\"\nx2 = string_xor(arg20, arg21)\nv2 = \"0101\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "உள்ளீடு என்பது 1s மற்றும் 0s ஐ மட்டுமே கொண்ட இரண்டு சரங்கள் a மற்றும் b ஆகும். \nஇந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள், மேலும் ரிட்டர்ன் ரிசல்ட்டையும் ஒரு சரமாக வழங்கவும். \n>> சரம் _ xor ('010','110') \n'100'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/3", "entry_point": "longest", "test": "\n\narg00 = []\nx0 = longest(arg00)\nv0 = nil\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [\"x\", \"y\", \"z\"]\nx1 = longest(arg10)\nv1 = \"x\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]\nx2 = longest(arg20)\nv2 = \"zzzz\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "சரங்களின் பட்டியலிலிருந்து, நீளமான சரத்தை திருப்பி அனுப்புங்கள். பல சரங்கள் இருந்தால் முதல் சரத்தை திருப்பி அனுப்புங்கள். \nஅதே நீளமுள்ள சரங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் பூஜ்யத்தைத் திருப்பவும். \n>>> நீளமானது ([]) \n\n>>> நீளமானது (['a','b','c']) \n\"அ\"... \n>>> நீளமானது (['a','bb','ccc']) \n\"சிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசிசி", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/4", "entry_point": "greatest_common_divisor", "test": "\n\narg00 = 3\narg01 = 7\nx0 = greatest_common_divisor(arg00, arg01)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 10\narg11 = 15\nx1 = greatest_common_divisor(arg10, arg11)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 49\narg21 = 14\nx2 = greatest_common_divisor(arg20, arg21)\nv2 = 7\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 144\narg31 = 60\nx3 = greatest_common_divisor(arg30, arg31)\nv3 = 12\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "a மற்றும் b ஆகிய இரண்டு முழு எண்களின் மிகப் பெரிய பொதுவான வகுத்தியைத் திருப்பித் தரவும். \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (3,5) \n1. \n>>> கிரேட்டஸ்ட் _ காமன் _ டிவைசர் (25,15) \n5.......................................................................................................................................................................................................", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/5", "entry_point": "sort_numbers", "test": "\n\narg00 = \"\"\nx0 = sort_numbers(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"three\"\nx1 = sort_numbers(arg10)\nv1 = \"three\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"three five nine\"\nx2 = sort_numbers(arg20)\nv2 = \"three five nine\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"five zero four seven nine eight\"\nx3 = sort_numbers(arg30)\nv3 = \"zero four five seven eight nine\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"six five four three two one zero\"\nx4 = sort_numbers(arg40)\nv4 = \"zero one two three four five six\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "உள்ளீடு என்பது'பூஜ்ஜியம்'முதல்'ஒன்பது'வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம் ஆகும். \nசெல்லுபடியாகும் தேர்வுகள்'பூஜ்ஜியம்','ஒன்று','இரண்டு','மூன்று','நான்கு','ஐந்து','ஆறு','ஏழு','எட்டு'மற்றும்'ஒன்பது'ஆகும். \nசிறியது முதல் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தைத் திருப்பவும் \n>>> வரிசைப்படுத்தப்பட்ட எண்கள் ('மூன்று ஒன்று ஐந்து') \n'ஒன் த்ரீ ஃபைவ்'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/6", "entry_point": "rescale_to_unit", "test": "\n\narg00 = [2.0, 49.9]\nx0 = rescale_to_unit(arg00)\nv0 = [0.0, 1.0]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [100.0, 49.9]\nx1 = rescale_to_unit(arg10)\nv1 = [1.0, 0.0]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1.0, 2.0, 3.0, 4.0, 5.0]\nx2 = rescale_to_unit(arg20)\nv2 = [0.0, 0.25, 0.5, 0.75, 1.0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [2.0, 1.0, 5.0, 3.0, 4.0]\nx3 = rescale_to_unit(arg30)\nv3 = [0.25, 0.0, 1.0, 0.5, 0.75]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [12.0, 11.0, 15.0, 13.0, 14.0]\nx4 = rescale_to_unit(arg40)\nv4 = [0.25, 0.0, 1.0, 0.5, 0.75]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு உறுப்புகளின்), அந்த பட்டியலுக்கு ஒரு நேரியல் மாற்றத்தைப் பயன்படுத்துங்கள், \nஅதாவது மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும். \n>> மீட்டமை _ முதல் _ அலகு வரை ([1, 2, 3, 4, 5]) \n[0,0,25,0,0.75,1.0]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/7", "entry_point": "flip_case", "test": "\n\narg00 = \"\"\nx0 = flip_case(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Hello!\"\nx1 = flip_case(arg10)\nv1 = \"hELLO!\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"These violent delights have violent ends\"\nx2 = flip_case(arg20)\nv2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும். \n>>> ஃபிளிப் கேஸ் ('ஹலோ') \n'ஹலோ'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/8", "entry_point": "get_positive", "test": "\n\narg00 = [-1, -2, 4, 5, 6]\nx0 = get_positive(arg00)\nv0 = [4, 5, 6]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]\nx1 = get_positive(arg10)\nv1 = [5, 3, 2, 3, 3, 9, 123, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-1, -2]\nx2 = get_positive(arg20)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = []\nx3 = get_positive(arg30)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திருப்பி அனுப்புங்கள். \n>>> பெட் பாசிட்டிவ் ([-1,2,-4,5,6]) \n[2,5,6] \n>>> நேர்மறையைப் பெறுங்கள் ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/9", "entry_point": "is_prime", "test": "\n\narg00 = 6\nx0 = is_prime(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 101\nx1 = is_prime(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 11\nx2 = is_prime(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 13441\nx3 = is_prime(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 61\nx4 = is_prime(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 4\nx5 = is_prime(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 1\nx6 = is_prime(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 5\nx7 = is_prime(arg70)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 11\nx8 = is_prime(arg80)\nv8 = true\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 17\nx9 = is_prime(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 85\nx10 = is_prime(arg100)\nv10 = false\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 77\nx11 = is_prime(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 255379\nx12 = is_prime(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\n", "description": "கொடுக்கப்பட்ட எண் பகா எண்ணாக இருந்தால் சரி என்றும், இல்லையெனில் தவறு என்றும் காட்டவும். \n>>> என்பது _ பிரைம் (6) \nபொய். \n>>> என்பது _ பிரைம் (101) \nஉண்மை. \n>>> என்பது _ பிரைம் (11) \nஉண்மை. \n>>> is _ Prime (13441) \nஉண்மை. \n>>> என்பது _ பிரைம் (61) \nஉண்மை. \n>>> என்பது _ பிரைம் (4) \nபொய். \n>>> என்பது _ பிரைம் (1) \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/10", "entry_point": "unique", "test": "\n\narg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nx0 = unique(arg00)\nv0 = [0, 2, 3, 5, 9, 123]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\n", "description": "ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளை திருப்பி அனுப்பவும் \n>>> தனித்துவமானது ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/11", "entry_point": "prime_fib", "test": "\n\narg00 = 1\nx0 = prime_fib(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 2\nx1 = prime_fib(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\nx2 = prime_fib(arg20)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 4\nx3 = prime_fib(arg30)\nv3 = 13\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 5\nx4 = prime_fib(arg40)\nv4 = 89\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 6\nx5 = prime_fib(arg50)\nv5 = 233\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 7\nx6 = prime_fib(arg60)\nv6 = 1597\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 8\nx7 = prime_fib(arg70)\nv7 = 28657\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 9\nx8 = prime_fib(arg80)\nv8 = 514229\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 10\nx9 = prime_fib(arg90)\nv9 = 433494437\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "பிரைம் _ ஃபைப் n-வது எண்ணை வழங்குகிறது, இது ஒரு ஃபிபோனாச்சி எண் மற்றும் அது பகா எண்ணாகும். \n>>> பிரைம் ஃபைப் (1) \n2. \n>>> பிரைம் ஃபைப் (2) \n3. \n>>> பிரைம் ஃபைப் (3) \n5....................................................................................................................................................................................................... \n>>> பிரைம் ஃபைப் (4) \n13. \n>>> பிரைம் ஃபைப் (5) \n89", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/12", "entry_point": "triples_sum_to_zero", "test": "\n\narg00 = [1, 3, 5, 0]\nx0 = triples_sum_to_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 3, 5, -1]\nx1 = triples_sum_to_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, -2, 1]\nx2 = triples_sum_to_zero(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 2, 3, 7]\nx3 = triples_sum_to_zero(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 5, 7]\nx4 = triples_sum_to_zero(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [2, 4, -5, 3, 9, 7]\nx5 = triples_sum_to_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [1]\nx6 = triples_sum_to_zero(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [1, 3, 5, -100]\nx7 = triples_sum_to_zero(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [100, 3, 5, -100]\nx8 = triples_sum_to_zero(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n\n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> மூன்று மடங்கு _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,9,7]) \nஉண்மை. \n>>> முக்கோணங்கள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/13", "entry_point": "pairs_sum_to_zero", "test": "\n\narg00 = [1, 3, 5, 0]\nx0 = pairs_sum_to_zero(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 3, -2, 1]\nx1 = pairs_sum_to_zero(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, 3, 7]\nx2 = pairs_sum_to_zero(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [2, 4, -5, 3, 5, 7]\nx3 = pairs_sum_to_zero(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\nx4 = pairs_sum_to_zero(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [-3, 9, -1, 3, 2, 30]\nx5 = pairs_sum_to_zero(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-3, 9, -1, 3, 2, 31]\nx6 = pairs_sum_to_zero(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-3, 9, -1, 4, 2, 30]\nx7 = pairs_sum_to_zero(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-3, 9, -1, 4, 2, 31]\nx8 = pairs_sum_to_zero(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கின்றன. \nபட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால் அது ட்ரு என்று காட்டுகிறது. \nபூஜ்ஜியத்திற்கு கூட்டல், இல்லையெனில் தவறானது. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,5,0]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,3,-2,1]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1,2,3,7]) \nபொய். \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([2,4,-5,3,5,7]) \nஉண்மை. \n>>> ஜோடிகள் _ தொகை _ முதல் _ பூஜ்ஜியம் வரை ([1]) \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/14", "entry_point": "fib4", "test": "\n\narg00 = 5\nx0 = fib4(arg00)\nv0 = 4\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 8\nx1 = fib4(arg10)\nv1 = 28\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\nx2 = fib4(arg20)\nv2 = 104\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 12\nx3 = fib4(arg30)\nv3 = 386\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "ஃபைப் 4 எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப் 4 (0)-> 0 \nஃபைப் 4 (1)-> 0 \nஃபைப் 4 (2)-> 2 \nஃபைப் 4 (3)-> 0 \nஃபைப் 4 (என்)-> ஃபைப் 4 (என்-1) + ஃபைப் 4 (என்-2) + ஃபைப் 4 (என்-3) + ஃபைப் 4 (என்-4). \nஃபைப் 4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுநிகழ்வைப் பயன்படுத்த வேண்டாம். \n>>> ஃபைப்4 (5) \n4. \n>>> ஃபைப்4 (6) \n8. \n>>> ஃபைப்4 (7) \n14.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/15", "entry_point": "median", "test": "\n\narg00 = [3, 1, 2, 4, 5]\nx0 = median(arg00)\nv0 = 3\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [-10, 4, 6, 1000, 10, 20]\nx1 = median(arg10)\nv1 = 8.0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [5]\nx2 = median(arg20)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [6, 5]\nx3 = median(arg30)\nv3 = 5.5\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [8, 1, 3, 9, 9, 2, 7]\nx4 = median(arg40)\nv4 = 7\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "பட்டியலில் உள்ள உறுப்புகளின் சராசரி l ஐத் திருப்பித் தரவும். \n>>> சராசரி ([3,1,2,4,5]) \n3. \n>>> சராசரி ([-10,4,6,1000,10,20]) \n15. 0", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/16", "entry_point": "is_palindrome", "test": "\n\narg00 = \"\"\nx0 = is_palindrome(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"aba\"\nx1 = is_palindrome(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"aaaaa\"\nx2 = is_palindrome(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"zbcd\"\nx3 = is_palindrome(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"xywyx\"\nx4 = is_palindrome(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"xywyz\"\nx5 = is_palindrome(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"xywzx\"\nx6 = is_palindrome(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சரிபார்க்கிறது \n>>> என்பது _ பாலிண்ட்ரோம் (\") \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('அபா') \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \nஉண்மை. \n>>> என்பது _ பாலிண்ட்ரோம் ('zbcd') \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/17", "entry_point": "remove_vowels", "test": "\n\narg00 = \"\"\nx0 = remove_vowels(arg00)\nv0 = \"\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdef\\nghijklm\"\nx1 = remove_vowels(arg10)\nv1 = \"bcdf\\nghjklm\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"fedcba\"\nx2 = remove_vowels(arg20)\nv2 = \"fdcb\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"eeeee\"\nx3 = remove_vowels(arg30)\nv3 = \"\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"acBAA\"\nx4 = remove_vowels(arg40)\nv4 = \"cB\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"EcBOO\"\nx5 = remove_vowels(arg50)\nv5 = \"cB\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"ybcd\"\nx6 = remove_vowels(arg60)\nv6 = \"ybcd\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "நீக்குதல் உயிரெழுத்துக்கள் என்பது சரத்தை எடுத்து உயிரெழுத்துக்கள் இல்லாமல் சரத்தை திருப்பித் தரும் ஒரு செயல்பாடாகும். \n>>> உயிரெழுத்துக்களை அகற்று (\") \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று (\"abcdef\\ nghijklm\") \n'bcdf\\ nghjklm'\n>>> உயிரெழுத்துக்களை அகற்று ('abcdef') \n'பிசிடிஎஃப்'\n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏஏ \n\"என்றார். \n>>> உயிரெழுத்துக்களை அகற்று ('ஏஏபிஏஏ') \n'பி'\n>>> உயிரெழுத்துக்களை அகற்று ('zbcd') \n'zbcd'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/18", "entry_point": "below_threshold", "test": "\n\narg00 = [1, 2, 4, 10]\narg01 = 100\nx0 = below_threshold(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 20, 4, 10]\narg11 = 5\nx1 = below_threshold(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 20, 4, 10]\narg21 = 21\nx2 = below_threshold(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 20, 4, 10]\narg31 = 22\nx3 = below_threshold(arg30, arg31)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 8, 4, 10]\narg41 = 11\nx4 = below_threshold(arg40, arg41)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 8, 4, 10]\narg51 = 10\nx5 = below_threshold(arg50, arg51)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "பட்டியலில் உள்ள அனைத்து எண்களும் t வரம்பிற்குக் கீழே இருந்தால் சரி என்று திரும்பவும். \n>>> கீழ் வரம்பு ([1,2,4,10], 100) \nஉண்மை. \n>>> கீழ் வரம்பு ([1,20,4,10], 5) \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/19", "entry_point": "add", "test": "\n\narg00 = 0\narg01 = 1\nx0 = add(arg00, arg01)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 0\nx1 = add(arg10, arg11)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 2\narg21 = 3\nx2 = add(arg20, arg21)\nv2 = 5\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5\narg31 = 7\nx3 = add(arg30, arg31)\nv3 = 12\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\narg41 = 5\nx4 = add(arg40, arg41)\nv4 = 12\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 572\narg51 = 725\nx5 = add(arg50, arg51)\nv5 = 1297\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 51\narg61 = 804\nx6 = add(arg60, arg61)\nv6 = 855\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 645\narg71 = 96\nx7 = add(arg70, arg71)\nv7 = 741\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 712\narg81 = 853\nx8 = add(arg80, arg81)\nv8 = 1565\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 223\narg91 = 101\nx9 = add(arg90, arg91)\nv9 = 324\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 76\narg101 = 29\nx10 = add(arg100, arg101)\nv10 = 105\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 416\narg111 = 149\nx11 = add(arg110, arg111)\nv11 = 565\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 145\narg121 = 409\nx12 = add(arg120, arg121)\nv12 = 554\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = 535\narg131 = 430\nx13 = add(arg130, arg131)\nv13 = 965\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = 118\narg141 = 303\nx14 = add(arg140, arg141)\nv14 = 421\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = 287\narg151 = 94\nx15 = add(arg150, arg151)\nv15 = 381\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\narg160 = 768\narg161 = 257\nx16 = add(arg160, arg161)\nv16 = 1025\nif x16 != v16\n    raise StandardError, \"Error at test case 17\"\nend\n\narg170 = 421\narg171 = 677\nx17 = add(arg170, arg171)\nv17 = 1098\nif x17 != v17\n    raise StandardError, \"Error at test case 18\"\nend\n\narg180 = 802\narg181 = 814\nx18 = add(arg180, arg181)\nv18 = 1616\nif x18 != v18\n    raise StandardError, \"Error at test case 19\"\nend\n\narg190 = 510\narg191 = 922\nx19 = add(arg190, arg191)\nv19 = 1432\nif x19 != v19\n    raise StandardError, \"Error at test case 20\"\nend\n\narg200 = 345\narg201 = 819\nx20 = add(arg200, arg201)\nv20 = 1164\nif x20 != v20\n    raise StandardError, \"Error at test case 21\"\nend\n\narg210 = 895\narg211 = 436\nx21 = add(arg210, arg211)\nv21 = 1331\nif x21 != v21\n    raise StandardError, \"Error at test case 22\"\nend\n\narg220 = 123\narg221 = 424\nx22 = add(arg220, arg221)\nv22 = 547\nif x22 != v22\n    raise StandardError, \"Error at test case 23\"\nend\n\narg230 = 923\narg231 = 245\nx23 = add(arg230, arg231)\nv23 = 1168\nif x23 != v23\n    raise StandardError, \"Error at test case 24\"\nend\n\narg240 = 23\narg241 = 438\nx24 = add(arg240, arg241)\nv24 = 461\nif x24 != v24\n    raise StandardError, \"Error at test case 25\"\nend\n\narg250 = 565\narg251 = 133\nx25 = add(arg250, arg251)\nv25 = 698\nif x25 != v25\n    raise StandardError, \"Error at test case 26\"\nend\n\narg260 = 945\narg261 = 925\nx26 = add(arg260, arg261)\nv26 = 1870\nif x26 != v26\n    raise StandardError, \"Error at test case 27\"\nend\n\narg270 = 261\narg271 = 983\nx27 = add(arg270, arg271)\nv27 = 1244\nif x27 != v27\n    raise StandardError, \"Error at test case 28\"\nend\n\narg280 = 139\narg281 = 577\nx28 = add(arg280, arg281)\nv28 = 716\nif x28 != v28\n    raise StandardError, \"Error at test case 29\"\nend\n\narg290 = 763\narg291 = 178\nx29 = add(arg290, arg291)\nv29 = 941\nif x29 != v29\n    raise StandardError, \"Error at test case 30\"\nend\n\narg300 = 147\narg301 = 892\nx30 = add(arg300, arg301)\nv30 = 1039\nif x30 != v30\n    raise StandardError, \"Error at test case 31\"\nend\n\narg310 = 436\narg311 = 402\nx31 = add(arg310, arg311)\nv31 = 838\nif x31 != v31\n    raise StandardError, \"Error at test case 32\"\nend\n\narg320 = 610\narg321 = 581\nx32 = add(arg320, arg321)\nv32 = 1191\nif x32 != v32\n    raise StandardError, \"Error at test case 33\"\nend\n\narg330 = 103\narg331 = 416\nx33 = add(arg330, arg331)\nv33 = 519\nif x33 != v33\n    raise StandardError, \"Error at test case 34\"\nend\n\narg340 = 339\narg341 = 990\nx34 = add(arg340, arg341)\nv34 = 1329\nif x34 != v34\n    raise StandardError, \"Error at test case 35\"\nend\n\narg350 = 130\narg351 = 504\nx35 = add(arg350, arg351)\nv35 = 634\nif x35 != v35\n    raise StandardError, \"Error at test case 36\"\nend\n\narg360 = 242\narg361 = 717\nx36 = add(arg360, arg361)\nv36 = 959\nif x36 != v36\n    raise StandardError, \"Error at test case 37\"\nend\n\narg370 = 562\narg371 = 110\nx37 = add(arg370, arg371)\nv37 = 672\nif x37 != v37\n    raise StandardError, \"Error at test case 38\"\nend\n\narg380 = 396\narg381 = 909\nx38 = add(arg380, arg381)\nv38 = 1305\nif x38 != v38\n    raise StandardError, \"Error at test case 39\"\nend\n\narg390 = 887\narg391 = 703\nx39 = add(arg390, arg391)\nv39 = 1590\nif x39 != v39\n    raise StandardError, \"Error at test case 40\"\nend\n\narg400 = 870\narg401 = 551\nx40 = add(arg400, arg401)\nv40 = 1421\nif x40 != v40\n    raise StandardError, \"Error at test case 41\"\nend\n\narg410 = 422\narg411 = 391\nx41 = add(arg410, arg411)\nv41 = 813\nif x41 != v41\n    raise StandardError, \"Error at test case 42\"\nend\n\narg420 = 299\narg421 = 505\nx42 = add(arg420, arg421)\nv42 = 804\nif x42 != v42\n    raise StandardError, \"Error at test case 43\"\nend\n\narg430 = 346\narg431 = 56\nx43 = add(arg430, arg431)\nv43 = 402\nif x43 != v43\n    raise StandardError, \"Error at test case 44\"\nend\n\narg440 = 36\narg441 = 706\nx44 = add(arg440, arg441)\nv44 = 742\nif x44 != v44\n    raise StandardError, \"Error at test case 45\"\nend\n\narg450 = 738\narg451 = 411\nx45 = add(arg450, arg451)\nv45 = 1149\nif x45 != v45\n    raise StandardError, \"Error at test case 46\"\nend\n\narg460 = 679\narg461 = 87\nx46 = add(arg460, arg461)\nv46 = 766\nif x46 != v46\n    raise StandardError, \"Error at test case 47\"\nend\n\narg470 = 25\narg471 = 303\nx47 = add(arg470, arg471)\nv47 = 328\nif x47 != v47\n    raise StandardError, \"Error at test case 48\"\nend\n\narg480 = 161\narg481 = 612\nx48 = add(arg480, arg481)\nv48 = 773\nif x48 != v48\n    raise StandardError, \"Error at test case 49\"\nend\n\narg490 = 306\narg491 = 841\nx49 = add(arg490, arg491)\nv49 = 1147\nif x49 != v49\n    raise StandardError, \"Error at test case 50\"\nend\n\narg500 = 973\narg501 = 411\nx50 = add(arg500, arg501)\nv50 = 1384\nif x50 != v50\n    raise StandardError, \"Error at test case 51\"\nend\n\narg510 = 711\narg511 = 157\nx51 = add(arg510, arg511)\nv51 = 868\nif x51 != v51\n    raise StandardError, \"Error at test case 52\"\nend\n\narg520 = 471\narg521 = 27\nx52 = add(arg520, arg521)\nv52 = 498\nif x52 != v52\n    raise StandardError, \"Error at test case 53\"\nend\n\narg530 = 714\narg531 = 792\nx53 = add(arg530, arg531)\nv53 = 1506\nif x53 != v53\n    raise StandardError, \"Error at test case 54\"\nend\n\narg540 = 38\narg541 = 206\nx54 = add(arg540, arg541)\nv54 = 244\nif x54 != v54\n    raise StandardError, \"Error at test case 55\"\nend\n\narg550 = 907\narg551 = 343\nx55 = add(arg550, arg551)\nv55 = 1250\nif x55 != v55\n    raise StandardError, \"Error at test case 56\"\nend\n\narg560 = 23\narg561 = 760\nx56 = add(arg560, arg561)\nv56 = 783\nif x56 != v56\n    raise StandardError, \"Error at test case 57\"\nend\n\narg570 = 524\narg571 = 859\nx57 = add(arg570, arg571)\nv57 = 1383\nif x57 != v57\n    raise StandardError, \"Error at test case 58\"\nend\n\narg580 = 30\narg581 = 529\nx58 = add(arg580, arg581)\nv58 = 559\nif x58 != v58\n    raise StandardError, \"Error at test case 59\"\nend\n\narg590 = 341\narg591 = 691\nx59 = add(arg590, arg591)\nv59 = 1032\nif x59 != v59\n    raise StandardError, \"Error at test case 60\"\nend\n\narg600 = 167\narg601 = 729\nx60 = add(arg600, arg601)\nv60 = 896\nif x60 != v60\n    raise StandardError, \"Error at test case 61\"\nend\n\narg610 = 636\narg611 = 289\nx61 = add(arg610, arg611)\nv61 = 925\nif x61 != v61\n    raise StandardError, \"Error at test case 62\"\nend\n\narg620 = 503\narg621 = 144\nx62 = add(arg620, arg621)\nv62 = 647\nif x62 != v62\n    raise StandardError, \"Error at test case 63\"\nend\n\narg630 = 51\narg631 = 985\nx63 = add(arg630, arg631)\nv63 = 1036\nif x63 != v63\n    raise StandardError, \"Error at test case 64\"\nend\n\narg640 = 287\narg641 = 149\nx64 = add(arg640, arg641)\nv64 = 436\nif x64 != v64\n    raise StandardError, \"Error at test case 65\"\nend\n\narg650 = 659\narg651 = 75\nx65 = add(arg650, arg651)\nv65 = 734\nif x65 != v65\n    raise StandardError, \"Error at test case 66\"\nend\n\narg660 = 462\narg661 = 797\nx66 = add(arg660, arg661)\nv66 = 1259\nif x66 != v66\n    raise StandardError, \"Error at test case 67\"\nend\n\narg670 = 406\narg671 = 141\nx67 = add(arg670, arg671)\nv67 = 547\nif x67 != v67\n    raise StandardError, \"Error at test case 68\"\nend\n\narg680 = 106\narg681 = 44\nx68 = add(arg680, arg681)\nv68 = 150\nif x68 != v68\n    raise StandardError, \"Error at test case 69\"\nend\n\narg690 = 300\narg691 = 934\nx69 = add(arg690, arg691)\nv69 = 1234\nif x69 != v69\n    raise StandardError, \"Error at test case 70\"\nend\n\narg700 = 471\narg701 = 524\nx70 = add(arg700, arg701)\nv70 = 995\nif x70 != v70\n    raise StandardError, \"Error at test case 71\"\nend\n\narg710 = 122\narg711 = 429\nx71 = add(arg710, arg711)\nv71 = 551\nif x71 != v71\n    raise StandardError, \"Error at test case 72\"\nend\n\narg720 = 735\narg721 = 195\nx72 = add(arg720, arg721)\nv72 = 930\nif x72 != v72\n    raise StandardError, \"Error at test case 73\"\nend\n\narg730 = 335\narg731 = 484\nx73 = add(arg730, arg731)\nv73 = 819\nif x73 != v73\n    raise StandardError, \"Error at test case 74\"\nend\n\narg740 = 28\narg741 = 809\nx74 = add(arg740, arg741)\nv74 = 837\nif x74 != v74\n    raise StandardError, \"Error at test case 75\"\nend\n\narg750 = 430\narg751 = 20\nx75 = add(arg750, arg751)\nv75 = 450\nif x75 != v75\n    raise StandardError, \"Error at test case 76\"\nend\n\narg760 = 916\narg761 = 635\nx76 = add(arg760, arg761)\nv76 = 1551\nif x76 != v76\n    raise StandardError, \"Error at test case 77\"\nend\n\narg770 = 301\narg771 = 999\nx77 = add(arg770, arg771)\nv77 = 1300\nif x77 != v77\n    raise StandardError, \"Error at test case 78\"\nend\n\narg780 = 454\narg781 = 466\nx78 = add(arg780, arg781)\nv78 = 920\nif x78 != v78\n    raise StandardError, \"Error at test case 79\"\nend\n\narg790 = 905\narg791 = 259\nx79 = add(arg790, arg791)\nv79 = 1164\nif x79 != v79\n    raise StandardError, \"Error at test case 80\"\nend\n\narg800 = 168\narg801 = 205\nx80 = add(arg800, arg801)\nv80 = 373\nif x80 != v80\n    raise StandardError, \"Error at test case 81\"\nend\n\narg810 = 570\narg811 = 434\nx81 = add(arg810, arg811)\nv81 = 1004\nif x81 != v81\n    raise StandardError, \"Error at test case 82\"\nend\n\narg820 = 64\narg821 = 959\nx82 = add(arg820, arg821)\nv82 = 1023\nif x82 != v82\n    raise StandardError, \"Error at test case 83\"\nend\n\narg830 = 957\narg831 = 510\nx83 = add(arg830, arg831)\nv83 = 1467\nif x83 != v83\n    raise StandardError, \"Error at test case 84\"\nend\n\narg840 = 722\narg841 = 598\nx84 = add(arg840, arg841)\nv84 = 1320\nif x84 != v84\n    raise StandardError, \"Error at test case 85\"\nend\n\narg850 = 770\narg851 = 226\nx85 = add(arg850, arg851)\nv85 = 996\nif x85 != v85\n    raise StandardError, \"Error at test case 86\"\nend\n\narg860 = 579\narg861 = 66\nx86 = add(arg860, arg861)\nv86 = 645\nif x86 != v86\n    raise StandardError, \"Error at test case 87\"\nend\n\narg870 = 117\narg871 = 674\nx87 = add(arg870, arg871)\nv87 = 791\nif x87 != v87\n    raise StandardError, \"Error at test case 88\"\nend\n\narg880 = 530\narg881 = 30\nx88 = add(arg880, arg881)\nv88 = 560\nif x88 != v88\n    raise StandardError, \"Error at test case 89\"\nend\n\narg890 = 776\narg891 = 345\nx89 = add(arg890, arg891)\nv89 = 1121\nif x89 != v89\n    raise StandardError, \"Error at test case 90\"\nend\n\narg900 = 327\narg901 = 389\nx90 = add(arg900, arg901)\nv90 = 716\nif x90 != v90\n    raise StandardError, \"Error at test case 91\"\nend\n\narg910 = 596\narg911 = 12\nx91 = add(arg910, arg911)\nv91 = 608\nif x91 != v91\n    raise StandardError, \"Error at test case 92\"\nend\n\narg920 = 599\narg921 = 511\nx92 = add(arg920, arg921)\nv92 = 1110\nif x92 != v92\n    raise StandardError, \"Error at test case 93\"\nend\n\narg930 = 936\narg931 = 476\nx93 = add(arg930, arg931)\nv93 = 1412\nif x93 != v93\n    raise StandardError, \"Error at test case 94\"\nend\n\narg940 = 461\narg941 = 14\nx94 = add(arg940, arg941)\nv94 = 475\nif x94 != v94\n    raise StandardError, \"Error at test case 95\"\nend\n\narg950 = 966\narg951 = 157\nx95 = add(arg950, arg951)\nv95 = 1123\nif x95 != v95\n    raise StandardError, \"Error at test case 96\"\nend\n\narg960 = 326\narg961 = 91\nx96 = add(arg960, arg961)\nv96 = 417\nif x96 != v96\n    raise StandardError, \"Error at test case 97\"\nend\n\narg970 = 392\narg971 = 455\nx97 = add(arg970, arg971)\nv97 = 847\nif x97 != v97\n    raise StandardError, \"Error at test case 98\"\nend\n\narg980 = 446\narg981 = 477\nx98 = add(arg980, arg981)\nv98 = 923\nif x98 != v98\n    raise StandardError, \"Error at test case 99\"\nend\n\narg990 = 324\narg991 = 860\nx99 = add(arg990, arg991)\nv99 = 1184\nif x99 != v99\n    raise StandardError, \"Error at test case 100\"\nend\n\narg1000 = 945\narg1001 = 85\nx100 = add(arg1000, arg1001)\nv100 = 1030\nif x100 != v100\n    raise StandardError, \"Error at test case 101\"\nend\n\narg1010 = 886\narg1011 = 582\nx101 = add(arg1010, arg1011)\nv101 = 1468\nif x101 != v101\n    raise StandardError, \"Error at test case 102\"\nend\n\narg1020 = 886\narg1021 = 712\nx102 = add(arg1020, arg1021)\nv102 = 1598\nif x102 != v102\n    raise StandardError, \"Error at test case 103\"\nend\n\narg1030 = 842\narg1031 = 953\nx103 = add(arg1030, arg1031)\nv103 = 1795\nif x103 != v103\n    raise StandardError, \"Error at test case 104\"\nend\n\n", "description": "x மற்றும் y என்ற இரண்டு எண்களைச் சேர்க்கவும். \n>>> சேர் (2,3) \n5....................................................................................................................................................................................................... \n>>> சேர் (5,7) \n12.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/20", "entry_point": "same_chars", "test": "\n\narg00 = \"eabcdzzzz\"\narg01 = \"dddzzzzzzzddeddabc\"\nx0 = same_chars(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcd\"\narg11 = \"dddddddabc\"\nx1 = same_chars(arg10, arg11)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"dddddddabc\"\narg21 = \"abcd\"\nx2 = same_chars(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"eabcd\"\narg31 = \"dddddddabc\"\nx3 = same_chars(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"abcd\"\narg41 = \"dddddddabcf\"\nx4 = same_chars(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"eabcdzzzz\"\narg51 = \"dddzzzzzzzddddabc\"\nx5 = same_chars(arg50, arg51)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"aabb\"\narg61 = \"aaccc\"\nx6 = same_chars(arg60, arg61)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "இரண்டு சொற்களும் ஒரே எழுத்துக்களைக் கொண்டுள்ளனவா என்று சரிபார்க்கவும். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzuddeddabc') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடிபிசி') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('dddddddabc','abcd') \nஉண்மை. \n>>> அதே _ எழுத்துக்கள் ('ஈஏபிசிடி','டிடிடிடிடிபிசி') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('ஏபிசிடி','டிடிடிடிடாப்ஸ்') \nபொய். \n>>> அதே _ எழுத்துக்கள் ('eabcdzzzz','dddzzzzzdddddadbc') \nபொய்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/21", "entry_point": "fib", "test": "\n\narg00 = 10\nx0 = fib(arg00)\nv0 = 55\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\nx1 = fib(arg10)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 8\nx2 = fib(arg20)\nv2 = 21\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 11\nx3 = fib(arg30)\nv3 = 89\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 12\nx4 = fib(arg40)\nv4 = 144\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "n-th ஃபிபோனாச்சி எண்ணைத் திருப்பித் தரவும். \n>>> ஃபைப் (10) \n55 \n>>> ஃபைப் (1) \n1. \n>>> ஃபைப் (8) \n21", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/22", "entry_point": "common", "test": "\n\narg00 = [1, 4, 3, 34, 653, 2, 5]\narg01 = [5, 7, 1, 5, 9, 653, 121]\nx0 = common(arg00, arg01)\nv0 = [1, 5, 653]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 3, 2, 8]\narg11 = [3, 2]\nx1 = common(arg10, arg11)\nv1 = [2, 3]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [4, 3, 2, 8]\narg21 = [3, 2, 4]\nx2 = common(arg20, arg21)\nv2 = [2, 3, 4]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 3, 2, 8]\narg31 = []\nx3 = common(arg30, arg31)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "இரண்டு பட்டியல்களுக்கு தனித்துவமான பொதுவான கூறுகளை வரிசைப்படுத்துங்கள். \n>> பொதுவான ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>> பொதுவான ([5,3,2,8], [3,2]) \n[2,3]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/23", "entry_point": "largest_prime_factor", "test": "\n\narg00 = 15\nx0 = largest_prime_factor(arg00)\nv0 = 5\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 27\nx1 = largest_prime_factor(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 63\nx2 = largest_prime_factor(arg20)\nv2 = 7\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 330\nx3 = largest_prime_factor(arg30)\nv3 = 11\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 13195\nx4 = largest_prime_factor(arg40)\nv4 = 29\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "n இன் மிகப்பெரிய பகாக் காரணியை திருப்பிக் கொடுங்கள். n> 1 என்று வைத்துக்கொள்வோம், அது பகாக் காரணி அல்ல. \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (13195) \n29 \n>>> மிகப்பெரிய _ முதன்மை _ காரணி (2048) \n2.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/24", "entry_point": "sum_to_n", "test": "\n\narg00 = 1\nx0 = sum_to_n(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 6\nx1 = sum_to_n(arg10)\nv1 = 21\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 11\nx2 = sum_to_n(arg20)\nv2 = 66\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 30\nx3 = sum_to_n(arg30)\nv3 = 465\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 100\nx4 = sum_to_n(arg40)\nv4 = 5050\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "sum _ to _ n என்பது 1 முதல் n வரையிலான எண்களைச் சேர்க்கும் ஒரு சார்பாகும். \n>>> கூட்டுத்தொகை _ முதல் _ வரை (30) \n465 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (100) \n5050 \n>>> கூட்டுத்தொகை _ முதல் _ வரை (5) \n15. \n>>> கூட்டுத்தொகை _ முதல் _ வரை (10) \n55 \n>>> கூட்டுத்தொகை _ முதல் _ n வரை (1) \n1.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/25", "entry_point": "derivative", "test": "\n\narg00 = [3, 1, 2, 4, 5]\nx0 = derivative(arg00)\nv0 = [1, 4, 12, 20]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 3]\nx1 = derivative(arg10)\nv1 = [2, 6]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3, 2, 1]\nx2 = derivative(arg20)\nv2 = [2, 2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 2, 1, 0, 4]\nx3 = derivative(arg30)\nv3 = [2, 2, 0, 16]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\nx4 = derivative(arg40)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "xs என்பது ஒரு பல்லுறுப்புக்கோவையின் குணகங்களைக் குறிக்கிறது. \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nஅதே வடிவத்தில் இந்த பல்லுறுப்புக்கோவையின் திரும்ப வழித்தோன்றல். \n>>> வழித்தோன்றல் ([3,1,2,4,5]) \n[1,4,12,20] \n>>> வழித்தோன்றல் ([1,2,3]) \n[2,6]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/26", "entry_point": "fibfib", "test": "\n\narg00 = 2\nx0 = fibfib(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\nx1 = fibfib(arg10)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = fibfib(arg20)\nv2 = 4\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 8\nx3 = fibfib(arg30)\nv3 = 24\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 10\nx4 = fibfib(arg40)\nv4 = 81\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 12\nx5 = fibfib(arg50)\nv5 = 274\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 14\nx6 = fibfib(arg60)\nv6 = 927\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஃபைப்ஃபைப் எண் வரிசை என்பது ஃபைபோனாச்சி செக்யூனீஸைப் போன்ற ஒரு வரிசையாகும், இது பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nஃபைப்ஃபைப் (0) = = 0 \nஃபைப்ஃபைப் (1) = = 0 \nஃபைப்ஃபைப் (2) = = 1 \nஃபைப்ஃபைப் (n) = = ஃபைப்ஃபைப் (n-1) + ஃபைப்ஃபைப் (n-2) + ஃபைப்ஃபைப் (n-3). \nஃபைப்ஃபைப் எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். \n>>> ஃபைப்ஃபைப் (1) \n0 \n>>> ஃபைப்ஃபைப் (5) \n4. \n>>> ஃபைப்ஃபைப் (8) \n24.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/27", "entry_point": "vowels_count", "test": "\n\narg00 = \"abcde\"\nx0 = vowels_count(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Alone\"\nx1 = vowels_count(arg10)\nv1 = 3\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"key\"\nx2 = vowels_count(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"bye\"\nx3 = vowels_count(arg30)\nv3 = 1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"keY\"\nx4 = vowels_count(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"bYe\"\nx5 = vowels_count(arg50)\nv5 = 1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"ACEDY\"\nx6 = vowels_count(arg60)\nv6 = 3\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஒரு செயல்பாட்டை எழுதுங்கள் உயிரெழுத்துக்கள் _ எண்ணிக்கை இது ஒரு சரத்தை குறிக்கிறது \nஉள்ளீடாக ஒரு சொல் மற்றும் சரத்தில் உள்ள உயிரெழுத்துக்களின் எண்ணிக்கையைத் தருகிறது. \nஇந்த வழக்கில் அச்சுகள்'a','e','i','o','u'. இங்கே,'y'கூட ஒரு \nஉயிரெழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. \n\nஉதாரணம்ஃ \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"அப்ச்டே\") \n2. \n>>> உயிரெழுத்துக்கள் _ எண்ணிக்கை (\"ACEDY\") \n3.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/28", "entry_point": "search", "test": "\n\narg00 = [5, 5, 5, 5, 1]\nx0 = search(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [4, 1, 4, 1, 4, 4]\nx1 = search(arg10)\nv1 = 4\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3, 3]\nx2 = search(arg20)\nv2 = -1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [8, 8, 8, 8, 8, 8, 8, 8]\nx3 = search(arg30)\nv3 = 8\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [2, 3, 3, 2, 2]\nx4 = search(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]\nx5 = search(arg50)\nv5 = 1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [3, 2, 8, 2]\nx6 = search(arg60)\nv6 = 2\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]\nx7 = search(arg70)\nv7 = 1\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [8, 8, 3, 6, 5, 6, 4]\nx8 = search(arg80)\nv8 = -1\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]\nx9 = search(arg90)\nv9 = 1\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [1, 9, 10, 1, 3]\nx10 = search(arg100)\nv10 = 1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]\nx11 = search(arg110)\nv11 = 5\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = [1]\nx12 = search(arg120)\nv12 = 1\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]\nx13 = search(arg130)\nv13 = 4\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]\nx14 = search(arg140)\nv14 = 2\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]\nx15 = search(arg150)\nv15 = 1\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\narg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]\nx16 = search(arg160)\nv16 = 4\nif x16 != v16\n    raise StandardError, \"Error at test case 17\"\nend\n\narg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]\nx17 = search(arg170)\nv17 = 4\nif x17 != v17\n    raise StandardError, \"Error at test case 18\"\nend\n\narg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]\nx18 = search(arg180)\nv18 = 2\nif x18 != v18\n    raise StandardError, \"Error at test case 19\"\nend\n\narg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]\nx19 = search(arg190)\nv19 = -1\nif x19 != v19\n    raise StandardError, \"Error at test case 20\"\nend\n\narg200 = [10]\nx20 = search(arg200)\nv20 = -1\nif x20 != v20\n    raise StandardError, \"Error at test case 21\"\nend\n\narg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]\nx21 = search(arg210)\nv21 = 2\nif x21 != v21\n    raise StandardError, \"Error at test case 22\"\nend\n\narg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]\nx22 = search(arg220)\nv22 = 1\nif x22 != v22\n    raise StandardError, \"Error at test case 23\"\nend\n\narg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]\nx23 = search(arg230)\nv23 = 1\nif x23 != v23\n    raise StandardError, \"Error at test case 24\"\nend\n\narg240 = [3, 10, 10, 9, 2]\nx24 = search(arg240)\nv24 = -1\nif x24 != v24\n    raise StandardError, \"Error at test case 25\"\nend\n\n", "description": "உங்களுக்கு வெற்றிடமற்ற நேர்மறை முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. அதை விட பெரிய முழு எண்ணை கொடுக்கவும். \nபூஜ்ஜியம், மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ அதிர்வெண் உள்ளது. \nஒரு முழு எண்ணின் அதிர்வெண் என்பது அது பட்டியலில் எத்தனை முறை தோன்றுகிறது என்பதாகும். \nஅத்தகைய மதிப்பு இல்லை என்றால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணங்கள்ஃ \nதேடல் ([4,1,2,2,3,1]) = = 2 \nதேடல் ([1,2,3,3,4,4]) = = 3 \nதேடல் ([5,5,4,4]) = =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/29", "entry_point": "triangle_area", "test": "\n\narg00 = 3\narg01 = 4\narg02 = 5\nx0 = triangle_area(arg00, arg01, arg02)\nv0 = 6.0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 2\narg12 = 10\nx1 = triangle_area(arg10, arg11, arg12)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 4\narg21 = 8\narg22 = 5\nx2 = triangle_area(arg20, arg21, arg22)\nv2 = 8.18\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 2\narg31 = 2\narg32 = 2\nx3 = triangle_area(arg30, arg31, arg32)\nv3 = 1.73\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 1\narg41 = 2\narg42 = 3\nx4 = triangle_area(arg40, arg41, arg42)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 10\narg51 = 5\narg52 = 7\nx5 = triangle_area(arg50, arg51, arg52)\nv5 = 16.25\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 2\narg61 = 6\narg62 = 3\nx6 = triangle_area(arg60, arg61, arg62)\nv6 = -1\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 1\narg71 = 1\narg72 = 1\nx7 = triangle_area(arg70, arg71, arg72)\nv7 = 0.43\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 2\narg81 = 2\narg82 = 10\nx8 = triangle_area(arg80, arg81, arg82)\nv8 = -1\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. \nமூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்கினால் முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமிடப்படுகிறது. \nஇல்லையெனில் திரும்ப-1 \nஏதேனும் இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருக்கும்போது மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. \nமூன்றாவது பக்கத்தை விட. \nஉதாரணம்ஃ \nமுக்கோணப் பரப்பளவு (3,4,5) = = 6 \nமுக்கோணப் பரப்பளவு (1,2,10) = =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/30", "entry_point": "will_it_fly", "test": "\n\narg00 = [3, 2, 3]\narg01 = 9\nx0 = will_it_fly(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2]\narg11 = 5\nx1 = will_it_fly(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [3]\narg21 = 5\nx2 = will_it_fly(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 2, 3]\narg31 = 1\nx3 = will_it_fly(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 3]\narg41 = 6\nx4 = will_it_fly(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [5]\narg51 = 5\nx5 = will_it_fly(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "பொருள் q பறக்கும் என்றால் சரி, இல்லையெனில் தவறு என்று காட்டும் செயல்பாட்டை எழுதுங்கள். \nபொருள் q சமநிலையாக இருந்தால் பறக்கும் (இது ஒரு பாலிண்ட்ரோமிக் பட்டியல்) மற்றும் அதன் உறுப்புகளின் கூட்டுத்தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால். \n\nஉதாரணம்ஃ \nவில் _ இட் _ ஃப்ளை ([1,2], 5) பொய் \n#1 + 2 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 1) பொய் \n#இது சமநிலையானது, ஆனால் 3 + 2 + 3 என்பது அதிகபட்ச எடையை விட அதிகமாகும். \n\nவில் _ இட் _ ஃப்ளை ([3,2,3], 9) ட்ரு \n#3 + 2 + 3 என்பது அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது. \n\nவில் _ இட் _ ஃப்ளை ([3], 5) ட்ரு \n#3 அதிகபட்ச எடையை விட குறைவாக உள்ளது, மேலும் இது சமநிலையானது.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/31", "entry_point": "is_multiply_prime", "test": "\n\narg00 = 5\nx0 = is_multiply_prime(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 30\nx1 = is_multiply_prime(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 8\nx2 = is_multiply_prime(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 10\nx3 = is_multiply_prime(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 125\nx4 = is_multiply_prime(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 105\nx5 = is_multiply_prime(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 126\nx6 = is_multiply_prime(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 729\nx7 = is_multiply_prime(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 891\nx8 = is_multiply_prime(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1001\nx9 = is_multiply_prime(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "கொடுக்கப்பட்ட எண் 3 பகா எண்களின் பெருக்கமாக இருந்தால் உண்மை என்று திரும்பும் செயல்பாட்டை எழுதுங்கள். \nஇல்லையெனில் பொய்யானது. \n(அ) என்பது 100க்கும் குறைவானது என்பதை அறிவது. \nஉதாரணம்ஃ \nபெருக்கல் பகா எண் (30) = = உண்மை \n30 = 2 * 3 * 5", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/32", "entry_point": "decimal_to_binary", "test": "\n\narg00 = 0\nx0 = decimal_to_binary(arg00)\nv0 = \"db0db\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 32\nx1 = decimal_to_binary(arg10)\nv1 = \"db100000db\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 103\nx2 = decimal_to_binary(arg20)\nv2 = \"db1100111db\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 15\nx3 = decimal_to_binary(arg30)\nv3 = \"db1111db\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "உங்களுக்கு தசம வடிவத்தில் ஒரு எண் வழங்கப்படும், அதை ஒரு எண்ணாக மாற்றுவதே உங்கள் பணியாகும். \nபைனரி வடிவம். செயல்பாடு ஒரு சரத்தைத் திருப்ப வேண்டும், ஒவ்வொரு எழுத்தும் ஒரு பைனரியைக் குறிக்கும் \nஎண். சரத்தில் உள்ள ஒவ்வொரு எழுத்தும்'0'அல்லது'1'ஆக இருக்கும். \n\nசரத்தின் தொடக்கத்திலும் முடிவிலும் கூடுதலாக இரண்டு எழுத்துக்கள்'db'இருக்கும். \nவடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன. \n\nஉதாரணங்கள்ஃ \nடெசிமல் _ டு _ பைனரி (15) #\"db1111db\" ஐத் தருகிறது \nடெசிமல் _ டு _ பைனரி (32) #\"db100000db\" ஐத் தருகிறது", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/33", "entry_point": "is_happy", "test": "\n\narg00 = \"a\"\nx0 = is_happy(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"aa\"\nx1 = is_happy(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"abcd\"\nx2 = is_happy(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"aabb\"\nx3 = is_happy(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"adb\"\nx4 = is_happy(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"xyy\"\nx5 = is_happy(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"iopaxpoi\"\nx6 = is_happy(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"iopaxioi\"\nx7 = is_happy(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nசரம் மகிழ்ச்சியாக உள்ளதா இல்லையா என்பதைச் சரிபார்ப்பது உங்கள் பணியாகும். \nஒரு சரத்தின் நீளம் குறைந்தது 3 ஆகவும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் தனித்துவமாகவும் இருந்தால் அது மகிழ்ச்சியாக இருக்கும். \nஉதாரணத்திற்குஃ \nமகிழ்ச்சியாக உள்ளது (a) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏஏ) => பொய் \nமகிழ்ச்சியாக உள்ளது (ஏபிசிடி) => உண்மை \nமகிழ்ச்சியாக உள்ளது (ஆப்) => பொய் \nமகிழ்ச்சியாக உள்ளது (adb) => உண்மை \nமகிழ்ச்சியாக உள்ளது (xyy) => தவறு", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/34", "entry_point": "numerical_letter_grade", "test": "\n\narg00 = [4.0, 3, 1.7, 2, 3.5]\nx0 = numerical_letter_grade(arg00)\nv0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1.2]\nx1 = numerical_letter_grade(arg10)\nv1 = [\"D+\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [0.5]\nx2 = numerical_letter_grade(arg20)\nv2 = [\"D-\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [0.0]\nx3 = numerical_letter_grade(arg30)\nv3 = [\"E\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 0.3, 1.5, 2.8, 3.3]\nx4 = numerical_letter_grade(arg40)\nv4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 0.7]\nx5 = numerical_letter_grade(arg50)\nv5 = [\"E\", \"D-\"]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் தரங்களை வழங்க வேண்டும். \nமாணவர்களுக்கு. ஆசிரியர் தரப்படுத்தலுக்கான தனது சொந்த வழிமுறையை உருவாக்கி வருகிறார். \nஒரே பிரச்சனை என்னவென்றால், தரப்படுத்துவதற்கு அவர் பயன்படுத்திய குறியீட்டை அவர் இழந்துவிட்டார். \nசில மாணவர்களுக்கான ஜி. பி. ஏ. களின் பட்டியலை அவர் உங்களுக்கு வழங்கியுள்ளார், நீங்கள் எழுத வேண்டும். \nபின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் பட்டியலை வெளியிடக்கூடிய ஒரு செயல்பாடுஃ \nஜிபிஏ | எழுத்து தரம் \n4. 0 ஏ + \n> 3.7 ஏ \n> 3.3 ஏ-\n> 3 பி + \n> 2.7 பி \n> 2.3 பி-\n> 2 சி + \n> 1.7 டிகிரி செல். \n> 1.3 சி-\n> 1. 0 டி + \n> 0.7 டி \n> 0.0 டி-\n0. 0 ஈ \n\nஉதாரணம்ஃ \nதரச் சமன்பாடு ([4.0,3,17,2,3,5]) = => ['A +','B','C-','C','A -']", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/35", "entry_point": "prime_length", "test": "\n\narg00 = \"Hello\"\nx0 = prime_length(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdcba\"\nx1 = prime_length(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"kittens\"\nx2 = prime_length(arg20)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"orange\"\nx3 = prime_length(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"wow\"\nx4 = prime_length(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"world\"\nx5 = prime_length(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"MadaM\"\nx6 = prime_length(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"Wow\"\nx7 = prime_length(arg70)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"\"\nx8 = prime_length(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"HI\"\nx9 = prime_length(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"go\"\nx10 = prime_length(arg100)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"gogo\"\nx11 = prime_length(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"aaaaaaaaaaaaaaa\"\nx12 = prime_length(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = \"Madam\"\nx13 = prime_length(arg130)\nv13 = true\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\narg140 = \"M\"\nx14 = prime_length(arg140)\nv14 = false\nif x14 != v14\n    raise StandardError, \"Error at test case 15\"\nend\n\narg150 = \"0\"\nx15 = prime_length(arg150)\nv15 = false\nif x15 != v15\n    raise StandardError, \"Error at test case 16\"\nend\n\n", "description": "ஒரு சரத்தை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள், சரம் இருந்தால் சரி என்று திருப்பித் தருகிறது \nநீளம் ஒரு பகா எண் அல்லது இல்லையெனில் தவறு \nஉதாரணங்கள் \nபகா நீளம் ('ஹலோ') = = உண்மை \nபகா நீளம் ('abcdcba') = = உண்மை \nபகா நீளம் ('பூனைகள்') = = உண்மை \nபகா நீளம் ('ஆரஞ்சு') = = தவறு", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/36", "entry_point": "solve", "test": "\n\narg00 = 1000\nx0 = solve(arg00)\nv0 = \"1\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 150\nx1 = solve(arg10)\nv1 = \"110\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 147\nx2 = solve(arg20)\nv2 = \"1100\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 333\nx3 = solve(arg30)\nv3 = \"1001\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 963\nx4 = solve(arg40)\nv4 = \"10010\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த கூட்டுத்தொகையை பைனரியில் திருப்பித் தரவும். \n\nஉதாரணம் \nN = 1000 க்கு, இலக்கங்களின் கூட்டுத்தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். \nN = 150 க்கு, இலக்கங்களின் கூட்டுத்தொகை 6 ஆகவும், வெளியீடு \"110\" ஆகவும் இருக்க வேண்டும். \nN = 147 க்கு, இலக்கங்களின் கூட்டுத்தொகை 12 ஆகவும், வெளியீடு \"1100\" ஆகவும் இருக்க வேண்டும். \n\nமாறுபாடுகள்ஃ \n@N முழு எண் \nகட்டுப்பாடுகள்ஃ 0 ≤ N ≤ 10000. \nவெளியீடுஃ \nபைனரி எண்ணின் சரம்", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/37", "entry_point": "get_row", "test": "\n\narg00 = []\narg01 = 1\nx0 = get_row(arg00, arg01)\nv0 = []\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [[1]]\narg11 = 2\nx1 = get_row(arg10, arg11)\nv1 = []\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [[], [1], [1, 2, 3]]\narg21 = 3\nx2 = get_row(arg20, arg21)\nv2 = [[2, 2]]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\n", "description": "உங்களுக்கு ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியல்களாக வழங்கப்படுகிறது, \nஇது மேட்ரிக்ஸைப் போன்றது, இருப்பினும், மேட்ரிக்ஸ்களைப் போலல்லாமல், \nஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். \nகொடுக்கப்பட்ட lst மற்றும் முழு எண் x, பட்டியலில் உள்ள x முழு எண்களைக் கண்டறியவும், \nமற்றும் டப்பிள்களின் திரும்பும் பட்டியல், [(x1, y1), (x2, y2)...] \nஒவ்வொரு டுபிலும் ஒரு ஒருங்கிணைப்பு-(வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. \nஏறுவரிசையில் வரிசைகளால் ஆரம்பத்தில் ஆயங்களை வரிசைப்படுத்துங்கள். \nமேலும், வரிசையின் ஆயத்தொகுதிகளை நெடுவரிசைகளால் இறங்கு வரிசையில் வரிசைப்படுத்துங்கள். \n\nஉதாரணங்கள்ஃ \nவரிசை பெறு (_ r) ([\n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nபெற _ வரிசை ([], 1) = = [] \nபெற _ வரிசை ([[], [1], [1,2,3]], 3) = = [(2,2)]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/38", "entry_point": "next_smallest", "test": "\n\narg00 = [1, 2, 3, 4, 5]\nx0 = next_smallest(arg00)\nv0 = 2\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 1, 4, 3, 2]\nx1 = next_smallest(arg10)\nv1 = 2\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = []\nx2 = next_smallest(arg20)\nv2 = nil\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, 1]\nx3 = next_smallest(arg30)\nv3 = nil\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 1, 1, 1, 0]\nx4 = next_smallest(arg40)\nv4 = 1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 1]\nx5 = next_smallest(arg50)\nv5 = nil\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-35, 34, 12, -45]\nx6 = next_smallest(arg60)\nv6 = -35\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nபட்டியலின் 2 வது மிகச்சிறிய உறுப்பைத் தரும் அடுத்த _ மிகச்சிறிய () செயல்பாட்டை எழுதுங்கள். \nஅத்தகைய உறுப்பு இல்லையென்றால் பூஜ்யத்தைத் திருப்பவும். \n\nஅடுத்தது _ மிகச்சிறியது ([1,2,3,4,5]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([5,1,4,3,2]) = = 2 \nஅடுத்தது _ மிகச்சிறியது ([]) = = எதுவும் இல்லை \nஅடுத்தது _ மிகச்சிறியது ([1,1]) = = எதுவும் இல்லை", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/39", "entry_point": "is_bored", "test": "\n\narg00 = \"Hello world\"\nx0 = is_bored(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Is the sky blue?\"\nx1 = is_bored(arg10)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"I love It !\"\nx2 = is_bored(arg20)\nv2 = 1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"bIt\"\nx3 = is_bored(arg30)\nv3 = 0\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"I feel good today. I will be productive. will kill It\"\nx4 = is_bored(arg40)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"You and I are going for a walk\"\nx5 = is_bored(arg50)\nv5 = 0\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "உங்களுக்கு வார்த்தைகளின் சரம் வழங்கப்படும், மேலும் உங்கள் பணி எண்ணிக்கையை எண்ணுவதாகும். \nசலிப்பு. சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். \nவாக்கியங்கள் '.', '?'அல்லது '!'ஆகியவற்றால் வரையறுக்கப்படுகின்றன. \n\nஉதாரணத்திற்குஃ \n>>> பரவாயில்லை (\"ஹலோ வேர்ல்ட்\") \n0 \n>>> பரவாயில்லை (\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. எனக்கு இந்த வானிலை பிடிக்கும்\") \n1.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/40", "entry_point": "skjkasdkd", "test": "\n\narg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nx0 = skjkasdkd(arg00)\nv0 = 10\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nx1 = skjkasdkd(arg10)\nv1 = 25\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nx2 = skjkasdkd(arg20)\nv2 = 13\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nx3 = skjkasdkd(arg30)\nv3 = 11\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [0, 81, 12, 3, 1, 21]\nx4 = skjkasdkd(arg40)\nv4 = 3\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 8, 1, 2, 1, 7]\nx5 = skjkasdkd(arg50)\nv5 = 7\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [8191]\nx6 = skjkasdkd(arg60)\nv6 = 19\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [8191, 123456, 127, 7]\nx7 = skjkasdkd(arg70)\nv7 = 19\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [127, 97, 8192]\nx8 = skjkasdkd(arg80)\nv8 = 10\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "உங்களுக்கு முழு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nநீங்கள் மிகப்பெரிய பகா மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] க்கு வெளியீடு 10 ஆக இருக்க வேண்டும். \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] க்கு வெளியீடு 25 ஆக இருக்க வேண்டும். \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] க்கு வெளியீடு 13 ஆக இருக்க வேண்டும். \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] க்கு வெளியீடு 11 ஆக இருக்க வேண்டும். \nlst = [0,81,12, 3,1,21] க்கு வெளியீடு 3 ஆக இருக்க வேண்டும். \nlst = [0,8,1, 2,1,7] க்கு வெளியீடு 7 ஆக இருக்க வேண்டும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/41", "entry_point": "check_dict_case", "test": "\n\narg00 = {\"p\"=>\"pineapple\", \"b\"=>\"banana\"}\nx0 = check_dict_case(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = {\"p\"=>\"pineapple\", \"A\"=>\"banana\", \"B\"=>\"banana\"}\nx1 = check_dict_case(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = {\"p\"=>\"pineapple\", 5=>\"banana\", \"a\"=>\"apple\"}\nx2 = check_dict_case(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = {\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"}\nx3 = check_dict_case(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = {\"STATE\"=>\"NC\", \"ZIP\"=>\"12345\"}\nx4 = check_dict_case(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = {\"fruit\"=>\"Orange\", \"taste\"=>\"Sweet\"}\nx5 = check_dict_case(arg50)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = {}\nx6 = check_dict_case(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஒரு அகராதியைக் கொடுத்தால், அனைத்து விசைகளும் கீழே உள்ள சரங்களாக இருந்தால் சரி என்று திருப்பித் தரவும். \nவழக்கு அல்லது அனைத்து விசைகளும் பெரிய வழக்கில் சரங்கள், இல்லையெனில் தவறானது. \nகொடுக்கப்பட்ட அகராதி காலியாக இருப்பதால் செயல்பாடு தவறாக திரும்ப வேண்டும். \nஉதாரணங்கள்ஃ \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"b\": \"வாழைப்பழம்\"}) சரி என்று திரும்ப வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", \"A\": \"வாழைப்பழம்\", \"B\": \"வாழைப்பழம்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"a\": \"ஆப்பிள்\", 8: \"வாழைப்பழம்\", \"a\": \"ஆப்பிள்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"பெயர்\": \"ஜான்\", \"வயது\": \"36\", \"சிட்டி\": \"ஹூஸ்டன்\"}) பொய்யைக் காட்ட வேண்டும். \nசெக் _ டிக் _ கேஸ் ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) சரி என்று திரும்ப வேண்டும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/42", "entry_point": "closest_integer", "test": "\n\narg00 = \"10\"\nx0 = closest_integer(arg00)\nv0 = 10\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"14.5\"\nx1 = closest_integer(arg10)\nv1 = 15\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"-15.5\"\nx2 = closest_integer(arg20)\nv2 = -16\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"15.3\"\nx3 = closest_integer(arg30)\nv3 = 15\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"0\"\nx4 = closest_integer(arg40)\nv4 = 0\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "ஒரு எண்ணைக் குறிக்கும் மதிப்பை (சரம்) எடுக்கும் செயல்பாட்டை உருவாக்கவும் \nஅதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தருகிறது. எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். \n\nஉதாரணங்கள் \n>>> நெருங்கிய முழு எண் (\"10\") \n10. \n>>> நெருங்கிய முழு எண் (\"15.3\") \n15. \n\nகுறிப்புஃ \nபூஜ்ஜியத்திலிருந்து வட்டமிடுவது என்பது கொடுக்கப்பட்ட எண் சம தூரத்தில் இருந்தால் \nஇரண்டு முழு எண்களிலிருந்து, நீங்கள் திருப்பித் தர வேண்டிய ஒன்று \nபூஜ்ஜியத்திலிருந்து மிகத் தொலைவில் உள்ளது. எடுத்துக்காட்டாக, அருகிலுள்ள முழு எண் (\"14.5\") இருக்க வேண்டும். \n15 ஐத் திருப்பி, அருகிலுள்ள முழு எண் (\"-14.5\")-15 ஐத் திருப்பித் தர வேண்டும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/43", "entry_point": "make_a_pile", "test": "\n\narg00 = 3\nx0 = make_a_pile(arg00)\nv0 = [3, 5, 7]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 4\nx1 = make_a_pile(arg10)\nv1 = [4, 6, 8, 10]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = make_a_pile(arg20)\nv2 = [5, 7, 9, 11, 13]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 6\nx3 = make_a_pile(arg30)\nv3 = [6, 8, 10, 12, 14, 16]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 8\nx4 = make_a_pile(arg40)\nv4 = [8, 10, 12, 14, 16, 18, 20, 22]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலைகளின் கற்களின் குவியலை உருவாக்க வேண்டும். \nமுதல் மட்டத்தில் n கற்கள் உள்ளன. \nஅடுத்த கட்டத்தில் உள்ள கற்களின் எண்ணிக்கை பின்வருமாறுஃ \n- n ஒற்றைப்படை என்றால் அடுத்த ஒற்றைப்படை எண். \n- n சமமாக இருந்தால் அடுத்த சம எண். \nஒரு பட்டியலில் உள்ள ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் திருப்பித் தரவும், அங்கு குறியீட்டில் உள்ள உறுப்பு \ni என்பது மட்டத்தில் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது (i + 1). \n\nஉதாரணங்கள்ஃ \n>>> ஒரு குவியலை உருவாக்குங்கள் (3) \n[3,5,7]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/44", "entry_point": "words_string", "test": "\n\narg00 = \"Hi, my name is John\"\nx0 = words_string(arg00)\nv0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"One, two, three, four, five, six\"\nx1 = words_string(arg10)\nv1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"Hi, my name\"\nx2 = words_string(arg20)\nv2 = [\"Hi\", \"my\", \"name\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"One,, two, three, four, five, six,\"\nx3 = words_string(arg30)\nv3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"\"\nx4 = words_string(arg40)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"ahmed     , gamal\"\nx5 = words_string(arg50)\nv5 = [\"ahmed\", \"gamal\"]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட சொற்களின் சரம் உங்களுக்கு வழங்கப்படும். உங்கள் பணி \nசரத்தை வார்த்தைகளாகப் பிரிக்கவும், சொற்களின் வரிசையைத் திருப்பவும். \n\nஉதாரணத்திற்குஃ \nசொற்கள் _ சரம் (\"ஹாய், என் பெயர் ஜான்\") = = [\"ஹாய்\", \"என்\", \"பெயர்\", \"\", ஜான் \"] \nசொற்கள் _ சரம் (\"ஒன்று, இரண்டு, மூன்று, நான்கு, ஐந்து, ஆறு\") = = [\"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\"]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/45", "entry_point": "choose_num", "test": "\n\narg00 = 12\narg01 = 15\nx0 = choose_num(arg00, arg01)\nv0 = 14\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 13\narg11 = 12\nx1 = choose_num(arg10, arg11)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 33\narg21 = 12354\nx2 = choose_num(arg20, arg21)\nv2 = 12354\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5234\narg31 = 5233\nx3 = choose_num(arg30, arg31)\nv3 = -1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 6\narg41 = 29\nx4 = choose_num(arg40, arg41)\nv4 = 28\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 27\narg51 = 10\nx5 = choose_num(arg50, arg51)\nv5 = -1\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 7\narg61 = 7\nx6 = choose_num(arg60, arg61)\nv6 = -1\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 546\narg71 = 546\nx7 = choose_num(arg70, arg71)\nv7 = 546\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "இந்த சார்பு x மற்றும் y என்ற இரண்டு நேர்மறை எண்களை எடுத்து, \n[x, y] வரம்பில் உள்ள மிகப் பெரிய இரட்டை முழு எண். \nஅத்தகைய எண் இல்லை, பின்னர் செயல்பாடு-1 ஐத் திருப்ப வேண்டும். \n\nஉதாரணத்திற்குஃ \nதேர்வு செய்க (12,15) = 14 \nதேர்வு செய்க (13,12) =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/46", "entry_point": "rounded_avg", "test": "\n\narg00 = 1\narg01 = 5\nx0 = rounded_avg(arg00, arg01)\nv0 = \"0b11\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 7\narg11 = 13\nx1 = rounded_avg(arg10, arg11)\nv1 = \"0b1010\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 964\narg21 = 977\nx2 = rounded_avg(arg20, arg21)\nv2 = \"0b1111001010\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 996\narg31 = 997\nx3 = rounded_avg(arg30, arg31)\nv3 = \"0b1111100100\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 560\narg41 = 851\nx4 = rounded_avg(arg40, arg41)\nv4 = \"0b1011000010\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 185\narg51 = 546\nx5 = rounded_avg(arg50, arg51)\nv5 = \"0b101101110\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 362\narg61 = 496\nx6 = rounded_avg(arg60, arg61)\nv6 = \"0b110101101\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 350\narg71 = 902\nx7 = rounded_avg(arg70, arg71)\nv7 = \"0b1001110010\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 197\narg81 = 233\nx8 = rounded_avg(arg80, arg81)\nv8 = \"0b11010111\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 7\narg91 = 5\nx9 = rounded_avg(arg90, arg91)\nv9 = -1\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 5\narg101 = 1\nx10 = rounded_avg(arg100, arg101)\nv10 = -1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 5\narg111 = 5\nx11 = rounded_avg(arg110, arg111)\nv11 = \"0b101\"\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\n", "description": "உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m வழங்கப்படுகின்றன, மேலும் உங்கள் பணி கணக்கிடுவதாகும் \nn முதல் m வரையிலான முழு எண்களின் சராசரி (n மற்றும் m உட்பட). \nஅருகிலுள்ள முழு எண்ணுக்கு பதிலை வட்டமிட்டு அதை பைனரியாக மாற்றவும். \nn என்பது m ஐ விட அதிகமாக இருந்தால்,-1 ஐத் திருப்பித் தரவும். \nஉதாரணம்ஃ \nவட்டமான _ avg (1,5) => \"0b11\" \nவட்டமான (7,5) =>-1 \nவட்டமான _ அவ்ஜி (10,20) => \"0பி1111\" \nவட்டமான _ avg (20,33) => \"0b11010\"", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/47", "entry_point": "f", "test": "\n\narg00 = 5\nx0 = f(arg00)\nv0 = [1, 2, 6, 24, 15]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 7\nx1 = f(arg10)\nv1 = [1, 2, 6, 24, 15, 720, 28]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 1\nx2 = f(arg20)\nv2 = [1]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 3\nx3 = f(arg30)\nv3 = [1, 2, 6]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "n ஐ ஒரு அளவுருவாக எடுக்கும் f செயல்பாட்டை செயல்படுத்தவும், \nமற்றும் அளவு n இன் பட்டியலைத் திருப்பித் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணியாக இருந்தால் i சமமாக இருந்தால் \nஅல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை. \nநான் 1 இல் தொடங்குகிறேன். \ni இன் காரணி என்பது 1 முதல் i (1 * 2 *... * i) வரையிலான எண்களின் பெருக்கமாகும். \nஉதாரணம்ஃ \nf (5) = = [1,2,6,24,15]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/48", "entry_point": "even_odd_palindrome", "test": "\n\narg00 = 123\nx0 = even_odd_palindrome(arg00)\nv0 = [8, 13]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 12\nx1 = even_odd_palindrome(arg10)\nv1 = [4, 6]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\nx2 = even_odd_palindrome(arg20)\nv2 = [1, 2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 63\nx3 = even_odd_palindrome(arg30)\nv3 = [6, 8]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 25\nx4 = even_odd_palindrome(arg40)\nv4 = [5, 6]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 19\nx5 = even_odd_palindrome(arg50)\nv5 = [4, 6]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 9\nx6 = even_odd_palindrome(arg60)\nv6 = [4, 5]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 1\nx7 = even_odd_palindrome(arg70)\nv7 = [0, 1]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், சம மற்றும் ஒற்றைப்படை எண்ணிக்கையைக் கொண்ட ஒரு டுபிலைத் திருப்பவும் \n(1, n) வரம்பிற்குள் வரும் முழு எண் பாலிண்ட்ரோம்கள் உட்பட. \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ 3 \nவெளியீடுஃ (1,2) \nவிளக்கம்ஃ \nமுழு எண் பாலிண்ட்ரோம் 1,2,3. அவற்றில் ஒன்று சமம், அவற்றில் இரண்டு ஒற்றைப்படை. \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ 12 \nவெளியீடுஃ (4,6) \nவிளக்கம்ஃ \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவற்றில் நான்கு சமமானவை, அவற்றில் 6 ஒற்றைப்படை. \n\nகுறிப்புஃ \n1. 1 <= n <= 10 3 \n2. திரும்பிய டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு எண் பாலிண்ட்ரோம்களின் எண்ணிக்கையைக் கொண்டுள்ளது.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/49", "entry_point": "move_one_ball", "test": "\n\narg00 = [3, 4, 5, 1, 2]\nx0 = move_one_ball(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [3, 5, 10, 1, 2]\nx1 = move_one_ball(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [4, 3, 1, 2]\nx2 = move_one_ball(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [3, 5, 4, 1, 2]\nx3 = move_one_ball(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = []\nx4 = move_one_ball(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "நம்மிடம் n முழு எண்களின் வரிசை'arr'உள்ளது arr [1], arr [2],..., arr [N]. \nவரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். என்பதைத் தீர்மானிப்பதே உங்கள் பணி \nசெயல்பாட்டின் மூலம் ஒரு வரிசையை குறைக்காத வரிசையில் வரிசைப்படுத்த முடியும் \nகொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ \nஎத்தனை முறை வேண்டுமானாலும் சரியான ஷிப்ட் செயல்பாட்டைச் செய்ய நீங்கள் அனுமதிக்கப்படுகிறீர்கள். \n\nஒரு வலது ஷிப்ட் செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் ஒன்றால் மாற்றுவதாகும். \nசரியான திசையில் நிலை. வரிசையின் கடைசி உறுப்பு நகர்த்தப்படும் \nவரிசையில் தொடக்க நிலை அதாவது 0 வது குறியீடு. \n\nமேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் \nபின்னர் ட்ரு இல்லையெனில் ஃபால்ஸ் என்று திருப்பிக் கொடுங்கள். \nகொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், சரி என்று திருப்பி விடுங்கள். \n\nகுறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பது உறுதி செய்யப்படுகிறது. \n\nஉதாரணத்திற்குஃ \n\nமூவ் ஒன் பந்து ([3,4,5,1,2]) = => உண்மை \nவிளக்கம்ஃ 2 வலது ஷிப்ட் செயல்பாடுகளில் செயல்படுவதன் மூலம், குறைக்கப்படாத வரிசை முடியும் \nகொடுக்கப்பட்ட வரிசைக்கு அடைய வேண்டும். \nமூவ் ஒன் பந்து ([3,5,4,1,2]) = => பொய் \nவிளக்கம்ஃ கொடுக்கப்பட்ட ஆர்டருக்கு குறைக்கப்படாத ஆர்டரைப் பெற முடியாது \nஎந்த எண்ணிக்கையிலான சரியான ஷிப்ட் செயல்பாடுகளைச் செய்வதன் மூலம் வரிசை.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/50", "entry_point": "exchange", "test": "\n\narg00 = [1, 2, 3, 4]\narg01 = [1, 2, 3, 4]\nx0 = exchange(arg00, arg01)\nv0 = \"YES\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 3, 4]\narg11 = [1, 5, 3, 4]\nx1 = exchange(arg10, arg11)\nv1 = \"NO\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 2, 3, 4]\narg21 = [2, 1, 4, 3]\nx2 = exchange(arg20, arg21)\nv2 = \"YES\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [5, 7, 3]\narg31 = [2, 6, 4]\nx3 = exchange(arg30, arg31)\nv3 = \"YES\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [5, 7, 3]\narg41 = [2, 6, 3]\nx4 = exchange(arg40, arg41)\nv4 = \"NO\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [3, 2, 6, 1, 8, 9]\narg51 = [3, 5, 5, 1, 1, 1]\nx5 = exchange(arg50, arg51)\nv5 = \"NO\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [100, 200]\narg61 = [200, 200]\nx6 = exchange(arg60, arg61)\nv6 = \"YES\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "இந்த சிக்கலில், எண்களின் இரண்டு பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை நீங்கள் செயல்படுத்துவீர்கள், \nமற்றும் கூறுகளின் பரிமாற்றத்தை செய்ய முடியுமா என்பதை தீர்மானிக்கிறது \nஅவர்களிடையே lst1 ஐ இரட்டை எண்களின் பட்டியலை மட்டுமே உருவாக்க வேண்டும். \nlst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. \nசெய்ய lst1 மற்றும் lst2 க்கு இடையில் கூறுகளை பரிமாறிக்கொள்ள முடிந்தால் \nlst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"ஆம்\" என்று திருப்பித் தரவும். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஉதாரணத்திற்குஃ \nபரிமாற்றம் ([1,2,3,4], [1,2,3,4]) => \"ஆம்\" \nபரிமாற்றம் ([1,2,3,4], [1,5,3,4]) => \"இல்லை\" \nஉள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/51", "entry_point": "reverse_delete", "test": "\n\narg00 = \"abcde\"\narg01 = \"ae\"\nx0 = reverse_delete(arg00, arg01)\nv0 = [\"bcd\", false]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"abcdef\"\narg11 = \"b\"\nx1 = reverse_delete(arg10, arg11)\nv1 = [\"acdef\", false]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"abcdedcba\"\narg21 = \"ab\"\nx2 = reverse_delete(arg20, arg21)\nv2 = [\"cdedc\", true]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"dwik\"\narg31 = \"w\"\nx3 = reverse_delete(arg30, arg31)\nv3 = [\"dik\", false]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"a\"\narg41 = \"a\"\nx4 = reverse_delete(arg40, arg41)\nv4 = [\"\", true]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"abcdedcba\"\narg51 = \"\"\nx5 = reverse_delete(arg50, arg51)\nv5 = [\"abcdedcba\", true]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"abcdedcba\"\narg61 = \"v\"\nx6 = reverse_delete(arg60, arg61)\nv6 = [\"abcdedcba\", true]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"vabba\"\narg71 = \"v\"\nx7 = reverse_delete(arg70, arg71)\nv7 = [\"abba\", true]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"mamma\"\narg81 = \"mia\"\nx8 = reverse_delete(arg80, arg81)\nv8 = [\"\", true]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "பணி \nஎங்களுக்கு இரண்டு சரங்கள் s மற்றும் c வழங்கப்பட்டுள்ளன, c இல் உள்ள எந்த எழுத்துக்கும் சமமான s இல் உள்ள அனைத்து எழுத்துக்களையும் நீங்கள் நீக்க வேண்டும். \nபின்னர் ரிசல்ட் ஸ்ட்ரிங் பாலிண்ட்ரோமா என்பதைச் சரிபார்க்கவும். \nஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. \nகாசோலைக்கு முடிவு சரம் மற்றும் உண்மை/தவறு ஆகியவற்றைக் கொண்ட ஒரு டப்பிளை நீங்கள் திருப்பித் தர வேண்டும். \nஉதாரணம் \nஎஸ் = \"ஏபிசிடிஇ\", சி = \"ஏஇ\" க்கு, முடிவு ('பிசிடி', தவறானது) ஆக இருக்க வேண்டும். \ns = \"abcdef\", c = \"b\" க்கு முடிவு ('acdef', பொய்) ஆக இருக்க வேண்டும். \ns = \"abcdedcba\", c = \"ab\" க்கு, முடிவு ('cdedc', உண்மை) ஆக இருக்க வேண்டும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/52", "entry_point": "max_fill", "test": "\n\narg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\narg01 = 1\nx0 = max_fill(arg00, arg01)\nv0 = 6\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\narg11 = 2\nx1 = max_fill(arg10, arg11)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [[0, 0, 0], [0, 0, 0]]\narg21 = 5\nx2 = max_fill(arg20, arg21)\nv2 = 0\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [[1, 1, 1, 1], [1, 1, 1, 1]]\narg31 = 2\nx3 = max_fill(arg30, arg31)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [[1, 1, 1, 1], [1, 1, 1, 1]]\narg41 = 9\nx4 = max_fill(arg40, arg41)\nv4 = 2\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "உங்களுக்கு ஒரு செவ்வக கிணறு கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றைக் குறிக்கிறது. \nஒரு வரிசையில் உள்ள ஒவ்வொன்றும் ஒரு ஒற்றை அலகு தண்ணீரைக் குறிக்கிறது. \nஒவ்வொரு கிணற்றிலும் அதனுடன் தொடர்புடைய ஒரு வாளி உள்ளது, அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்க இது பயன்படுத்தப்படலாம். \nமேலும் அனைத்து வாளிகளும் ஒரே மாதிரியான திறனைக் கொண்டுள்ளன. \nகிணறுகளை காலி செய்ய வாளிகளைப் பயன்படுத்துவதே உங்கள் பணி. \nநீங்கள் வாளிகளைக் குறைக்க வேண்டிய எண்ணிக்கையை உள்ளிடவும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1]] \nவாளி திறன் (_ c): 1 \nவெளியீடுஃ 6 \n\nஉதாரணம் 2: \nஉள்ளீடுஃ \nகட்டம்ஃ [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0,1,1, 1] \nவாளி திறன் (_ c): 2 \nவெளியீடுஃ 5 \n\nஉதாரணம் 3: \nஉள்ளீடுஃ \nகட்டம்ஃ [0,0,0], [0,0,0] \nவாளி திறன்ஃ 5 \nவெளியீடுஃ 0 \n\nகட்டுப்பாடுகள்ஃ \n* அனைத்து கிணறுகளுக்கும் ஒரே நீளம் இருக்கும். \n* 1 <= grid.length <= 10 ^ 2 \n* 1 <= கட்டம் [:, 1]. நீளம் <= 10 ^ 2 \nகட்டம் [i] [j]-> 0 | 1 \n* 1 <= திறன் <= 10", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/53", "entry_point": "select_words", "test": "\n\narg00 = \"Mary had a little lamb\"\narg01 = 4\nx0 = select_words(arg00, arg01)\nv0 = [\"little\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Mary had a little lamb\"\narg11 = 3\nx1 = select_words(arg10, arg11)\nv1 = [\"Mary\", \"lamb\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"simple white space\"\narg21 = 2\nx2 = select_words(arg20, arg21)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Hello world\"\narg31 = 4\nx3 = select_words(arg30, arg31)\nv3 = [\"world\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Uncle sam\"\narg41 = 3\nx4 = select_words(arg40, arg41)\nv4 = [\"Uncle\"]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"\"\narg51 = 4\nx5 = select_words(arg50, arg51)\nv5 = []\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"a b c d e f\"\narg61 = 1\nx6 = select_words(arg60, arg61)\nv6 = [\"b\", \"c\", \"d\", \"f\"]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிக்கப்பட்டுள்ளீர்கள் \nசரம் s இலிருந்து அனைத்து சொற்களின் பட்டியலையும் சரியாக உள்ளடக்கிய ஒரு செயல்பாடு \nn மெய், வரிசையில் இந்த சொற்கள் சரம் s இல் தோன்றும். \nசரம் s காலியாக இருந்தால், செயல்பாடு ஒரு வெற்று பட்டியலைத் திருப்பித் தர வேண்டும். \nகுறிப்புஃ உள்ளீட்டு சரத்தில் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே உள்ளன என்று நீங்கள் கருதலாம். \nஉதாரணங்கள்ஃ \nதேர்ந்தெடுக்கும் சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) = => [\"சிறிய\"] \nதேர்ந்தெடுக்கப்பட்ட சொற்கள் (\"மேரிக்கு ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) = => [\"மேரி\", \"ஆட்டுக்குட்டி\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"எளிய வெள்ளை இடம்\", 2) = => [] \nதேர்ந்தெடுக்கும் சொற்கள் (\"ஹலோ வேர்ல்ட்\", 4) = => [\"வேர்ல்ட்\"] \nசொற்களைத் தேர்ந்தெடுக்கவும் (\"மாமா சாம்\", 3) = => [\"மாமா\"]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/54", "entry_point": "maximum", "test": "\n\narg00 = [-3, -4, 5]\narg01 = 3\nx0 = maximum(arg00, arg01)\nv0 = [-4, -3, 5]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [4, -4, 4]\narg11 = 2\nx1 = maximum(arg10, arg11)\nv1 = [4, 4]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-3, 2, 1, 2, -1, -2, 1]\narg21 = 1\nx2 = maximum(arg20, arg21)\nv2 = [2]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [123, -123, 20, 0, 1, 2, -3]\narg31 = 3\nx3 = maximum(arg30, arg31)\nv3 = [2, 20, 123]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-123, 20, 0, 1, 2, -3]\narg41 = 4\nx4 = maximum(arg40, arg41)\nv4 = [0, 1, 2, 20]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [5, 15, 0, 3, -13, -8, 0]\narg51 = 7\nx5 = maximum(arg50, arg51)\nv5 = [-13, -8, 0, 0, 3, 5, 15]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-1, 0, 2, 5, 3, -10]\narg61 = 2\nx6 = maximum(arg60, arg61)\nv6 = [3, 5]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [1, 0, 5, -7]\narg71 = 1\nx7 = maximum(arg70, arg71)\nv7 = [5]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [4, -4]\narg81 = 2\nx8 = maximum(arg80, arg81)\nv8 = [-4, 4]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [-10, 10]\narg91 = 2\nx9 = maximum(arg90, arg91)\nv9 = [-10, 10]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [1, 2, 3, -23, 243, -400, 0]\narg101 = 0\nx10 = maximum(arg100, arg101)\nv10 = []\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "முழு எண்களின் வரிசை arr மற்றும் நேர்மறை முழு எண் k கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பித் தரவும். \narr இல் அதிகபட்ச k எண்களுடன் k நீளம். \n\nஉதாரணம் 1: \n\nஉள்ளீடுஃ arr = [-3,-4,5], k = 3 \nவெளியீடுஃ [-4,-3,5] \n\nஉதாரணம் 2: \n\nஉள்ளீடுஃ arr = [4,-4,4], k = 2 \nவெளியீடுஃ [4,4] \n\nஉதாரணம் 3: \n\nஉள்ளீடுஃ arr = [-3,2,1,2,-1,2,1], k = 1 \nவெளியீடுஃ [2] \n\nகுறிப்புஃ \n1. வரிசையின் நீளம் [1000] வரம்பில் இருக்கும். \n2. வரிசையில் உள்ள உறுப்புகள் [-1000] வரம்பில் இருக்கும். \n3. 0 <= k <= லென் (arr)", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/55", "entry_point": "add_elements", "test": "\n\narg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99]\narg01 = 3\nx0 = add_elements(arg00, arg01)\nv0 = -4\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [111, 121, 3, 4000, 5, 6]\narg11 = 2\nx1 = add_elements(arg10, arg11)\nv1 = 0\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9]\narg21 = 4\nx2 = add_elements(arg20, arg21)\nv2 = 125\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\narg31 = 4\nx3 = add_elements(arg30, arg31)\nv3 = 24\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1]\narg41 = 1\nx4 = add_elements(arg40, arg41)\nv4 = 1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்பவும் \narr இன் முதல் k உறுப்புகளிலிருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் கூட்டுத்தொகை. \n\nஉதாரணம்ஃ \n\nஉள்ளீடுஃ arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nவெளியீடுஃ 24 #21 + 3 இன் கூட்டுத்தொகை \n\nகட்டுப்பாடுகள்ஃ \n1. 1 <= லென் (arr) <= 100 \n2. 1 <= k <= லென் (arr)", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/56", "entry_point": "intersection", "test": "\n\narg00 = [1, 2]\narg01 = [2, 3]\nx0 = intersection(arg00, arg01)\nv0 = \"NO\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [-1, 1]\narg11 = [0, 4]\nx1 = intersection(arg10, arg11)\nv1 = \"NO\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [-3, -1]\narg21 = [-5, 5]\nx2 = intersection(arg20, arg21)\nv2 = \"YES\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [-2, 2]\narg31 = [-4, 0]\nx3 = intersection(arg30, arg31)\nv3 = \"YES\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-11, 2]\narg41 = [-1, -1]\nx4 = intersection(arg40, arg41)\nv4 = \"NO\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1, 2]\narg51 = [3, 5]\nx5 = intersection(arg50, arg51)\nv5 = \"NO\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [1, 2]\narg61 = [1, 2]\nx6 = intersection(arg60, arg61)\nv6 = \"NO\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-2, -2]\narg71 = [-3, -2]\nx7 = intersection(arg70, arg71)\nv7 = \"NO\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "உங்களுக்கு இரண்டு இடைவெளிகள் வழங்கப்படுகின்றன, \nஇங்கு ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்களாகும். எடுத்துக்காட்டாக, இடைவெளி = (தொடக்கம், முடிவு) = (1,2). \nகொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டுள்ளன, அதாவது இடைவெளி (தொடக்கம், முடிவு) \nஇதில் தொடக்கமும் முடிவும் அடங்கும். \nகொடுக்கப்பட்ட ஒவ்வொரு இடைவெளியிலும், அதன் தொடக்கம் அதன் முடிவை விட குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது. \nஇந்த இரண்டின் குறுக்குவெட்டின் நீளம் எவ்வளவு என்பதைத் தீர்மானிப்பதே உங்கள் பணி. \nஇடைவெளிகள் ஒரு பகா எண். \nஎடுத்துக்காட்டாக, (1,3), (2,4) இடைவெளிகளின் குறுக்குவெட்டு (2,3) ஆகும். \nஅதன் நீளம் 1, இது ஒரு பகா எண் அல்ல. \nகுறுக்குவெட்டின் நீளம் ஒரு பகா எண்ணாக இருந்தால், \"ஆம்\" என்று திருப்பிக் கொடுங்கள். \nஇல்லையெனில், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \nஇரண்டு இடைவெளிகளும் வெட்டவில்லை என்றால், \"இல்லை\" என்று திருப்பிக் கொடுங்கள். \n\n[உள்ளீடு/வெளியீடு] மாதிரிகள்ஃ \nகுறுக்குவெட்டு ((1,2,3)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-1,1), (0,4)) = => \"இல்லை\" \nகுறுக்குவெட்டு ((-3,-1), (-5,5)) = => \"ஆம்\"", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/57", "entry_point": "tri", "test": "\n\narg00 = 3\nx0 = tri(arg00)\nv0 = [1, 3, 2.0, 8.0]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 4\nx1 = tri(arg10)\nv1 = [1, 3, 2.0, 8.0, 3.0]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 5\nx2 = tri(arg20)\nv2 = [1, 3, 2.0, 8.0, 3.0, 15.0]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 6\nx3 = tri(arg30)\nv3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\nx4 = tri(arg40)\nv4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 8\nx5 = tri(arg50)\nv5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 9\nx6 = tri(arg60)\nv6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 20\nx7 = tri(arg70)\nv7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 0\nx8 = tri(arg80)\nv8 = [1]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1\nx9 = tri(arg90)\nv9 = [1, 3]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "எல்லோருக்கும் ஃபிபோனாச்சி வரிசை தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது \nகடந்த இரண்டு நூற்றாண்டுகள். இருப்பினும், மக்களுக்குத் தெரியாதது டிரிபோனாச்சி வரிசை. \nடிரிபோனாச்சி வரிசை மீண்டும் மீண்டும் வரையறுக்கப்படுகிறதுஃ \nமுக்கோணம் (1) = 3 \nமுக்கோணம் (n) = 1 + n/2, n சமமாக இருந்தால். \nமுக்கோணம் (n) = முக்கோணம் (n-1) + முக்கோணம் (n-2) + முக்கோணம் (n + 1), n ஒற்றைப்படை என்றால். \nஉதாரணத்திற்குஃ \nமுக்கோணம் (2) = 1 + (2/2) = 2 \nமுக்கோணம் (4) = 3 \nமுக்கோணம் (3) = முக்கோணம் (2) + முக்கோணம் (1) + முக்கோணம் (4) \n= 2 + 3 + 3 = 8 \nஉங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n வழங்கப்படுகிறது, நீங்கள் ஒரு பட்டியலைத் திருப்பித் தர வேண்டும் \nடிரிபோனாச்சி வரிசையின் முதல் n + 1 எண்கள். \nஉதாரணங்கள்ஃ \nமுக்கோணம் (3) = [1,3,2,8]", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/58", "entry_point": "digits", "test": "\n\narg00 = 5\nx0 = digits(arg00)\nv0 = 5\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 54\nx1 = digits(arg10)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 120\nx2 = digits(arg20)\nv2 = 1\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 5014\nx3 = digits(arg30)\nv3 = 5\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 98765\nx4 = digits(arg40)\nv4 = 315\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 5576543\nx5 = digits(arg50)\nv5 = 2625\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 2468\nx6 = digits(arg60)\nv6 = 0\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றைப்படை இலக்கங்களின் பெருக்கல் திரும்பும். \nஅனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பவும். \nஉதாரணத்திற்குஃ \nஇலக்கங்கள் (1) = = 1 \nஇலக்கங்கள் (4) = = 0 \nஇலக்கங்கள் (235) = = 15", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/59", "entry_point": "is_nested", "test": "\n\narg00 = \"[[]]\"\nx0 = is_nested(arg00)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"[]]]]]]][[[[[]\"\nx1 = is_nested(arg10)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"[][]\"\nx2 = is_nested(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"[]\"\nx3 = is_nested(arg30)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"[[[[]]]]\"\nx4 = is_nested(arg40)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"[]]]]]]]]]]\"\nx5 = is_nested(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"[][][[]]\"\nx6 = is_nested(arg60)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"[[]\"\nx7 = is_nested(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"[]]\"\nx8 = is_nested(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"[[]][[\"\nx9 = is_nested(arg90)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"[[][]]\"\nx10 = is_nested(arg100)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"\"\nx11 = is_nested(arg110)\nv11 = false\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"[[[[[[[[\"\nx12 = is_nested(arg120)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = \"]]]]]]]]\"\nx13 = is_nested(arg130)\nv13 = false\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\n", "description": "சதுர அடைப்புகளை மட்டுமே கொண்ட ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். \nஅடைப்புக்குறிகளின் செல்லுபடியாகும் பின்தொடர்தல் இருந்தால் மட்டுமே செயல்பாடு உண்மை என்று திரும்ப வேண்டும் \nஅங்கு அடுத்தடுத்த குறைந்தபட்சம் ஒரு அடைப்புக்குறிப்பு கூடு கட்டப்பட்டுள்ளது. \n\nnested ('[[]]') என்பது உண்மை \nis _ nested ('[]]]]] [[[[]') பொய் \nis _ nested ('[] []') பொய் \nis _ nested ('[]') என்பது தவறானது \nnested ('[[] []]') என்பது உண்மை \nnested ('[[]] [[') என்பது உண்மை", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/60", "entry_point": "sum_squares", "test": "\n\narg00 = [1, 2, 3]\nx0 = sum_squares(arg00)\nv0 = 14\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1.0, 2, 3]\nx1 = sum_squares(arg10)\nv1 = 14\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 5, 7]\nx2 = sum_squares(arg20)\nv2 = 84\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1.4, 4.2, 0]\nx3 = sum_squares(arg30)\nv3 = 29\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-2.4, 1, 1]\nx4 = sum_squares(arg40)\nv4 = 6\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [100, 1, 15, 2]\nx5 = sum_squares(arg50)\nv5 = 10230\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [10000, 10000]\nx6 = sum_squares(arg60)\nv6 = 200000000\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-1.4, 4.6, 6.3]\nx7 = sum_squares(arg70)\nv7 = 75\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-1.4, 17.9, 18.9, 19.9]\nx8 = sum_squares(arg80)\nv8 = 1086\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [0]\nx9 = sum_squares(arg90)\nv9 = 0\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [-1]\nx10 = sum_squares(arg100)\nv10 = 1\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = [-1, 1, 0]\nx11 = sum_squares(arg110)\nv11 = 2\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\n", "description": "உங்களுக்கு எண்களின் பட்டியல் வழங்கப்படுகிறது. \nகொடுக்கப்பட்ட பட்டியலில் உள்ள வர்க்க எண்களின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும், \nபட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் முதலில் மேல் உள்ளீடு (உச்சவரம்பு) க்கு சுற்றவும். \nஉதாரணங்கள்ஃ \nlst = [1,2,3] க்கு வெளியீடு 14 ஆக இருக்க வேண்டும். \nlst = [1,4,9] க்கு வெளியீடு 98 ஆக இருக்க வேண்டும். \nlst = [1,3,5, 7] க்கு வெளியீடு 84 ஆக இருக்க வேண்டும். \nlst = [1.4,4.2, 0] க்கு வெளியீடு 29 ஆக இருக்க வேண்டும். \nlst = [-2.4,1, 1] க்கு வெளியீடு 6 ஆக இருக்க வேண்டும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/61", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\narg00 = \"apple\"\nx0 = check_if_last_char_is_a_letter(arg00)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"apple pi e\"\nx1 = check_if_last_char_is_a_letter(arg10)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"eeeee\"\nx2 = check_if_last_char_is_a_letter(arg20)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"A\"\nx3 = check_if_last_char_is_a_letter(arg30)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Pumpkin pie \"\nx4 = check_if_last_char_is_a_letter(arg40)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"Pumpkin pie 1\"\nx5 = check_if_last_char_is_a_letter(arg50)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"\"\nx6 = check_if_last_char_is_a_letter(arg60)\nv6 = false\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"eeeee e \"\nx7 = check_if_last_char_is_a_letter(arg70)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"apple pie\"\nx8 = check_if_last_char_is_a_letter(arg80)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"apple pi e \"\nx9 = check_if_last_char_is_a_letter(arg90)\nv9 = false\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "கடைசி எழுத்து இருந்தால் சரி என்று திரும்பும் செயல்பாட்டை உருவாக்கவும் \nகொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை \nஒரு வார்த்தையின் ஒரு பகுதி, இல்லையெனில் பொய். \nகுறிப்புஃ \"சொல்\" என்பது இடத்தால் பிரிக்கப்பட்ட எழுத்துக்களின் தொகுப்பாகும். \n\nஉதாரணங்கள்ஃ \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ ஒரு _ எழுத்து (\"ஆப்பிள் பை\") \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") சரி \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"ஆப்பிள் பை இ\") பொய் \nசரிபார்க்கவும் _ என்றால் _ கடைசி _ சார் _ என்பது _ a _ எழுத்து (\"\") பொய்", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/62", "entry_point": "can_arrange", "test": "\n\narg00 = [1, 2, 4, 3, 5]\nx0 = can_arrange(arg00)\nv0 = 3\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1, 2, 4, 5]\nx1 = can_arrange(arg10)\nv1 = -1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10]\nx2 = can_arrange(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 8, 5, 7, 3]\nx3 = can_arrange(arg30)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = []\nx4 = can_arrange(arg40)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\n", "description": "ஒரு தனிமத்தின் மிகப்பெரிய குறியீட்டைத் தரும் செயல்பாட்டை உருவாக்கவும் \nஅது உடனடியாக அதற்கு முந்தைய உறுப்பை விட பெரியதாகவோ அல்லது சமமாகவோ இல்லை. \nஅத்தகைய உறுப்பு எதுவும் இல்லை, பின்னர் திரும்பும்-1. கொடுக்கப்பட்ட வரிசை கொண்டிருக்காது \nஇரட்டை மதிப்புகள். \n\nஉதாரணங்கள்ஃ \ncan _ அரங்கேற்றலாம் ([1,2,4, 3,5]) = 3 \nசெய்ய முடியும் ([1,2,3]) =-1", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/63", "entry_point": "largest_smallest_integers", "test": "\n\narg00 = [2, 4, 1, 3, 5, 7]\nx0 = largest_smallest_integers(arg00)\nv0 = [nil, 1]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [2, 4, 1, 3, 5, 7, 0]\nx1 = largest_smallest_integers(arg10)\nv1 = [nil, 1]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [1, 3, 2, 4, 5, 6, -2]\nx2 = largest_smallest_integers(arg20)\nv2 = [-2, 1]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [4, 5, 3, 6, 2, 7, -7]\nx3 = largest_smallest_integers(arg30)\nv3 = [-7, 2]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [7, 3, 8, 4, 9, 2, 5, -9]\nx4 = largest_smallest_integers(arg40)\nv4 = [-9, 2]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = []\nx5 = largest_smallest_integers(arg50)\nv5 = [nil, nil]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [0]\nx6 = largest_smallest_integers(arg60)\nv6 = [nil, nil]\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = [-1, -3, -5, -6]\nx7 = largest_smallest_integers(arg70)\nv7 = [-1, nil]\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = [-1, -3, -5, -6, 0]\nx8 = largest_smallest_integers(arg80)\nv8 = [-1, nil]\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = [-6, -4, -4, -3, 1]\nx9 = largest_smallest_integers(arg90)\nv9 = [-3, 1]\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = [-6, -4, -4, -3, -100, 1]\nx10 = largest_smallest_integers(arg100)\nv10 = [-3, 1]\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "ஒரு டுபில் (a, b) ஐத் தரும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு'a'என்பது \nஎதிர்மறை முழு எண்களில் மிகப் பெரியது, மற்றும்'b'மிகச்சிறியது \nஒரு பட்டியலில் நேர்மறை முழு எண்கள். \nஎதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை இல்லை என்று திருப்பித் தரவும். \n\nஉதாரணங்கள்ஃ \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([2,4,1,3,5,7]) = = (எதுவும் இல்லை, 1) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([]) = = (எதுவும் இல்லை, எதுவும் இல்லை) \nமிகப்பெரிய _ மிகச்சிறிய _ முழு எண்கள் ([0]) = = (எதுவும் இல்லை, எதுவும் இல்லை)", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/64", "entry_point": "special_factorial", "test": "\n\narg00 = 4\nx0 = special_factorial(arg00)\nv0 = 288\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 5\nx1 = special_factorial(arg10)\nv1 = 34560\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 7\nx2 = special_factorial(arg20)\nv2 = 125411328000\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 1\nx3 = special_factorial(arg30)\nv3 = 1\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறதுஃ \nபிரேசில் _ காரணி (n) = n! * (n-1)! * (n-2)! *... * 1! \nஇங்கு n> 0 \n\nஉதாரணத்திற்குஃ \n>>> சிறப்பு _ காரணி (4) \n288 \n\nசெயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும், மேலும் சிறப்புத் தொகையைத் திருப்பித் தர வேண்டும். \nஇந்த முழு எண்ணின் காரணி.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/65", "entry_point": "words_in_sentence", "test": "\n\narg00 = \"This is a test\"\nx0 = words_in_sentence(arg00)\nv0 = \"is\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"lets go for swimming\"\nx1 = words_in_sentence(arg10)\nv1 = \"go for\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"there is no place available here\"\nx2 = words_in_sentence(arg20)\nv2 = \"there is no place\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Hi I am Hussein\"\nx3 = words_in_sentence(arg30)\nv3 = \"Hi am Hussein\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"go for it\"\nx4 = words_in_sentence(arg40)\nv4 = \"go for it\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"here\"\nx5 = words_in_sentence(arg50)\nv5 = \"\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"here is\"\nx6 = words_in_sentence(arg60)\nv6 = \"is\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "ஒரு வாக்கியத்தைக் குறிக்கும் சரம் உங்களுக்கு வழங்கப்படுகிறது, \nவாக்கியத்தில் ஒரு இடைவெளியால் பிரிக்கப்பட்ட சில சொற்கள் உள்ளன, \nஅசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை நீங்கள் திருப்பித் தர வேண்டும், \nஅதன் நீளம் பகா எண்கள், \nபுதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் வரிசையைப் போலவே இருக்க வேண்டும். \n\nஉதாரணம் 1: \nஉள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" \nவெளியீடுஃ \"உள்ளது\" \n\nஉதாரணம் 2: \nஉள்ளீடுஃ வாக்கியம் = \"நீச்சலுக்கு செல்வோம்\" \nவெளியீடுஃ \"செல்லுங்கள்\" \n\nகட்டுப்பாடுகள்ஃ \n* 1 <= லென் (வாக்கியம்) <= 100 \n* வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/66", "entry_point": "simplify", "test": "\n\narg00 = \"1/5\"\narg01 = \"5/1\"\nx0 = simplify(arg00, arg01)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1/6\"\narg11 = \"2/1\"\nx1 = simplify(arg10, arg11)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"5/1\"\narg21 = \"3/1\"\nx2 = simplify(arg20, arg21)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"7/10\"\narg31 = \"10/2\"\nx3 = simplify(arg30, arg31)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"2/10\"\narg41 = \"50/10\"\nx4 = simplify(arg40, arg41)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"7/2\"\narg51 = \"4/2\"\nx5 = simplify(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"11/6\"\narg61 = \"6/1\"\nx6 = simplify(arg60, arg61)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"2/3\"\narg71 = \"5/2\"\nx7 = simplify(arg70, arg71)\nv7 = false\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"5/2\"\narg81 = \"3/5\"\nx8 = simplify(arg80, arg81)\nv8 = false\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = \"2/4\"\narg91 = \"8/4\"\nx9 = simplify(arg90, arg91)\nv9 = true\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = \"2/4\"\narg101 = \"4/2\"\nx10 = simplify(arg100, arg101)\nv10 = true\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = \"1/5\"\narg111 = \"5/1\"\nx11 = simplify(arg110, arg111)\nv11 = true\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = \"1/5\"\narg121 = \"1/5\"\nx12 = simplify(arg120, arg121)\nv12 = false\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\n", "description": "உங்கள் பணி வெளிப்பாட்டை எளிதாக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவதாகும் \nx * n. x * n ஒரு முழு எண்ணை மதிப்பீடு செய்தால் சரி மற்றும் தவறு என்று செயல்பாடு காட்டும். \nஇல்லையெனில். x மற்றும் n இரண்டும், ஒரு பின்னத்தின் சரம் பிரதிநிதித்துவம் மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, \nஇங்கு எண் மற்றும் வகுத்தல் இரண்டும் நேர்மறை முழு எண்களாகும். \n\nx, மற்றும் n ஆகியவை செல்லுபடியாகும் பின்னங்கள் என்றும், பூஜ்ஜியத்தை வகுப்பாகக் கொண்டிருக்கவில்லை என்றும் நீங்கள் கருதலாம். \n\nஎளிமைப்படுத்தவும் (\"1/5\", \"5/1\") = உண்மை \nஎளிமைப்படுத்துதல் (\"1/6\", \"2/1\") = தவறு \nஎளிமைப்படுத்தவும் (\"7/10\", \"10/2\") = தவறு", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/67", "entry_point": "order_by_points", "test": "\n\narg00 = [1, 11, -1, -11, -12]\nx0 = order_by_points(arg00)\nv0 = [-1, -11, 1, -12, 11]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]\nx1 = order_by_points(arg10)\nv1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = []\nx2 = order_by_points(arg20)\nv2 = []\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [1, -11, -32, 43, 54, -98, 2, -3]\nx3 = order_by_points(arg30)\nv3 = [-3, -32, -98, -11, 1, 2, 43, 54]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nx4 = order_by_points(arg40)\nv4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0, 6, 6, -76, -21, 23, 4]\nx5 = order_by_points(arg50)\nv5 = [-76, -21, 0, 4, 23, 6, 6]\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள் \nஅவற்றின் இலக்கங்களின் கூட்டுத்தொகையின்படி ஏறுவரிசையில். \nகுறிப்புஃ பல உருப்படிகள் அவற்றின் இலக்கங்களின் ஒத்த கூட்டுத்தொகையுடன் இருந்தால், \nஅசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை ஆர்டர் செய்யுங்கள். \n\nஉதாரணத்திற்குஃ \n>> வரிசைப் புள்ளிகள் ([1,11,-1,11,-12]) = = [-1,11,1,-12,11] \n>>> ஆர்டர் _ பை _ பாயிண்ட்ஸ் ([]) = = []", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/68", "entry_point": "specialfilter", "test": "\n\narg00 = [5, -2, 1, -5]\nx0 = specialfilter(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [15, -73, 14, -15]\nx1 = specialfilter(arg10)\nv1 = 1\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [33, -2, -3, 45, 21, 109]\nx2 = specialfilter(arg20)\nv2 = 2\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [43, -12, 93, 125, 121, 109]\nx3 = specialfilter(arg30)\nv3 = 4\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [71, -2, -33, 75, 21, 19]\nx4 = specialfilter(arg40)\nv4 = 3\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [1]\nx5 = specialfilter(arg50)\nv5 = 0\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = []\nx6 = specialfilter(arg60)\nv6 = 0\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "எண்களின் வரிசையை உள்ளீடாகவும் திரும்பவும் எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள் \nவரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 க்கும் அதிகமாக உள்ளது மற்றும் இரண்டும் \nஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1,3,5,7,9). \nஉதாரணத்திற்குஃ \nசிறப்பு வடிகட்டி ([15,-73,14,-15]) => 1 \nசிறப்பு வடிகட்டி ([33,-2,-3,45,21,109]) => 2", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/69", "entry_point": "get_max_triples", "test": "\n\narg00 = 5\nx0 = get_max_triples(arg00)\nv0 = 1\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 6\nx1 = get_max_triples(arg10)\nv1 = 4\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\nx2 = get_max_triples(arg20)\nv2 = 36\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 100\nx3 = get_max_triples(arg30)\nv3 = 53361\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீங்கள் n நீளமுள்ள ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும். \nஒவ்வொரு i க்கும் (1 ≤ i ≤ n), a [i] = i * i-i + 1 இன் மதிப்பு. \ni <j <k என்ற இடத்தின் மூன்று மடங்குகளின் (a [i], a [j], a [k]) எண்ணிக்கையைத் திருப்பித் தரவும். \nமேலும் a [i] + a [j] + a [k] என்பது 3 இன் பெருக்கமாகும். \n\nஉதாரணம்ஃ \nஉள்ளீடுஃ n = 5 \nவெளியீடுஃ 1 \nவிளக்கம்ஃ \na = [1,3,7,13,21] \nஒரே செல்லுபடியாகும் மூன்று (1,7,13) ஆகும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/70", "entry_point": "bf", "test": "\n\narg00 = \"Jupiter\"\narg01 = \"Neptune\"\nx0 = bf(arg00, arg01)\nv0 = [\"Saturn\", \"Uranus\"]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Earth\"\narg11 = \"Mercury\"\nx1 = bf(arg10, arg11)\nv1 = [\"Venus\"]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"Mercury\"\narg21 = \"Uranus\"\nx2 = bf(arg20, arg21)\nv2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"Neptune\"\narg31 = \"Venus\"\nx3 = bf(arg30, arg31)\nv3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"Earth\"\narg41 = \"Earth\"\nx4 = bf(arg40, arg41)\nv4 = []\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"Mars\"\narg51 = \"Earth\"\nx5 = bf(arg50, arg51)\nv5 = []\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"Jupiter\"\narg61 = \"Makemake\"\nx6 = bf(arg60, arg61)\nv6 = []\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளனஃ சூரியனுக்கு மிக நெருக்கமானவை. \nபுதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, \nயுரேனஸ், நெப்டியூன். \nகிரகம் 1 மற்றும் கிரகம் 2 என இரண்டு கிரக பெயர்களை எடுக்கும் ஒரு செயல்பாட்டை எழுதுங்கள். \nசெயல்பாடு அதன் சுற்றுப்பாதைகள் அனைத்து கிரகங்கள் கொண்ட ஒரு tuple திரும்ப வேண்டும் \nகிரகம் 1 இன் சுற்றுப்பாதைக்கும் கிரகம் 2 இன் சுற்றுப்பாதைக்கும் இடையில் அமைந்துள்ளது, வரிசைப்படுத்தப்பட்டுள்ளது \nசூரியனின் அருகாமை. \nகிரகம் 1 அல்லது கிரகம் 2 என்றால் செயல்பாடு ஒரு வெற்று டப்பிளை திருப்ப வேண்டும் \nகிரகங்களின் பெயர்கள் சரியானவை அல்ல. \nஉதாரணங்கள் \nbf (\"வியாழன்\", \"நெப்டியூன்\") = => (\"சனி\", \"யுரேனஸ்\") \nbf (\"பூமி\", \"புதன்\") = => (\"வீனஸ்\") \nbf (\"புதன்\", \"யுரேனஸ்\") = => (\"வீனஸ்\", \"பூமி\", \"செவ்வாய்\", \"வியாழன்\", \"சனி\")", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/71", "entry_point": "x_or_y", "test": "\n\narg00 = 7\narg01 = 34\narg02 = 12\nx0 = x_or_y(arg00, arg01, arg02)\nv0 = 34\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 15\narg11 = 8\narg12 = 5\nx1 = x_or_y(arg10, arg11, arg12)\nv1 = 5\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 3\narg21 = 33\narg22 = 5212\nx2 = x_or_y(arg20, arg21, arg22)\nv2 = 33\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 1259\narg31 = 3\narg32 = 52\nx3 = x_or_y(arg30, arg31, arg32)\nv3 = 3\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7919\narg41 = -1\narg42 = 12\nx4 = x_or_y(arg40, arg41, arg42)\nv4 = -1\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 3609\narg51 = 1245\narg52 = 583\nx5 = x_or_y(arg50, arg51, arg52)\nv5 = 583\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 91\narg61 = 56\narg62 = 129\nx6 = x_or_y(arg60, arg61, arg62)\nv6 = 129\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 6\narg71 = 34\narg72 = 1234\nx7 = x_or_y(arg70, arg71, arg72)\nv7 = 1234\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 1\narg81 = 2\narg82 = 0\nx8 = x_or_y(arg80, arg81, arg82)\nv8 = 0\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 2\narg91 = 2\narg92 = 0\nx9 = x_or_y(arg90, arg91, arg92)\nv9 = 2\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\n", "description": "ஒரு எளிய நிரல், இது n என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும் \nஒரு பகா எண் மற்றும் இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். \n\nஉதாரணங்கள்ஃ \nx _ அல்லது _ y க்கு (7,34,12) = = 34 \nx _ அல்லது _ y க்கு (15,8,5) = = 5", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/72", "entry_point": "double_the_difference", "test": "\n\narg00 = []\nx0 = double_the_difference(arg00)\nv0 = 0\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = [5, 4]\nx1 = double_the_difference(arg10)\nv1 = 25\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = [0.1, 0.2, 0.3]\nx2 = double_the_difference(arg20)\nv2 = 0\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = [-10, -20, -30]\nx3 = double_the_difference(arg30)\nv3 = 0\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = [-1, -2, 8]\nx4 = double_the_difference(arg40)\nv4 = 0\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = [0.2, 3, 5]\nx5 = double_the_difference(arg50)\nv5 = 34\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nx6 = double_the_difference(arg60)\nv6 = 166650\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\n", "description": "எண்களின் பட்டியலைக் கொடுத்தால், எண்களின் வர்க்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். \nஒற்றைப்படை பட்டியலில். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். \n\nஇரட்டை வேறுபாடு ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nஇரட்டை வேறுபாடு ([-1,0]) = = 0 \nஇரட்டை வேறுபாடு ([9,-2]) = = 81 \nஇரட்டை _ தி _ வேறுபாடு ([0]) = = 0 \n\nஉள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பித் தரவும்.", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/73", "entry_point": "strongest_extension", "test": "\n\narg00 = \"Watashi\"\narg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"]\nx0 = strongest_extension(arg00, arg01)\nv0 = \"Watashi.eIGHt8OKe\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"Boku123\"\narg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]\nx1 = strongest_extension(arg10, arg11)\nv1 = \"Boku123.YEs.WeCaNe\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"__YESIMHERE\"\narg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]\nx2 = strongest_extension(arg20, arg21)\nv2 = \"__YESIMHERE.NuLl__\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"K\"\narg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]\nx3 = strongest_extension(arg30, arg31)\nv3 = \"K.TAR\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"__HAHA\"\narg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"]\nx4 = strongest_extension(arg40, arg41)\nv4 = \"__HAHA.123\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"YameRore\"\narg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]\nx5 = strongest_extension(arg50, arg51)\nv5 = \"YameRore.okIWILL123\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"finNNalLLly\"\narg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"]\nx6 = strongest_extension(arg60, arg61)\nv6 = \"finNNalLLly.WoW\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"_\"\narg71 = [\"Bb\", \"91245\"]\nx7 = strongest_extension(arg70, arg71)\nv7 = \"_.Bb\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = \"Sp\"\narg81 = [\"671235\", \"Bb\"]\nx8 = strongest_extension(arg80, arg81)\nv8 = \"Sp.671235\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\n", "description": "உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் வழங்கப்படும். \nவகுப்புக்கு கூடுதல் வகுப்புகளை ஏற்றுவதற்கு நீட்டிப்புகள் பயன்படுத்தப்பட வேண்டும். \nநீட்டிப்பின் வலிமை பின்வருமாறுஃ CAP என்பது பெரிய எழுத்தின் எண்ணாக இருக்கட்டும். \nநீட்டிப்பின் பெயரில் உள்ள எழுத்துக்கள், மற்றும் எஸ். எம் சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும் \nநீட்டிப்பின் பெயரில், வலிமை CAP-ஏஸஏம என்ற பின்னத்தால் வழங்கப்படுகிறது. \nநீங்கள் வலுவான நீட்டிப்பைக் கண்டுபிடித்து இதில் ஒரு சரத்தைத் திருப்ப வேண்டும். \nவடிவம்ஃ ClassName.StrongestExtensionName. \nஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், நீங்கள் செய்ய வேண்டும் \nபட்டியலில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும். \nஎடுத்துக்காட்டாக, உங்களுக்கு \"ஸ்லைஸ்கள்\" வகுப்பாகவும் ஒரு பட்டியலாகவும் வழங்கப்பட்டால் \nநீட்டிப்புகள்ஃ ['SERVINGSliCes','சீஸ்','ஸ்டுஃபெட்'] பின்னர் நீங்கள் செய்ய வேண்டும் \n'SERVINGSliCes'வலுவான நீட்டிப்பாக இருப்பதால்'Slices.SErviNGSliCes'ஐத் திருப்பவும் \n(அதன் வலிமை-1). \nஉதாரணம்ஃ \nவலுவான _ நீட்டிப்புக்கு ('எனது _ வகுப்பு', ['AA','Be','CC']) = ='my_class.AA'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/74", "entry_point": "cycpattern_check", "test": "\n\narg00 = \"xyzw\"\narg01 = \"xyw\"\nx0 = cycpattern_check(arg00, arg01)\nv0 = false\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"yello\"\narg11 = \"ell\"\nx1 = cycpattern_check(arg10, arg11)\nv1 = true\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"whattup\"\narg21 = \"ptut\"\nx2 = cycpattern_check(arg20, arg21)\nv2 = false\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"efef\"\narg31 = \"fee\"\nx3 = cycpattern_check(arg30, arg31)\nv3 = true\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"abab\"\narg41 = \"aabb\"\nx4 = cycpattern_check(arg40, arg41)\nv4 = false\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"winemtt\"\narg51 = \"tinem\"\nx5 = cycpattern_check(arg50, arg51)\nv5 = true\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\n", "description": "உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு அடி மூலக்கூறாக இருந்தால் நீங்கள் உண்மை என்று திருப்பித் தர வேண்டும். \nசைக்பாடர்ன் _ செக் (\"abcd\", \"abd\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹலோ\", \"எல்\") => உண்மை \nசைக்பேட்டர்ன் _ செக் (\"வஸ்ஸப்\", \"psus\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"அபாப்\", \"பா\") => உண்மை \nசைக்பாடர்ன் _ செக் (\"ஈஃபெஃப்\", \"ஈஃபெஃப்\") => பொய் \nசைக்பேட்டர்ன் _ செக் (\"ஹீமென்ஸ்\", \"சைமென்\") => உண்மை", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/75", "entry_point": "int_to_mini_roman", "test": "\n\narg00 = 19\nx0 = int_to_mini_roman(arg00)\nv0 = \"xix\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 152\nx1 = int_to_mini_roman(arg10)\nv1 = \"clii\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 251\nx2 = int_to_mini_roman(arg20)\nv2 = \"ccli\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 426\nx3 = int_to_mini_roman(arg30)\nv3 = \"cdxxvi\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 500\nx4 = int_to_mini_roman(arg40)\nv4 = \"d\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 1\nx5 = int_to_mini_roman(arg50)\nv5 = \"i\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 4\nx6 = int_to_mini_roman(arg60)\nv6 = \"iv\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 43\nx7 = int_to_mini_roman(arg70)\nv7 = \"xliii\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 90\nx8 = int_to_mini_roman(arg80)\nv8 = \"xc\"\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 94\nx9 = int_to_mini_roman(arg90)\nv9 = \"xciv\"\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 532\nx10 = int_to_mini_roman(arg100)\nv10 = \"dxxxii\"\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\narg110 = 900\nx11 = int_to_mini_roman(arg110)\nv11 = \"cm\"\nif x11 != v11\n    raise StandardError, \"Error at test case 12\"\nend\n\narg120 = 994\nx12 = int_to_mini_roman(arg120)\nv12 = \"cmxciv\"\nif x12 != v12\n    raise StandardError, \"Error at test case 13\"\nend\n\narg130 = 1000\nx13 = int_to_mini_roman(arg130)\nv13 = \"m\"\nif x13 != v13\n    raise StandardError, \"Error at test case 14\"\nend\n\n", "description": "ஒரு நேர்மறை முழு எண்ணைக் கொடுத்தால், அதன் ரோமானிய எண்ணை ஒரு சரமாக சமமாகப் பெறுங்கள், \nஅதை சிறிய எழுத்தில் திருப்பி விடுங்கள். \nகட்டுப்பாடுகள்ஃ 1 <= எண் <= 1000 \n\nஉதாரணங்கள்ஃ \n>> இன்ட் _ டு _ மினி _ ரோமன் (19) = ='xix'\n>> இன்ட் _ டு _ மினி _ ரோமன் (152) = ='க்ளி'\n>> இன்ட் _ டு _ மினி _ ரோமன் (426) = ='cdxxvi'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/76", "entry_point": "right_angle_triangle", "test": "\n\narg00 = 3\narg01 = 4\narg02 = 5\nx0 = right_angle_triangle(arg00, arg01, arg02)\nv0 = true\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 1\narg11 = 2\narg12 = 3\nx1 = right_angle_triangle(arg10, arg11, arg12)\nv1 = false\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 10\narg21 = 6\narg22 = 8\nx2 = right_angle_triangle(arg20, arg21, arg22)\nv2 = true\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 2\narg31 = 2\narg32 = 2\nx3 = right_angle_triangle(arg30, arg31, arg32)\nv3 = false\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = 7\narg41 = 24\narg42 = 25\nx4 = right_angle_triangle(arg40, arg41, arg42)\nv4 = true\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = 10\narg51 = 5\narg52 = 7\nx5 = right_angle_triangle(arg50, arg51, arg52)\nv5 = false\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = 5\narg61 = 12\narg62 = 13\nx6 = right_angle_triangle(arg60, arg61, arg62)\nv6 = true\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = 15\narg71 = 8\narg72 = 17\nx7 = right_angle_triangle(arg70, arg71, arg72)\nv7 = true\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\narg80 = 48\narg81 = 55\narg82 = 73\nx8 = right_angle_triangle(arg80, arg81, arg82)\nv8 = true\nif x8 != v8\n    raise StandardError, \"Error at test case 9\"\nend\n\narg90 = 1\narg91 = 1\narg92 = 1\nx9 = right_angle_triangle(arg90, arg91, arg92)\nv9 = false\nif x9 != v9\n    raise StandardError, \"Error at test case 10\"\nend\n\narg100 = 2\narg101 = 2\narg102 = 10\nx10 = right_angle_triangle(arg100, arg101, arg102)\nv10 = false\nif x10 != v10\n    raise StandardError, \"Error at test case 11\"\nend\n\n", "description": "ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளம் கொடுக்கப்பட்டுள்ளது. இவை மூன்றும் இருந்தால் சரி என்று திரும்பவும். \nபக்கங்கள் வலது கோண முக்கோணத்தை உருவாக்குகின்றன, இல்லையெனில் தவறானது. \nஒரு வலது கோண முக்கோணம் என்பது ஒரு கோணம் வலது கோணமாக அல்லது வலது கோணமாக இருக்கும் ஒரு முக்கோணம் ஆகும். \n90 டிகிரி. \nஉதாரணம்ஃ \nவலது கோண முக்கோணம் (3,4,5) = = உண்மை \nவலது கோண முக்கோணம் (1,2,3) = = தவறு", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/77", "entry_point": "solve", "test": "\n\narg00 = \"AsDf\"\nx0 = solve(arg00)\nv0 = \"aSdF\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"1234\"\nx1 = solve(arg10)\nv1 = \"4321\"\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"ab\"\nx2 = solve(arg20)\nv2 = \"AB\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"#a@C\"\nx3 = solve(arg30)\nv3 = \"#A@c\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\narg40 = \"#AsdfW^45\"\nx4 = solve(arg40)\nv4 = \"#aSDFw^45\"\nif x4 != v4\n    raise StandardError, \"Error at test case 5\"\nend\n\narg50 = \"#6@2\"\nx5 = solve(arg50)\nv5 = \"2@6#\"\nif x5 != v5\n    raise StandardError, \"Error at test case 6\"\nend\n\narg60 = \"#\\$a^D\"\nx6 = solve(arg60)\nv6 = \"#\\$A^d\"\nif x6 != v6\n    raise StandardError, \"Error at test case 7\"\nend\n\narg70 = \"#ccc\"\nx7 = solve(arg70)\nv7 = \"#CCC\"\nif x7 != v7\n    raise StandardError, \"Error at test case 8\"\nend\n\n", "description": "உங்களுக்கு ஒரு சரம் s வழங்கப்படுகிறது. \nஎஸ் [ஐ] ஒரு எழுத்தாக இருந்தால், அதன் வழக்கை கீழ் இருந்து மேல் அல்லது நேர்மாறாக மாற்றவும், \nஇல்லையெனில் அதை அப்படியே வைத்திருங்கள். \nசரத்தில் எழுத்துக்கள் இல்லையென்றால், சரத்தை தலைகீழாக மாற்றவும். \nசெயல்பாடு விளைந்த சரத்தை திருப்பித் தர வேண்டும். \nஉதாரணங்கள் \nதீர்வு (\"1234\") = \"4321\" \nதீர்வு (\"ஏபி\") = \"ஏபி\" \nதீர்க்கவும் (\"#a @C\") = \"#A @c\"", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/78", "entry_point": "string_to_md5", "test": "\n\narg00 = \"Hello world\"\nx0 = string_to_md5(arg00)\nv0 = \"3e25960a79dbc69b674cd4ec67a72c62\"\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = \"\"\nx1 = string_to_md5(arg10)\nv1 = nil\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = \"A B C\"\nx2 = string_to_md5(arg20)\nv2 = \"0ef78513b0cb8cef12743f5aeb35f888\"\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = \"password\"\nx3 = string_to_md5(arg30)\nv3 = \"5f4dcc3b5aa765d61d8327deb882cf99\"\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "ஒரு சரம்'உரை'கொடுக்கப்பட்டால், அதன் md5 ஹாஷ் சமமான சரத்தைத் திருப்பித் தரவும். \n'உரை'ஒரு வெற்று சரம் என்றால், பூஜ்யத்தைத் திருப்பவும். \n\n>> சரம் _ முதல் _ md5 வரை ('வணக்கம் உலகம்') = ='3e25960a79dbc69b674cd4ec67a72c62'", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
{"task_id": "ruby/79", "entry_point": "generate_integers", "test": "\n\narg00 = 2\narg01 = 10\nx0 = generate_integers(arg00, arg01)\nv0 = [2, 4, 6, 8]\nif x0 != v0\n    raise StandardError, \"Error at test case 1\"\nend\n\narg10 = 10\narg11 = 2\nx1 = generate_integers(arg10, arg11)\nv1 = [2, 4, 6, 8]\nif x1 != v1\n    raise StandardError, \"Error at test case 2\"\nend\n\narg20 = 132\narg21 = 2\nx2 = generate_integers(arg20, arg21)\nv2 = [2, 4, 6, 8]\nif x2 != v2\n    raise StandardError, \"Error at test case 3\"\nend\n\narg30 = 17\narg31 = 89\nx3 = generate_integers(arg30, arg31)\nv3 = []\nif x3 != v3\n    raise StandardError, \"Error at test case 4\"\nend\n\n", "description": "a மற்றும் b ஆகிய இரண்டு நேர்மறை முழு எண்களைக் கொடுத்தால், a க்கு இடையே உள்ள சம இலக்கங்களைத் திருப்பித் தரவும். \nமற்றும் b, ஏறுவரிசையில். \n\nஉதாரணத்திற்குஃ \nமுழு எண்களை உருவாக்குதல் (2,8) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (8,2) => [2,4,6,8] \nமுழு எண்களை உருவாக்குதல் (10,14) => []", "language": "ruby", "canonical_solution": null, "natural_language": "Tamil"}
