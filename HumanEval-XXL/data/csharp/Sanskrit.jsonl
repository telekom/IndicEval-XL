{"task_id": "csharp/0", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowZero(new List<int> {});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowZero(new List<int> {1,2,-3,1,2,-3});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowZero(new List<int> {1,2,-4,5,6});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-4});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-5});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowZero(new List<int> {1,-2,2,-2,5,-5,4,-4});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवतः कृते ब्याङ्क्-अकौण्ट् मध्ये निक्षेपस्य तथा निष्कासनस्य च कार्याणां सूची दत्ता अस्ति, यस्मात् आरभ्यते। \nशून्यं शेषम्। कस्मिंश्चित् काले अपि लेखायाः शेषराशिः शून्यात् अधः पतति वा इति ज्ञातुं भवतः कार्यम् अस्ति, तथा। \nतस्मिन् समये फंक्षन् ट्रु इति प्रत्यावर्तयेत्। अन्यथा तत् फाल्स् इति प्रत्यावर्तयेत्। \n>>> शून्यात् अधः ([1,2,3]) \nमिथ्याचारः। \n>>> शून्यात् अधः ([1,2,-4,5]) \nसत्यम्।", "entry_point": "BelowZero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/1", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumProduct(new List<int> {});\n            var expected1 = new List<int> {0,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumProduct(new List<int> {1,1,1});\n            var expected2 = new List<int> {3,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumProduct(new List<int> {100,0});\n            var expected3 = new List<int> {100,0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumProduct(new List<int> {3,5,7});\n            var expected4 = new List<int> {15,105};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumProduct(new List<int> {10});\n            var expected5 = new List<int> {10,10};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "पूर्णांशकानां प्रदत्तसूच्यां, सूच्यां सर्वानां पूर्णांशकानां योगस्य गुणनफलस्य च एकं टुपल् प्रत्यर्पयतु। \nरिक्तराशिः 0 समानं भवेत्, रिक्तगुणितं च 1 समानं भवेत्। \n>>> sum _ product ([]) \n(0,1) \n>>> sum _ product ([1,2,3,4]) \n(10,24)", "entry_point": "SumProduct", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/2", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringXor(\"111000\",\"101010\");\n            var expected1 = \"010010\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringXor(\"1\",\"1\");\n            var expected2 = \"0\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringXor(\"0101\",\"0000\");\n            var expected3 = \"0101\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "इन्पुट् इतीदं a तथा b इति द्वौ सूत्रौ स्तः यत्र केवलं 1s तथा 0s इत्येतौ स्तः। \nएतेषु इन्पुट्-मध्ये द्वैतीयं XOR कुर्वन्तु तथा च रिटर्न्-परिणामम् अपि स्ट्रिङ्ग्-रूपेण कुर्वन्तु। \n>> स्ट्रिङ्ग् _ xor ('010','110') \n\"100\" इति।", "entry_point": "StringXor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/3", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Longest(new List<string> {});\n            var expected1 = null;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Longest(new List<string> {\"x\",\"y\",\"z\"});\n            var expected2 = \"x\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Longest(new List<string> {\"x\",\"yyy\",\"zzzz\",\"www\",\"kkkk\",\"abc\"});\n            var expected3 = \"zzzz\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "स्ट्रिङ्ग्-सूचीतः दीर्घतमं प्रत्यर्पयतु। बहुविधस्य सन्दर्भे प्रथमं प्रत्यर्पयतु। \nसमानदीर्घतायाः स्ट्रिङ्ग्स्। इन्पुट्-सूची रिक्तं भवति चेत् शून्यं प्रत्यावर्तयतु। \n>>> दीर्घतमः ([]) \n\n>>> दीर्घतमः (['a','b','c']) \n\"अ\" इति। \n>>> दीर्घतमः (['अ','बीबी','सीसीसी']) \n'सी. सी. सी.'", "entry_point": "Longest", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/4", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GreatestCommonDivisor(3,7);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GreatestCommonDivisor(10,15);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GreatestCommonDivisor(49,14);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GreatestCommonDivisor(144,60);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "a तथा b इति पूर्णांशकयोः बृहत्तमः सामान्यभागकः प्रत्यावर्तयतु। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (3,5) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> ग्रेटेस्ट् _ कामन् _ डिविसर् (25,15) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5।", "entry_point": "GreatestCommonDivisor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/5", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortNumbers(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SortNumbers(\"three\");\n            var expected2 = \"three\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SortNumbers(\"three five nine\");\n            var expected3 = \"three five nine\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SortNumbers(\"five zero four seven nine eight\");\n            var expected4 = \"zero four five seven eight nine\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SortNumbers(\"six five four three two one zero\");\n            var expected5 = \"zero one two three four five six\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "इन्पुट् इति'शून्य'तः'नव'पर्यन्तं संख्यानां स्पेस्-डिलिमिटेड् स्ट्रिङ्ग् अस्ति। \n'शून्यः','एकः','द्वौ','त्रीणि','चत्वारः','पञ्च','षट्','सप्त','अष्ट'तथा'नव'इति वैधानि विकल्पानि सन्ति। \nलघुतमात् बृहत्तमं यावत् क्रमबद्धां सङ्ख्याभिः सह स्ट्रिङ्ग् प्रत्यावर्तयतु। \n>>> संख्यानां क्रमनिर्धारणं करोतु ('तिस्रः एकः पञ्च') \n\"एकत्रयं पञ्च\" इति।", "entry_point": "SortNumbers", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/6", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RescaleToUnit(new List<double> {2.0,49.9});\n            var expected1 = new List<double> {0.0,1.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RescaleToUnit(new List<double> {100.0,49.9});\n            var expected2 = new List<double> {1.0,0.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RescaleToUnit(new List<double> {1.0,2.0,3.0,4.0,5.0});\n            var expected3 = new List<double> {0.0,0.25,0.5,0.75,1.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RescaleToUnit(new List<double> {2.0,1.0,5.0,3.0,4.0});\n            var expected4 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RescaleToUnit(new List<double> {12.0,11.0,15.0,13.0,14.0});\n            var expected5 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "संख्यासूच्यां (न्यूनातिन्यूनं द्वयोः तत्त्वयोः) दत्तं, तस्मिन् सूच्यां रेखीयपरिवर्तनं प्रयुज्यताम्। \nयथा लघुतमः सङ्ख्या 0 भविष्यति, बृहत्तमा च 1 भविष्यति। \n>> रिकेल्-टु-युनिट् ([1,0,2,0,4,0]) \n[0,0,25,0,0,75,0,0]", "entry_point": "RescaleToUnit", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/7", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FlipCase(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = FlipCase(\"Hello!\");\n            var expected2 = \"hELLO!\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = FlipCase(\"These violent delights have violent ends\");\n            var expected3 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "निर्दिष्टस्य स्ट्रिङ्ग् इत्यस्य कृते, लोवर्केस्-अक्षरान् अपरकेस्-रूपेण, अपरकेस्-अक्षरान् लोवर्केस्-रूपेण च परिवर्तयतु। \n>>> फ़्लिप्-केस् ('हेलो') \n\"हेलो\" इति।", "entry_point": "FlipCase", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/8", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetPositive(new List<int> {-1,-2,4,5,6});\n            var expected1 = new List<int> {4,5,6};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetPositive(new List<int> {5,3,-5,2,3,3,9,0,123,1,-10});\n            var expected2 = new List<int> {5,3,2,3,3,9,123,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetPositive(new List<int> {-1,-2});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetPositive(new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "सूच्यां केवलं धनात्मकसङ्ख्याः प्रत्यर्पयतु। \n>>> धनात्मकं प्रापयन्तु ([-1,2,-4,5,6]) \n[2,5,6] \n>>> प्राप्यते ([5,3,-5,2,-3,3,9,0,123,1,-10]) \n[5,3,2,3,9,123,1]", "entry_point": "GetPositive", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/9", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPrime(6);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPrime(101);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPrime(11);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPrime(13441);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPrime(61);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPrime(4);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPrime(1);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsPrime(5);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsPrime(11);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsPrime(17);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsPrime(85);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsPrime(77);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsPrime(255379);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "यदि दत्तसङ्ख्या अभाज्य अस्ति तर्हि सत्यं प्रत्यावर्तयतु, अन्यथा असत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः। \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nमिथ्याचारः।", "entry_point": "IsPrime", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/10", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Unique(new List<int> {5,3,5,2,3,3,9,0,123});\n            var expected1 = new List<int> {0,2,3,5,9,123};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "सूच्यां क्रमबद्धानि विशिष्टानि तत्त्वानि प्रत्यावर्तयतु। \n>>> अद्वितीयः ([5,3,5,2,3,3,9,0,123]) \n[0,2,3,5,9,123]", "entry_point": "Unique", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/11", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeFib(1);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeFib(2);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeFib(3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeFib(4);\n            var expected4 = 13;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeFib(5);\n            var expected5 = 89;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeFib(6);\n            var expected6 = 233;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeFib(7);\n            var expected7 = 1597;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeFib(8);\n            var expected8 = 28657;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeFib(9);\n            var expected9 = 514229;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeFib(10);\n            var expected10 = 433494437;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "प्रैम्-फ़ैब् इतीदं n-तमं संख्यां प्रत्यर्पयति यत् फ़िबोनाची सङ्ख्या अपि च अभाज्यम् अस्ति। \n>>> प्रैम्-फैब् (1) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> प्रैम्-फैब् (2) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> प्रैम्-फैब् (3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> प्रैम्-फैब् (4) \n13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। 13। \n>>> प्रैम्-फैब् (5) \n89।", "entry_point": "PrimeFib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/12", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriplesSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriplesSumToZero(new List<int> {1,3,5,-1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriplesSumToZero(new List<int> {1,3,-2,1});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriplesSumToZero(new List<int> {1,2,3,7});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriplesSumToZero(new List<int> {1,2,5,7});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriplesSumToZero(new List<int> {2,4,-5,3,9,7});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriplesSumToZero(new List<int> {1});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriplesSumToZero(new List<int> {1,3,5,-100});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriplesSumToZero(new List<int> {100,3,5,-100});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "ट्रिपल्स्-सम्-तः-ज़ीरो-पर्यन्तं इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां त्रीणि विशिष्टानि तत्त्वानि सन्ति तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n\n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,35,5,0]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,3,-2,1]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1,2,3,7]) \nमिथ्याचारः। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([2,4,-5,3,9,7]) \nसत्यम्। \n>>> ट्रिपल्स्-सम्-टु-ज़ीरो ([1]) \nमिथ्याचारः।", "entry_point": "TriplesSumToZero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/13", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PairsSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PairsSumToZero(new List<int> {1,3,-2,1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PairsSumToZero(new List<int> {1,2,3,7});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PairsSumToZero(new List<int> {2,4,-5,3,5,7});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PairsSumToZero(new List<int> {1});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PairsSumToZero(new List<int> {-3,9,-1,3,2,30});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PairsSumToZero(new List<int> {-3,9,-1,3,2,31});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PairsSumToZero(new List<int> {-3,9,-1,4,2,30});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PairsSumToZero(new List<int> {-3,9,-1,4,2,31});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "pairs _ sum _ to _ zero इति इन्पुट्-रूपेण पूर्णांकानां सूचीं स्वीकरोति। \nयदि सूच्यां द्वे विशिष्टाः तत्त्वौ स्तः तर्हि तत् ट्रु इति प्रत्यावर्तयति। \nयोगफलम् शून्यं भवति, अन्यथा असत्यम्। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,3,5,0]) \nमिथ्याचारः। \n>>> युग्मानि _ राशिः _ तः _ शून्यं ([1,3,-2,1]) \nमिथ्याचारः। \n>>> युग्मं _ राशिः _ शून्यं प्रति ([1,2,3,7]) \nमिथ्याचारः। \n>>> युग्म-राशि-तः-शून्यपर्यन्तं ([2,4,-5,3,5,7]) \nसत्यम्। \n>>> युग्मं _ सं _ तः _ शून्यं ([1]) \nमिथ्याचारः।", "entry_point": "PairsSumToZero", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/14", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib4(5);\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib4(8);\n            var expected2 = 28;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib4(10);\n            var expected3 = 104;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib4(12);\n            var expected4 = 386;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "फैब्-4 सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nFib4 (0)-> 0 \nFib4 (1)-> 0 \nफैब4 (2)-> 2 \nFib4 (3)-> 0 \nफैब्4 (एन्)-> फैब्4 (एन्-1) + फैब्4 (एन्-2) + फैब्4 (एन्-3) + फैब्4 (एन्-4)। \nफैब्-4 सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। पुनरावर्तनस्य उपयोगं मा करोतु। \n>>> फैब्4 (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्4 (6) \n8। \n>>> फैब्4 (7) \n14।", "entry_point": "Fib4", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/15", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Median(new List<int> {3,1,2,4,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Median(new List<int> {-10,4,6,1000,10,20});\n            var expected2 = 8.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Median(new List<int> {5});\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Median(new List<int> {6,5});\n            var expected4 = 5.5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Median(new List<int> {8,1,3,9,9,2,7});\n            var expected5 = 7;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "सूची l मध्ये तत्त्वानां माध्यं प्रत्यावर्तयतु। \n>>> माध्यिका ([3,1,2,4,5]) \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। \n>>> माध्यिका ([-10,4,6,1000,10,20]) \n0. 0।", "entry_point": "Median", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/16", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPalindrome(\"\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPalindrome(\"aba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPalindrome(\"aaaaa\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPalindrome(\"zbcd\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPalindrome(\"xywyx\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPalindrome(\"xywyz\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPalindrome(\"xywzx\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "दत्तं स्ट्रिङ्ग् पालिण्ड्रोम् अस्ति वा इति पश्यतु। \n>>> अस्ति _ पालिण्ड्रोम् (\") \nसत्यम्। \n>>> अस्ति _ पालिण्ड्रोम् ('अबा') \nसत्यम्। \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nसत्यम्। \n>>> is _ palindrome ('zbcd') अस्ति। \nमिथ्याचारः।", "entry_point": "IsPalindrome", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/17", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RemoveVowels(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RemoveVowels(\"abcdef\\nghijklm\");\n            var expected2 = \"bcdf\\nghjklm\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RemoveVowels(\"fedcba\");\n            var expected3 = \"fdcb\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RemoveVowels(\"eeeee\");\n            var expected4 = \"\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RemoveVowels(\"acBAA\");\n            var expected5 = \"cB\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RemoveVowels(\"EcBOO\");\n            var expected6 = \"cB\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RemoveVowels(\"ybcd\");\n            var expected7 = \"ybcd\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "रिमूव् _ वोवेल्स् इति एकं फंक्षन् अस्ति यत् स्ट्रिङ्ग् स्वीकृत्य स्वरं विना स्ट्रिङ्ग् प्रत्यावर्तयति। \n>>> स्वरान् निष्कासयतु (\") \n\"इति। \n>>> स्वरान् निष्कासयतु (\"abcdef\\nghijklm\") \n'bcdf\\ nghjklm'\n>>> स्वरान् निष्कासयतु ('ए. बी. सी. डी. एफ़्.') \n'बी. सी. डी. एफ़्.'\n>>> स्वरान् निष्कासयतु ('एएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएएए \n\"इति। \n>>> स्वरान् निष्कासयतु ('आब्बा') \n\"बी\" इति। \n>>> स्वरान् निष्कासयतु ('zbcd') \n'एस्. बी. सी. डी.'", "entry_point": "RemoveVowels", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/18", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowThreshold(new List<int> {1,2,4,10},100);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowThreshold(new List<int> {1,20,4,10},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowThreshold(new List<int> {1,20,4,10},21);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowThreshold(new List<int> {1,20,4,10},22);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowThreshold(new List<int> {1,8,4,10},11);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowThreshold(new List<int> {1,8,4,10},10);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "यदि सूची l मध्ये सर्वाः सङ्ख्याः t-परिमितेः अधः सन्ति तर्हि सत्यं प्रत्यावर्तयतु। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,2,4,10], 100) \nसत्यम्। \n>>> थ्रेशोल्ड् इत्यस्य अधः ([1,20,4,10], 5) \nमिथ्याचारः।", "entry_point": "BelowThreshold", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/19", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Add(0,1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Add(1,0);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Add(2,3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Add(5,7);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Add(7,5);\n            var expected5 = 12;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Add(572,725);\n            var expected6 = 1297;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Add(51,804);\n            var expected7 = 855;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Add(645,96);\n            var expected8 = 741;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Add(712,853);\n            var expected9 = 1565;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Add(223,101);\n            var expected10 = 324;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Add(76,29);\n            var expected11 = 105;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Add(416,149);\n            var expected12 = 565;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Add(145,409);\n            var expected13 = 554;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Add(535,430);\n            var expected14 = 965;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Add(118,303);\n            var expected15 = 421;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Add(287,94);\n            var expected16 = 381;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Add(768,257);\n            var expected17 = 1025;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Add(421,677);\n            var expected18 = 1098;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Add(802,814);\n            var expected19 = 1616;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Add(510,922);\n            var expected20 = 1432;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Add(345,819);\n            var expected21 = 1164;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Add(895,436);\n            var expected22 = 1331;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Add(123,424);\n            var expected23 = 547;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Add(923,245);\n            var expected24 = 1168;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Add(23,438);\n            var expected25 = 461;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n            var actual26 = Add(565,133);\n            var expected26 = 698;\n            var result26 = compareLogic.Compare(actual26, expected26);\n            if (!result26.AreEqual) {throw new Exception(\"Exception --- test case 25 failed to pass\");}\n\n            var actual27 = Add(945,925);\n            var expected27 = 1870;\n            var result27 = compareLogic.Compare(actual27, expected27);\n            if (!result27.AreEqual) {throw new Exception(\"Exception --- test case 26 failed to pass\");}\n\n            var actual28 = Add(261,983);\n            var expected28 = 1244;\n            var result28 = compareLogic.Compare(actual28, expected28);\n            if (!result28.AreEqual) {throw new Exception(\"Exception --- test case 27 failed to pass\");}\n\n            var actual29 = Add(139,577);\n            var expected29 = 716;\n            var result29 = compareLogic.Compare(actual29, expected29);\n            if (!result29.AreEqual) {throw new Exception(\"Exception --- test case 28 failed to pass\");}\n\n            var actual30 = Add(763,178);\n            var expected30 = 941;\n            var result30 = compareLogic.Compare(actual30, expected30);\n            if (!result30.AreEqual) {throw new Exception(\"Exception --- test case 29 failed to pass\");}\n\n            var actual31 = Add(147,892);\n            var expected31 = 1039;\n            var result31 = compareLogic.Compare(actual31, expected31);\n            if (!result31.AreEqual) {throw new Exception(\"Exception --- test case 30 failed to pass\");}\n\n            var actual32 = Add(436,402);\n            var expected32 = 838;\n            var result32 = compareLogic.Compare(actual32, expected32);\n            if (!result32.AreEqual) {throw new Exception(\"Exception --- test case 31 failed to pass\");}\n\n            var actual33 = Add(610,581);\n            var expected33 = 1191;\n            var result33 = compareLogic.Compare(actual33, expected33);\n            if (!result33.AreEqual) {throw new Exception(\"Exception --- test case 32 failed to pass\");}\n\n            var actual34 = Add(103,416);\n            var expected34 = 519;\n            var result34 = compareLogic.Compare(actual34, expected34);\n            if (!result34.AreEqual) {throw new Exception(\"Exception --- test case 33 failed to pass\");}\n\n            var actual35 = Add(339,990);\n            var expected35 = 1329;\n            var result35 = compareLogic.Compare(actual35, expected35);\n            if (!result35.AreEqual) {throw new Exception(\"Exception --- test case 34 failed to pass\");}\n\n            var actual36 = Add(130,504);\n            var expected36 = 634;\n            var result36 = compareLogic.Compare(actual36, expected36);\n            if (!result36.AreEqual) {throw new Exception(\"Exception --- test case 35 failed to pass\");}\n\n            var actual37 = Add(242,717);\n            var expected37 = 959;\n            var result37 = compareLogic.Compare(actual37, expected37);\n            if (!result37.AreEqual) {throw new Exception(\"Exception --- test case 36 failed to pass\");}\n\n            var actual38 = Add(562,110);\n            var expected38 = 672;\n            var result38 = compareLogic.Compare(actual38, expected38);\n            if (!result38.AreEqual) {throw new Exception(\"Exception --- test case 37 failed to pass\");}\n\n            var actual39 = Add(396,909);\n            var expected39 = 1305;\n            var result39 = compareLogic.Compare(actual39, expected39);\n            if (!result39.AreEqual) {throw new Exception(\"Exception --- test case 38 failed to pass\");}\n\n            var actual40 = Add(887,703);\n            var expected40 = 1590;\n            var result40 = compareLogic.Compare(actual40, expected40);\n            if (!result40.AreEqual) {throw new Exception(\"Exception --- test case 39 failed to pass\");}\n\n            var actual41 = Add(870,551);\n            var expected41 = 1421;\n            var result41 = compareLogic.Compare(actual41, expected41);\n            if (!result41.AreEqual) {throw new Exception(\"Exception --- test case 40 failed to pass\");}\n\n            var actual42 = Add(422,391);\n            var expected42 = 813;\n            var result42 = compareLogic.Compare(actual42, expected42);\n            if (!result42.AreEqual) {throw new Exception(\"Exception --- test case 41 failed to pass\");}\n\n            var actual43 = Add(299,505);\n            var expected43 = 804;\n            var result43 = compareLogic.Compare(actual43, expected43);\n            if (!result43.AreEqual) {throw new Exception(\"Exception --- test case 42 failed to pass\");}\n\n            var actual44 = Add(346,56);\n            var expected44 = 402;\n            var result44 = compareLogic.Compare(actual44, expected44);\n            if (!result44.AreEqual) {throw new Exception(\"Exception --- test case 43 failed to pass\");}\n\n            var actual45 = Add(36,706);\n            var expected45 = 742;\n            var result45 = compareLogic.Compare(actual45, expected45);\n            if (!result45.AreEqual) {throw new Exception(\"Exception --- test case 44 failed to pass\");}\n\n            var actual46 = Add(738,411);\n            var expected46 = 1149;\n            var result46 = compareLogic.Compare(actual46, expected46);\n            if (!result46.AreEqual) {throw new Exception(\"Exception --- test case 45 failed to pass\");}\n\n            var actual47 = Add(679,87);\n            var expected47 = 766;\n            var result47 = compareLogic.Compare(actual47, expected47);\n            if (!result47.AreEqual) {throw new Exception(\"Exception --- test case 46 failed to pass\");}\n\n            var actual48 = Add(25,303);\n            var expected48 = 328;\n            var result48 = compareLogic.Compare(actual48, expected48);\n            if (!result48.AreEqual) {throw new Exception(\"Exception --- test case 47 failed to pass\");}\n\n            var actual49 = Add(161,612);\n            var expected49 = 773;\n            var result49 = compareLogic.Compare(actual49, expected49);\n            if (!result49.AreEqual) {throw new Exception(\"Exception --- test case 48 failed to pass\");}\n\n            var actual50 = Add(306,841);\n            var expected50 = 1147;\n            var result50 = compareLogic.Compare(actual50, expected50);\n            if (!result50.AreEqual) {throw new Exception(\"Exception --- test case 49 failed to pass\");}\n\n            var actual51 = Add(973,411);\n            var expected51 = 1384;\n            var result51 = compareLogic.Compare(actual51, expected51);\n            if (!result51.AreEqual) {throw new Exception(\"Exception --- test case 50 failed to pass\");}\n\n            var actual52 = Add(711,157);\n            var expected52 = 868;\n            var result52 = compareLogic.Compare(actual52, expected52);\n            if (!result52.AreEqual) {throw new Exception(\"Exception --- test case 51 failed to pass\");}\n\n            var actual53 = Add(471,27);\n            var expected53 = 498;\n            var result53 = compareLogic.Compare(actual53, expected53);\n            if (!result53.AreEqual) {throw new Exception(\"Exception --- test case 52 failed to pass\");}\n\n            var actual54 = Add(714,792);\n            var expected54 = 1506;\n            var result54 = compareLogic.Compare(actual54, expected54);\n            if (!result54.AreEqual) {throw new Exception(\"Exception --- test case 53 failed to pass\");}\n\n            var actual55 = Add(38,206);\n            var expected55 = 244;\n            var result55 = compareLogic.Compare(actual55, expected55);\n            if (!result55.AreEqual) {throw new Exception(\"Exception --- test case 54 failed to pass\");}\n\n            var actual56 = Add(907,343);\n            var expected56 = 1250;\n            var result56 = compareLogic.Compare(actual56, expected56);\n            if (!result56.AreEqual) {throw new Exception(\"Exception --- test case 55 failed to pass\");}\n\n            var actual57 = Add(23,760);\n            var expected57 = 783;\n            var result57 = compareLogic.Compare(actual57, expected57);\n            if (!result57.AreEqual) {throw new Exception(\"Exception --- test case 56 failed to pass\");}\n\n            var actual58 = Add(524,859);\n            var expected58 = 1383;\n            var result58 = compareLogic.Compare(actual58, expected58);\n            if (!result58.AreEqual) {throw new Exception(\"Exception --- test case 57 failed to pass\");}\n\n            var actual59 = Add(30,529);\n            var expected59 = 559;\n            var result59 = compareLogic.Compare(actual59, expected59);\n            if (!result59.AreEqual) {throw new Exception(\"Exception --- test case 58 failed to pass\");}\n\n            var actual60 = Add(341,691);\n            var expected60 = 1032;\n            var result60 = compareLogic.Compare(actual60, expected60);\n            if (!result60.AreEqual) {throw new Exception(\"Exception --- test case 59 failed to pass\");}\n\n            var actual61 = Add(167,729);\n            var expected61 = 896;\n            var result61 = compareLogic.Compare(actual61, expected61);\n            if (!result61.AreEqual) {throw new Exception(\"Exception --- test case 60 failed to pass\");}\n\n            var actual62 = Add(636,289);\n            var expected62 = 925;\n            var result62 = compareLogic.Compare(actual62, expected62);\n            if (!result62.AreEqual) {throw new Exception(\"Exception --- test case 61 failed to pass\");}\n\n            var actual63 = Add(503,144);\n            var expected63 = 647;\n            var result63 = compareLogic.Compare(actual63, expected63);\n            if (!result63.AreEqual) {throw new Exception(\"Exception --- test case 62 failed to pass\");}\n\n            var actual64 = Add(51,985);\n            var expected64 = 1036;\n            var result64 = compareLogic.Compare(actual64, expected64);\n            if (!result64.AreEqual) {throw new Exception(\"Exception --- test case 63 failed to pass\");}\n\n            var actual65 = Add(287,149);\n            var expected65 = 436;\n            var result65 = compareLogic.Compare(actual65, expected65);\n            if (!result65.AreEqual) {throw new Exception(\"Exception --- test case 64 failed to pass\");}\n\n            var actual66 = Add(659,75);\n            var expected66 = 734;\n            var result66 = compareLogic.Compare(actual66, expected66);\n            if (!result66.AreEqual) {throw new Exception(\"Exception --- test case 65 failed to pass\");}\n\n            var actual67 = Add(462,797);\n            var expected67 = 1259;\n            var result67 = compareLogic.Compare(actual67, expected67);\n            if (!result67.AreEqual) {throw new Exception(\"Exception --- test case 66 failed to pass\");}\n\n            var actual68 = Add(406,141);\n            var expected68 = 547;\n            var result68 = compareLogic.Compare(actual68, expected68);\n            if (!result68.AreEqual) {throw new Exception(\"Exception --- test case 67 failed to pass\");}\n\n            var actual69 = Add(106,44);\n            var expected69 = 150;\n            var result69 = compareLogic.Compare(actual69, expected69);\n            if (!result69.AreEqual) {throw new Exception(\"Exception --- test case 68 failed to pass\");}\n\n            var actual70 = Add(300,934);\n            var expected70 = 1234;\n            var result70 = compareLogic.Compare(actual70, expected70);\n            if (!result70.AreEqual) {throw new Exception(\"Exception --- test case 69 failed to pass\");}\n\n            var actual71 = Add(471,524);\n            var expected71 = 995;\n            var result71 = compareLogic.Compare(actual71, expected71);\n            if (!result71.AreEqual) {throw new Exception(\"Exception --- test case 70 failed to pass\");}\n\n            var actual72 = Add(122,429);\n            var expected72 = 551;\n            var result72 = compareLogic.Compare(actual72, expected72);\n            if (!result72.AreEqual) {throw new Exception(\"Exception --- test case 71 failed to pass\");}\n\n            var actual73 = Add(735,195);\n            var expected73 = 930;\n            var result73 = compareLogic.Compare(actual73, expected73);\n            if (!result73.AreEqual) {throw new Exception(\"Exception --- test case 72 failed to pass\");}\n\n            var actual74 = Add(335,484);\n            var expected74 = 819;\n            var result74 = compareLogic.Compare(actual74, expected74);\n            if (!result74.AreEqual) {throw new Exception(\"Exception --- test case 73 failed to pass\");}\n\n            var actual75 = Add(28,809);\n            var expected75 = 837;\n            var result75 = compareLogic.Compare(actual75, expected75);\n            if (!result75.AreEqual) {throw new Exception(\"Exception --- test case 74 failed to pass\");}\n\n            var actual76 = Add(430,20);\n            var expected76 = 450;\n            var result76 = compareLogic.Compare(actual76, expected76);\n            if (!result76.AreEqual) {throw new Exception(\"Exception --- test case 75 failed to pass\");}\n\n            var actual77 = Add(916,635);\n            var expected77 = 1551;\n            var result77 = compareLogic.Compare(actual77, expected77);\n            if (!result77.AreEqual) {throw new Exception(\"Exception --- test case 76 failed to pass\");}\n\n            var actual78 = Add(301,999);\n            var expected78 = 1300;\n            var result78 = compareLogic.Compare(actual78, expected78);\n            if (!result78.AreEqual) {throw new Exception(\"Exception --- test case 77 failed to pass\");}\n\n            var actual79 = Add(454,466);\n            var expected79 = 920;\n            var result79 = compareLogic.Compare(actual79, expected79);\n            if (!result79.AreEqual) {throw new Exception(\"Exception --- test case 78 failed to pass\");}\n\n            var actual80 = Add(905,259);\n            var expected80 = 1164;\n            var result80 = compareLogic.Compare(actual80, expected80);\n            if (!result80.AreEqual) {throw new Exception(\"Exception --- test case 79 failed to pass\");}\n\n            var actual81 = Add(168,205);\n            var expected81 = 373;\n            var result81 = compareLogic.Compare(actual81, expected81);\n            if (!result81.AreEqual) {throw new Exception(\"Exception --- test case 80 failed to pass\");}\n\n            var actual82 = Add(570,434);\n            var expected82 = 1004;\n            var result82 = compareLogic.Compare(actual82, expected82);\n            if (!result82.AreEqual) {throw new Exception(\"Exception --- test case 81 failed to pass\");}\n\n            var actual83 = Add(64,959);\n            var expected83 = 1023;\n            var result83 = compareLogic.Compare(actual83, expected83);\n            if (!result83.AreEqual) {throw new Exception(\"Exception --- test case 82 failed to pass\");}\n\n            var actual84 = Add(957,510);\n            var expected84 = 1467;\n            var result84 = compareLogic.Compare(actual84, expected84);\n            if (!result84.AreEqual) {throw new Exception(\"Exception --- test case 83 failed to pass\");}\n\n            var actual85 = Add(722,598);\n            var expected85 = 1320;\n            var result85 = compareLogic.Compare(actual85, expected85);\n            if (!result85.AreEqual) {throw new Exception(\"Exception --- test case 84 failed to pass\");}\n\n            var actual86 = Add(770,226);\n            var expected86 = 996;\n            var result86 = compareLogic.Compare(actual86, expected86);\n            if (!result86.AreEqual) {throw new Exception(\"Exception --- test case 85 failed to pass\");}\n\n            var actual87 = Add(579,66);\n            var expected87 = 645;\n            var result87 = compareLogic.Compare(actual87, expected87);\n            if (!result87.AreEqual) {throw new Exception(\"Exception --- test case 86 failed to pass\");}\n\n            var actual88 = Add(117,674);\n            var expected88 = 791;\n            var result88 = compareLogic.Compare(actual88, expected88);\n            if (!result88.AreEqual) {throw new Exception(\"Exception --- test case 87 failed to pass\");}\n\n            var actual89 = Add(530,30);\n            var expected89 = 560;\n            var result89 = compareLogic.Compare(actual89, expected89);\n            if (!result89.AreEqual) {throw new Exception(\"Exception --- test case 88 failed to pass\");}\n\n            var actual90 = Add(776,345);\n            var expected90 = 1121;\n            var result90 = compareLogic.Compare(actual90, expected90);\n            if (!result90.AreEqual) {throw new Exception(\"Exception --- test case 89 failed to pass\");}\n\n            var actual91 = Add(327,389);\n            var expected91 = 716;\n            var result91 = compareLogic.Compare(actual91, expected91);\n            if (!result91.AreEqual) {throw new Exception(\"Exception --- test case 90 failed to pass\");}\n\n            var actual92 = Add(596,12);\n            var expected92 = 608;\n            var result92 = compareLogic.Compare(actual92, expected92);\n            if (!result92.AreEqual) {throw new Exception(\"Exception --- test case 91 failed to pass\");}\n\n            var actual93 = Add(599,511);\n            var expected93 = 1110;\n            var result93 = compareLogic.Compare(actual93, expected93);\n            if (!result93.AreEqual) {throw new Exception(\"Exception --- test case 92 failed to pass\");}\n\n            var actual94 = Add(936,476);\n            var expected94 = 1412;\n            var result94 = compareLogic.Compare(actual94, expected94);\n            if (!result94.AreEqual) {throw new Exception(\"Exception --- test case 93 failed to pass\");}\n\n            var actual95 = Add(461,14);\n            var expected95 = 475;\n            var result95 = compareLogic.Compare(actual95, expected95);\n            if (!result95.AreEqual) {throw new Exception(\"Exception --- test case 94 failed to pass\");}\n\n            var actual96 = Add(966,157);\n            var expected96 = 1123;\n            var result96 = compareLogic.Compare(actual96, expected96);\n            if (!result96.AreEqual) {throw new Exception(\"Exception --- test case 95 failed to pass\");}\n\n            var actual97 = Add(326,91);\n            var expected97 = 417;\n            var result97 = compareLogic.Compare(actual97, expected97);\n            if (!result97.AreEqual) {throw new Exception(\"Exception --- test case 96 failed to pass\");}\n\n            var actual98 = Add(392,455);\n            var expected98 = 847;\n            var result98 = compareLogic.Compare(actual98, expected98);\n            if (!result98.AreEqual) {throw new Exception(\"Exception --- test case 97 failed to pass\");}\n\n            var actual99 = Add(446,477);\n            var expected99 = 923;\n            var result99 = compareLogic.Compare(actual99, expected99);\n            if (!result99.AreEqual) {throw new Exception(\"Exception --- test case 98 failed to pass\");}\n\n            var actual100 = Add(324,860);\n            var expected100 = 1184;\n            var result100 = compareLogic.Compare(actual100, expected100);\n            if (!result100.AreEqual) {throw new Exception(\"Exception --- test case 99 failed to pass\");}\n\n            var actual101 = Add(945,85);\n            var expected101 = 1030;\n            var result101 = compareLogic.Compare(actual101, expected101);\n            if (!result101.AreEqual) {throw new Exception(\"Exception --- test case 100 failed to pass\");}\n\n            var actual102 = Add(886,582);\n            var expected102 = 1468;\n            var result102 = compareLogic.Compare(actual102, expected102);\n            if (!result102.AreEqual) {throw new Exception(\"Exception --- test case 101 failed to pass\");}\n\n            var actual103 = Add(886,712);\n            var expected103 = 1598;\n            var result103 = compareLogic.Compare(actual103, expected103);\n            if (!result103.AreEqual) {throw new Exception(\"Exception --- test case 102 failed to pass\");}\n\n            var actual104 = Add(842,953);\n            var expected104 = 1795;\n            var result104 = compareLogic.Compare(actual104, expected104);\n            if (!result104.AreEqual) {throw new Exception(\"Exception --- test case 103 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "x तथा y संख्याद्वयं योजयतु। \n>>> योजयतु (2,3) \n5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। 5। \n>>> योजयतु (5,7) \n12।", "entry_point": "Add", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/20", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SameChars(\"abcd\",\"dddddddabc\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SameChars(\"dddddddabc\",\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SameChars(\"eabcd\",\"dddddddabc\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SameChars(\"abcd\",\"dddddddabcf\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SameChars(\"aabb\",\"aaccc\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "द्वयोः शब्दयोः अक्षरद्वयम् समानम् अस्ति वा इति पश्यतु। \n>>> समान-अक्षरानि ('eabcdzzzz','dddzzzzzuddeddabc') \nसत्यम्। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nसत्यम्। \n>>> सेमचारस् ('ddddddabc','abcd') \nसत्यम्। \n>>> सेमचारस् ('ई. ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>> समान-अक्षरानि ('ए. बी. सी. डी.','डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी. डी \nमिथ्याचारः। \n>>> समान-अक्षरानि ('eabcdzzz','dddzzzzzddddddbc') \nमिथ्याचारः।", "entry_point": "SameChars", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/21", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib(10);\n            var expected1 = 55;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib(1);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib(8);\n            var expected3 = 21;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib(11);\n            var expected4 = 89;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fib(12);\n            var expected5 = 144;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "n-th फिबोनाची सङ्ख्या प्रत्यावर्तयतु। \n>>> फैब् (10) \n55। \n>>> फैब् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। \n>>> फैब् (8) \n21।", "entry_point": "Fib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/22", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Common(new List<int> {1,4,3,34,653,2,5},new List<int> {5,7,1,5,9,653,121});\n            var expected1 = new List<int> {1,5,653};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Common(new List<int> {5,3,2,8},new List<int> {3,2});\n            var expected2 = new List<int> {2,3};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Common(new List<int> {4,3,2,8},new List<int> {3,2,4});\n            var expected3 = new List<int> {2,3,4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Common(new List<int> {4,3,2,8},new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "द्वयोः सूच्याः कृते विशिष्टान् सामान्यान् तत्त्वान् पुनः क्रमबद्धं करोतु। \n>> सामान्यः ([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) \n[1,5,653] \n>>> सामान्यः ([5,3,2,8], [3,2]) \n[2,3]", "entry_point": "Common", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/23", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestPrimeFactor(15);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestPrimeFactor(27);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestPrimeFactor(63);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestPrimeFactor(330);\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestPrimeFactor(13195);\n            var expected5 = 29;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "n इत्यस्य बृहत्तमं अभाज्यघटकं प्रत्यावर्तयतु। n> 1 इति अमन्यताम्, सः अभाज्यः नास्ति। \n>>> बृहत्तमः _ प्रधानः _ कारकः (13195) \n29। \n>>> बृहत्तमं _ प्रधानम् _ कारकं (2048) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2।", "entry_point": "LargestPrimeFactor", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/24", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumToN(1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumToN(6);\n            var expected2 = 21;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumToN(11);\n            var expected3 = 66;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumToN(30);\n            var expected4 = 465;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumToN(100);\n            var expected5 = 5050;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "sum _ to _ n इति एकं फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यानां योग्यं करोति। \n>>> सम्-टु-एन् (30) \n465। \n>>> सम्-टु-एन् (100) \n5050 \n>>> सम्-टु-एन् (5) \n15। \n>>> सम्-टु-एन् (10) \n55। \n>>> सम्-टु-एन् (1) \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "entry_point": "SumToN", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/25", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Derivative(new List<int> {3,1,2,4,5});\n            var expected1 = new List<int> {1,4,12,20};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Derivative(new List<int> {1,2,3});\n            var expected2 = new List<int> {2,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Derivative(new List<int> {3,2,1});\n            var expected3 = new List<int> {2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Derivative(new List<int> {3,2,1,0,4});\n            var expected4 = new List<int> {2,2,0,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Derivative(new List<int> {1});\n            var expected5 = new List<int> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "xs तु बहुपदस्य गुणकं निर्दिशति। \nxs [0] + xs [1] * x + xs [2] * x2 +.... \nअस्य बहुपदस्य व्युत्पन्नम् समानरूपेण प्रत्यावर्तयतु। \n>>> व्युत्पन्नम् ([3,1,2,4,5]) \n[1,4,12,20] \n>>> व्युत्पन्नम् ([1,2,3]) \n[2,6]", "entry_point": "Derivative", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/26", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fibfib(2);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fibfib(1);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fibfib(5);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fibfib(8);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fibfib(10);\n            var expected5 = 81;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Fibfib(12);\n            var expected6 = 274;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Fibfib(14);\n            var expected7 = 927;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "फैब्-फैब् सङ्ख्या-क्रमः फ़िब्बोनाची-सेक्वुनेस् इत्यनेन सदृशः एकः क्रमः अस्ति यः निम्नलिखितरूपेण परिभाषितः अस्ति। \nफैबफ़िब (0) = = 0 \nफैबफ़िब (1) = = 0 \nफैबफ़िब (2) = = 1 \nfibfib (n) = = fibfib (n-1) + fibfib (n-2) + fibfib (n-3)। \nफैब्फैब् सङ्ख्या-क्रमस्य n-तमं तत्त्वं दक्षतया गणयितुं कृपया एकं फंक्षन् लिखतु। \n>>> फैब्फैब् (1) \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>>> फैब्फैब् (5) \n4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। 4। \n>>> फैब्फैब् (8) \n24।", "entry_point": "Fibfib", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/27", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = VowelsCount(\"abcde\");\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = VowelsCount(\"Alone\");\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = VowelsCount(\"key\");\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = VowelsCount(\"bye\");\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = VowelsCount(\"keY\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = VowelsCount(\"bYe\");\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = VowelsCount(\"ACEDY\");\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन्-वोवेल्स्-कौण्ट् इति लिखतु यत् तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं तं \nएकं पदं इन्पुट्-रूपेण तथा स्ट्रिङ्ग्-मध्ये स्वराणां संख्यां प्रत्यर्पयति। \nअस्मिन् सन्दर्भे स्वराः'a','e','i','o','u'च सन्ति। अत्र'y'अपि a अस्ति। \nस्वरः, परन्तु केवलं यदा सः प्रदत्तस्य शब्दस्य अन्ते भवति। \n\nउदाहरणम्-\n>>> स्वरगणनाः (\"ए. बी. सी. डी\".) \n2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। 2। \n>>> स्वरगणनाः (\"ACEDY\") \n3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3। 3।", "entry_point": "VowelsCount", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/28", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Search(new List<int> {5,5,5,5,1});\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Search(new List<int> {4,1,4,1,4,4});\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Search(new List<int> {3,3});\n            var expected3 = -1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Search(new List<int> {8,8,8,8,8,8,8,8});\n            var expected4 = 8;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Search(new List<int> {2,3,3,2,2});\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Search(new List<int> {2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1});\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Search(new List<int> {3,2,8,2});\n            var expected7 = 2;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Search(new List<int> {6,7,1,8,8,10,5,8,5,3,10});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Search(new List<int> {8,8,3,6,5,6,4});\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Search(new List<int> {6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9});\n            var expected10 = 1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Search(new List<int> {1,9,10,1,3});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Search(new List<int> {6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10});\n            var expected12 = 5;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Search(new List<int> {1});\n            var expected13 = 1;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Search(new List<int> {8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5});\n            var expected14 = 4;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Search(new List<int> {2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10});\n            var expected15 = 2;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Search(new List<int> {1,6,10,1,6,9,10,8,6,8,7,3});\n            var expected16 = 1;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Search(new List<int> {9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4});\n            var expected17 = 4;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Search(new List<int> {2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7});\n            var expected18 = 4;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Search(new List<int> {9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1});\n            var expected19 = 2;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Search(new List<int> {5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8});\n            var expected20 = -1;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Search(new List<int> {10});\n            var expected21 = -1;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Search(new List<int> {9,7,7,2,4,7,2,10,9,7,5,7,2});\n            var expected22 = 2;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Search(new List<int> {5,4,10,2,1,1,10,3,6,1,8});\n            var expected23 = 1;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Search(new List<int> {7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6});\n            var expected24 = 1;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Search(new List<int> {3,10,10,9,2});\n            var expected25 = -1;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते धनात्मक-पूर्णांकानां रिक्त-सूची दत्ता भवति। तस्य अपेक्षया बृहत्तमा पूर्णांकं प्रत्यर्पयतु। \nशून्यं, तथा च तस्य आवृत्तिः पूर्णांकस्य मूल्यात् अधिका वा समानं वा भवति। \nपूर्णांकस्य आवृत्तिः सूच्यां कियत् प्रावश्यं दृश्यते इति निर्दिशति। \nयदि एतादृशं मूल्यं नास्ति तर्हि-1 प्रत्यर्पयतु। \nउदाहरणानि-\nअन्वेषणम् ([4,1,2,2,3,1]) = = 2 \nअन्वेषणम् ([1,2,3,3,4,4]) = = 3 \nअन्वेषणम् ([5,5,4,4]) = =-1", "entry_point": "Search", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/29", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriangleArea(3,4,5);\n            var expected1 = 6.0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriangleArea(1,2,10);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriangleArea(4,8,5);\n            var expected3 = 8.18;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriangleArea(2,2,2);\n            var expected4 = 1.73;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriangleArea(1,2,3);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriangleArea(10,5,7);\n            var expected6 = 16.25;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriangleArea(2,6,3);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriangleArea(1,1,1);\n            var expected8 = 0.43;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriangleArea(2,2,10);\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। अस्य क्षेत्रफलं प्रत्यावर्तयतु। \nत्रिकोणमितिः 2 दशमांश-बिन्दुभिः वृत्ताकारः भवति, यदि त्रिभिः पक्षैः वैधत्रिकोणमितिः कल्प्यते। \nअन्यथा पुनरागमनं-1 \nउभयपक्षयोः योगः अधिकः भवति चेत् त्रिभुजपक्षाः त्रिकोणं निर्मीयन्ते। \nतृतीयपक्षस्य अपेक्षया। \nउदाहरणम्-\nत्रिभुज-क्षेत्रफलं (3,4,5) = = 6.00 \nत्रिभुजक्षेत्रम् (1,2,10) = =-1", "entry_point": "TriangleArea", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/30", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WillItFly(new List<int> {3,2,3},9);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WillItFly(new List<int> {1,2},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WillItFly(new List<int> {3},5);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WillItFly(new List<int> {3,2,3},1);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WillItFly(new List<int> {1,2,3},6);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WillItFly(new List<int> {5},5);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "यदि q वस्तु उड्डीयते तर्हि सत्यं प्रत्यावर्तयति, अन्यथा असत्यम् इति फलनम् लिखतु। \nयदि वस्तु q सन्तुलितम् अस्ति (एषा पालिण्ड्रोमिक्-सूची अस्ति) तथा च तस्य तत्त्वानां योगः अधिकतम-संभव-भारस्य डब्ल्यू-तः न्यूनं वा समानं वा भवति तर्हि तत् उड्डीयते। \n\nउदाहरणम्-\nविल् _ इट् _ फ़्लै ([1,2], 5) ′ फाल्स् \n#1 + 2 अधिकतम-संभव-भारात् न्यूनम् अस्ति, परन्तु असंतुलितम् अस्ति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 1) ′ फाल्स् \n#एतत् सन्तुलितम् अस्ति, परन्तु 3 + 2 + 3 अधिकतम-सम्भव-भारात् अधिकं भवति। \n\nविल् _ इट् _ फ़्लै ([3,2,3], 9) ट्रु \n#3 + 2 + 3 अधिकतम-संभव-भारात् न्यूनं भवति, सन्तुलितं च भवति। \n\nविल् _ इट् _ फ़्लै ([3], 5) ट्रु \n#3 अधिकतम-संभव-भारात् न्यूनः अस्ति, सन्तुलितः च अस्ति।", "entry_point": "WillItFly", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/31", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsMultiplyPrime(5);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsMultiplyPrime(30);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsMultiplyPrime(8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsMultiplyPrime(10);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsMultiplyPrime(125);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsMultiplyPrime(105);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsMultiplyPrime(126);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsMultiplyPrime(729);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsMultiplyPrime(891);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsMultiplyPrime(1001);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "यदि दत्तसङ्ख्या 3 अभाज्यसङ्ख्याणां गुणनम् अस्ति तर्हि सत्यं प्रत्यावर्त्यमानं फलनम् लिखतु। \nअन्यथा असत्यम्। \n(अ) 100 तः न्यूनम् इति ज्ञात्वा। \nउदाहरणम्-\nगुणितं अभाज्यम् (30) = = सत्यम् \n30 = 2 * 3 * 5", "entry_point": "IsMultiplyPrime", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/32", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DecimalToBinary(0);\n            var expected1 = \"db0db\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DecimalToBinary(32);\n            var expected2 = \"db100000db\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DecimalToBinary(103);\n            var expected3 = \"db1100111db\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DecimalToBinary(15);\n            var expected4 = \"db1111db\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते दशमांश-रूपेण संख्या दीयते तथा च भवतः कार्यम् अस्ति तत् दशमांश-रूपेण परिवर्तयेत्। \nद्वैतीयं स्वरूपम्। फलनम् एकं स्ट्रिङ्ग् प्रत्यावर्तयेत्, यत्र प्रत्येकं अक्षरं द्वैतीयं प्रतिनिधित्वं करोति। \nसंख्या। तन्त्रे प्रत्येकं अक्षरं'0'अथवा'1'भविष्यति। \n\nस्ट्रिङ्ग् इत्यस्य आरम्भे अन्ते च'db'इति अक्षरयोः अतिरिक्तयुगलः भविष्यन्ति। \nविन्यासे साहाय्यं कर्तुं अतिरिक्तानि अक्षरानि सन्ति। \n\nउदाहरणानि-\nदशमांशतः द्वैतीयं प्रति (15) #\"db1111db\" प्रत्यावर्तयति। \nदशमांशतः द्वैतीयं प्रति (32) #\"db100000db\" प्रत्यावर्तयति।", "entry_point": "DecimalToBinary", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/33", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsHappy(\"a\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsHappy(\"aa\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsHappy(\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsHappy(\"aabb\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsHappy(\"adb\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsHappy(\"xyy\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsHappy(\"iopaxpoi\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsHappy(\"iopaxioi\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nस्ट्रिङ्ग् प्रसन्नः अस्ति वा न वा इति अन्वेष्टुं भवतः कार्यम् अस्ति। \nएकः सूत्रः प्रसन्नः भवति यदि तस्य दीर्घता न्यूनातिन्यूनं 3 भवति तथा च प्रति 3 क्रमानुगत-अक्षराणि विशिष्टाः भवन्ति। \nयथा-\nअस्ति _ प्रसन्नः (अ) => मिथ्या \nईस् _ हेप्पी (एए) => फाल्स् \nअस्ति _ प्रसन्नः (ए. बी. सी. डी.) => सत्यः \nईस् _ हेप्पी (आब्ब्) => फाल्स् इति। \nअस्ति _ प्रसन्नः (ए. डि. बि.) => सत्यः \nअस्ति _ प्रसन्नः (xyy) => मिथ्या", "entry_point": "IsHappy", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/34", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NumericalLetterGrade(new List<object> {4.0,3,1.7,2,3.5});\n            var expected1 = new List<string> {\"A+\",\"B\",\"C-\",\"C\",\"A-\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NumericalLetterGrade(new List<object> {1.2});\n            var expected2 = new List<string> {\"D+\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NumericalLetterGrade(new List<object> {0.5});\n            var expected3 = new List<string> {\"D-\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NumericalLetterGrade(new List<object> {0.0});\n            var expected4 = new List<string> {\"E\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NumericalLetterGrade(new List<object> {1,0.3,1.5,2.8,3.3});\n            var expected5 = new List<string> {\"D\",\"D-\",\"C-\",\"B\",\"B+\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NumericalLetterGrade(new List<object> {0,0.7});\n            var expected6 = new List<string> {\"E\",\"D-\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एषः सत्रस्य अन्तिमः सप्ताहः अस्ति, शिक्षकः श्रेण्याः दातव्यम् अस्ति। \nछात्राणां कृते। शिक्षिका ग्रेडिङ्ग् कृते स्वकीयं एल्गोरिथ्म् निर्मायन्ती अस्ति। \nएकमात्रा समस्या एषा अस्ति यत् सा ग्रेडिङ्ग् कृते प्रयुक्तं कोड् नष्टवती। \nसा भवतः कृते केषाञ्चन छात्राणां कृते जी. पी. ए. इत्येतेषां सूचीं दत्तवती, भवन्तं लेखनीयम् अस्ति। \nएकः प्रकारः यः निम्नलिखितं पट्टिकाम् उपयुज्य अक्षरश्रेण्याः सूचीं निर्गन्तुं शक्नोतिः \nजी. पी. ए। अक्षरश्रेणी \n4. 0 अ + \n> 3.7 अ \n> 3.3 अ-\n3. 0 बी + \n> 2.7 बी \n> 2.3 बी-\n2. 0 सी + \n> 1.7 सी \n> 1.3 सी-\n1. 1 डी + \n> 0.7 डी \n> 0.00 डी-\n0. 0 ई \n\nउदाहरणम्-\nश्रेणी-समीकरणं ([4.0,3,17,2,3.5]) = => ['ए +','बी','सी-','सी','ए -']", "entry_point": "NumericalLetterGrade", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/35", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeLength(\"Hello\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeLength(\"abcdcba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeLength(\"kittens\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeLength(\"orange\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeLength(\"wow\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeLength(\"world\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeLength(\"MadaM\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeLength(\"Wow\");\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeLength(\"\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeLength(\"HI\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = PrimeLength(\"go\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = PrimeLength(\"gogo\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = PrimeLength(\"aaaaaaaaaaaaaaa\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = PrimeLength(\"Madam\");\n            var expected14 = true;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = PrimeLength(\"M\");\n            var expected15 = false;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = PrimeLength(\"0\");\n            var expected16 = false;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् लिखतु यत् स्ट्रिङ्ग् स्वीकृत्य सत्यं प्रत्यर्पयति यदि स्ट्रिङ्ग् अस्ति। \nदीर्घता अभाज्यसङ्ख्या अस्ति अथवा अन्यथा मिथ्या अस्ति। \nउदाहरणानि \nप्राइम-लेन्थ् ('हेलो') = = ट्रू \nअभाज्य-दीर्घता ('ए. बी. सी. डी. सी. बी. ए') = = सत्यम् \nप्रैम् _ लेन्थ् ('किटन्स्') = = ट्रू \nप्राइम-लेन्थ् ('नारङ्गवर्णः') = = मिथ्या", "entry_point": "PrimeLength", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/36", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(1000);\n            var expected1 = \"1\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(150);\n            var expected2 = \"110\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(147);\n            var expected3 = \"1100\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(333);\n            var expected4 = \"1001\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(963);\n            var expected5 = \"10010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "धनात्मकं पूर्णांकं N दत्तं चेत्, तस्य अङ्कानां कुलसमं द्वैतीये प्रत्यावर्तयतु। \n\nउदाहरणम्। \nएन = 1000 इत्यस्य कृते अङ्कानां योगः 1 भविष्यति, निर्गमः \"1\" भवेत्। \nएन = 150 इत्यस्य कृते अङ्कानां योगः 6 भविष्यति, निर्गमः \"110\" भवेत्। \nएन = 147 इत्यस्य कृते अङ्कानां योगः 12 भविष्यति, निर्गमः \"1100\" भवेत्। \n\nपरिवर्तनशीलः। \n@N पूर्णांकः \nअवरोधः 0 ≤ एन ≤ 10000। \nनिर्गमः। \nद्वैती-सङ्ख्यायाः पङ्क्तिः।", "entry_point": "Solve", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/37", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected1 = new List<List<int>> {new List<int> {0,0},new List<int> {1,4},new List<int> {1,0},new List<int> {2,5},new List<int> {2,0}};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6}},2);\n            var expected2 = new List<List<int>> {new List<int> {0,1},new List<int> {1,1},new List<int> {2,1},new List<int> {3,1},new List<int> {4,1},new List<int> {5,1}};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,1,3,4,5,6},new List<int> {1,2,1,4,5,6},new List<int> {1,2,3,1,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected3 = new List<List<int>> {new List<int> {0,0},new List<int> {1,0},new List<int> {2,1},new List<int> {2,0},new List<int> {3,2},new List<int> {3,0},new List<int> {4,3},new List<int> {4,0},new List<int> {5,4},new List<int> {5,0},new List<int> {6,5},new List<int> {6,0}};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetRow(new List<List<int>> {},1);\n            var expected4 = new List<List<int>> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = GetRow(new List<List<int>> {new List<int> {1}},2);\n            var expected5 = new List<List<int>> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = GetRow(new List<List<int>> {new List<int> {},new List<int> {1},new List<int> {1,2,3}},3);\n            var expected6 = new List<List<int>> {new List<int> {2,2}};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते द्विमितीय-दत्तांशः दत्तः अस्ति, नेस्टड्-लिस्ट्-रूपेण, \nयत् म्याट्रिक्स्-सदृशम् अस्ति, तथापि, म्याट्रिक्स्-विपरीतम्, \nप्रत्येकं पङ्क्तौ भिन्नसङ्ख्याकाः स्तम्भाः भवेयुः। \nदत्तं lst, तथा च पूर्णांकं x, सूच्यां x इति पूर्णांशाः अन्विष्यतु। \nतथा च टुपल्-सूचीः प्रत्यावर्तयतु, [(x1, y1), (x2, y2)...] यथा \nप्रत्येकं टुपल् एकं कोआर्डिनेट्-(रो, कालम्स्) भवति, यत् 0 तः आरभ्यते। \nप्रारम्भे आरोहणक्रमेण पङ्क्तिद्वारा निर्देशांकान् क्रमबद्धं करोतु। \nअपि च, पङ्क्त्याः निर्देशांकान् स्तम्भैः अवरोहणक्रमेण क्रमबद्धं करोतु। \n\nउदाहरणानि-\nरो (रो) प्रापयन्तु (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) (रो) \n[1,2,3, 4,5,6], \n[1,2,3, 4,1,6], \n[1,2,3, 4,5,1] \n], 1) = = [(0,0), (1,4), (1,0), (2,5), (2,0)] \nप्राप्नोतु _ रो ([], 1) = = [] \nरो ([[], [1], [1,2,3]], 3) = = [(2,2)]", "entry_point": "GetRow", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/38", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NextSmallest(new List<int> {1,2,3,4,5});\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NextSmallest(new List<int> {5,1,4,3,2});\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NextSmallest(new List<int> {});\n            var expected3 = null;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NextSmallest(new List<int> {1,1});\n            var expected4 = null;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NextSmallest(new List<int> {1,1,1,1,0});\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NextSmallest(new List<int> {1,1});\n            var expected6 = null;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = NextSmallest(new List<int> {-35,34,12,-45});\n            var expected7 = -35;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nनेक्स्ट्-लैटेस्ट् () इति एकं फंक्षन् लिखतु यत् सूच्याः द्वितीयं लघुतमं तत्त्वं प्रत्यर्पयति। \nयदि एतादृशं तत्त्वं नास्ति तर्हि शून्यम् प्रत्यर्पयतु। \n\nअग्रिमे _ लघुतमे ([1,2,3,4,5]) = = 2 \nअग्रिमे _ लघुतमे ([5,1,4,3,2]) = = 2 \nअग्रिमे _ लघुतमे ([]) = = न \nअग्रिमे _ लघुतमे ([1,1]) = = न।", "entry_point": "NextSmallest", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/39", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsBored(\"Hello world\");\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsBored(\"Is the sky blue?\");\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsBored(\"I love It !\");\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsBored(\"bIt\");\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsBored(\"I feel good today. I will be productive. will kill It\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsBored(\"You and I are going for a walk\");\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते शब्दानां पङ्क्तिः दीयते, संख्यां गणयितुं च भवतः कार्यम् अस्ति। \nविरक्तिः। विरक्तिः एकं वाक्यम् अस्ति यत् \"अहं\" इति शब्देन आरभ्यते। \nवाक्यानि '.', '?'अथवा '!'इत्यनेन परिमिताः भवन्ति। \n\nयथा-\n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n>> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1। 1।", "entry_point": "IsBored", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/40", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Skjkasdkd(new List<int> {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3});\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Skjkasdkd(new List<int> {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Skjkasdkd(new List<int> {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3});\n            var expected3 = 13;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Skjkasdkd(new List<int> {0,724,32,71,99,32,6,0,5,91,83,0,5,6});\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Skjkasdkd(new List<int> {0,81,12,3,1,21});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Skjkasdkd(new List<int> {0,8,1,2,1,7});\n            var expected6 = 7;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Skjkasdkd(new List<int> {8191});\n            var expected7 = 19;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Skjkasdkd(new List<int> {8191,123456,127,7});\n            var expected8 = 19;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Skjkasdkd(new List<int> {127,97,8192});\n            var expected9 = 10;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते पूर्णांकानां सूची दत्ता भवति। \nभवन्तः बृहत्तमं अभाज्यमूल्यं अन्विष्य तस्य अङ्कानां योगम् प्रत्यर्पितुम् अर्हन्ति। \n\nउदाहरणानि-\nlst = [0,3,2, 1,3,5, 7,4,5, 5,5,2, 181,32,4, 32,3,2, 32,324,4, 3] कृते निर्गमः 10 भवेत्। \nlst = [1,0,1, 8,2,4597, 2,1,3, 40,1,2, 1,2,4, 2,5,1] कृते निर्गमः 25 भवेत्। \nlst = [1,3,1, 32,5107,34, 83278,109,163, 23,2323,32, 30,1,9, 3] कृते निर्गमः 13 भवेत्। \nlst = [0,724,32, 71,99,32, 6,0,5, 91,83,0, 5,6] कृते निर्गमः 11 भवेत्। \nlst = [0,81,12, 3,1,21] कृते निर्गमः 3 भवेत्। \nlst = [0,8,1, 2,1,7] कृते निर्गमः 7 भवेत्।", "entry_point": "Skjkasdkd", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/41", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"b\", \"banana\"}});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"A\", \"banana\"},{\"B\", \"banana\"}});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{5, \"banana\"},{\"a\", \"apple\"}});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckDictCase(new Dictionary<object, string> {{\"Name\", \"John\"},{\"Age\", \"36\"},{\"City\", \"Houston\"}});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckDictCase(new Dictionary<object, string> {{\"STATE\", \"NC\"},{\"ZIP\", \"12345\"}});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckDictCase(new Dictionary<object, string> {{\"fruit\", \"Orange\"},{\"taste\", \"Sweet\"}});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckDictCase(new Dictionary<object, string> {});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "यदि सर्वाः चाबिः अधः स्ट्रिङ्ग्-रूपेण सन्ति तर्हि शब्दकोशस्य दृष्ट्या सत्यं प्रत्यर्पयतु। \nकेस् अथवा सर्वाः चाबिः अपरकेस् इत्यस्मिन् स्ट्रिङ्ग्-रूपेण भवन्ति, अन्यथा फाल्स् इति प्रत्यर्पयन्ति। \nयत् फंक्षन् रिटर्न् कर्तव्यं तत् फाल्स् इति अस्ति यत् दत्तः शब्दकोशः रिक्तः अस्ति। \nउदाहरणानि-\nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"b\": \"बनाना\"}) सत्यं प्रत्यावर्तयेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", \"A\": \"बनाना\", \"B\": \"बनाना\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक्-डिक्ट्-केस् ({\"a\": \"आपल्\", 8: \"बनाना\", \"a\": \"आपल्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"नाम\": \"जान्\", \"आयुः\": \"36\", \"सिटी\": \"ह्यूस्टन्\"}) इत्यस्य मूल्यं फाल्स् इति भवेत्। \nचेक _ डिक्ट् _ केस् ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) सत्यं प्रत्यावर्तयेत्।", "entry_point": "CheckDictCase", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/42", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ClosestInteger(\"10\");\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ClosestInteger(\"14.5\");\n            var expected2 = 15;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ClosestInteger(\"-15.5\");\n            var expected3 = -16;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ClosestInteger(\"15.3\");\n            var expected4 = 15;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ClosestInteger(\"0\");\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "संख्यायाः प्रतिनिधित्वं कुर्वतां मूल्यं (स्ट्रिङ्ग्) स्वीकृत्य एकं फंक्षन् निर्मायतु। \nतस्य समीपस्थं पूर्णकं प्रत्यर्पयति। यदि संख्या समदूरे अस्ति। \nपूर्णांकद्वयात्, शून्यात् दूरे तस्य वृत्तं करोतु। \n\nउदाहरणानि \n>>> निकटतम-पूर्णांकः (\"10\") \n10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। 10। \n>>> निकटतम-पूर्णांकः (\"15.3\") \n15। \n\nटिप्पणीः \nशून्यात् दूरे वृत्ताकारस्य अर्थः यदि दत्तसङ्ख्या समदूरम् अस्ति इति। \nपूर्णांकद्वये यः प्रत्यावर्तनीयः, सः एव पूर्णांकः। \nशून्यात् सुदूरतमम्। उदाहरणार्थं निकटतमं पूर्णांकं (\"14.5\") भवेत्। \n15 प्रत्यावर्तयतु तथा च समीपस्थः पूर्णांकः (\"-14.5\")-15 प्रत्यावर्तयेत्।", "entry_point": "ClosestInteger", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/43", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MakeAPile(3);\n            var expected1 = new List<int> {3,5,7};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MakeAPile(4);\n            var expected2 = new List<int> {4,6,8,10};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MakeAPile(5);\n            var expected3 = new List<int> {5,7,9,11,13};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MakeAPile(6);\n            var expected4 = new List<int> {6,8,10,12,14,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MakeAPile(8);\n            var expected5 = new List<int> {8,10,12,14,16,18,20,22};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "धनात्मक-पूर्णांकस्य n इत्यस्य दृष्ट्या, भवन्तः n-स्तराणां शिलाखण्डं निर्मातुम् अर्हन्ति। \nप्रथमस्तरे एन-शिलाः सन्ति। \nअग्रिमस्तरे शिलानाम् सङ्ख्या अस्ति-\n- अग्रिमः विषमसङ्ख्या यदि n विषम अस्ति। \n- अग्रिमं समसङ्ख्या यदि n समम् अस्ति। \nसूच्यां प्रत्येकस्तरे शिलानां सङ्ख्या प्रत्यावर्तयतु, यत्र सूचकाङ्के तत्त्वम् अस्ति। \ni स्तरस्य शिलानां संख्यां सूचयति (i + 1)। \n\nउदाहरणानि-\n>>> मेक्-अ-पैल् (3) \n[3,5,7]", "entry_point": "MakeAPile", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/44", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsString(\"Hi, my name is John\");\n            var expected1 = new List<string> {\"Hi\",\"my\",\"name\",\"is\",\"John\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsString(\"One, two, three, four, five, six\");\n            var expected2 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsString(\"Hi, my name\");\n            var expected3 = new List<string> {\"Hi\",\"my\",\"name\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsString(\"One,, two, three, four, five, six,\");\n            var expected4 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsString(\"\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsString(\"ahmed     , gamal\");\n            var expected6 = new List<string> {\"ahmed\",\"gamal\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते अल्पविरामाः रिक्तस्थानानि वा विभक्तानि शब्दशृङ्खला दीयन्ते। भवतः कार्यम् अस्ति-\nसूत्रं शब्दैः विभज्य शब्दानां श्रेणीं प्रत्यावर्तयेत्। \n\nयथा-\nशब्दः _ स्ट्रिङ्ग् (\"हाय्, मम नाम जान् अस्ति\") = = [\"हाय्\", \"मै\", \"नेम्\", \"इस्\", \"जान्\"] \n\"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\", \"एकः\",", "entry_point": "WordsString", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/45", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ChooseNum(12,15);\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ChooseNum(13,12);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ChooseNum(33,12354);\n            var expected3 = 12354;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ChooseNum(5234,5233);\n            var expected4 = -1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ChooseNum(6,29);\n            var expected5 = 28;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ChooseNum(27,10);\n            var expected6 = -1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ChooseNum(7,7);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ChooseNum(546,546);\n            var expected8 = 546;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एतत् फलनम् x तथा y इति धनात्मक-संख्याद्वयं स्वीकृत्य तत् प्रत्यावर्तयति। \nबृहत्तमः सम-पूर्णांकसङ्ख्या, या [x, y] समावेशीपरिधिमध्ये अस्ति। \nतत्र एतादृशी सङ्ख्या नास्ति, ततः फंक्षन्-1 पुनः प्राप्नुयात्। \n\nयथा-\nसंख्यां चिनोतु (12,15) = 14 \nसंख्यां चिनोतु (13,12) =-1", "entry_point": "ChooseNum", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/46", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RoundedAvg(1,5);\n            var expected1 = \"0b11\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RoundedAvg(7,13);\n            var expected2 = \"0b1010\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RoundedAvg(964,977);\n            var expected3 = \"0b1111001010\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RoundedAvg(996,997);\n            var expected4 = \"0b1111100100\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RoundedAvg(560,851);\n            var expected5 = \"0b1011000010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RoundedAvg(185,546);\n            var expected6 = \"0b101101110\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RoundedAvg(362,496);\n            var expected7 = \"0b110101101\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RoundedAvg(350,902);\n            var expected8 = \"0b1001110010\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RoundedAvg(197,233);\n            var expected9 = \"0b11010111\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RoundedAvg(7,5);\n            var expected10 = -1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RoundedAvg(5,1);\n            var expected11 = -1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = RoundedAvg(5,5);\n            var expected12 = \"0b101\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते n तथा m इति धनात्मक-पूर्णांकद्वयम् दत्तं भवति, तथा च भवतः कार्यम् गणना इति अस्ति। \nn तः m पर्यन्तं पूर्णांकानां माध्यं (n तथा m सहितं)। \nसमीपस्थस्य पूर्णांकस्य उत्तरस्य वृत्तं कृत्वा तं द्विमानरूपेण परिवर्तयतु। \nयदि n, m तः अधिकः अस्ति, तर्हि-1 प्रत्यावर्तयतु। \nउदाहरणम्-\nगोलः एव्ग् (1,5) => \"0बि11\" \nआवर्तितः (7,5) =>-1 \nगोलः एव्ग् (10,20) => \"0बि1111\" \nगोलः एव्ग् (20,33) => \"0बि11010\"", "entry_point": "RoundedAvg", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/47", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = F(5);\n            var expected1 = new List<int> {1,2,6,24,15};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = F(7);\n            var expected2 = new List<int> {1,2,6,24,15,720,28};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = F(1);\n            var expected3 = new List<int> {1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = F(3);\n            var expected4 = new List<int> {1,2,6};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "फलनस्य f इत्यस्य कार्यान्वयनं करोतु यत् n इत्येतं परिमापरूपेण स्वीकरोति, \nतथा च n परिमाणस्य सूचीं प्रत्यर्पयति, येन सूचकाङ्कः i इत्यत्र तत्त्वस्य मूल्यं i इत्यस्य भाज्यम् अस्ति, यदि i समः अस्ति। \nअथवा अन्यथा 1 तः i पर्यन्तं संख्यानां योगः। \nअहं 1 तः आरभत। \n1 तः i (1 * 2 *................................................................................................................................................................................................ \nउदाहरणम्-\nf (5) = = [1,2,6,24,15]", "entry_point": "F", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/48", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = EvenOddPalindrome(123);\n            var expected1 = new List<int> {8,13};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = EvenOddPalindrome(12);\n            var expected2 = new List<int> {4,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = EvenOddPalindrome(3);\n            var expected3 = new List<int> {1,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = EvenOddPalindrome(63);\n            var expected4 = new List<int> {6,8};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = EvenOddPalindrome(25);\n            var expected5 = new List<int> {5,6};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = EvenOddPalindrome(19);\n            var expected6 = new List<int> {4,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = EvenOddPalindrome(9);\n            var expected7 = new List<int> {4,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = EvenOddPalindrome(1);\n            var expected8 = new List<int> {0,1};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, सम-विषम-संख्यायुक्तम् एकं टुपल् प्रत्यर्पयतु। \nपूर्णांक-पालिण्ड्रोम् इत्येतानि (1, n) इति परिधौ अन्तर्भवन्ति, सर्वसमावेशकानि। \n\nउदाहरणम्-1: \n\nनिवेशः 3 \nउत्पादनः (1,2) \nव्याख्याः \nइन्टिजर्-पालिण्ड्रोम् इत्येताः 1,2,3 सन्ति। तेषु एकः समः, द्वौ च विषमौ स्तः। \n\nउदाहरणं 2: \n\nनिवेशः 12 \nउत्पादनः (4,6) \nव्याख्याः \n1, 2, 3, 4, 5, 6, 7, 8, 9, 11 इति पूर्णांकपेलिण्ड्रोम् अस्ति। तेषु चत्वारः समानि, 6 विषमानि च सन्ति। \n\nटिप्पणीः \n1. 1 <= n <= 10 ^ 3 \n2. प्रत्यावर्तित-टुपल्-मध्ये क्रमशः सम-विषम-पूर्णांक-पालिण्ड्रोम्-सङ्ख्या भवति।", "entry_point": "EvenOddPalindrome", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/49", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MoveOneBall(new List<int> {3,4,5,1,2});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MoveOneBall(new List<int> {3,5,10,1,2});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MoveOneBall(new List<int> {4,3,1,2});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MoveOneBall(new List<int> {3,5,4,1,2});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MoveOneBall(new List<int> {});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "अस्माकं समीपे'arr'इति एन-पूर्णांकानां arr [1], arr [2],..., arr [N] इति व्यूहः अस्ति। \nश्रेण्यां संख्याः यादृच्छिकरूपेण क्रमिताः भविष्यन्ति। भवतः कार्यम् निर्धारणीयम् अस्ति यत् किम् इति। \nनिष्पादनेन अर्रे इत्यस्य क्रमनिर्धारणं न न्यूनीकर्तुं शक्यते। \nप्रदत्तश्रेण्यां निम्नलिखितं कार्यम् अस्ति। \nभवान् बहुवारं सम्यक् शिफ्ट्-शल्यक्रिया कर्तुं अनुमतः अस्ति। \n\nएकं रैट्-शिफ्ट्-आपरेशन् इत्यस्य अर्थः आरे इत्यस्य सर्वान् तत्त्वान् एकेन स्थानान्तरं कारयेत् इति। \nसम्यक् दिशायां स्थितिं करोतु। व्यूहस्य अन्तिमं तत्त्वं प्रति स्थानान्तरितं भविष्यति। \nआरे मध्ये आरम्भिक-स्थितिः अर्थात् 0 तम-सूचकाङ्कः। \n\nयदि उपर्युक्तकार्यस्य निष्पादनेन क्रमबद्धं व्यूहं प्राप्तुं शक्यते। \nततः ट्रू इति प्रत्यावर्तयतु अन्यथा फाल्स् इति प्रत्यावर्तयतु। \nयदि प्रदत्तः व्यूहः रिक्तः अस्ति तर्हि सत्यं प्रत्यर्पयतु। \n\nटिप्पणिः दत्तसूच्यां विशिष्टानि तत्त्वानि सन्ति इति सुनिश्चितं भवति। \n\nउदाहरणार्थं-\n\nमूव्-वन्-बाल् ([3,4,5,1,2]) = => ट्रू \nस्पष्टीकरणम्-2 रैट्-शिफ्ट्-आपरेशन्-मध्ये निष्पादनेन, अ-डीक्रीसिङ्ग्-आर्डर् कर्तुं शक्यते। \nप्रदत्तस्य श्रेण्याः कृते प्राप्यते। \nमूव्-वन्-बाल् ([3,5,4,1,2]) = => फाल्स् \nस्पष्टीकरणम्-दत्तस्य कृते अ-ह्रास-आदेशं प्राप्तुं न शक्यते। \nकस्यापि सङ्ख्यायां रैट्-शिफ्ट्-कार्याणि कृत्वा एरे।", "entry_point": "MoveOneBall", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/50", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Exchange(new List<int> {1,2,3,4},new List<int> {1,2,3,4});\n            var expected1 = \"YES\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Exchange(new List<int> {1,2,3,4},new List<int> {1,5,3,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Exchange(new List<int> {1,2,3,4},new List<int> {2,1,4,3});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Exchange(new List<int> {5,7,3},new List<int> {2,6,4});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Exchange(new List<int> {5,7,3},new List<int> {2,6,3});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Exchange(new List<int> {3,2,6,1,8,9},new List<int> {3,5,5,1,1,1});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Exchange(new List<int> {100,200},new List<int> {200,200});\n            var expected7 = \"YES\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "अस्मिन् समस्यायां, भवान् एकं फंक्षन् प्रवर्तयिष्यति यत् संख्यानां सूचीं द्वयं स्वीकरोति, \nतथा च तत्त्वानां विनिमयं कर्तुं शक्यते वा इति निर्धारयति। \nतेषां मध्ये एल्. एस्. टि. 1 इतीदं केवलं समसङ्ख्याणां सूचीं निर्मातुम्। \nएल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये विनिमयितानां तत्त्वानां सङ्ख्यायाः सीमा नास्ति। \nयदि एल्. एस्. टि. 1 तथा एल्. एस्. टि. 2 मध्ये तत्त्वानां विनिमयं कर्तुं शक्यते। \nएल्. एस्. टि. 1 इत्यस्य सर्वाणि तत्त्वानि समानि भवेयुः चेत् \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयथा-\nविनिमयः ([1,2,3,4], [1,2,3,4]) => \"यस्\" \nविनिमयः ([1,2,3,4], [1,5,3,4]) => \"न\" \nनिवेशसूचीः रिक्तानि न भविष्यन्ति इति कल्प्यते।", "entry_point": "Exchange", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/51", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ReverseDelete(\"abcde\",\"ae\");\n            var expected1 = new List<object> {\"bcd\",false};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ReverseDelete(\"abcdef\",\"b\");\n            var expected2 = new List<object> {\"acdef\",false};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ReverseDelete(\"abcdedcba\",\"ab\");\n            var expected3 = new List<object> {\"cdedc\",true};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ReverseDelete(\"dwik\",\"w\");\n            var expected4 = new List<object> {\"dik\",false};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ReverseDelete(\"a\",\"a\");\n            var expected5 = new List<object> {\"\",true};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ReverseDelete(\"abcdedcba\",\"\");\n            var expected6 = new List<object> {\"abcdedcba\",true};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ReverseDelete(\"abcdedcba\",\"v\");\n            var expected7 = new List<object> {\"abcdedcba\",true};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ReverseDelete(\"vabba\",\"v\");\n            var expected8 = new List<object> {\"abba\",true};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = ReverseDelete(\"mamma\",\"mia\");\n            var expected9 = new List<object> {\"\",true};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "कार्यम्। \nअस्माभिः एस् तथा सी इति स्ट्रिङ्ग् द्वयं दत्तम् अस्ति, भवन्तः एस् इत्यस्मिन् सर्वाणि अक्षरानि निष्कासयेयुः यानि सी इत्यस्मिन् कस्यापि अक्षरस्य समानानि सन्ति। \nततः परीक्षयतु यत् परिणामसूत्रं पालिण्ड्रोम् अस्ति वा इति। \nस्ट्रिङ्ग् इतीदं पालिण्ड्रोम् इति कथ्यते यदि तत् अग्रे पृष्ठतः एव पठ्यते। \nभवान् चेकस्य कृते ट्रु/फाल्स् इति परिणाम-स्ट्रिङ्ग् युक्तं टुपल् प्रत्यर्पयेत्। \nउदाहरणम्। \ns = \"एबिसिडि\", c = \"एइ\" कृते, परिणामः ('बिसिडि', फाल्स्) भवेत्। \ns = \"abcdef\", c = \"b\" इत्यस्य कृते परिणामः भवेत् ('acdef', असत्यम्)। \ns = \"abcdedcba\", c = \"ab\" कृते, परिणामः भवेत् ('cdedc', सत्यं)।", "entry_point": "ReverseDelete", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/52", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MaxFill(new List<List<int>> {new List<int> {0,0,1,0},new List<int> {0,1,0,0},new List<int> {1,1,1,1}},1);\n            var expected1 = 6;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MaxFill(new List<List<int>> {new List<int> {0,0,1,1},new List<int> {0,0,0,0},new List<int> {1,1,1,1},new List<int> {0,1,1,1}},2);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MaxFill(new List<List<int>> {new List<int> {0,0,0},new List<int> {0,0,0}},5);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},2);\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},9);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते कूपानां आयताकार-ग्रिड् दीयते। प्रत्येकं पङ्क्तिः एकस्य कूपस्य प्रतिनिधित्वं करोति। \nतथा च पङ्क्तिमध्ये प्रत्येकं 1 जलस्य एककं प्रतिनिधित्वं करोति। \nप्रत्येकस्य कूपस्य अनुरूपं बाल्टी वर्तते यस्य उपयोगेन तस्य जलं निष्कासयितुं शक्यते। \nअपि च सर्वाणि बाल्टिकाः समानक्षमतायुक्तानि भवन्ति। \nकूपान् रिक्तं कर्तुं बाल्टिकाः उपयोक्तुं भवतः कार्यम् अस्ति। \nबाल्टिकाः न्यूनीकर्तुं कियत् प्रावश्यं आवश्यकं भवति तत् निर्दिशतु। \n\nउदाहरणम्-1: \nनिवेशः। \nग्रिड्ः [[0, 0,1,0], [0,1,0, 0], [1,1,1, 1] \nबाल्टी-क्षमताः 1 \nउत्पादनः 6 \n\nउदाहरणं 2: \nनिवेशः। \nग्रिड्ः [[0, 0,1,1], [0,0,0, 0], [1,1,1, 1], [0, 1,1,1]] \nबाल्टी-क्षमताः 2 \nउत्पादनः 5 \n\nउदाहरणं 3: \nनिवेशः। \nग्रिड्ः [[0,0,0], [0,0,0] \nबाल्टी-क्षमताः 5 \nउत्पादनः 0 \n\nबाधिताः। \n* सर्वाणि कूपाणि समानदीर्घानि भवन्ति। \n* 1 <= grid.length <= 102 \n* 1 <= ग्रिड् [:, 1]. दीर्घता <= 102 \nग्रिड् [i] [j]-> 0। 1 \n* 1 <= क्षमता <= 10", "entry_point": "MaxFill", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/53", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SelectWords(\"Mary had a little lamb\",4);\n            var expected1 = new List<string> {\"little\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SelectWords(\"Mary had a little lamb\",3);\n            var expected2 = new List<string> {\"Mary\",\"lamb\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SelectWords(\"simple white space\",2);\n            var expected3 = new List<string> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SelectWords(\"Hello world\",4);\n            var expected4 = new List<string> {\"world\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SelectWords(\"Uncle sam\",3);\n            var expected5 = new List<string> {\"Uncle\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SelectWords(\"\",4);\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SelectWords(\"a b c d e f\",1);\n            var expected7 = new List<string> {\"b\",\"c\",\"d\",\"f\"};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "स्ट्रिङ्ग् एस् तथा प्राकृतिकसङ्ख्या एन् इत्येतयोः दृष्ट्या, भवन्तं कार्यान्वितुम् कार्यभारः दत्तः अस्ति। \nएकं फंक्षन् यत् स्ट्रिङ्ग्-एस् इत्यतः सर्वाः शब्दानां सूचीं प्रत्यर्पयति यत्र यथार्थरूपेण सन्ति। \nn व्यञ्जनाः, क्रमशः एतानि शब्दानि स्ट्रिङ्ग् s मध्ये दृश्यन्ते। \nयदि स्ट्रिङ्ग् s रिक्तः अस्ति तर्हि फंक्षन् रिक्तसूचीम् प्रत्यर्पयेत्। \nटिप्पणिः भवन्तः अनुमन्यन्ते यत् इन्पुट् स्ट्रिङ्ग् मध्ये केवलं अक्षराणि रिक्तस्थानानि च सन्ति इति। \nउदाहरणानि-\nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 4) = => [\"लघुः\"] \nपदानि चिनोतु (\"मरियमस्य लघुः मेषः आसीत्\", 3) = => [\"मरियम\", \"मेषः\"] \nपदानि चिनोतु (\"सादा श्वेतस्थानम्\", 2) = => [] \nपदानि चिनोतु (\"नमस्ते वर्ल्ड्\", 4) = => [\"वर्ल्ड्\"] \nपदानि चिनोतु (\"अंकल् स्याम्\", 3) = => [\"अंकल्\"]", "entry_point": "SelectWords", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/54", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Maximum(new List<int> {-3,-4,5},3);\n            var expected1 = new List<int> {-4,-3,5};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Maximum(new List<int> {4,-4,4},2);\n            var expected2 = new List<int> {4,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Maximum(new List<int> {-3,2,1,2,-1,-2,1},1);\n            var expected3 = new List<int> {2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Maximum(new List<int> {123,-123,20,0,1,2,-3},3);\n            var expected4 = new List<int> {2,20,123};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Maximum(new List<int> {-123,20,0,1,2,-3},4);\n            var expected5 = new List<int> {0,1,2,20};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Maximum(new List<int> {5,15,0,3,-13,-8,0},7);\n            var expected6 = new List<int> {-13,-8,0,0,3,5,15};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Maximum(new List<int> {-1,0,2,5,3,-10},2);\n            var expected7 = new List<int> {3,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Maximum(new List<int> {1,0,5,-7},1);\n            var expected8 = new List<int> {5};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Maximum(new List<int> {4,-4},2);\n            var expected9 = new List<int> {-4,4};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Maximum(new List<int> {-10,10},2);\n            var expected10 = new List<int> {-10,10};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Maximum(new List<int> {1,2,3,-23,243,-400,0},0);\n            var expected11 = new List<int> {};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "पूर्णांकानां एरे-आर् तथा धनात्मकं पूर्णांकं के च दत्तं चेत्, क्रमबद्धां सूचीं प्रत्यर्पयतु। \nआर्-आर् मध्ये अधिकतम-के-सङ्ख्याभिः सह के-इत्यस्य दीर्घता। \n\nउदाहरणम्-1: \n\nनिवेशः arr = [-3,-4,5], k = 3 \nनिर्गमः [-4,-3,5] \n\nउदाहरणं 2: \n\nनिवेशः arr = [4,-4,4], k = 2 \nनिर्गमः [4,4] \n\nउदाहरणं 3: \n\nनिवेशः arr = [-3,2,1,2,-1,-2,1], k = 1 \nउत्पादनः [2] \n\nटिप्पणीः \n1. व्यूहस्य दीर्घता [1000] इति परिधौ भविष्यति। \n2. श्रेण्यां तत्त्वानि [-1000] इति परिधौ भविष्यन्ति। \n3. 0 <= k <= लेन (arr)", "entry_point": "Maximum", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/55", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AddElements(new List<int> {1,-2,-3,41,57,76,87,88,99},3);\n            var expected1 = -4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = AddElements(new List<int> {111,121,3,4000,5,6},2);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = AddElements(new List<int> {11,21,3,90,5,6,7,8,9},4);\n            var expected3 = 125;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = AddElements(new List<int> {111,21,3,4000,5,6,7,8,9},4);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = AddElements(new List<int> {1},1);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "ए. आर्. आर्. इति पूर्णांकस्य, के. इति पूर्णांकस्य च रिक्ततरश्रेण्या प्रदत्तं चेत्, पुनरागमनं करोतु। \nए. आर्. आर्. इत्यस्य प्रथम-के-तत्त्वात् अधिकतम-अङ्कद्वयेन युक्तानां तत्त्वानां योगः। \n\nउदाहरणम्-\n\nनिवेशः arr = [111,21,3, 4000,5,6, 7,8,9], k = 4 \nनिर्गमः 24 #21 + 3 इत्यस्य योगः \n\nबाधिताः। \n1. 1 <= लेन (arr) <= 100 \n2. 1 <= k <= लेन (arr)", "entry_point": "AddElements", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/56", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Intersection(new List<int> {1,2},new List<int> {2,3});\n            var expected1 = \"NO\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Intersection(new List<int> {-1,1},new List<int> {0,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Intersection(new List<int> {-3,-1},new List<int> {-5,5});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Intersection(new List<int> {-2,2},new List<int> {-4,0});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Intersection(new List<int> {-11,2},new List<int> {-1,-1});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Intersection(new List<int> {1,2},new List<int> {3,5});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Intersection(new List<int> {1,2},new List<int> {1,2});\n            var expected7 = \"NO\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Intersection(new List<int> {-2,-2},new List<int> {-3,-2});\n            var expected8 = \"NO\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते द्वौ अन्तरालौ दीयन्ते। \nयत्र प्रत्येकः अन्तरालः पूर्णांकयुगलः भवति। यथा, अन्तरालः = (आरम्भः, समाप्तिः) = (1,2)। \nप्रदत्तानि अन्तरालानि परिवेष्टितानि भवन्ति यस्य अर्थः अन्तरालः (आरम्भः, समाप्तिः) इति। \nतत्र आरम्भः समाप्तिः च स्तः। \nप्रत्येकस्मिन् निर्दिष्टावधौ, तस्य आरम्भः तस्य अन्तात् न्यूनः अथवा समानः इति कल्प्यते। \nएतयोः द्वयोः प्रतिच्छेदनस्य दीर्घता कियत् इति निर्णेतुं भवतः कार्यम् अस्ति। \nअन्तरालः अभाज्यसङ्ख्या अस्ति। \nउदाहरणार्थं, अन्तरालानां (1,3), (2,4) प्रतिच्छेदनम् (2,3) अस्ति। \nयस्य दीर्घता 1 अस्ति, या अभाज्यसङ्ख्या नास्ति। \nयदि प्रतिच्छेदनस्य दीर्घता अभाज्यसङ्ख्या अस्ति, तर्हि \"यस्\" इति प्रत्यावर्तयतु। \nअन्यथा \"न\" इति प्रत्यावर्तयतु। \nयदि द्वयोः अन्तरालयोः प्रतिच्छेदनम् न भवति तर्हि \"न\" इति प्रत्यावर्तयतु। \n\n[इन्पुट्/औट्पुट्] प्रतिमानानिः \nप्रतिच्छेदनम् ((1,2,3)) = => \"न\" \nप्रतिच्छेदनम् ((-1,1), (0,4)) = => \"न\" \nप्रतिच्छेदनम् ((-3,-1), (-5,5)) = => \"यस्\"", "entry_point": "Intersection", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/57", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Tri(3);\n            var expected1 = new List<object> {1,3,2.0,8.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Tri(4);\n            var expected2 = new List<object> {1,3,2.0,8.0,3.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Tri(5);\n            var expected3 = new List<object> {1,3,2.0,8.0,3.0,15.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Tri(6);\n            var expected4 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Tri(7);\n            var expected5 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Tri(8);\n            var expected6 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Tri(9);\n            var expected7 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Tri(20);\n            var expected8 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0,6.0,48.0,7.0,63.0,8.0,80.0,9.0,99.0,10.0,120.0,11.0};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Tri(0);\n            var expected9 = new List<object> {1};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Tri(1);\n            var expected10 = new List<object> {1,3};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "फिबोनाची-क्रमं सर्वे जानन्ति, गणितशास्त्रज्ञैः तस्य गहनः अध्ययनम् अभूत्। \nअन्तिमानि युगयुगानि। तथापि, यत् जनाः न जानन्ति तत् ट्रिबोनाचि-क्रमः अस्ति। \nट्रैबोनाचि-क्रमः पुनरावर्तनेन परिभाषितः अस्ति। \nत्रि (1) = 3 \nत्रि (n) = 1 + n/2, यदि n समः अस्ति। \nत्रि (n) = त्रि (n-1) + त्रि (n-2) + त्रि (n + 1), यदि n अयुग्मः अस्ति। \nयथा-\nत्रि (2) = 1 + (2/2) = 2 \nत्रि (4) = 3 \nत्रि (3) = त्रि (2) + त्रि (1) + त्रि (4) \n= 2 + 3 + 3 = 8 \nभवते अ-ऋणात्मक-पूर्णांकसङ्ख्या n दीयते, भवते सूचीं प्रत्यर्पयेत्। \nट्रिबोनाची-क्रमस्य प्रथमा n + 1 सङ्ख्याः। \nउदाहरणानि-\nत्रि (3) = [1,3,2,8]", "entry_point": "Tri", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/58", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Digits(5);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Digits(54);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Digits(120);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Digits(5014);\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Digits(98765);\n            var expected5 = 315;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Digits(5576543);\n            var expected6 = 2625;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Digits(2468);\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "धनात्मक-पूर्णांकं n दत्तं चेत्, विषम-अङ्कानां गुणितं प्रत्यावर्तयतु। \nयदि सर्वाणि अङ्कानि समानि सन्ति तर्हि 0 प्रत्यावर्तयतु। \nयथा-\nअङ्कः (1) = 1 \nसंख्या (4) = 0 \nअङ्कानि (235) = = 15", "entry_point": "Digits", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/59", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsNested(\"[[]]\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsNested(\"[]]]]]]][[[[[]\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsNested(\"[][]\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsNested(\"[]\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsNested(\"[[[[]]]]\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsNested(\"[]]]]]]]]]]\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsNested(\"[][][[]]\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsNested(\"[[]\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsNested(\"[]]\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsNested(\"[[]][[\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsNested(\"[[][]]\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsNested(\"\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsNested(\"[[[[[[[[\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IsNested(\"]]]]]]]]\");\n            var expected14 = false;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् रचयतु यत् स्ट्रिङ्ग् इतीदं इन्पुट् रूपेण स्वीकरोतु यस्मिन् केवलं वर्ग-कोष्ठकाः एव भवन्ति। \nयदि केवलम् कोष्ठकानां वैधम् अनुवर्तनं भवति तर्हि एव फंक्षन् ट्रू इति प्रत्यावर्तयेत्। \nयत्र अनुवर्तने न्यूनातिन्यूनं एकः कोष्ठकः निहितः भवति। \n\nइस नेस्टेड ('[[]]') सही है। \nis _ nested ('[]]]]] [[[[]') असत्यम् \nis _ nested ('[] []') असत्यम् अस्ति। \nis _ nested ('[]') असत्यम् अस्ति। \nनेस्टेड ('[[] []]') सत्यम् अस्ति। \nनेस्टेड ('[[]] [[') सत्यम् अस्ति।", "entry_point": "IsNested", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/60", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumSquares(new List<object> {1,2,3});\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumSquares(new List<object> {1.0,2,3});\n            var expected2 = 14;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumSquares(new List<object> {1,3,5,7});\n            var expected3 = 84;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumSquares(new List<object> {1.4,4.2,0});\n            var expected4 = 29;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumSquares(new List<object> {-2.4,1,1});\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SumSquares(new List<object> {100,1,15,2});\n            var expected6 = 10230;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SumSquares(new List<object> {10000,10000});\n            var expected7 = 200000000;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = SumSquares(new List<object> {-1.4,4.6,6.3});\n            var expected8 = 75;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = SumSquares(new List<object> {-1.4,17.9,18.9,19.9});\n            var expected9 = 1086;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = SumSquares(new List<object> {0});\n            var expected10 = 0;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = SumSquares(new List<object> {-1});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = SumSquares(new List<object> {-1,1,0});\n            var expected12 = 2;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते अङ्कानां सूची दत्ता भवति। \nभवान् दत्तसूच्यां वर्गसंख्यानां योगम् प्रत्यर्पयेत्। \nसूच्याः प्रत्येकं तत्त्वं प्रथमं उपरितनं इन्ट् (सीलिङ्ग्) प्रति परिभ्रमयतु। \nउदाहरणानि-\nlst = [1,2,3] इत्यस्य कृते निर्गमः 14 भवेत्। \nlst = [1,4,9] कृते निर्गमः 98 भवेत्। \nlst = [1,3,5, 7] कृते उत्पादनं 84 भवेत्। \nlst = [1.4,4.2, 0] कृते निर्गमः 29 भवेत्। \nlst = [-2.4,1, 1] कृते निर्गमः 6 भवेत्।", "entry_point": "SumSquares", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/61", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckIfLastCharIsALetter(\"apple\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckIfLastCharIsALetter(\"apple pi e\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckIfLastCharIsALetter(\"eeeee\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckIfLastCharIsALetter(\"A\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckIfLastCharIsALetter(\"Pumpkin pie \");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckIfLastCharIsALetter(\"Pumpkin pie 1\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckIfLastCharIsALetter(\"\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = CheckIfLastCharIsALetter(\"eeeee e \");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = CheckIfLastCharIsALetter(\"apple pie\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = CheckIfLastCharIsALetter(\"apple pi e \");\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् क्रीयेट् करोतु यत् ट्रु इति प्रत्यावर्तयति यदि अन्तिमः अक्षरः अस्ति। \nदत्तस्य स्ट्रिङ्ग् इत्यस्य वर्णमाला अस्ति, न च अस्ति। \nएकस्य शब्दस्य अंशः, अन्यथा असत्यम्। \nटिप्पणीः \"शब्दः\" इति अक्षराणां समूहः अस्ति यः स्थानैः विभक्तः अस्ति। \n\nउदाहरणानि-\nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\")-सत्यम् इति परीक्षयतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"आपल् पै ई\") इति पश्यतु। \nयदि _ अन्तिमं _ चरं _ अस्ति _ अ _ अक्षरं (\"\") इति पश्यतु।", "entry_point": "CheckIfLastCharIsALetter", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/62", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CanArrange(new List<int> {1,2,4,3,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CanArrange(new List<int> {1,2,4,5});\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CanArrange(new List<int> {1,4,2,5,6,7,8,9,10});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CanArrange(new List<int> {4,8,5,7,3});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CanArrange(new List<int> {});\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् रचयतु यत् तत्वस्य बृहत्तमं सूचकाङ्कं प्रत्यर्पयति यत् \nतत्क्षणात् पूर्ववर्तिनः तत्त्वात् बृहत्तरं वा समानं वा नास्ति। यदि \nएतादृशं तत्त्वं नास्ति, ततः रिटर्न्-1 भवति। दत्तश्रेण्यां तत् न भविष्यति। \nद्विगुणितानि मूल्यानि। \n\nउदाहरणानि-\nकेन _ अरेंज् ([1,2,4, 3,5]) = 3 \nकेन-अरेंज् ([1,2,3]) =-1", "entry_point": "CanArrange", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/63", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7});\n            var expected1 = new List<object> {null,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7,0});\n            var expected2 = new List<object> {null,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestSmallestIntegers(new List<int> {1,3,2,4,5,6,-2});\n            var expected3 = new List<object> {-2,1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestSmallestIntegers(new List<int> {4,5,3,6,2,7,-7});\n            var expected4 = new List<object> {-7,2};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestSmallestIntegers(new List<int> {7,3,8,4,9,2,5,-9});\n            var expected5 = new List<object> {-9,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = LargestSmallestIntegers(new List<int> {});\n            var expected6 = new List<object> {null,null};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = LargestSmallestIntegers(new List<int> {0});\n            var expected7 = new List<object> {null,null};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6});\n            var expected8 = new List<object> {-1,null};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6,0});\n            var expected9 = new List<object> {-1,null};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,1});\n            var expected10 = new List<object> {-3,1};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,-100,1});\n            var expected11 = new List<object> {-3,1};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् निर्माय यत् टुपल् (a, b) प्रत्यावर्तयति, यत्र'a'अस्ति। \nऋणात्मक-पूर्णांशेषु बृहत्तमः, तथा च'b'लघुतमः अस्ति। \nसूच्यां धनात्मक-पूर्णांशाः सन्ति। \nयदि ऋणात्मकं वा धनात्मकं वा पूर्णांकं नास्ति तर्हि तान् नन् इति प्रत्यर्पयतु। \n\nउदाहरणानि-\nबृहत्तम-लघुतमः-पूर्णांकः ([2,4,1,3,5,7]) = = (न, 1) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([]) = = (न, न) \nबृहत्तमः _ लघुतमः _ पूर्णांकः ([0]) = = (न, न)", "entry_point": "LargestSmallestIntegers", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/64", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFactorial(4);\n            var expected1 = 288;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFactorial(5);\n            var expected2 = 34560;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFactorial(7);\n            var expected3 = 125411328000;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFactorial(1);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "ब्राजीलीन्-फ़ैक्टोरियल् इतीदं एवं परिभाषितः अस्ति। \nब्राज़ीलियन्-फ़ैक्टोरियल् (n) = n! * (n-1)! * (n-2)! *... * 1! \nयत्र n> 0 \n\nयथा-\n>>> स्पेशिअल-फ़ैक्टोरियल् (4) \n288। \n\nफलनम् इन्पुट्-रूपेण पूर्णांकं प्राप्स्यति, विशेषम् प्रत्यर्पयेत् च। \nअस्य पूर्णांकस्य भाज्यम्।", "entry_point": "SpecialFactorial", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/65", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsInSentence(\"This is a test\");\n            var expected1 = \"is\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsInSentence(\"lets go for swimming\");\n            var expected2 = \"go for\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsInSentence(\"there is no place available here\");\n            var expected3 = \"there is no place\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsInSentence(\"Hi I am Hussein\");\n            var expected4 = \"Hi am Hussein\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsInSentence(\"go for it\");\n            var expected5 = \"go for it\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsInSentence(\"here\");\n            var expected6 = \"\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = WordsInSentence(\"here is\");\n            var expected7 = \"is\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते वाक्यस्य प्रतिनिधित्वं कुर्वती स्ट्रिङ्ग् दीयते। \nअस्मिन् वाक्ये केषाञ्चन शब्दानि स्थानात् पृथक्कृतानि सन्ति, \nतथा च भवन्तः मूलवाक्यस्य शब्दयुक्तं स्ट्रिङ्ग् प्रत्यर्पयेयुः, \nयस्य दीर्घता अभाज्यसङ्ख्या अस्ति, \nनूतने तन्त्रे शब्दानां क्रमः मूलस्य समानः भवेत्। \n\nउदाहरणम्-1: \nनिवेशः वाक्य = \"एषा परीक्षा अस्ति\" \nनिर्गमः \"अस्ति\" इति। \n\nउदाहरणं 2: \nनिवेशः वाक्यम् = \"लॆट्स् गो फ़ार् स्विम्मिङ्ग्\" \nनिर्गमः \"गो फ़ार्\" इति। \n\nबाधिताः। \n* 1 <= लेन (वाक्य) <= 100 \n* वाक्ये केवलं अक्षराणि एव सन्ति।", "entry_point": "WordsInSentence", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/66", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Simplify(\"1/5\",\"5/1\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Simplify(\"1/6\",\"2/1\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Simplify(\"5/1\",\"3/1\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Simplify(\"7/10\",\"10/2\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Simplify(\"2/10\",\"50/10\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Simplify(\"7/2\",\"4/2\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Simplify(\"11/6\",\"6/1\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Simplify(\"2/3\",\"5/2\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Simplify(\"5/2\",\"3/5\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Simplify(\"2/4\",\"8/4\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Simplify(\"2/4\",\"4/2\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Simplify(\"1/5\",\"5/1\");\n            var expected12 = true;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Simplify(\"1/5\",\"1/5\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवतः कार्यम् एकं फंक्षन् इत्यस्य कार्यान्वयनम् अस्ति येन अभिव्यक्तिः सरलीभवति। \nx * n. यदि x * n पूर्णसङ्ख्यायाः कृते मूल्याङ्कनं करोति तथा च असत्यम् इति फलनम् सत्यम् इति प्रत्यावर्तयति। \nअन्यथा। x तथा n द्वयोः अपि, भिन्नांशस्य स्ट्रिङ्ग्-प्रतिनिधित्वम् अस्ति, तथा च निम्नलिखितं स्वरूपम् अस्ति, \n<न्यूमरेटर्> <डिनोमिनेटर्> यत्र न्यूमरेटर् तथा डिनोमिनेटर् उभौ अपि धनात्मकं पूर्णसङ्ख्याः भवन्ति। \n\nभवन्तः अनुमातुं शक्नुवन्ति यत् x, n च वैधानि भिन्नांशानि सन्ति, तेषां विभाजकरूपेण शून्यं नास्ति। \n\nसरलीकरणम् (\"1/5\", \"5/1\") = सत्यं \nसरलीकरणम् (\"1/6\", \"2/1\") = असत्यम् \nसरलीकरणम् (\"7/10\", \"10/2\") = असत्यम्", "entry_point": "Simplify", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/67", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = OrderByPoints(new List<int> {1,11,-1,-11,-12});\n            var expected1 = new List<int> {-1,-11,1,-12,11};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = OrderByPoints(new List<int> {1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46});\n            var expected2 = new List<int> {0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = OrderByPoints(new List<int> {});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = OrderByPoints(new List<int> {1,-11,-32,43,54,-98,2,-3});\n            var expected4 = new List<int> {-3,-32,-98,-11,1,2,43,54};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = OrderByPoints(new List<int> {1,2,3,4,5,6,7,8,9,10,11});\n            var expected5 = new List<int> {1,10,2,11,3,4,5,6,7,8,9};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = OrderByPoints(new List<int> {0,6,6,-76,-21,23,4});\n            var expected6 = new List<int> {-76,-21,0,4,23,6,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् लिखतु यत् दत्तानां पूर्णांकानां सूचीं क्रमबद्धं करोति। \nतेषां अङ्कानां योगानुगुणं आरोहणक्रमेण। \nटिप्पणिः यदि समान-अङ्कयुक्ताः अनेकाः वस्तूनि सन्ति, \nमूलसूच्यां तेषां सूचकाङ्कस्य आधारेण तान् आर्डर् कुर्वन्तु। \n\nयथा-\n>>> आर्डर्-बै-पोयिन्ट्स् ([1,11,-1,11,-12]) = = [-1,11,-1,1,-12,11] \n>>> आर्डर्-बै-पोयिन्ट्स् ([]) = = []", "entry_point": "OrderByPoints", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/68", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFilter(new List<int> {5,-2,1,-5});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFilter(new List<int> {15,-73,14,-15});\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFilter(new List<int> {33,-2,-3,45,21,109});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFilter(new List<int> {43,-12,93,125,121,109});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SpecialFilter(new List<int> {71,-2,-33,75,21,19});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SpecialFilter(new List<int> {1});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SpecialFilter(new List<int> {});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं फंक्षन् लिखतु यत् इन्पुट्-रिटर्न्स्-रूपेण संख्यानां श्रेणिं स्वीकरोति। \nश्रेण्यां तत्त्वानां सङ्ख्या या 10 तः अधिका अस्ति तथा च उभयोः। \nएकस्य अङ्कस्य प्रथमस्य अन्तिमस्य च अङ्कयोः विषमता भवति (1,3,5,7,9)। \nयथा-\nस्पेशिफ़िल्टर् ([15,-73,14,-15]) => 1 \nस्पेशिफ़िल्टर् ([33,-2,-3,45,21,109]) => 2", "entry_point": "SpecialFilter", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/69", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetMaxTriples(5);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetMaxTriples(6);\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetMaxTriples(10);\n            var expected3 = 36;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetMaxTriples(100);\n            var expected4 = 53361;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते n इति धनात्मकं पूर्णांकं दीयते। भवते n इति दीर्घतायाः a इति पूर्णांकश्रेण्याः निर्माणं करणीयम्। \nप्रत्येकस्य i (1 ≤ i ≤ n) कृते, a [i] = i * i-i + 1 इत्यस्य मूल्यं भवति। \nत्रिकानां सङ्ख्याः प्रत्यावर्तयतु (a [i], a [j], a [k]) यत्र i <j <k, \nतथा च a [i] + a [j] + a [k] इति 3 इत्यस्य गुणितं भवति। \n\nउदाहरणम्-\nनिवेशः n = 5 \nउत्पादनः 1 \nव्याख्याः \nअ = [1,3,7,13,21] \nएकमात्रं वैधं त्रिगुणं (1,7,13) अस्ति।", "entry_point": "GetMaxTriples", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/70", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Bf(\"Jupiter\",\"Neptune\");\n            var expected1 = new List<string> {\"Saturn\",\"Uranus\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Bf(\"Earth\",\"Mercury\");\n            var expected2 = new List<string> {\"Venus\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Bf(\"Mercury\",\"Uranus\");\n            var expected3 = new List<string> {\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Bf(\"Neptune\",\"Venus\");\n            var expected4 = new List<string> {\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Bf(\"Earth\",\"Earth\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Bf(\"Mars\",\"Earth\");\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Bf(\"Jupiter\",\"Makemake\");\n            var expected7 = new List<string> {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "अस्माकं सौरमण्डले अष्टग्रहाः सन्ति-सूर्यस्य समीपस्थाः। \nबुधः अस्ति, अग्रिमः शुक्रः अस्ति, ततः पृथिव्या, मङ्गलः, गुरुः, शनिः, \nयुरेनस्, नेप्च्यून्। \nप्लैनेट्-1 तथा प्लैनेट्-2 इति द्वयोः ग्रहयोः नामौ स्वीकृत्य एकं फंक्षन् लिखतु। \nअयं प्रकार्यक्रमः सर्वान् ग्रहान् समाविशत् एकं टुपल् प्रत्यावर्तयेत् यस्य परिक्रमणं भवति-\nग्रह-1 इत्यस्य कक्षायाः ग्रह-2 इत्यस्य कक्षायाः च मध्ये स्थितः, द्वारा क्रमबद्धः \nसूर्यस्य सामीप्यम्। \nयदि प्लैनेट्1 अथवा प्लैनेट्2 अस्ति तर्हि फंक्षन् रिक्तं टुपल् प्रत्यावर्तयेत्। \nग्रहाणां नामानि सम्यक् न सन्ति। \nउदाहरणानि \nbf (\"जुपिटर्\", \"नेप्च्यून्\") = => (\"स्याटर्न्\", \"युरेनस्\") \nbf (\"पृथिव्या\", \"बुधः\") = => (\"शुक्रः\") \nbf (\"बुधः\", \"युरेनस्\") = => (\"शुक्रः\", \"पृथिव्या\", \"मङ्गलः\", \"गुरुः\", \"शनिः\")", "entry_point": "Bf", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/71", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = XOrY(7,34,12);\n            var expected1 = 34;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = XOrY(15,8,5);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = XOrY(3,33,5212);\n            var expected3 = 33;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = XOrY(1259,3,52);\n            var expected4 = 3;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = XOrY(7919,-1,12);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = XOrY(3609,1245,583);\n            var expected6 = 583;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = XOrY(91,56,129);\n            var expected7 = 129;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = XOrY(6,34,1234);\n            var expected8 = 1234;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = XOrY(1,2,0);\n            var expected9 = 0;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = XOrY(2,2,0);\n            var expected10 = 2;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "एकं सरलं प्रोग्राम् यत् x इत्यस्य मूल्यं प्रत्यर्पयेत् यदि n अस्ति। \nअभाज्यसङ्ख्या तथा च अन्यथा y इत्यस्य मूल्यं प्रत्यर्पयेत्। \n\nउदाहरणानि-\nx _ अथवा _ y कृते (7,34,12) = = 34 \nx _ अथवा _ y कृते (15,8,5) = = 5", "entry_point": "XOrY", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/72", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DoubleTheDifference(new List<object> {});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DoubleTheDifference(new List<object> {5,4});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DoubleTheDifference(new List<object> {0.1,0.2,0.3});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DoubleTheDifference(new List<object> {-10,-20,-30});\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = DoubleTheDifference(new List<object> {-1,-2,8});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = DoubleTheDifference(new List<object> {0.2,3,5});\n            var expected6 = 34;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = DoubleTheDifference(new List<object> {-99,-97,-95,-93,-91,-89,-87,-85,-83,-81,-79,-77,-75,-73,-71,-69,-67,-65,-63,-61,-59,-57,-55,-53,-51,-49,-47,-45,-43,-41,-39,-37,-35,-33,-31,-29,-27,-25,-23,-21,-19,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99});\n            var expected7 = 166650;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "संख्यानां सूच्यां दत्तं चेत्, संख्यानां वर्गाणां योगम् प्रत्यर्पयतु। \nअसङ्गत्याः सूच्यां पश्यन्तु। ये संख्याः ऋणात्मकं वा पूर्णांशाः न वा सन्ति तान् अवगच्छन्तु। \n\nद्विगुणः भेदः ([1,3,2,0]) = = 1 + 9 + 0 + 0 = 10 \nद्विगुणः भेदः ([-1,2,0]) = = 0 \nद्विगुणः भेदः ([9,-2]) = = 81 \nद्विगुणित-द-भेदः ([0]) = = 0 \n\nयदि इन्पुट्-सूची रिक्तः अस्ति तर्हि 0 प्रत्यावर्तयतु।", "entry_point": "DoubleTheDifference", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/73", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StrongestExtension(\"Watashi\",new List<string> {\"tEN\",\"niNE\",\"eIGHt8OKe\"});\n            var expected1 = \"Watashi.eIGHt8OKe\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StrongestExtension(\"Boku123\",new List<string> {\"nani\",\"NazeDa\",\"YEs.WeCaNe\",\"32145tggg\"});\n            var expected2 = \"Boku123.YEs.WeCaNe\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StrongestExtension(\"__YESIMHERE\",new List<string> {\"t\",\"eMptY\",\"nothing\",\"zeR00\",\"NuLl__\",\"123NoooneB321\"});\n            var expected3 = \"__YESIMHERE.NuLl__\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StrongestExtension(\"K\",new List<string> {\"Ta\",\"TAR\",\"t234An\",\"cosSo\"});\n            var expected4 = \"K.TAR\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = StrongestExtension(\"__HAHA\",new List<string> {\"Tab\",\"123\",\"781345\",\"-_-\"});\n            var expected5 = \"__HAHA.123\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = StrongestExtension(\"YameRore\",new List<string> {\"HhAas\",\"okIWILL123\",\"WorkOut\",\"Fails\",\"-_-\"});\n            var expected6 = \"YameRore.okIWILL123\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = StrongestExtension(\"finNNalLLly\",new List<string> {\"Die\",\"NowW\",\"Wow\",\"WoW\"});\n            var expected7 = \"finNNalLLly.WoW\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = StrongestExtension(\"_\",new List<string> {\"Bb\",\"91245\"});\n            var expected8 = \"_.Bb\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = StrongestExtension(\"Sp\",new List<string> {\"671235\",\"Bb\"});\n            var expected9 = \"Sp.671235\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते वर्गस्य नाम (स्ट्रिङ्ग्) विस्ताराणां सूची च दीयते। \nवर्गस्य कृते अतिरिक्तवर्गान् भारयितुं विस्ताराणाम् उपयोगः करणीयः। \nविस्तारस्य शक्तिः ईदृशः अस्ति-CAP इतीदं अपरकेस् सङ्ख्या स्यात् इति मन्यन्ते। \nविस्तारस्य नाम्नः अक्षराणि, तथा च एस्. एम्. इतीदं लघु-अक्षरानां सङ्ख्या भवेत्। \nविस्तारस्य नाम्ना बलं CAP-एसएम इति भिन्नांशेन दीयते। \nभवन्तः प्रबलतमं विस्तारणं अन्विष्य अस्मिन् स्ट्रिङ्ग् प्रत्यर्पयतु। \nप्रारूपः ClassName.StrongestExtensionName। \nयदि समानशक्तियुक्तौ द्वौ वा अधिकौ विस्तारौ स्तः तर्हि भवन्तः \nसूच्यां प्रथमं यत् आगच्छति तत् चिनोतु। \nयथा, यदि भवते \"स्लैस्\" इति वर्गरूपेण, सूचीरूपेण च दत्तं भवति। \nविस्तारः ['SERVINGSliCes','Cheese','StuFfed'] तदा भवन्तः कर्तुम् अर्हन्ति। \n'Slices.SErviNGSliCes'इति प्रत्यावर्तयतु यतः'SERVINGSliCes'प्रबलतमः विस्तारः अस्ति। \n(तस्य शक्तिः-1 अस्ति)। \nउदाहरणम्-\nस्ट्राङ्गेस्ट्-एक्स्टेन्शन् कृते ('मै _ क्लास्', ['AA','Be','CC']) = ='my_class.AA'", "entry_point": "StrongestExtension", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/74", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CycpatternCheck(\"xyzw\",\"xyw\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CycpatternCheck(\"yello\",\"ell\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CycpatternCheck(\"whattup\",\"ptut\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CycpatternCheck(\"efef\",\"fee\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CycpatternCheck(\"abab\",\"aabb\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CycpatternCheck(\"winemtt\",\"tinem\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते 2 शब्दानि दीयन्ते। यदि द्वितीयः शब्दः अथवा तस्य कस्यापि परिभ्रमणम् प्रथमशब्दस्य सब्स्ट्रिङ्ग् अस्ति तर्हि भवते ट्रू इति प्रत्यावर्तितव्यम्। \nसैक्पेटर्न् _ चेक् (\"ए. बी. सी. डी\"., \"ए. बी. डी\".) => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हलो\", \"एल्\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"वास्सुप्\", \"प्सुस्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"अबाब\", \"बा\") => सत्यं \nसैक्पेटर्न् _ चेक् (\"ईफ़ेफ़्\", \"ईफ़ेफ़्\") => मिथ्या \nसैक्पेटर्न् _ चेक् (\"हिमेन्स्\", \"सिमेन्\") => सत्यं", "entry_point": "CycpatternCheck", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/75", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IntToMiniRoman(19);\n            var expected1 = \"xix\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IntToMiniRoman(152);\n            var expected2 = \"clii\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IntToMiniRoman(251);\n            var expected3 = \"ccli\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IntToMiniRoman(426);\n            var expected4 = \"cdxxvi\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IntToMiniRoman(500);\n            var expected5 = \"d\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IntToMiniRoman(1);\n            var expected6 = \"i\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IntToMiniRoman(4);\n            var expected7 = \"iv\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IntToMiniRoman(43);\n            var expected8 = \"xliii\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IntToMiniRoman(90);\n            var expected9 = \"xc\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IntToMiniRoman(94);\n            var expected10 = \"xciv\";\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IntToMiniRoman(532);\n            var expected11 = \"dxxxii\";\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IntToMiniRoman(900);\n            var expected12 = \"cm\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IntToMiniRoman(994);\n            var expected13 = \"cmxciv\";\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IntToMiniRoman(1000);\n            var expected14 = \"m\";\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "धनात्मक-पूर्णांकं दत्तं चेत्, तस्य रोमन्-अङ्कस्य समतुल्यं स्ट्रिङ्ग्-रूपेण प्राप्नुयात्। \nतथा लघुकरणे प्रत्यर्पयतु। \nप्रतिबन्धः 1 <= संख्या <= 1000 \n\nउदाहरणानि-\n>> इन्ट्-टु-मिनि-रोमन् (19) = ='xix'\n>> इन्ट्-टु-मिनि-रोमन् (152) = ='क्लि'\n>> int _ to _ मिनी _ रोमन (426) = ='cdxxvi'", "entry_point": "IntToMiniRoman", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/76", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RightAngleTriangle(3,4,5);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RightAngleTriangle(1,2,3);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RightAngleTriangle(10,6,8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RightAngleTriangle(2,2,2);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RightAngleTriangle(7,24,25);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RightAngleTriangle(10,5,7);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RightAngleTriangle(5,12,13);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RightAngleTriangle(15,8,17);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RightAngleTriangle(48,55,73);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RightAngleTriangle(1,1,1);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RightAngleTriangle(2,2,10);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "त्रिभुजस्य त्रिभागानां दीर्घतायाः दृष्ट्या। सत्यम् प्रत्यावर्तयतु यदि त्रिः। \nपार्श्वभागाः दक्षिणकोणीयं त्रिकोणं निर्मीयन्ते, अन्यथा असत्यं भवति। \nसमकोणी त्रिभुजः एकः त्रिभुजः अस्ति यस्मिन् एकः कोणः समकोणः अथवा समकोणः भवति। \n90 डिग्री। \nउदाहरणम्-\nसमकोण-त्रिभुजम् (3,4,5) = = सत्यम् \nसमकोण-त्रिभुजम् (1,2,3) = = असत्यम्", "entry_point": "RightAngleTriangle", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/77", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(\"AsDf\");\n            var expected1 = \"aSdF\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(\"1234\");\n            var expected2 = \"4321\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(\"ab\");\n            var expected3 = \"AB\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(\"#a@C\");\n            var expected4 = \"#A@c\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(\"#AsdfW^45\");\n            var expected5 = \"#aSDFw^45\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Solve(\"#6@2\");\n            var expected6 = \"2@6#\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Solve(\"#$a^D\");\n            var expected7 = \"#$A^d\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Solve(\"#ccc\");\n            var expected8 = \"#CCC\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "भवते स्ट्रिङ्ग् एस् दीयते। \nयदि s [i] एकः अक्षरः अस्ति, तर्हि तस्य प्रकरणं निम्नतः ऊर्ध्वं प्रति अथवा तद्विरुद्धं प्रतिवर्तयतु। \nअन्यथा तत् यथावत् स्थापयतु। \nयदि तन्त्रे अक्षराणि न सन्ति तर्हि तन्त्रे व्युत्क्रमं करोतु। \nफलनम् परिणामितं स्ट्रिङ्ग् प्रत्यावर्तयेत्। \nउदाहरणानि \nसमाधानम् (\"1234\") = \"4321\" \nसमाधानः (\"अब\") = \"एबी\" \nसमाधानम् (\"#a @C\") = \"#A @c\"", "entry_point": "Solve", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/78", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringToMd5(\"Hello world\");\n            var expected1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringToMd5(\"\");\n            var expected2 = null;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringToMd5(\"A B C\");\n            var expected3 = \"0ef78513b0cb8cef12743f5aeb35f888\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StringToMd5(\"password\");\n            var expected4 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "'टेक्सट्'इति स्ट्रिङ्ग् दत्तं चेत्, तस्य md5 ह्याश्-समतुल्यं स्ट्रिङ्ग् प्रत्यर्पयतु। \nयदि'टेक्सट्'रिक्तं स्ट्रिङ्ग् अस्ति तर्हि शून्यं प्रत्यर्पयतु। \n\n>> स्ट्रिङ्ग् _ तः _ md5 ('नमस्ते वर्ल्ड्') = ='3e25960a79dbc69b674cd4ec67a72c62'", "entry_point": "StringToMd5", "canonical_solution": null, "natural_language": "Sanskrit"}
{"task_id": "csharp/79", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GenerateIntegers(2,10);\n            var expected1 = new List<int> {2,4,6,8};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GenerateIntegers(10,2);\n            var expected2 = new List<int> {2,4,6,8};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GenerateIntegers(132,2);\n            var expected3 = new List<int> {2,4,6,8};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GenerateIntegers(17,89);\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "a तथा b इति धनात्मक-पूर्णांकद्वयं दत्तं चेत्, a मध्ये सम-अङ्कान् प्रत्यर्पयतु। \nतथा च b, आरोहणक्रमेण। \n\nयथा-\nजनरेट्-इन्टिजर् (2,8) => [2,4,6,8] \nजनरेट्-इन्टिजर् (8,2) => [2,4,6,8] \nजनरेट्-इन्टिजर् (10,14) => []", "entry_point": "GenerateIntegers", "canonical_solution": null, "natural_language": "Sanskrit"}
